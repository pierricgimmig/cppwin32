// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_EnterpriseData_H
#define WIN32_Windows_Win32_Security_EnterpriseData_H
#include "win32/base.h"
#include "win32/impl/complex_structs.h"
#include "win32/impl/complex_interfaces.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Security.EnterpriseData.0.h"
WIN32_EXPORT namespace win32::Windows::Win32::Security::EnterpriseData
{
#pragma region methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpCreateThreadNetworkContext(win32::Windows::Win32::Foundation::PWSTR enterpriseId, win32::Windows::Win32::Security::EnterpriseData::HTHREAD_NETWORK_CONTEXT* threadNetworkContext) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpCloseThreadNetworkContext(win32::Windows::Win32::Security::EnterpriseData::HTHREAD_NETWORK_CONTEXT* threadNetworkContext) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpSetTokenEnterpriseId(win32::Windows::Win32::Foundation::HANDLE tokenHandle, win32::Windows::Win32::Foundation::PWSTR enterpriseId) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpGetEnterpriseIds(win32::Windows::Win32::Foundation::HANDLE tokenHandle, uint32_t* numberOfBytes, win32::Windows::Win32::Foundation::PWSTR* enterpriseIds, uint32_t* enterpriseIdCount) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpEnablePermissiveModeFileEncryption(win32::Windows::Win32::Foundation::PWSTR enterpriseId) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpDisablePermissiveModeFileEncryption() noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpGetEnterprisePolicy(win32::Windows::Win32::Foundation::HANDLE tokenHandle, win32::Windows::Win32::Security::EnterpriseData::ENTERPRISE_DATA_POLICIES* policyFlags) noexcept;
    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SrpIsTokenService(win32::Windows::Win32::Foundation::HANDLE TokenHandle, uint8_t* IsTokenService) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpDoesPolicyAllowAppExecution(win32::Windows::Win32::Storage::Packaging::Appx::PACKAGE_ID* packageId, win32::Windows::Win32::Foundation::BOOL* isAllowed) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpHostingInitialize(win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_VERSION Version, win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_TYPE Type, void* pvData, uint32_t cbData) noexcept;
    void __stdcall ORBIT_IMPL_SrpHostingTerminate(win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_TYPE Type) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ProtectFileToEnterpriseIdentity(win32::Windows::Win32::Foundation::PWSTR fileOrFolderPath, win32::Windows::Win32::Foundation::PWSTR identity) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_UnprotectFile(win32::Windows::Win32::Foundation::PWSTR fileOrFolderPath, win32::Windows::Win32::Security::EnterpriseData::FILE_UNPROTECT_OPTIONS* options) noexcept;
}

struct ApiTable {
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpCreateThreadNetworkContext)(win32::Windows::Win32::Foundation::PWSTR enterpriseId, win32::Windows::Win32::Security::EnterpriseData::HTHREAD_NETWORK_CONTEXT* threadNetworkContext) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpCloseThreadNetworkContext)(win32::Windows::Win32::Security::EnterpriseData::HTHREAD_NETWORK_CONTEXT* threadNetworkContext) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpSetTokenEnterpriseId)(win32::Windows::Win32::Foundation::HANDLE tokenHandle, win32::Windows::Win32::Foundation::PWSTR enterpriseId) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpGetEnterpriseIds)(win32::Windows::Win32::Foundation::HANDLE tokenHandle, uint32_t* numberOfBytes, win32::Windows::Win32::Foundation::PWSTR* enterpriseIds, uint32_t* enterpriseIdCount) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpEnablePermissiveModeFileEncryption)(win32::Windows::Win32::Foundation::PWSTR enterpriseId) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpDisablePermissiveModeFileEncryption)() noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpGetEnterprisePolicy)(win32::Windows::Win32::Foundation::HANDLE tokenHandle, win32::Windows::Win32::Security::EnterpriseData::ENTERPRISE_DATA_POLICIES* policyFlags) noexcept;
    win32::Windows::Win32::Foundation::NTSTATUS (__stdcall *SrpIsTokenService)(win32::Windows::Win32::Foundation::HANDLE TokenHandle, uint8_t* IsTokenService) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpDoesPolicyAllowAppExecution)(win32::Windows::Win32::Storage::Packaging::Appx::PACKAGE_ID* packageId, win32::Windows::Win32::Foundation::BOOL* isAllowed) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *SrpHostingInitialize)(win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_VERSION Version, win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_TYPE Type, void* pvData, uint32_t cbData) noexcept;
    void (__stdcall *SrpHostingTerminate)(win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_TYPE Type) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *ProtectFileToEnterpriseIdentity)(win32::Windows::Win32::Foundation::PWSTR fileOrFolderPath, win32::Windows::Win32::Foundation::PWSTR identity) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *UnprotectFile)(win32::Windows::Win32::Foundation::PWSTR fileOrFolderPath, win32::Windows::Win32::Security::EnterpriseData::FILE_UNPROTECT_OPTIONS* options) noexcept;
};
extern ApiTable g_api_table;

#pragma endregion methods

}
#endif
