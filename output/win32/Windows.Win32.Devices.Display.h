// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Display_H
#define WIN32_Windows_Win32_Devices_Display_H
#include "win32/base.h"
#include "win32/impl/complex_structs.h"
#include "win32/impl/complex_interfaces.h"
static_assert(win32::check_version(CPPWIN32_VERSION, "0.0.0.1"), "Mismatched C++/Win32 headers.");
#define CPPWIN32_VERSION "0.0.0.1"
#include "win32/impl/Windows.Win32.Devices.Display.0.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Display
{
#pragma region methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL_GetNumberOfPhysicalMonitorsFromHMONITOR(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, uint32_t* pdwNumberOfPhysicalMonitors) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, uint32_t* pdwNumberOfPhysicalMonitors) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetPhysicalMonitorsFromHMONITOR(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept;
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetPhysicalMonitorsFromIDirect3DDevice9(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept;
    int32_t __stdcall ORBIT_IMPL_DestroyPhysicalMonitor(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t __stdcall ORBIT_IMPL_DestroyPhysicalMonitors(uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetVCPFeatureAndVCPFeatureReply(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint8_t bVCPCode, win32::Windows::Win32::Devices::Display::MC_VCP_CODE_TYPE* pvct, uint32_t* pdwCurrentValue, uint32_t* pdwMaximumValue) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetVCPFeature(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint8_t bVCPCode, uint32_t dwNewValue) noexcept;
    int32_t __stdcall ORBIT_IMPL_SaveCurrentSettings(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetCapabilitiesStringLength(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwCapabilitiesStringLengthInCharacters) noexcept;
    int32_t __stdcall ORBIT_IMPL_CapabilitiesRequestAndCapabilitiesReply(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Foundation::PSTR pszASCIICapabilitiesString, uint32_t dwCapabilitiesStringLengthInCharacters) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetTimingReport(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_TIMING_REPORT* pmtrMonitorTimingReport) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorCapabilities(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMonitorCapabilities, uint32_t* pdwSupportedColorTemperatures) noexcept;
    int32_t __stdcall ORBIT_IMPL_SaveCurrentMonitorSettings(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorTechnologyType(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DISPLAY_TECHNOLOGY_TYPE* pdtyDisplayTechnologyType) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorBrightness(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMinimumBrightness, uint32_t* pdwCurrentBrightness, uint32_t* pdwMaximumBrightness) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorContrast(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMinimumContrast, uint32_t* pdwCurrentContrast, uint32_t* pdwMaximumContrast) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorColorTemperature(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_COLOR_TEMPERATURE* pctCurrentColorTemperature) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorRedGreenOrBlueDrive(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DRIVE_TYPE dtDriveType, uint32_t* pdwMinimumDrive, uint32_t* pdwCurrentDrive, uint32_t* pdwMaximumDrive) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorRedGreenOrBlueGain(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_GAIN_TYPE gtGainType, uint32_t* pdwMinimumGain, uint32_t* pdwCurrentGain, uint32_t* pdwMaximumGain) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorBrightness(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t dwNewBrightness) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorContrast(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t dwNewContrast) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorColorTemperature(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_COLOR_TEMPERATURE ctCurrentColorTemperature) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorRedGreenOrBlueDrive(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DRIVE_TYPE dtDriveType, uint32_t dwNewDrive) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorRedGreenOrBlueGain(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_GAIN_TYPE gtGainType, uint32_t dwNewGain) noexcept;
    int32_t __stdcall ORBIT_IMPL_DegaussMonitor(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorDisplayAreaSize(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_SIZE_TYPE stSizeType, uint32_t* pdwMinimumWidthOrHeight, uint32_t* pdwCurrentWidthOrHeight, uint32_t* pdwMaximumWidthOrHeight) noexcept;
    int32_t __stdcall ORBIT_IMPL_GetMonitorDisplayAreaPosition(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_POSITION_TYPE ptPositionType, uint32_t* pdwMinimumPosition, uint32_t* pdwCurrentPosition, uint32_t* pdwMaximumPosition) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorDisplayAreaSize(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_SIZE_TYPE stSizeType, uint32_t dwNewDisplayAreaWidthOrHeight) noexcept;
    int32_t __stdcall ORBIT_IMPL_SetMonitorDisplayAreaPosition(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_POSITION_TYPE ptPositionType, uint32_t dwNewPosition) noexcept;
    int32_t __stdcall ORBIT_IMPL_RestoreMonitorFactoryColorDefaults(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t __stdcall ORBIT_IMPL_RestoreMonitorFactoryDefaults(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetAutoRotationState(win32::Windows::Win32::Devices::Display::AR_STATE* pState) noexcept;
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDisplayAutoRotationPreferences(win32::Windows::Win32::Devices::Display::ORIENTATION_PREFERENCE* pOrientation) noexcept;
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetDisplayAutoRotationPreferences(win32::Windows::Win32::Devices::Display::ORIENTATION_PREFERENCE orientation) noexcept;
}

struct ApiTable {
    int32_t (__stdcall *GetNumberOfPhysicalMonitorsFromHMONITOR)(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, uint32_t* pdwNumberOfPhysicalMonitors) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *GetNumberOfPhysicalMonitorsFromIDirect3DDevice9)(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, uint32_t* pdwNumberOfPhysicalMonitors) noexcept;
    int32_t (__stdcall *GetPhysicalMonitorsFromHMONITOR)(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept;
    win32::Windows::Win32::Foundation::HRESULT (__stdcall *GetPhysicalMonitorsFromIDirect3DDevice9)(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept;
    int32_t (__stdcall *DestroyPhysicalMonitor)(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t (__stdcall *DestroyPhysicalMonitors)(uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept;
    int32_t (__stdcall *GetVCPFeatureAndVCPFeatureReply)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint8_t bVCPCode, win32::Windows::Win32::Devices::Display::MC_VCP_CODE_TYPE* pvct, uint32_t* pdwCurrentValue, uint32_t* pdwMaximumValue) noexcept;
    int32_t (__stdcall *SetVCPFeature)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint8_t bVCPCode, uint32_t dwNewValue) noexcept;
    int32_t (__stdcall *SaveCurrentSettings)(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t (__stdcall *GetCapabilitiesStringLength)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwCapabilitiesStringLengthInCharacters) noexcept;
    int32_t (__stdcall *CapabilitiesRequestAndCapabilitiesReply)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Foundation::PSTR pszASCIICapabilitiesString, uint32_t dwCapabilitiesStringLengthInCharacters) noexcept;
    int32_t (__stdcall *GetTimingReport)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_TIMING_REPORT* pmtrMonitorTimingReport) noexcept;
    int32_t (__stdcall *GetMonitorCapabilities)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMonitorCapabilities, uint32_t* pdwSupportedColorTemperatures) noexcept;
    int32_t (__stdcall *SaveCurrentMonitorSettings)(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t (__stdcall *GetMonitorTechnologyType)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DISPLAY_TECHNOLOGY_TYPE* pdtyDisplayTechnologyType) noexcept;
    int32_t (__stdcall *GetMonitorBrightness)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMinimumBrightness, uint32_t* pdwCurrentBrightness, uint32_t* pdwMaximumBrightness) noexcept;
    int32_t (__stdcall *GetMonitorContrast)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMinimumContrast, uint32_t* pdwCurrentContrast, uint32_t* pdwMaximumContrast) noexcept;
    int32_t (__stdcall *GetMonitorColorTemperature)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_COLOR_TEMPERATURE* pctCurrentColorTemperature) noexcept;
    int32_t (__stdcall *GetMonitorRedGreenOrBlueDrive)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DRIVE_TYPE dtDriveType, uint32_t* pdwMinimumDrive, uint32_t* pdwCurrentDrive, uint32_t* pdwMaximumDrive) noexcept;
    int32_t (__stdcall *GetMonitorRedGreenOrBlueGain)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_GAIN_TYPE gtGainType, uint32_t* pdwMinimumGain, uint32_t* pdwCurrentGain, uint32_t* pdwMaximumGain) noexcept;
    int32_t (__stdcall *SetMonitorBrightness)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t dwNewBrightness) noexcept;
    int32_t (__stdcall *SetMonitorContrast)(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t dwNewContrast) noexcept;
    int32_t (__stdcall *SetMonitorColorTemperature)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_COLOR_TEMPERATURE ctCurrentColorTemperature) noexcept;
    int32_t (__stdcall *SetMonitorRedGreenOrBlueDrive)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DRIVE_TYPE dtDriveType, uint32_t dwNewDrive) noexcept;
    int32_t (__stdcall *SetMonitorRedGreenOrBlueGain)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_GAIN_TYPE gtGainType, uint32_t dwNewGain) noexcept;
    int32_t (__stdcall *DegaussMonitor)(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t (__stdcall *GetMonitorDisplayAreaSize)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_SIZE_TYPE stSizeType, uint32_t* pdwMinimumWidthOrHeight, uint32_t* pdwCurrentWidthOrHeight, uint32_t* pdwMaximumWidthOrHeight) noexcept;
    int32_t (__stdcall *GetMonitorDisplayAreaPosition)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_POSITION_TYPE ptPositionType, uint32_t* pdwMinimumPosition, uint32_t* pdwCurrentPosition, uint32_t* pdwMaximumPosition) noexcept;
    int32_t (__stdcall *SetMonitorDisplayAreaSize)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_SIZE_TYPE stSizeType, uint32_t dwNewDisplayAreaWidthOrHeight) noexcept;
    int32_t (__stdcall *SetMonitorDisplayAreaPosition)(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_POSITION_TYPE ptPositionType, uint32_t dwNewPosition) noexcept;
    int32_t (__stdcall *RestoreMonitorFactoryColorDefaults)(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    int32_t (__stdcall *RestoreMonitorFactoryDefaults)(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept;
    win32::Windows::Win32::Foundation::BOOL (__stdcall *GetAutoRotationState)(win32::Windows::Win32::Devices::Display::AR_STATE* pState) noexcept;
    win32::Windows::Win32::Foundation::BOOL (__stdcall *GetDisplayAutoRotationPreferences)(win32::Windows::Win32::Devices::Display::ORIENTATION_PREFERENCE* pOrientation) noexcept;
    win32::Windows::Win32::Foundation::BOOL (__stdcall *SetDisplayAutoRotationPreferences)(win32::Windows::Win32::Devices::Display::ORIENTATION_PREFERENCE orientation) noexcept;
};
extern ApiTable g_api_table;

#pragma endregion methods

}
#endif
