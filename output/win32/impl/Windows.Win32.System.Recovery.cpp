// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Recovery_2_H
#define WIN32_Windows_Win32_System_Recovery_2_H
#include "win32/Windows.Win32.System.Recovery.h"
#include "win32/impl/Windows.Win32.System.Recovery.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Recovery
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterApplicationRecoveryCallback(win32::Windows::Win32::System::WindowsProgramming::APPLICATION_RECOVERY_CALLBACK* pRecoveyCallback, void* pvParameter, uint32_t dwPingInterval, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRecoveyCallback);
        ORBIT_TRACK_PARAM(pvParameter);
        ORBIT_TRACK_PARAM(dwPingInterval);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.RegisterApplicationRecoveryCallback(pRecoveyCallback, pvParameter, dwPingInterval, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_UnregisterApplicationRecoveryCallback() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.UnregisterApplicationRecoveryCallback();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterApplicationRestart(win32::Windows::Win32::Foundation::PWSTR pwzCommandline, win32::Windows::Win32::System::Recovery::REGISTER_APPLICATION_RESTART_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzCommandline);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.RegisterApplicationRestart(pwzCommandline, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_UnregisterApplicationRestart() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.UnregisterApplicationRestart();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetApplicationRecoveryCallback(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::WindowsProgramming::APPLICATION_RECOVERY_CALLBACK** pRecoveryCallback, void** ppvParameter, uint32_t* pdwPingInterval, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(pRecoveryCallback);
        ORBIT_TRACK_PARAM(ppvParameter);
        ORBIT_TRACK_PARAM(pdwPingInterval);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.GetApplicationRecoveryCallback(hProcess, pRecoveryCallback, ppvParameter, pdwPingInterval, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetApplicationRestartSettings(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Foundation::PWSTR pwzCommandline, uint32_t* pcchSize, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(pwzCommandline);
        ORBIT_TRACK_PARAM(pcchSize);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.GetApplicationRestartSettings(hProcess, pwzCommandline, pcchSize, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ApplicationRecoveryInProgress(win32::Windows::Win32::Foundation::BOOL* pbCancelled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbCancelled);

        auto win32_impl_result = g_api_table.ApplicationRecoveryInProgress(pbCancelled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ApplicationRecoveryFinished(win32::Windows::Win32::Foundation::BOOL bSuccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bSuccess);

        g_api_table.ApplicationRecoveryFinished(bSuccess);
        
    }

}

#pragma endregion abi_methods

}
#endif
