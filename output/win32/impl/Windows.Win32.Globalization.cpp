// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Globalization_2_H
#define WIN32_Windows_Win32_Globalization_2_H
#include "win32/Windows.Win32.Globalization.h"
#include "win32/impl/Windows.Win32.Globalization.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Globalization
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL_GetTextCharset(win32::Windows::Win32::Graphics::Gdi::HDC hdc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);

        auto win32_impl_result = g_api_table.GetTextCharset(hdc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTextCharsetInfo(win32::Windows::Win32::Graphics::Gdi::HDC hdc, win32::Windows::Win32::Globalization::FONTSIGNATURE* lpSig, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(lpSig);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.GetTextCharsetInfo(hdc, lpSig, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TranslateCharsetInfo(uint32_t* lpSrc, win32::Windows::Win32::Globalization::CHARSETINFO* lpCs, win32::Windows::Win32::Globalization::TRANSLATE_CHARSET_INFO_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSrc);
        ORBIT_TRACK_PARAM(lpCs);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.TranslateCharsetInfo(lpSrc, lpCs, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetDateFormatA(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpDate, win32::Windows::Win32::Foundation::PSTR lpFormat, win32::Windows::Win32::Foundation::PSTR lpDateStr, int32_t cchDate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDate);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpDateStr);
        ORBIT_TRACK_PARAM(cchDate);

        auto win32_impl_result = g_api_table.GetDateFormatA(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetDateFormatW(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpDate, win32::Windows::Win32::Foundation::PWSTR lpFormat, win32::Windows::Win32::Foundation::PWSTR lpDateStr, int32_t cchDate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDate);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpDateStr);
        ORBIT_TRACK_PARAM(cchDate);

        auto win32_impl_result = g_api_table.GetDateFormatW(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTimeFormatA(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpTime, win32::Windows::Win32::Foundation::PSTR lpFormat, win32::Windows::Win32::Foundation::PSTR lpTimeStr, int32_t cchTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpTime);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpTimeStr);
        ORBIT_TRACK_PARAM(cchTime);

        auto win32_impl_result = g_api_table.GetTimeFormatA(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTimeFormatW(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpTime, win32::Windows::Win32::Foundation::PWSTR lpFormat, win32::Windows::Win32::Foundation::PWSTR lpTimeStr, int32_t cchTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpTime);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpTimeStr);
        ORBIT_TRACK_PARAM(cchTime);

        auto win32_impl_result = g_api_table.GetTimeFormatW(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTimeFormatEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, win32::Windows::Win32::Globalization::TIME_FORMAT_FLAGS dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpTime, win32::Windows::Win32::Foundation::PWSTR lpFormat, win32::Windows::Win32::Foundation::PWSTR lpTimeStr, int32_t cchTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpTime);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpTimeStr);
        ORBIT_TRACK_PARAM(cchTime);

        auto win32_impl_result = g_api_table.GetTimeFormatEx(lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetDateFormatEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, win32::Windows::Win32::Globalization::ENUM_DATE_FORMATS_FLAGS dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpDate, win32::Windows::Win32::Foundation::PWSTR lpFormat, win32::Windows::Win32::Foundation::PWSTR lpDateStr, int32_t cchDate, win32::Windows::Win32::Foundation::PWSTR lpCalendar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDate);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpDateStr);
        ORBIT_TRACK_PARAM(cchDate);
        ORBIT_TRACK_PARAM(lpCalendar);

        auto win32_impl_result = g_api_table.GetDateFormatEx(lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetDurationFormatEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpDuration, uint64_t ullDuration, win32::Windows::Win32::Foundation::PWSTR lpFormat, win32::Windows::Win32::Foundation::PWSTR lpDurationStr, int32_t cchDuration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDuration);
        ORBIT_TRACK_PARAM(ullDuration);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpDurationStr);
        ORBIT_TRACK_PARAM(cchDuration);

        auto win32_impl_result = g_api_table.GetDurationFormatEx(lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CompareStringEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, win32::Windows::Win32::Globalization::COMPARE_STRING_FLAGS dwCmpFlags, win32::Windows::Win32::Foundation::PWSTR lpString1, int32_t cchCount1, win32::Windows::Win32::Foundation::PWSTR lpString2, int32_t cchCount2, win32::Windows::Win32::Globalization::NLSVERSIONINFO* lpVersionInformation, void* lpReserved, win32::Windows::Win32::Foundation::LPARAM lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwCmpFlags);
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(cchCount1);
        ORBIT_TRACK_PARAM(lpString2);
        ORBIT_TRACK_PARAM(cchCount2);
        ORBIT_TRACK_PARAM(lpVersionInformation);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.CompareStringEx(lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CompareStringOrdinal(win32::Windows::Win32::Foundation::PWSTR lpString1, int32_t cchCount1, win32::Windows::Win32::Foundation::PWSTR lpString2, int32_t cchCount2, win32::Windows::Win32::Foundation::BOOL bIgnoreCase) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(cchCount1);
        ORBIT_TRACK_PARAM(lpString2);
        ORBIT_TRACK_PARAM(cchCount2);
        ORBIT_TRACK_PARAM(bIgnoreCase);

        auto win32_impl_result = g_api_table.CompareStringOrdinal(lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CompareStringW(uint32_t Locale, uint32_t dwCmpFlags, win32::Windows::Win32::Foundation::PWSTR lpString1, int32_t cchCount1, win32::Windows::Win32::Foundation::PWSTR lpString2, int32_t cchCount2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwCmpFlags);
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(cchCount1);
        ORBIT_TRACK_PARAM(lpString2);
        ORBIT_TRACK_PARAM(cchCount2);

        auto win32_impl_result = g_api_table.CompareStringW(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_FoldStringW(win32::Windows::Win32::Globalization::FOLD_STRING_MAP_FLAGS dwMapFlags, win32::Windows::Win32::Foundation::PWSTR lpSrcStr, int32_t cchSrc, win32::Windows::Win32::Foundation::PWSTR lpDestStr, int32_t cchDest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMapFlags);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpDestStr);
        ORBIT_TRACK_PARAM(cchDest);

        auto win32_impl_result = g_api_table.FoldStringW(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetStringTypeExW(uint32_t Locale, uint32_t dwInfoType, win32::Windows::Win32::Foundation::PWSTR lpSrcStr, int32_t cchSrc, uint16_t* lpCharType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwInfoType);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpCharType);

        auto win32_impl_result = g_api_table.GetStringTypeExW(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetStringTypeW(uint32_t dwInfoType, win32::Windows::Win32::Foundation::PWSTR lpSrcStr, int32_t cchSrc, uint16_t* lpCharType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwInfoType);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpCharType);

        auto win32_impl_result = g_api_table.GetStringTypeW(dwInfoType, lpSrcStr, cchSrc, lpCharType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_MultiByteToWideChar(uint32_t CodePage, win32::Windows::Win32::Globalization::MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, win32::Windows::Win32::Foundation::PSTR lpMultiByteStr, int32_t cbMultiByte, win32::Windows::Win32::Foundation::PWSTR lpWideCharStr, int32_t cchWideChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpMultiByteStr);
        ORBIT_TRACK_PARAM(cbMultiByte);
        ORBIT_TRACK_PARAM(lpWideCharStr);
        ORBIT_TRACK_PARAM(cchWideChar);

        auto win32_impl_result = g_api_table.MultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WideCharToMultiByte(uint32_t CodePage, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpWideCharStr, int32_t cchWideChar, win32::Windows::Win32::Foundation::PSTR lpMultiByteStr, int32_t cbMultiByte, win32::Windows::Win32::Foundation::PSTR lpDefaultChar, int32_t* lpUsedDefaultChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpWideCharStr);
        ORBIT_TRACK_PARAM(cchWideChar);
        ORBIT_TRACK_PARAM(lpMultiByteStr);
        ORBIT_TRACK_PARAM(cbMultiByte);
        ORBIT_TRACK_PARAM(lpDefaultChar);
        ORBIT_TRACK_PARAM(lpUsedDefaultChar);

        auto win32_impl_result = g_api_table.WideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsValidCodePage(uint32_t CodePage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);

        auto win32_impl_result = g_api_table.IsValidCodePage(CodePage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetACP() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetACP();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetOEMCP() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetOEMCP();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetCPInfo(uint32_t CodePage, win32::Windows::Win32::Globalization::CPINFO* lpCPInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);
        ORBIT_TRACK_PARAM(lpCPInfo);

        auto win32_impl_result = g_api_table.GetCPInfo(CodePage, lpCPInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetCPInfoExA(uint32_t CodePage, uint32_t dwFlags, win32::Windows::Win32::Globalization::CPINFOEXA* lpCPInfoEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpCPInfoEx);

        auto win32_impl_result = g_api_table.GetCPInfoExA(CodePage, dwFlags, lpCPInfoEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetCPInfoExW(uint32_t CodePage, uint32_t dwFlags, win32::Windows::Win32::Globalization::CPINFOEXW* lpCPInfoEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpCPInfoEx);

        auto win32_impl_result = g_api_table.GetCPInfoExW(CodePage, dwFlags, lpCPInfoEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CompareStringA(uint32_t Locale, uint32_t dwCmpFlags, int8_t* lpString1, int32_t cchCount1, int8_t* lpString2, int32_t cchCount2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwCmpFlags);
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(cchCount1);
        ORBIT_TRACK_PARAM(lpString2);
        ORBIT_TRACK_PARAM(cchCount2);

        auto win32_impl_result = g_api_table.CompareStringA(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_FindNLSString(uint32_t Locale, uint32_t dwFindNLSStringFlags, win32::Windows::Win32::Foundation::PWSTR lpStringSource, int32_t cchSource, win32::Windows::Win32::Foundation::PWSTR lpStringValue, int32_t cchValue, int32_t* pcchFound) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFindNLSStringFlags);
        ORBIT_TRACK_PARAM(lpStringSource);
        ORBIT_TRACK_PARAM(cchSource);
        ORBIT_TRACK_PARAM(lpStringValue);
        ORBIT_TRACK_PARAM(cchValue);
        ORBIT_TRACK_PARAM(pcchFound);

        auto win32_impl_result = g_api_table.FindNLSString(Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LCMapStringW(uint32_t Locale, uint32_t dwMapFlags, win32::Windows::Win32::Foundation::PWSTR lpSrcStr, int32_t cchSrc, win32::Windows::Win32::Foundation::PWSTR lpDestStr, int32_t cchDest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwMapFlags);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpDestStr);
        ORBIT_TRACK_PARAM(cchDest);

        auto win32_impl_result = g_api_table.LCMapStringW(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LCMapStringA(uint32_t Locale, uint32_t dwMapFlags, win32::Windows::Win32::Foundation::PSTR lpSrcStr, int32_t cchSrc, win32::Windows::Win32::Foundation::PSTR lpDestStr, int32_t cchDest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwMapFlags);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpDestStr);
        ORBIT_TRACK_PARAM(cchDest);

        auto win32_impl_result = g_api_table.LCMapStringA(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetLocaleInfoW(uint32_t Locale, uint32_t LCType, win32::Windows::Win32::Foundation::PWSTR lpLCData, int32_t cchData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(LCType);
        ORBIT_TRACK_PARAM(lpLCData);
        ORBIT_TRACK_PARAM(cchData);

        auto win32_impl_result = g_api_table.GetLocaleInfoW(Locale, LCType, lpLCData, cchData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetLocaleInfoA(uint32_t Locale, uint32_t LCType, win32::Windows::Win32::Foundation::PSTR lpLCData, int32_t cchData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(LCType);
        ORBIT_TRACK_PARAM(lpLCData);
        ORBIT_TRACK_PARAM(cchData);

        auto win32_impl_result = g_api_table.GetLocaleInfoA(Locale, LCType, lpLCData, cchData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetLocaleInfoA(uint32_t Locale, uint32_t LCType, win32::Windows::Win32::Foundation::PSTR lpLCData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(LCType);
        ORBIT_TRACK_PARAM(lpLCData);

        auto win32_impl_result = g_api_table.SetLocaleInfoA(Locale, LCType, lpLCData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetLocaleInfoW(uint32_t Locale, uint32_t LCType, win32::Windows::Win32::Foundation::PWSTR lpLCData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(LCType);
        ORBIT_TRACK_PARAM(lpLCData);

        auto win32_impl_result = g_api_table.SetLocaleInfoW(Locale, LCType, lpLCData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCalendarInfoA(uint32_t Locale, uint32_t Calendar, uint32_t CalType, win32::Windows::Win32::Foundation::PSTR lpCalData, int32_t cchData, uint32_t* lpValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);
        ORBIT_TRACK_PARAM(lpCalData);
        ORBIT_TRACK_PARAM(cchData);
        ORBIT_TRACK_PARAM(lpValue);

        auto win32_impl_result = g_api_table.GetCalendarInfoA(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCalendarInfoW(uint32_t Locale, uint32_t Calendar, uint32_t CalType, win32::Windows::Win32::Foundation::PWSTR lpCalData, int32_t cchData, uint32_t* lpValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);
        ORBIT_TRACK_PARAM(lpCalData);
        ORBIT_TRACK_PARAM(cchData);
        ORBIT_TRACK_PARAM(lpValue);

        auto win32_impl_result = g_api_table.GetCalendarInfoW(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetCalendarInfoA(uint32_t Locale, uint32_t Calendar, uint32_t CalType, win32::Windows::Win32::Foundation::PSTR lpCalData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);
        ORBIT_TRACK_PARAM(lpCalData);

        auto win32_impl_result = g_api_table.SetCalendarInfoA(Locale, Calendar, CalType, lpCalData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetCalendarInfoW(uint32_t Locale, uint32_t Calendar, uint32_t CalType, win32::Windows::Win32::Foundation::PWSTR lpCalData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);
        ORBIT_TRACK_PARAM(lpCalData);

        auto win32_impl_result = g_api_table.SetCalendarInfoW(Locale, Calendar, CalType, lpCalData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsDBCSLeadByte(uint8_t TestChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TestChar);

        auto win32_impl_result = g_api_table.IsDBCSLeadByte(TestChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsDBCSLeadByteEx(uint32_t CodePage, uint8_t TestChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CodePage);
        ORBIT_TRACK_PARAM(TestChar);

        auto win32_impl_result = g_api_table.IsDBCSLeadByteEx(CodePage, TestChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LocaleNameToLCID(win32::Windows::Win32::Foundation::PWSTR lpName, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.LocaleNameToLCID(lpName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LCIDToLocaleName(uint32_t Locale, win32::Windows::Win32::Foundation::PWSTR lpName, int32_t cchName, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(cchName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.LCIDToLocaleName(Locale, lpName, cchName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetDurationFormat(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::SYSTEMTIME* lpDuration, uint64_t ullDuration, win32::Windows::Win32::Foundation::PWSTR lpFormat, win32::Windows::Win32::Foundation::PWSTR lpDurationStr, int32_t cchDuration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDuration);
        ORBIT_TRACK_PARAM(ullDuration);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpDurationStr);
        ORBIT_TRACK_PARAM(cchDuration);

        auto win32_impl_result = g_api_table.GetDurationFormat(Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetNumberFormatA(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR lpValue, win32::Windows::Win32::Globalization::NUMBERFMTA* lpFormat, win32::Windows::Win32::Foundation::PSTR lpNumberStr, int32_t cchNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpNumberStr);
        ORBIT_TRACK_PARAM(cchNumber);

        auto win32_impl_result = g_api_table.GetNumberFormatA(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetNumberFormatW(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpValue, win32::Windows::Win32::Globalization::NUMBERFMTW* lpFormat, win32::Windows::Win32::Foundation::PWSTR lpNumberStr, int32_t cchNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpNumberStr);
        ORBIT_TRACK_PARAM(cchNumber);

        auto win32_impl_result = g_api_table.GetNumberFormatW(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCurrencyFormatA(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR lpValue, win32::Windows::Win32::Globalization::CURRENCYFMTA* lpFormat, win32::Windows::Win32::Foundation::PSTR lpCurrencyStr, int32_t cchCurrency) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpCurrencyStr);
        ORBIT_TRACK_PARAM(cchCurrency);

        auto win32_impl_result = g_api_table.GetCurrencyFormatA(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCurrencyFormatW(uint32_t Locale, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpValue, win32::Windows::Win32::Globalization::CURRENCYFMTW* lpFormat, win32::Windows::Win32::Foundation::PWSTR lpCurrencyStr, int32_t cchCurrency) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpCurrencyStr);
        ORBIT_TRACK_PARAM(cchCurrency);

        auto win32_impl_result = g_api_table.GetCurrencyFormatW(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumCalendarInfoA(win32::Windows::Win32::Globalization::CALINFO_ENUMPROCA* lpCalInfoEnumProc, uint32_t Locale, uint32_t Calendar, uint32_t CalType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCalInfoEnumProc);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);

        auto win32_impl_result = g_api_table.EnumCalendarInfoA(lpCalInfoEnumProc, Locale, Calendar, CalType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumCalendarInfoW(win32::Windows::Win32::Globalization::CALINFO_ENUMPROCW* lpCalInfoEnumProc, uint32_t Locale, uint32_t Calendar, uint32_t CalType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCalInfoEnumProc);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);

        auto win32_impl_result = g_api_table.EnumCalendarInfoW(lpCalInfoEnumProc, Locale, Calendar, CalType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumCalendarInfoExA(win32::Windows::Win32::Globalization::CALINFO_ENUMPROCEXA* lpCalInfoEnumProcEx, uint32_t Locale, uint32_t Calendar, uint32_t CalType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCalInfoEnumProcEx);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);

        auto win32_impl_result = g_api_table.EnumCalendarInfoExA(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumCalendarInfoExW(win32::Windows::Win32::Globalization::CALINFO_ENUMPROCEXW* lpCalInfoEnumProcEx, uint32_t Locale, uint32_t Calendar, uint32_t CalType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCalInfoEnumProcEx);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(CalType);

        auto win32_impl_result = g_api_table.EnumCalendarInfoExW(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumTimeFormatsA(win32::Windows::Win32::Globalization::TIMEFMT_ENUMPROCA* lpTimeFmtEnumProc, uint32_t Locale, win32::Windows::Win32::Globalization::TIME_FORMAT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTimeFmtEnumProc);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumTimeFormatsA(lpTimeFmtEnumProc, Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumTimeFormatsW(win32::Windows::Win32::Globalization::TIMEFMT_ENUMPROCW* lpTimeFmtEnumProc, uint32_t Locale, win32::Windows::Win32::Globalization::TIME_FORMAT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTimeFmtEnumProc);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumTimeFormatsW(lpTimeFmtEnumProc, Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumDateFormatsA(win32::Windows::Win32::Globalization::DATEFMT_ENUMPROCA* lpDateFmtEnumProc, uint32_t Locale, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDateFmtEnumProc);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumDateFormatsA(lpDateFmtEnumProc, Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumDateFormatsW(win32::Windows::Win32::Globalization::DATEFMT_ENUMPROCW* lpDateFmtEnumProc, uint32_t Locale, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDateFmtEnumProc);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumDateFormatsW(lpDateFmtEnumProc, Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumDateFormatsExA(win32::Windows::Win32::Globalization::DATEFMT_ENUMPROCEXA* lpDateFmtEnumProcEx, uint32_t Locale, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDateFmtEnumProcEx);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumDateFormatsExA(lpDateFmtEnumProcEx, Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumDateFormatsExW(win32::Windows::Win32::Globalization::DATEFMT_ENUMPROCEXW* lpDateFmtEnumProcEx, uint32_t Locale, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDateFmtEnumProcEx);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumDateFormatsExW(lpDateFmtEnumProcEx, Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsValidLanguageGroup(uint32_t LanguageGroup, win32::Windows::Win32::Globalization::ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LanguageGroup);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.IsValidLanguageGroup(LanguageGroup, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNLSVersion(uint32_t Function, uint32_t Locale, win32::Windows::Win32::Globalization::NLSVERSIONINFO* lpVersionInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Function);
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(lpVersionInformation);

        auto win32_impl_result = g_api_table.GetNLSVersion(Function, Locale, lpVersionInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsValidLocale(uint32_t Locale, win32::Windows::Win32::Globalization::IS_VALID_LOCALE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.IsValidLocale(Locale, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetGeoInfoA(int32_t Location, uint32_t GeoType, win32::Windows::Win32::Foundation::PSTR lpGeoData, int32_t cchData, uint16_t LangId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Location);
        ORBIT_TRACK_PARAM(GeoType);
        ORBIT_TRACK_PARAM(lpGeoData);
        ORBIT_TRACK_PARAM(cchData);
        ORBIT_TRACK_PARAM(LangId);

        auto win32_impl_result = g_api_table.GetGeoInfoA(Location, GeoType, lpGeoData, cchData, LangId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetGeoInfoW(int32_t Location, uint32_t GeoType, win32::Windows::Win32::Foundation::PWSTR lpGeoData, int32_t cchData, uint16_t LangId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Location);
        ORBIT_TRACK_PARAM(GeoType);
        ORBIT_TRACK_PARAM(lpGeoData);
        ORBIT_TRACK_PARAM(cchData);
        ORBIT_TRACK_PARAM(LangId);

        auto win32_impl_result = g_api_table.GetGeoInfoW(Location, GeoType, lpGeoData, cchData, LangId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetGeoInfoEx(win32::Windows::Win32::Foundation::PWSTR location, uint32_t geoType, win32::Windows::Win32::Foundation::PWSTR geoData, int32_t geoDataCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(location);
        ORBIT_TRACK_PARAM(geoType);
        ORBIT_TRACK_PARAM(geoData);
        ORBIT_TRACK_PARAM(geoDataCount);

        auto win32_impl_result = g_api_table.GetGeoInfoEx(location, geoType, geoData, geoDataCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemGeoID(uint32_t GeoClass, int32_t ParentGeoId, win32::Windows::Win32::Globalization::GEO_ENUMPROC* lpGeoEnumProc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GeoClass);
        ORBIT_TRACK_PARAM(ParentGeoId);
        ORBIT_TRACK_PARAM(lpGeoEnumProc);

        auto win32_impl_result = g_api_table.EnumSystemGeoID(GeoClass, ParentGeoId, lpGeoEnumProc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemGeoNames(uint32_t geoClass, win32::Windows::Win32::Globalization::GEO_ENUMNAMEPROC* geoEnumProc, win32::Windows::Win32::Foundation::LPARAM data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(geoClass);
        ORBIT_TRACK_PARAM(geoEnumProc);
        ORBIT_TRACK_PARAM(data);

        auto win32_impl_result = g_api_table.EnumSystemGeoNames(geoClass, geoEnumProc, data);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetUserGeoID(uint32_t GeoClass) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GeoClass);

        auto win32_impl_result = g_api_table.GetUserGeoID(GeoClass);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetUserDefaultGeoName(win32::Windows::Win32::Foundation::PWSTR geoName, int32_t geoNameCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(geoName);
        ORBIT_TRACK_PARAM(geoNameCount);

        auto win32_impl_result = g_api_table.GetUserDefaultGeoName(geoName, geoNameCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetUserGeoID(int32_t GeoId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GeoId);

        auto win32_impl_result = g_api_table.SetUserGeoID(GeoId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetUserGeoName(win32::Windows::Win32::Foundation::PWSTR geoName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(geoName);

        auto win32_impl_result = g_api_table.SetUserGeoName(geoName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ConvertDefaultLocale(uint32_t Locale) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);

        auto win32_impl_result = g_api_table.ConvertDefaultLocale(Locale);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetSystemDefaultUILanguage() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetSystemDefaultUILanguage();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetThreadLocale() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetThreadLocale();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadLocale(uint32_t Locale) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);

        auto win32_impl_result = g_api_table.SetThreadLocale(Locale);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetUserDefaultUILanguage() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetUserDefaultUILanguage();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetUserDefaultLangID() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetUserDefaultLangID();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetSystemDefaultLangID() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetSystemDefaultLangID();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetSystemDefaultLCID() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetSystemDefaultLCID();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUserDefaultLCID() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetUserDefaultLCID();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_SetThreadUILanguage(uint16_t LangId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LangId);

        auto win32_impl_result = g_api_table.SetThreadUILanguage(LangId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetThreadUILanguage() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetThreadUILanguage();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, win32::Windows::Win32::Foundation::PWSTR pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pulNumLanguages);
        ORBIT_TRACK_PARAM(pwszLanguagesBuffer);
        ORBIT_TRACK_PARAM(pcchLanguagesBuffer);

        auto win32_impl_result = g_api_table.GetProcessPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessPreferredUILanguages(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszLanguagesBuffer, uint32_t* pulNumLanguages) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszLanguagesBuffer);
        ORBIT_TRACK_PARAM(pulNumLanguages);

        auto win32_impl_result = g_api_table.SetProcessPreferredUILanguages(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetUserPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, win32::Windows::Win32::Foundation::PWSTR pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pulNumLanguages);
        ORBIT_TRACK_PARAM(pwszLanguagesBuffer);
        ORBIT_TRACK_PARAM(pcchLanguagesBuffer);

        auto win32_impl_result = g_api_table.GetUserPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetSystemPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, win32::Windows::Win32::Foundation::PWSTR pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pulNumLanguages);
        ORBIT_TRACK_PARAM(pwszLanguagesBuffer);
        ORBIT_TRACK_PARAM(pcchLanguagesBuffer);

        auto win32_impl_result = g_api_table.GetSystemPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadPreferredUILanguages(uint32_t dwFlags, uint32_t* pulNumLanguages, win32::Windows::Win32::Foundation::PWSTR pwszLanguagesBuffer, uint32_t* pcchLanguagesBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pulNumLanguages);
        ORBIT_TRACK_PARAM(pwszLanguagesBuffer);
        ORBIT_TRACK_PARAM(pcchLanguagesBuffer);

        auto win32_impl_result = g_api_table.GetThreadPreferredUILanguages(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadPreferredUILanguages(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszLanguagesBuffer, uint32_t* pulNumLanguages) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszLanguagesBuffer);
        ORBIT_TRACK_PARAM(pulNumLanguages);

        auto win32_impl_result = g_api_table.SetThreadPreferredUILanguages(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileMUIInfo(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pcwszFilePath, win32::Windows::Win32::Globalization::FILEMUIINFO* pFileMUIInfo, uint32_t* pcbFileMUIInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pcwszFilePath);
        ORBIT_TRACK_PARAM(pFileMUIInfo);
        ORBIT_TRACK_PARAM(pcbFileMUIInfo);

        auto win32_impl_result = g_api_table.GetFileMUIInfo(dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileMUIPath(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pcwszFilePath, win32::Windows::Win32::Foundation::PWSTR pwszLanguage, uint32_t* pcchLanguage, win32::Windows::Win32::Foundation::PWSTR pwszFileMUIPath, uint32_t* pcchFileMUIPath, uint64_t* pululEnumerator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pcwszFilePath);
        ORBIT_TRACK_PARAM(pwszLanguage);
        ORBIT_TRACK_PARAM(pcchLanguage);
        ORBIT_TRACK_PARAM(pwszFileMUIPath);
        ORBIT_TRACK_PARAM(pcchFileMUIPath);
        ORBIT_TRACK_PARAM(pululEnumerator);

        auto win32_impl_result = g_api_table.GetFileMUIPath(dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetUILanguageInfo(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwmszLanguage, win32::Windows::Win32::Foundation::PWSTR pwszFallbackLanguages, uint32_t* pcchFallbackLanguages, uint32_t* pAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwmszLanguage);
        ORBIT_TRACK_PARAM(pwszFallbackLanguages);
        ORBIT_TRACK_PARAM(pcchFallbackLanguages);
        ORBIT_TRACK_PARAM(pAttributes);

        auto win32_impl_result = g_api_table.GetUILanguageInfo(dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadPreferredUILanguages2(uint32_t flags, win32::Windows::Win32::Foundation::PWSTR languages, uint32_t* numLanguagesSet, win32::Windows::Win32::Globalization::HSAVEDUILANGUAGES* snapshot) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(languages);
        ORBIT_TRACK_PARAM(numLanguagesSet);
        ORBIT_TRACK_PARAM(snapshot);

        auto win32_impl_result = g_api_table.SetThreadPreferredUILanguages2(flags, languages, numLanguagesSet, snapshot);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_RestoreThreadPreferredUILanguages(win32::Windows::Win32::Globalization::HSAVEDUILANGUAGES snapshot) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(snapshot);

        g_api_table.RestoreThreadPreferredUILanguages(snapshot);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_NotifyUILanguageChange(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pcwstrNewLanguage, win32::Windows::Win32::Foundation::PWSTR pcwstrPreviousLanguage, uint32_t dwReserved, uint32_t* pdwStatusRtrn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pcwstrNewLanguage);
        ORBIT_TRACK_PARAM(pcwstrPreviousLanguage);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(pdwStatusRtrn);

        auto win32_impl_result = g_api_table.NotifyUILanguageChange(dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetStringTypeExA(uint32_t Locale, uint32_t dwInfoType, win32::Windows::Win32::Foundation::PSTR lpSrcStr, int32_t cchSrc, uint16_t* lpCharType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwInfoType);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpCharType);

        auto win32_impl_result = g_api_table.GetStringTypeExA(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetStringTypeA(uint32_t Locale, uint32_t dwInfoType, win32::Windows::Win32::Foundation::PSTR lpSrcStr, int32_t cchSrc, uint16_t* lpCharType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(dwInfoType);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpCharType);

        auto win32_impl_result = g_api_table.GetStringTypeA(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_FoldStringA(win32::Windows::Win32::Globalization::FOLD_STRING_MAP_FLAGS dwMapFlags, win32::Windows::Win32::Foundation::PSTR lpSrcStr, int32_t cchSrc, win32::Windows::Win32::Foundation::PSTR lpDestStr, int32_t cchDest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMapFlags);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpDestStr);
        ORBIT_TRACK_PARAM(cchDest);

        auto win32_impl_result = g_api_table.FoldStringA(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemLocalesA(win32::Windows::Win32::Globalization::LOCALE_ENUMPROCA* lpLocaleEnumProc, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumSystemLocalesA(lpLocaleEnumProc, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemLocalesW(win32::Windows::Win32::Globalization::LOCALE_ENUMPROCW* lpLocaleEnumProc, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumSystemLocalesW(lpLocaleEnumProc, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemLanguageGroupsA(win32::Windows::Win32::Globalization::LANGUAGEGROUP_ENUMPROCA* lpLanguageGroupEnumProc, win32::Windows::Win32::Globalization::ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS dwFlags, intptr_t lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLanguageGroupEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemLanguageGroupsW(win32::Windows::Win32::Globalization::LANGUAGEGROUP_ENUMPROCW* lpLanguageGroupEnumProc, win32::Windows::Win32::Globalization::ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS dwFlags, intptr_t lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLanguageGroupEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumLanguageGroupLocalesA(win32::Windows::Win32::Globalization::LANGGROUPLOCALE_ENUMPROCA* lpLangGroupLocaleEnumProc, uint32_t LanguageGroup, uint32_t dwFlags, intptr_t lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLangGroupLocaleEnumProc);
        ORBIT_TRACK_PARAM(LanguageGroup);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumLanguageGroupLocalesW(win32::Windows::Win32::Globalization::LANGGROUPLOCALE_ENUMPROCW* lpLangGroupLocaleEnumProc, uint32_t LanguageGroup, uint32_t dwFlags, intptr_t lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLangGroupLocaleEnumProc);
        ORBIT_TRACK_PARAM(LanguageGroup);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumUILanguagesA(win32::Windows::Win32::Globalization::UILANGUAGE_ENUMPROCA* lpUILanguageEnumProc, uint32_t dwFlags, intptr_t lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpUILanguageEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumUILanguagesA(lpUILanguageEnumProc, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumUILanguagesW(win32::Windows::Win32::Globalization::UILANGUAGE_ENUMPROCW* lpUILanguageEnumProc, uint32_t dwFlags, intptr_t lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpUILanguageEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumUILanguagesW(lpUILanguageEnumProc, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemCodePagesA(win32::Windows::Win32::Globalization::CODEPAGE_ENUMPROCA* lpCodePageEnumProc, win32::Windows::Win32::Globalization::ENUM_SYSTEM_CODE_PAGES_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCodePageEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumSystemCodePagesA(lpCodePageEnumProc, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemCodePagesW(win32::Windows::Win32::Globalization::CODEPAGE_ENUMPROCW* lpCodePageEnumProc, win32::Windows::Win32::Globalization::ENUM_SYSTEM_CODE_PAGES_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCodePageEnumProc);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnumSystemCodePagesW(lpCodePageEnumProc, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_IdnToAscii(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpUnicodeCharStr, int32_t cchUnicodeChar, win32::Windows::Win32::Foundation::PWSTR lpASCIICharStr, int32_t cchASCIIChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpUnicodeCharStr);
        ORBIT_TRACK_PARAM(cchUnicodeChar);
        ORBIT_TRACK_PARAM(lpASCIICharStr);
        ORBIT_TRACK_PARAM(cchASCIIChar);

        auto win32_impl_result = g_api_table.IdnToAscii(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_IdnToUnicode(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpASCIICharStr, int32_t cchASCIIChar, win32::Windows::Win32::Foundation::PWSTR lpUnicodeCharStr, int32_t cchUnicodeChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpASCIICharStr);
        ORBIT_TRACK_PARAM(cchASCIIChar);
        ORBIT_TRACK_PARAM(lpUnicodeCharStr);
        ORBIT_TRACK_PARAM(cchUnicodeChar);

        auto win32_impl_result = g_api_table.IdnToUnicode(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_IdnToNameprepUnicode(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpUnicodeCharStr, int32_t cchUnicodeChar, win32::Windows::Win32::Foundation::PWSTR lpNameprepCharStr, int32_t cchNameprepChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpUnicodeCharStr);
        ORBIT_TRACK_PARAM(cchUnicodeChar);
        ORBIT_TRACK_PARAM(lpNameprepCharStr);
        ORBIT_TRACK_PARAM(cchNameprepChar);

        auto win32_impl_result = g_api_table.IdnToNameprepUnicode(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NormalizeString(win32::Windows::Win32::Globalization::NORM_FORM NormForm, win32::Windows::Win32::Foundation::PWSTR lpSrcString, int32_t cwSrcLength, win32::Windows::Win32::Foundation::PWSTR lpDstString, int32_t cwDstLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NormForm);
        ORBIT_TRACK_PARAM(lpSrcString);
        ORBIT_TRACK_PARAM(cwSrcLength);
        ORBIT_TRACK_PARAM(lpDstString);
        ORBIT_TRACK_PARAM(cwDstLength);

        auto win32_impl_result = g_api_table.NormalizeString(NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsNormalizedString(win32::Windows::Win32::Globalization::NORM_FORM NormForm, win32::Windows::Win32::Foundation::PWSTR lpString, int32_t cwLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NormForm);
        ORBIT_TRACK_PARAM(lpString);
        ORBIT_TRACK_PARAM(cwLength);

        auto win32_impl_result = g_api_table.IsNormalizedString(NormForm, lpString, cwLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VerifyScripts(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpLocaleScripts, int32_t cchLocaleScripts, win32::Windows::Win32::Foundation::PWSTR lpTestScripts, int32_t cchTestScripts) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpLocaleScripts);
        ORBIT_TRACK_PARAM(cchLocaleScripts);
        ORBIT_TRACK_PARAM(lpTestScripts);
        ORBIT_TRACK_PARAM(cchTestScripts);

        auto win32_impl_result = g_api_table.VerifyScripts(dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetStringScripts(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpString, int32_t cchString, win32::Windows::Win32::Foundation::PWSTR lpScripts, int32_t cchScripts) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpString);
        ORBIT_TRACK_PARAM(cchString);
        ORBIT_TRACK_PARAM(lpScripts);
        ORBIT_TRACK_PARAM(cchScripts);

        auto win32_impl_result = g_api_table.GetStringScripts(dwFlags, lpString, cchString, lpScripts, cchScripts);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetLocaleInfoEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t LCType, win32::Windows::Win32::Foundation::PWSTR lpLCData, int32_t cchData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(LCType);
        ORBIT_TRACK_PARAM(lpLCData);
        ORBIT_TRACK_PARAM(cchData);

        auto win32_impl_result = g_api_table.GetLocaleInfoEx(lpLocaleName, LCType, lpLCData, cchData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCalendarInfoEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t Calendar, win32::Windows::Win32::Foundation::PWSTR lpReserved, uint32_t CalType, win32::Windows::Win32::Foundation::PWSTR lpCalData, int32_t cchData, uint32_t* lpValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(CalType);
        ORBIT_TRACK_PARAM(lpCalData);
        ORBIT_TRACK_PARAM(cchData);
        ORBIT_TRACK_PARAM(lpValue);

        auto win32_impl_result = g_api_table.GetCalendarInfoEx(lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetNumberFormatEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpValue, win32::Windows::Win32::Globalization::NUMBERFMTW* lpFormat, win32::Windows::Win32::Foundation::PWSTR lpNumberStr, int32_t cchNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpNumberStr);
        ORBIT_TRACK_PARAM(cchNumber);

        auto win32_impl_result = g_api_table.GetNumberFormatEx(lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCurrencyFormatEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpValue, win32::Windows::Win32::Globalization::CURRENCYFMTW* lpFormat, win32::Windows::Win32::Foundation::PWSTR lpCurrencyStr, int32_t cchCurrency) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(lpFormat);
        ORBIT_TRACK_PARAM(lpCurrencyStr);
        ORBIT_TRACK_PARAM(cchCurrency);

        auto win32_impl_result = g_api_table.GetCurrencyFormatEx(lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetUserDefaultLocaleName(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, int32_t cchLocaleName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(cchLocaleName);

        auto win32_impl_result = g_api_table.GetUserDefaultLocaleName(lpLocaleName, cchLocaleName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetSystemDefaultLocaleName(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, int32_t cchLocaleName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(cchLocaleName);

        auto win32_impl_result = g_api_table.GetSystemDefaultLocaleName(lpLocaleName, cchLocaleName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsNLSDefinedString(uint32_t Function, uint32_t dwFlags, win32::Windows::Win32::Globalization::NLSVERSIONINFO* lpVersionInformation, win32::Windows::Win32::Foundation::PWSTR lpString, int32_t cchStr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Function);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpVersionInformation);
        ORBIT_TRACK_PARAM(lpString);
        ORBIT_TRACK_PARAM(cchStr);

        auto win32_impl_result = g_api_table.IsNLSDefinedString(Function, dwFlags, lpVersionInformation, lpString, cchStr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNLSVersionEx(uint32_t function, win32::Windows::Win32::Foundation::PWSTR lpLocaleName, win32::Windows::Win32::Globalization::NLSVERSIONINFOEX* lpVersionInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(function);
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(lpVersionInformation);

        auto win32_impl_result = g_api_table.GetNLSVersionEx(function, lpLocaleName, lpVersionInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IsValidNLSVersion(uint32_t function, win32::Windows::Win32::Foundation::PWSTR lpLocaleName, win32::Windows::Win32::Globalization::NLSVERSIONINFOEX* lpVersionInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(function);
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(lpVersionInformation);

        auto win32_impl_result = g_api_table.IsValidNLSVersion(function, lpLocaleName, lpVersionInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_FindNLSStringEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t dwFindNLSStringFlags, win32::Windows::Win32::Foundation::PWSTR lpStringSource, int32_t cchSource, win32::Windows::Win32::Foundation::PWSTR lpStringValue, int32_t cchValue, int32_t* pcchFound, win32::Windows::Win32::Globalization::NLSVERSIONINFO* lpVersionInformation, void* lpReserved, win32::Windows::Win32::Foundation::LPARAM sortHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFindNLSStringFlags);
        ORBIT_TRACK_PARAM(lpStringSource);
        ORBIT_TRACK_PARAM(cchSource);
        ORBIT_TRACK_PARAM(lpStringValue);
        ORBIT_TRACK_PARAM(cchValue);
        ORBIT_TRACK_PARAM(pcchFound);
        ORBIT_TRACK_PARAM(lpVersionInformation);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(sortHandle);

        auto win32_impl_result = g_api_table.FindNLSStringEx(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LCMapStringEx(win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t dwMapFlags, win32::Windows::Win32::Foundation::PWSTR lpSrcStr, int32_t cchSrc, win32::Windows::Win32::Foundation::PWSTR lpDestStr, int32_t cchDest, win32::Windows::Win32::Globalization::NLSVERSIONINFO* lpVersionInformation, void* lpReserved, win32::Windows::Win32::Foundation::LPARAM sortHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwMapFlags);
        ORBIT_TRACK_PARAM(lpSrcStr);
        ORBIT_TRACK_PARAM(cchSrc);
        ORBIT_TRACK_PARAM(lpDestStr);
        ORBIT_TRACK_PARAM(cchDest);
        ORBIT_TRACK_PARAM(lpVersionInformation);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(sortHandle);

        auto win32_impl_result = g_api_table.LCMapStringEx(lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsValidLocaleName(win32::Windows::Win32::Foundation::PWSTR lpLocaleName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleName);

        auto win32_impl_result = g_api_table.IsValidLocaleName(lpLocaleName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumCalendarInfoExEx(win32::Windows::Win32::Globalization::CALINFO_ENUMPROCEXEX* pCalInfoEnumProcExEx, win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t Calendar, win32::Windows::Win32::Foundation::PWSTR lpReserved, uint32_t CalType, win32::Windows::Win32::Foundation::LPARAM lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCalInfoEnumProcExEx);
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(Calendar);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(CalType);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumCalendarInfoExEx(pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumDateFormatsExEx(win32::Windows::Win32::Globalization::DATEFMT_ENUMPROCEXEX* lpDateFmtEnumProcExEx, win32::Windows::Win32::Foundation::PWSTR lpLocaleName, win32::Windows::Win32::Globalization::ENUM_DATE_FORMATS_FLAGS dwFlags, win32::Windows::Win32::Foundation::LPARAM lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDateFmtEnumProcExEx);
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumDateFormatsExEx(lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumTimeFormatsEx(win32::Windows::Win32::Globalization::TIMEFMT_ENUMPROCEX* lpTimeFmtEnumProcEx, win32::Windows::Win32::Foundation::PWSTR lpLocaleName, uint32_t dwFlags, win32::Windows::Win32::Foundation::LPARAM lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTimeFmtEnumProcEx);
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumTimeFormatsEx(lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnumSystemLocalesEx(win32::Windows::Win32::Globalization::LOCALE_ENUMPROCEX* lpLocaleEnumProcEx, uint32_t dwFlags, win32::Windows::Win32::Foundation::LPARAM lParam, void* lpReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocaleEnumProcEx);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lParam);
        ORBIT_TRACK_PARAM(lpReserved);

        auto win32_impl_result = g_api_table.EnumSystemLocalesEx(lpLocaleEnumProcEx, dwFlags, lParam, lpReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ResolveLocaleName(win32::Windows::Win32::Foundation::PWSTR lpNameToResolve, win32::Windows::Win32::Foundation::PWSTR lpLocaleName, int32_t cchLocaleName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpNameToResolve);
        ORBIT_TRACK_PARAM(lpLocaleName);
        ORBIT_TRACK_PARAM(cchLocaleName);

        auto win32_impl_result = g_api_table.ResolveLocaleName(lpNameToResolve, lpLocaleName, cchLocaleName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MappingGetServices(win32::Windows::Win32::Globalization::MAPPING_ENUM_OPTIONS* pOptions, win32::Windows::Win32::Globalization::MAPPING_SERVICE_INFO** prgServices, uint32_t* pdwServicesCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOptions);
        ORBIT_TRACK_PARAM(prgServices);
        ORBIT_TRACK_PARAM(pdwServicesCount);

        auto win32_impl_result = g_api_table.MappingGetServices(pOptions, prgServices, pdwServicesCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MappingFreeServices(win32::Windows::Win32::Globalization::MAPPING_SERVICE_INFO* pServiceInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pServiceInfo);

        auto win32_impl_result = g_api_table.MappingFreeServices(pServiceInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MappingRecognizeText(win32::Windows::Win32::Globalization::MAPPING_SERVICE_INFO* pServiceInfo, win32::Windows::Win32::Foundation::PWSTR pszText, uint32_t dwLength, uint32_t dwIndex, win32::Windows::Win32::Globalization::MAPPING_OPTIONS* pOptions, win32::Windows::Win32::Globalization::MAPPING_PROPERTY_BAG* pbag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pServiceInfo);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(dwLength);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pOptions);
        ORBIT_TRACK_PARAM(pbag);

        auto win32_impl_result = g_api_table.MappingRecognizeText(pServiceInfo, pszText, dwLength, dwIndex, pOptions, pbag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MappingDoAction(win32::Windows::Win32::Globalization::MAPPING_PROPERTY_BAG* pBag, uint32_t dwRangeIndex, win32::Windows::Win32::Foundation::PWSTR pszActionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBag);
        ORBIT_TRACK_PARAM(dwRangeIndex);
        ORBIT_TRACK_PARAM(pszActionId);

        auto win32_impl_result = g_api_table.MappingDoAction(pBag, dwRangeIndex, pszActionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MappingFreePropertyBag(win32::Windows::Win32::Globalization::MAPPING_PROPERTY_BAG* pBag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBag);

        auto win32_impl_result = g_api_table.MappingFreePropertyBag(pBag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptFreeCache(void** psc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(psc);

        auto win32_impl_result = g_api_table.ScriptFreeCache(psc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptItemize(win32::Windows::Win32::Foundation::PWSTR pwcInChars, int32_t cInChars, int32_t cMaxItems, win32::Windows::Win32::Globalization::SCRIPT_CONTROL* psControl, win32::Windows::Win32::Globalization::SCRIPT_STATE* psState, win32::Windows::Win32::Globalization::SCRIPT_ITEM* pItems, int32_t* pcItems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwcInChars);
        ORBIT_TRACK_PARAM(cInChars);
        ORBIT_TRACK_PARAM(cMaxItems);
        ORBIT_TRACK_PARAM(psControl);
        ORBIT_TRACK_PARAM(psState);
        ORBIT_TRACK_PARAM(pItems);
        ORBIT_TRACK_PARAM(pcItems);

        auto win32_impl_result = g_api_table.ScriptItemize(pwcInChars, cInChars, cMaxItems, psControl, psState, pItems, pcItems);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptLayout(int32_t cRuns, uint8_t* pbLevel, int32_t* piVisualToLogical, int32_t* piLogicalToVisual) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cRuns);
        ORBIT_TRACK_PARAM(pbLevel);
        ORBIT_TRACK_PARAM(piVisualToLogical);
        ORBIT_TRACK_PARAM(piLogicalToVisual);

        auto win32_impl_result = g_api_table.ScriptLayout(cRuns, pbLevel, piVisualToLogical, piLogicalToVisual);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptShape(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Foundation::PWSTR pwcChars, int32_t cChars, int32_t cMaxGlyphs, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint16_t* pwOutGlyphs, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, int32_t* pcGlyphs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(pwcChars);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(cMaxGlyphs);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(pwOutGlyphs);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(pcGlyphs);

        auto win32_impl_result = g_api_table.ScriptShape(hdc, psc, pwcChars, cChars, cMaxGlyphs, psa, pwOutGlyphs, pwLogClust, psva, pcGlyphs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptPlace(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, uint16_t* pwGlyphs, int32_t cGlyphs, win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, int32_t* piAdvance, win32::Windows::Win32::Globalization::GOFFSET* pGoffset, win32::Windows::Win32::Graphics::Gdi::ABC* pABC) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(pwGlyphs);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(pGoffset);
        ORBIT_TRACK_PARAM(pABC);

        auto win32_impl_result = g_api_table.ScriptPlace(hdc, psc, pwGlyphs, cGlyphs, psva, psa, piAdvance, pGoffset, pABC);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptTextOut(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, int32_t x, int32_t y, uint32_t fuOptions, win32::Windows::Win32::Foundation::RECT* lprc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, win32::Windows::Win32::Foundation::PWSTR pwcReserved, int32_t iReserved, uint16_t* pwGlyphs, int32_t cGlyphs, int32_t* piAdvance, int32_t* piJustify, win32::Windows::Win32::Globalization::GOFFSET* pGoffset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(fuOptions);
        ORBIT_TRACK_PARAM(lprc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(pwcReserved);
        ORBIT_TRACK_PARAM(iReserved);
        ORBIT_TRACK_PARAM(pwGlyphs);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(piJustify);
        ORBIT_TRACK_PARAM(pGoffset);

        auto win32_impl_result = g_api_table.ScriptTextOut(hdc, psc, x, y, fuOptions, lprc, psa, pwcReserved, iReserved, pwGlyphs, cGlyphs, piAdvance, piJustify, pGoffset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptJustify(win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, int32_t* piAdvance, int32_t cGlyphs, int32_t iDx, int32_t iMinKashida, int32_t* piJustify) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(iDx);
        ORBIT_TRACK_PARAM(iMinKashida);
        ORBIT_TRACK_PARAM(piJustify);

        auto win32_impl_result = g_api_table.ScriptJustify(psva, piAdvance, cGlyphs, iDx, iMinKashida, piJustify);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptBreak(win32::Windows::Win32::Foundation::PWSTR pwcChars, int32_t cChars, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, win32::Windows::Win32::Globalization::SCRIPT_LOGATTR* psla) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwcChars);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(psla);

        auto win32_impl_result = g_api_table.ScriptBreak(pwcChars, cChars, psa, psla);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptCPtoX(int32_t iCP, win32::Windows::Win32::Foundation::BOOL fTrailing, int32_t cChars, int32_t cGlyphs, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, int32_t* piAdvance, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, int32_t* piX) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iCP);
        ORBIT_TRACK_PARAM(fTrailing);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(piX);

        auto win32_impl_result = g_api_table.ScriptCPtoX(iCP, fTrailing, cChars, cGlyphs, pwLogClust, psva, piAdvance, psa, piX);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptXtoCP(int32_t iX, int32_t cChars, int32_t cGlyphs, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, int32_t* piAdvance, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, int32_t* piCP, int32_t* piTrailing) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iX);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(piCP);
        ORBIT_TRACK_PARAM(piTrailing);

        auto win32_impl_result = g_api_table.ScriptXtoCP(iX, cChars, cGlyphs, pwLogClust, psva, piAdvance, psa, piCP, piTrailing);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetLogicalWidths(win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, int32_t cChars, int32_t cGlyphs, int32_t* piGlyphWidth, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, int32_t* piDx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(piGlyphWidth);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(piDx);

        auto win32_impl_result = g_api_table.ScriptGetLogicalWidths(psa, cChars, cGlyphs, piGlyphWidth, pwLogClust, psva, piDx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptApplyLogicalWidth(int32_t* piDx, int32_t cChars, int32_t cGlyphs, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::SCRIPT_VISATTR* psva, int32_t* piAdvance, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, win32::Windows::Win32::Graphics::Gdi::ABC* pABC, int32_t* piJustify) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(piDx);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(psva);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(pABC);
        ORBIT_TRACK_PARAM(piJustify);

        auto win32_impl_result = g_api_table.ScriptApplyLogicalWidth(piDx, cChars, cGlyphs, pwLogClust, psva, piAdvance, psa, pABC, piJustify);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetCMap(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Foundation::PWSTR pwcInChars, int32_t cChars, uint32_t dwFlags, uint16_t* pwOutGlyphs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(pwcInChars);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwOutGlyphs);

        auto win32_impl_result = g_api_table.ScriptGetCMap(hdc, psc, pwcInChars, cChars, dwFlags, pwOutGlyphs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetGlyphABCWidth(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, uint16_t wGlyph, win32::Windows::Win32::Graphics::Gdi::ABC* pABC) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(wGlyph);
        ORBIT_TRACK_PARAM(pABC);

        auto win32_impl_result = g_api_table.ScriptGetGlyphABCWidth(hdc, psc, wGlyph, pABC);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetProperties(win32::Windows::Win32::Globalization::SCRIPT_PROPERTIES*** ppSp, int32_t* piNumScripts) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppSp);
        ORBIT_TRACK_PARAM(piNumScripts);

        auto win32_impl_result = g_api_table.ScriptGetProperties(ppSp, piNumScripts);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetFontProperties(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_FONTPROPERTIES* sfp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(sfp);

        auto win32_impl_result = g_api_table.ScriptGetFontProperties(hdc, psc, sfp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptCacheGetHeight(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, int32_t* tmHeight) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(tmHeight);

        auto win32_impl_result = g_api_table.ScriptCacheGetHeight(hdc, psc, tmHeight);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringAnalyse(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void* pString, int32_t cString, int32_t cGlyphs, int32_t iCharset, uint32_t dwFlags, int32_t iReqWidth, win32::Windows::Win32::Globalization::SCRIPT_CONTROL* psControl, win32::Windows::Win32::Globalization::SCRIPT_STATE* psState, int32_t* piDx, win32::Windows::Win32::Globalization::SCRIPT_TABDEF* pTabdef, uint8_t* pbInClass, void** pssa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(pString);
        ORBIT_TRACK_PARAM(cString);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(iCharset);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(iReqWidth);
        ORBIT_TRACK_PARAM(psControl);
        ORBIT_TRACK_PARAM(psState);
        ORBIT_TRACK_PARAM(piDx);
        ORBIT_TRACK_PARAM(pTabdef);
        ORBIT_TRACK_PARAM(pbInClass);
        ORBIT_TRACK_PARAM(pssa);

        auto win32_impl_result = g_api_table.ScriptStringAnalyse(hdc, pString, cString, cGlyphs, iCharset, dwFlags, iReqWidth, psControl, psState, piDx, pTabdef, pbInClass, pssa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringFree(void** pssa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pssa);

        auto win32_impl_result = g_api_table.ScriptStringFree(pssa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::SIZE* __stdcall ORBIT_IMPL_ScriptString_pSize(void* ssa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);

        auto win32_impl_result = g_api_table.ScriptString_pSize(ssa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t* __stdcall ORBIT_IMPL_ScriptString_pcOutChars(void* ssa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);

        auto win32_impl_result = g_api_table.ScriptString_pcOutChars(ssa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::SCRIPT_LOGATTR* __stdcall ORBIT_IMPL_ScriptString_pLogAttr(void* ssa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);

        auto win32_impl_result = g_api_table.ScriptString_pLogAttr(ssa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringGetOrder(void* ssa, uint32_t* puOrder) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);
        ORBIT_TRACK_PARAM(puOrder);

        auto win32_impl_result = g_api_table.ScriptStringGetOrder(ssa, puOrder);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringCPtoX(void* ssa, int32_t icp, win32::Windows::Win32::Foundation::BOOL fTrailing, int32_t* pX) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);
        ORBIT_TRACK_PARAM(icp);
        ORBIT_TRACK_PARAM(fTrailing);
        ORBIT_TRACK_PARAM(pX);

        auto win32_impl_result = g_api_table.ScriptStringCPtoX(ssa, icp, fTrailing, pX);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringXtoCP(void* ssa, int32_t iX, int32_t* piCh, int32_t* piTrailing) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);
        ORBIT_TRACK_PARAM(iX);
        ORBIT_TRACK_PARAM(piCh);
        ORBIT_TRACK_PARAM(piTrailing);

        auto win32_impl_result = g_api_table.ScriptStringXtoCP(ssa, iX, piCh, piTrailing);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringGetLogicalWidths(void* ssa, int32_t* piDx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);
        ORBIT_TRACK_PARAM(piDx);

        auto win32_impl_result = g_api_table.ScriptStringGetLogicalWidths(ssa, piDx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringValidate(void* ssa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);

        auto win32_impl_result = g_api_table.ScriptStringValidate(ssa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptStringOut(void* ssa, int32_t iX, int32_t iY, win32::Windows::Win32::Graphics::Gdi::ETO_OPTIONS uOptions, win32::Windows::Win32::Foundation::RECT* prc, int32_t iMinSel, int32_t iMaxSel, win32::Windows::Win32::Foundation::BOOL fDisabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ssa);
        ORBIT_TRACK_PARAM(iX);
        ORBIT_TRACK_PARAM(iY);
        ORBIT_TRACK_PARAM(uOptions);
        ORBIT_TRACK_PARAM(prc);
        ORBIT_TRACK_PARAM(iMinSel);
        ORBIT_TRACK_PARAM(iMaxSel);
        ORBIT_TRACK_PARAM(fDisabled);

        auto win32_impl_result = g_api_table.ScriptStringOut(ssa, iX, iY, uOptions, prc, iMinSel, iMaxSel, fDisabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptIsComplex(win32::Windows::Win32::Foundation::PWSTR pwcInChars, int32_t cInChars, win32::Windows::Win32::Globalization::SCRIPT_IS_COMPLEX_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwcInChars);
        ORBIT_TRACK_PARAM(cInChars);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.ScriptIsComplex(pwcInChars, cInChars, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptRecordDigitSubstitution(uint32_t Locale, win32::Windows::Win32::Globalization::SCRIPT_DIGITSUBSTITUTE* psds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Locale);
        ORBIT_TRACK_PARAM(psds);

        auto win32_impl_result = g_api_table.ScriptRecordDigitSubstitution(Locale, psds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptApplyDigitSubstitution(win32::Windows::Win32::Globalization::SCRIPT_DIGITSUBSTITUTE* psds, win32::Windows::Win32::Globalization::SCRIPT_CONTROL* psc, win32::Windows::Win32::Globalization::SCRIPT_STATE* pss) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(psds);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(pss);

        auto win32_impl_result = g_api_table.ScriptApplyDigitSubstitution(psds, psc, pss);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptShapeOpenType(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, int32_t* rcRangeChars, win32::Windows::Win32::Globalization::textrange_properties** rpRangeProperties, int32_t cRanges, win32::Windows::Win32::Foundation::PWSTR pwcChars, int32_t cChars, int32_t cMaxGlyphs, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::script_charprop* pCharProps, uint16_t* pwOutGlyphs, win32::Windows::Win32::Globalization::script_glyphprop* pOutGlyphProps, int32_t* pcGlyphs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(tagLangSys);
        ORBIT_TRACK_PARAM(rcRangeChars);
        ORBIT_TRACK_PARAM(rpRangeProperties);
        ORBIT_TRACK_PARAM(cRanges);
        ORBIT_TRACK_PARAM(pwcChars);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(cMaxGlyphs);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(pCharProps);
        ORBIT_TRACK_PARAM(pwOutGlyphs);
        ORBIT_TRACK_PARAM(pOutGlyphProps);
        ORBIT_TRACK_PARAM(pcGlyphs);

        auto win32_impl_result = g_api_table.ScriptShapeOpenType(hdc, psc, psa, tagScript, tagLangSys, rcRangeChars, rpRangeProperties, cRanges, pwcChars, cChars, cMaxGlyphs, pwLogClust, pCharProps, pwOutGlyphs, pOutGlyphProps, pcGlyphs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptPlaceOpenType(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, int32_t* rcRangeChars, win32::Windows::Win32::Globalization::textrange_properties** rpRangeProperties, int32_t cRanges, win32::Windows::Win32::Foundation::PWSTR pwcChars, uint16_t* pwLogClust, win32::Windows::Win32::Globalization::script_charprop* pCharProps, int32_t cChars, uint16_t* pwGlyphs, win32::Windows::Win32::Globalization::script_glyphprop* pGlyphProps, int32_t cGlyphs, int32_t* piAdvance, win32::Windows::Win32::Globalization::GOFFSET* pGoffset, win32::Windows::Win32::Graphics::Gdi::ABC* pABC) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(tagLangSys);
        ORBIT_TRACK_PARAM(rcRangeChars);
        ORBIT_TRACK_PARAM(rpRangeProperties);
        ORBIT_TRACK_PARAM(cRanges);
        ORBIT_TRACK_PARAM(pwcChars);
        ORBIT_TRACK_PARAM(pwLogClust);
        ORBIT_TRACK_PARAM(pCharProps);
        ORBIT_TRACK_PARAM(cChars);
        ORBIT_TRACK_PARAM(pwGlyphs);
        ORBIT_TRACK_PARAM(pGlyphProps);
        ORBIT_TRACK_PARAM(cGlyphs);
        ORBIT_TRACK_PARAM(piAdvance);
        ORBIT_TRACK_PARAM(pGoffset);
        ORBIT_TRACK_PARAM(pABC);

        auto win32_impl_result = g_api_table.ScriptPlaceOpenType(hdc, psc, psa, tagScript, tagLangSys, rcRangeChars, rpRangeProperties, cRanges, pwcChars, pwLogClust, pCharProps, cChars, pwGlyphs, pGlyphProps, cGlyphs, piAdvance, pGoffset, pABC);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptItemizeOpenType(win32::Windows::Win32::Foundation::PWSTR pwcInChars, int32_t cInChars, int32_t cMaxItems, win32::Windows::Win32::Globalization::SCRIPT_CONTROL* psControl, win32::Windows::Win32::Globalization::SCRIPT_STATE* psState, win32::Windows::Win32::Globalization::SCRIPT_ITEM* pItems, uint32_t* pScriptTags, int32_t* pcItems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwcInChars);
        ORBIT_TRACK_PARAM(cInChars);
        ORBIT_TRACK_PARAM(cMaxItems);
        ORBIT_TRACK_PARAM(psControl);
        ORBIT_TRACK_PARAM(psState);
        ORBIT_TRACK_PARAM(pItems);
        ORBIT_TRACK_PARAM(pScriptTags);
        ORBIT_TRACK_PARAM(pcItems);

        auto win32_impl_result = g_api_table.ScriptItemizeOpenType(pwcInChars, cInChars, cMaxItems, psControl, psState, pItems, pScriptTags, pcItems);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetFontScriptTags(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, int32_t cMaxTags, uint32_t* pScriptTags, int32_t* pcTags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(cMaxTags);
        ORBIT_TRACK_PARAM(pScriptTags);
        ORBIT_TRACK_PARAM(pcTags);

        auto win32_impl_result = g_api_table.ScriptGetFontScriptTags(hdc, psc, psa, cMaxTags, pScriptTags, pcTags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetFontLanguageTags(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, int32_t cMaxTags, uint32_t* pLangsysTags, int32_t* pcTags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(cMaxTags);
        ORBIT_TRACK_PARAM(pLangsysTags);
        ORBIT_TRACK_PARAM(pcTags);

        auto win32_impl_result = g_api_table.ScriptGetFontLanguageTags(hdc, psc, psa, tagScript, cMaxTags, pLangsysTags, pcTags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetFontFeatureTags(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, int32_t cMaxTags, uint32_t* pFeatureTags, int32_t* pcTags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(tagLangSys);
        ORBIT_TRACK_PARAM(cMaxTags);
        ORBIT_TRACK_PARAM(pFeatureTags);
        ORBIT_TRACK_PARAM(pcTags);

        auto win32_impl_result = g_api_table.ScriptGetFontFeatureTags(hdc, psc, psa, tagScript, tagLangSys, cMaxTags, pFeatureTags, pcTags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptGetFontAlternateGlyphs(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, uint32_t tagFeature, uint16_t wGlyphId, int32_t cMaxAlternates, uint16_t* pAlternateGlyphs, int32_t* pcAlternates) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(tagLangSys);
        ORBIT_TRACK_PARAM(tagFeature);
        ORBIT_TRACK_PARAM(wGlyphId);
        ORBIT_TRACK_PARAM(cMaxAlternates);
        ORBIT_TRACK_PARAM(pAlternateGlyphs);
        ORBIT_TRACK_PARAM(pcAlternates);

        auto win32_impl_result = g_api_table.ScriptGetFontAlternateGlyphs(hdc, psc, psa, tagScript, tagLangSys, tagFeature, wGlyphId, cMaxAlternates, pAlternateGlyphs, pcAlternates);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptSubstituteSingleGlyph(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, uint32_t tagFeature, int32_t lParameter, uint16_t wGlyphId, uint16_t* pwOutGlyphId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(tagLangSys);
        ORBIT_TRACK_PARAM(tagFeature);
        ORBIT_TRACK_PARAM(lParameter);
        ORBIT_TRACK_PARAM(wGlyphId);
        ORBIT_TRACK_PARAM(pwOutGlyphId);

        auto win32_impl_result = g_api_table.ScriptSubstituteSingleGlyph(hdc, psc, psa, tagScript, tagLangSys, tagFeature, lParameter, wGlyphId, pwOutGlyphId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScriptPositionSingleGlyph(win32::Windows::Win32::Graphics::Gdi::HDC hdc, void** psc, win32::Windows::Win32::Globalization::SCRIPT_ANALYSIS* psa, uint32_t tagScript, uint32_t tagLangSys, uint32_t tagFeature, int32_t lParameter, uint16_t wGlyphId, int32_t iAdvance, win32::Windows::Win32::Globalization::GOFFSET GOffset, int32_t* piOutAdvance, win32::Windows::Win32::Globalization::GOFFSET* pOutGoffset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(psc);
        ORBIT_TRACK_PARAM(psa);
        ORBIT_TRACK_PARAM(tagScript);
        ORBIT_TRACK_PARAM(tagLangSys);
        ORBIT_TRACK_PARAM(tagFeature);
        ORBIT_TRACK_PARAM(lParameter);
        ORBIT_TRACK_PARAM(wGlyphId);
        ORBIT_TRACK_PARAM(iAdvance);
        ORBIT_TRACK_PARAM(GOffset);
        ORBIT_TRACK_PARAM(piOutAdvance);
        ORBIT_TRACK_PARAM(pOutGoffset);

        auto win32_impl_result = g_api_table.ScriptPositionSingleGlyph(hdc, psc, psa, tagScript, tagLangSys, tagFeature, lParameter, wGlyphId, iAdvance, GOffset, piOutAdvance, pOutGoffset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utf8_nextCharSafeBody(uint8_t* s, int32_t* pi, int32_t length, int32_t c, int8_t strict) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(pi);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(strict);

        auto win32_impl_result = g_api_table.utf8_nextCharSafeBody(s, pi, length, c, strict);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utf8_appendCharSafeBody(uint8_t* s, int32_t i, int32_t length, int32_t c, int8_t* pIsError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(i);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(pIsError);

        auto win32_impl_result = g_api_table.utf8_appendCharSafeBody(s, i, length, c, pIsError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utf8_prevCharSafeBody(uint8_t* s, int32_t start, int32_t* pi, int32_t c, int8_t strict) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(pi);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(strict);

        auto win32_impl_result = g_api_table.utf8_prevCharSafeBody(s, start, pi, c, strict);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utf8_back1SafeBody(uint8_t* s, int32_t start, int32_t i) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(i);

        auto win32_impl_result = g_api_table.utf8_back1SafeBody(s, start, i);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_versionFromString(uint8_t* versionArray, win32::Windows::Win32::Foundation::PSTR versionString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(versionArray);
        ORBIT_TRACK_PARAM(versionString);

        g_api_table.u_versionFromString(versionArray, versionString);
        
    }

    void __stdcall ORBIT_IMPL_u_versionFromUString(uint8_t* versionArray, uint16_t* versionString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(versionArray);
        ORBIT_TRACK_PARAM(versionString);

        g_api_table.u_versionFromUString(versionArray, versionString);
        
    }

    void __stdcall ORBIT_IMPL_u_versionToString(uint8_t* versionArray, win32::Windows::Win32::Foundation::PSTR versionString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(versionArray);
        ORBIT_TRACK_PARAM(versionString);

        g_api_table.u_versionToString(versionArray, versionString);
        
    }

    void __stdcall ORBIT_IMPL_u_getVersion(uint8_t* versionArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(versionArray);

        g_api_table.u_getVersion(versionArray);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_errorName(win32::Windows::Win32::Globalization::UErrorCode code) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(code);

        auto win32_impl_result = g_api_table.u_errorName(code);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utrace_setLevel(int32_t traceLevel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(traceLevel);

        g_api_table.utrace_setLevel(traceLevel);
        
    }

    int32_t __stdcall ORBIT_IMPL_utrace_getLevel() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.utrace_getLevel();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utrace_setFunctions(void* context, win32::Windows::Win32::Globalization::UTraceEntry* e, win32::Windows::Win32::Globalization::UTraceExit* x, win32::Windows::Win32::Globalization::UTraceData* d) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(e);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(d);

        g_api_table.utrace_setFunctions(context, e, x, d);
        
    }

    void __stdcall ORBIT_IMPL_utrace_getFunctions(void** context, win32::Windows::Win32::Globalization::UTraceEntry** e, win32::Windows::Win32::Globalization::UTraceExit** x, win32::Windows::Win32::Globalization::UTraceData** d) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(e);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(d);

        g_api_table.utrace_getFunctions(context, e, x, d);
        
    }

    int32_t __stdcall ORBIT_IMPL_utrace_vformat(win32::Windows::Win32::Foundation::PSTR outBuf, int32_t capacity, int32_t indent, win32::Windows::Win32::Foundation::PSTR fmt, int8_t* args) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(outBuf);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(indent);
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(args);

        auto win32_impl_result = g_api_table.utrace_vformat(outBuf, capacity, indent, fmt, args);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utrace_format(win32::Windows::Win32::Foundation::PSTR outBuf, int32_t capacity, int32_t indent, win32::Windows::Win32::Foundation::PSTR fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(outBuf);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(indent);
        ORBIT_TRACK_PARAM(fmt);

        auto win32_impl_result = g_api_table.utrace_format(outBuf, capacity, indent, fmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_utrace_functionName(int32_t fnNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fnNumber);

        auto win32_impl_result = g_api_table.utrace_functionName(fnNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_shapeArabic(uint16_t* source, int32_t sourceLength, uint16_t* dest, int32_t destSize, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destSize);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_shapeArabic(source, sourceLength, dest, destSize, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uscript_getCode(win32::Windows::Win32::Foundation::PSTR nameOrAbbrOrLocale, win32::Windows::Win32::Globalization::UScriptCode* fillIn, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nameOrAbbrOrLocale);
        ORBIT_TRACK_PARAM(fillIn);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uscript_getCode(nameOrAbbrOrLocale, fillIn, capacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uscript_getName(win32::Windows::Win32::Globalization::UScriptCode scriptCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(scriptCode);

        auto win32_impl_result = g_api_table.uscript_getName(scriptCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uscript_getShortName(win32::Windows::Win32::Globalization::UScriptCode scriptCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(scriptCode);

        auto win32_impl_result = g_api_table.uscript_getShortName(scriptCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UScriptCode __stdcall ORBIT_IMPL_uscript_getScript(int32_t codepoint, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(codepoint);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uscript_getScript(codepoint, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uscript_hasScript(int32_t c, win32::Windows::Win32::Globalization::UScriptCode sc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(sc);

        auto win32_impl_result = g_api_table.uscript_hasScript(c, sc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uscript_getScriptExtensions(int32_t c, win32::Windows::Win32::Globalization::UScriptCode* scripts, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* errorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(scripts);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(errorCode);

        auto win32_impl_result = g_api_table.uscript_getScriptExtensions(c, scripts, capacity, errorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uscript_getSampleString(win32::Windows::Win32::Globalization::UScriptCode script, uint16_t* dest, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(script);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uscript_getSampleString(script, dest, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UScriptUsage __stdcall ORBIT_IMPL_uscript_getUsage(win32::Windows::Win32::Globalization::UScriptCode script) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(script);

        auto win32_impl_result = g_api_table.uscript_getUsage(script);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uscript_isRightToLeft(win32::Windows::Win32::Globalization::UScriptCode script) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(script);

        auto win32_impl_result = g_api_table.uscript_isRightToLeft(script);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uscript_breaksBetweenLetters(win32::Windows::Win32::Globalization::UScriptCode script) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(script);

        auto win32_impl_result = g_api_table.uscript_breaksBetweenLetters(script);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uscript_isCased(win32::Windows::Win32::Globalization::UScriptCode script) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(script);

        auto win32_impl_result = g_api_table.uscript_isCased(script);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uiter_current32(win32::Windows::Win32::Globalization::UCharIterator* iter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);

        auto win32_impl_result = g_api_table.uiter_current32(iter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uiter_next32(win32::Windows::Win32::Globalization::UCharIterator* iter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);

        auto win32_impl_result = g_api_table.uiter_next32(iter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uiter_previous32(win32::Windows::Win32::Globalization::UCharIterator* iter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);

        auto win32_impl_result = g_api_table.uiter_previous32(iter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_uiter_getState(win32::Windows::Win32::Globalization::UCharIterator* iter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);

        auto win32_impl_result = g_api_table.uiter_getState(iter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uiter_setState(win32::Windows::Win32::Globalization::UCharIterator* iter, uint32_t state, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);
        ORBIT_TRACK_PARAM(state);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.uiter_setState(iter, state, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_uiter_setString(win32::Windows::Win32::Globalization::UCharIterator* iter, uint16_t* s, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);

        g_api_table.uiter_setString(iter, s, length);
        
    }

    void __stdcall ORBIT_IMPL_uiter_setUTF16BE(win32::Windows::Win32::Globalization::UCharIterator* iter, win32::Windows::Win32::Foundation::PSTR s, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);

        g_api_table.uiter_setUTF16BE(iter, s, length);
        
    }

    void __stdcall ORBIT_IMPL_uiter_setUTF8(win32::Windows::Win32::Globalization::UCharIterator* iter, win32::Windows::Win32::Foundation::PSTR s, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);

        g_api_table.uiter_setUTF8(iter, s, length);
        
    }

    void __stdcall ORBIT_IMPL_uenum_close(win32::Windows::Win32::Globalization::UEnumeration* en) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(en);

        g_api_table.uenum_close(en);
        
    }

    int32_t __stdcall ORBIT_IMPL_uenum_count(win32::Windows::Win32::Globalization::UEnumeration* en, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(en);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uenum_count(en, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_uenum_unext(win32::Windows::Win32::Globalization::UEnumeration* en, int32_t* resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(en);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uenum_unext(en, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uenum_next(win32::Windows::Win32::Globalization::UEnumeration* en, int32_t* resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(en);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uenum_next(en, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uenum_reset(win32::Windows::Win32::Globalization::UEnumeration* en, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(en);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uenum_reset(en, status);
        
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uenum_openUCharStringsEnumeration(uint16_t** strings, int32_t count, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strings);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.uenum_openUCharStringsEnumeration(strings, count, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uenum_openCharStringsEnumeration(int8_t** strings, int32_t count, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strings);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.uenum_openCharStringsEnumeration(strings, count, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_getDefault() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.uloc_getDefault();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uloc_setDefault(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uloc_setDefault(localeID, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getLanguage(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR language, int32_t languageCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(language);
        ORBIT_TRACK_PARAM(languageCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getLanguage(localeID, language, languageCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getScript(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR script, int32_t scriptCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(script);
        ORBIT_TRACK_PARAM(scriptCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getScript(localeID, script, scriptCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getCountry(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR country, int32_t countryCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(country);
        ORBIT_TRACK_PARAM(countryCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getCountry(localeID, country, countryCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getVariant(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR variant, int32_t variantCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(variant);
        ORBIT_TRACK_PARAM(variantCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getVariant(localeID, variant, variantCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getName(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR name, int32_t nameCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(nameCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getName(localeID, name, nameCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_canonicalize(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR name, int32_t nameCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(nameCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_canonicalize(localeID, name, nameCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_getISO3Language(win32::Windows::Win32::Foundation::PSTR localeID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);

        auto win32_impl_result = g_api_table.uloc_getISO3Language(localeID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_getISO3Country(win32::Windows::Win32::Foundation::PSTR localeID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);

        auto win32_impl_result = g_api_table.uloc_getISO3Country(localeID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_uloc_getLCID(win32::Windows::Win32::Foundation::PSTR localeID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);

        auto win32_impl_result = g_api_table.uloc_getLCID(localeID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayLanguage(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* language, int32_t languageCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(language);
        ORBIT_TRACK_PARAM(languageCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getDisplayLanguage(locale, displayLocale, language, languageCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayScript(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* script, int32_t scriptCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(script);
        ORBIT_TRACK_PARAM(scriptCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getDisplayScript(locale, displayLocale, script, scriptCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayCountry(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* country, int32_t countryCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(country);
        ORBIT_TRACK_PARAM(countryCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getDisplayCountry(locale, displayLocale, country, countryCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayVariant(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* variant, int32_t variantCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(variant);
        ORBIT_TRACK_PARAM(variantCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getDisplayVariant(locale, displayLocale, variant, variantCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayKeyword(win32::Windows::Win32::Foundation::PSTR keyword, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getDisplayKeyword(keyword, displayLocale, dest, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayKeywordValue(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Foundation::PSTR keyword, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getDisplayKeywordValue(locale, keyword, displayLocale, dest, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getDisplayName(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR inLocaleID, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(inLocaleID);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getDisplayName(localeID, inLocaleID, result, maxResultSize, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_getAvailable(int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.uloc_getAvailable(n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.uloc_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uloc_openAvailableByType(win32::Windows::Win32::Globalization::ULocAvailableType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_openAvailableByType(type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t** __stdcall ORBIT_IMPL_uloc_getISOLanguages() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.uloc_getISOLanguages();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t** __stdcall ORBIT_IMPL_uloc_getISOCountries() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.uloc_getISOCountries();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getParent(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR parent, int32_t parentCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(parent);
        ORBIT_TRACK_PARAM(parentCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getParent(localeID, parent, parentCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getBaseName(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR name, int32_t nameCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(nameCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_getBaseName(localeID, name, nameCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uloc_openKeywords(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_openKeywords(localeID, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getKeywordValue(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR keywordName, win32::Windows::Win32::Foundation::PSTR buffer, int32_t bufferCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(keywordName);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getKeywordValue(localeID, keywordName, buffer, bufferCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_setKeywordValue(win32::Windows::Win32::Foundation::PSTR keywordName, win32::Windows::Win32::Foundation::PSTR keywordValue, win32::Windows::Win32::Foundation::PSTR buffer, int32_t bufferCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keywordName);
        ORBIT_TRACK_PARAM(keywordValue);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_setKeywordValue(keywordName, keywordValue, buffer, bufferCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uloc_isRightToLeft(win32::Windows::Win32::Foundation::PSTR locale) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);

        auto win32_impl_result = g_api_table.uloc_isRightToLeft(locale);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::ULayoutType __stdcall ORBIT_IMPL_uloc_getCharacterOrientation(win32::Windows::Win32::Foundation::PSTR localeId, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeId);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getCharacterOrientation(localeId, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::ULayoutType __stdcall ORBIT_IMPL_uloc_getLineOrientation(win32::Windows::Win32::Foundation::PSTR localeId, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeId);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getLineOrientation(localeId, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_acceptLanguageFromHTTP(win32::Windows::Win32::Foundation::PSTR result, int32_t resultAvailable, win32::Windows::Win32::Globalization::UAcceptResult* outResult, win32::Windows::Win32::Foundation::PSTR httpAcceptLanguage, win32::Windows::Win32::Globalization::UEnumeration* availableLocales, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultAvailable);
        ORBIT_TRACK_PARAM(outResult);
        ORBIT_TRACK_PARAM(httpAcceptLanguage);
        ORBIT_TRACK_PARAM(availableLocales);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_acceptLanguageFromHTTP(result, resultAvailable, outResult, httpAcceptLanguage, availableLocales, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_acceptLanguage(win32::Windows::Win32::Foundation::PSTR result, int32_t resultAvailable, win32::Windows::Win32::Globalization::UAcceptResult* outResult, int8_t** acceptList, int32_t acceptListCount, win32::Windows::Win32::Globalization::UEnumeration* availableLocales, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultAvailable);
        ORBIT_TRACK_PARAM(outResult);
        ORBIT_TRACK_PARAM(acceptList);
        ORBIT_TRACK_PARAM(acceptListCount);
        ORBIT_TRACK_PARAM(availableLocales);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_acceptLanguage(result, resultAvailable, outResult, acceptList, acceptListCount, availableLocales, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_getLocaleForLCID(uint32_t hostID, win32::Windows::Win32::Foundation::PSTR locale, int32_t localeCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hostID);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(localeCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uloc_getLocaleForLCID(hostID, locale, localeCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_addLikelySubtags(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR maximizedLocaleID, int32_t maximizedLocaleIDCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(maximizedLocaleID);
        ORBIT_TRACK_PARAM(maximizedLocaleIDCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_addLikelySubtags(localeID, maximizedLocaleID, maximizedLocaleIDCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_minimizeSubtags(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR minimizedLocaleID, int32_t minimizedLocaleIDCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(minimizedLocaleID);
        ORBIT_TRACK_PARAM(minimizedLocaleIDCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_minimizeSubtags(localeID, minimizedLocaleID, minimizedLocaleIDCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_forLanguageTag(win32::Windows::Win32::Foundation::PSTR langtag, win32::Windows::Win32::Foundation::PSTR localeID, int32_t localeIDCapacity, int32_t* parsedLength, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(langtag);
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(localeIDCapacity);
        ORBIT_TRACK_PARAM(parsedLength);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_forLanguageTag(langtag, localeID, localeIDCapacity, parsedLength, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uloc_toLanguageTag(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Foundation::PSTR langtag, int32_t langtagCapacity, int8_t strict, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(langtag);
        ORBIT_TRACK_PARAM(langtagCapacity);
        ORBIT_TRACK_PARAM(strict);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.uloc_toLanguageTag(localeID, langtag, langtagCapacity, strict, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_toUnicodeLocaleKey(win32::Windows::Win32::Foundation::PSTR keyword) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keyword);

        auto win32_impl_result = g_api_table.uloc_toUnicodeLocaleKey(keyword);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_toUnicodeLocaleType(win32::Windows::Win32::Foundation::PSTR keyword, win32::Windows::Win32::Foundation::PSTR value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.uloc_toUnicodeLocaleType(keyword, value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_toLegacyKey(win32::Windows::Win32::Foundation::PSTR keyword) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keyword);

        auto win32_impl_result = g_api_table.uloc_toLegacyKey(keyword);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uloc_toLegacyType(win32::Windows::Win32::Foundation::PSTR keyword, win32::Windows::Win32::Foundation::PSTR value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.uloc_toLegacyType(keyword, value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_ures_open(win32::Windows::Win32::Foundation::PSTR packageName, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageName);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_open(packageName, locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_ures_openDirect(win32::Windows::Win32::Foundation::PSTR packageName, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageName);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_openDirect(packageName, locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_ures_openU(uint16_t* packageName, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageName);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_openU(packageName, locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ures_close(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);

        g_api_table.ures_close(resourceBundle);
        
    }

    void __stdcall ORBIT_IMPL_ures_getVersion(win32::Windows::Win32::Globalization::UResourceBundle* resB, uint8_t* versionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resB);
        ORBIT_TRACK_PARAM(versionInfo);

        g_api_table.ures_getVersion(resB, versionInfo);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ures_getLocaleByType(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, win32::Windows::Win32::Globalization::ULocDataLocaleType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getLocaleByType(resourceBundle, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ures_getString(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getString(resourceBundle, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ures_getUTF8String(win32::Windows::Win32::Globalization::UResourceBundle* resB, win32::Windows::Win32::Foundation::PSTR dest, int32_t* length, int8_t forceCopy, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resB);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(forceCopy);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getUTF8String(resB, dest, length, forceCopy, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t* __stdcall ORBIT_IMPL_ures_getBinary(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getBinary(resourceBundle, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t* __stdcall ORBIT_IMPL_ures_getIntVector(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getIntVector(resourceBundle, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ures_getUInt(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getUInt(resourceBundle, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ures_getInt(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getInt(resourceBundle, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ures_getSize(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);

        auto win32_impl_result = g_api_table.ures_getSize(resourceBundle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResType __stdcall ORBIT_IMPL_ures_getType(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);

        auto win32_impl_result = g_api_table.ures_getType(resourceBundle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ures_getKey(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);

        auto win32_impl_result = g_api_table.ures_getKey(resourceBundle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ures_resetIterator(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);

        g_api_table.ures_resetIterator(resourceBundle);
        
    }

    int8_t __stdcall ORBIT_IMPL_ures_hasNext(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);

        auto win32_impl_result = g_api_table.ures_hasNext(resourceBundle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_ures_getNextResource(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, win32::Windows::Win32::Globalization::UResourceBundle* fillIn, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(fillIn);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getNextResource(resourceBundle, fillIn, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ures_getNextString(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, int32_t* len, int8_t** key, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getNextString(resourceBundle, len, key, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_ures_getByIndex(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, int32_t indexR, win32::Windows::Win32::Globalization::UResourceBundle* fillIn, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(indexR);
        ORBIT_TRACK_PARAM(fillIn);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getByIndex(resourceBundle, indexR, fillIn, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ures_getStringByIndex(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, int32_t indexS, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(indexS);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getStringByIndex(resourceBundle, indexS, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ures_getUTF8StringByIndex(win32::Windows::Win32::Globalization::UResourceBundle* resB, int32_t stringIndex, win32::Windows::Win32::Foundation::PSTR dest, int32_t* pLength, int8_t forceCopy, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resB);
        ORBIT_TRACK_PARAM(stringIndex);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(pLength);
        ORBIT_TRACK_PARAM(forceCopy);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getUTF8StringByIndex(resB, stringIndex, dest, pLength, forceCopy, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_ures_getByKey(win32::Windows::Win32::Globalization::UResourceBundle* resourceBundle, win32::Windows::Win32::Foundation::PSTR key, win32::Windows::Win32::Globalization::UResourceBundle* fillIn, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resourceBundle);
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(fillIn);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getByKey(resourceBundle, key, fillIn, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ures_getStringByKey(win32::Windows::Win32::Globalization::UResourceBundle* resB, win32::Windows::Win32::Foundation::PSTR key, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resB);
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getStringByKey(resB, key, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ures_getUTF8StringByKey(win32::Windows::Win32::Globalization::UResourceBundle* resB, win32::Windows::Win32::Foundation::PSTR key, win32::Windows::Win32::Foundation::PSTR dest, int32_t* pLength, int8_t forceCopy, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resB);
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(pLength);
        ORBIT_TRACK_PARAM(forceCopy);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_getUTF8StringByKey(resB, key, dest, pLength, forceCopy, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ures_openAvailableLocales(win32::Windows::Win32::Foundation::PSTR packageName, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageName);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ures_openAvailableLocales(packageName, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::ULocaleDisplayNames* __stdcall ORBIT_IMPL_uldn_open(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UDialectHandling dialectHandling, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(dialectHandling);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_open(locale, dialectHandling, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uldn_close(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);

        g_api_table.uldn_close(ldn);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uldn_getLocale(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);

        auto win32_impl_result = g_api_table.uldn_getLocale(ldn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UDialectHandling __stdcall ORBIT_IMPL_uldn_getDialectHandling(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);

        auto win32_impl_result = g_api_table.uldn_getDialectHandling(ldn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_localeDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR locale, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_localeDisplayName(ldn, locale, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_languageDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR lang, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(lang);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_languageDisplayName(ldn, lang, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_scriptDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR script, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(script);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_scriptDisplayName(ldn, script, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_scriptCodeDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Globalization::UScriptCode scriptCode, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(scriptCode);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_scriptCodeDisplayName(ldn, scriptCode, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_regionDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR region, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(region);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_regionDisplayName(ldn, region, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_variantDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR variant, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(variant);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_variantDisplayName(ldn, variant, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_keyDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR key, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_keyDisplayName(ldn, key, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uldn_keyValueDisplayName(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Foundation::PSTR key, win32::Windows::Win32::Foundation::PSTR value, uint16_t* result, int32_t maxResultSize, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(maxResultSize);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_keyValueDisplayName(ldn, key, value, result, maxResultSize, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::ULocaleDisplayNames* __stdcall ORBIT_IMPL_uldn_openForContext(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UDisplayContext* contexts, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(contexts);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_openForContext(locale, contexts, length, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UDisplayContext __stdcall ORBIT_IMPL_uldn_getContext(win32::Windows::Win32::Globalization::ULocaleDisplayNames* ldn, win32::Windows::Win32::Globalization::UDisplayContextType type, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ldn);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uldn_getContext(ldn, type, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucurr_forLocale(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* buff, int32_t buffCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(buff);
        ORBIT_TRACK_PARAM(buffCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_forLocale(locale, buff, buffCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_ucurr_register(uint16_t* isoCode, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(isoCode);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucurr_register(isoCode, locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucurr_unregister(void* key, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucurr_unregister(key, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ucurr_getName(uint16_t* currency, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UCurrNameStyle nameStyle, int8_t* isChoiceFormat, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(nameStyle);
        ORBIT_TRACK_PARAM(isChoiceFormat);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_getName(currency, locale, nameStyle, isChoiceFormat, len, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ucurr_getPluralName(uint16_t* currency, win32::Windows::Win32::Foundation::PSTR locale, int8_t* isChoiceFormat, win32::Windows::Win32::Foundation::PSTR pluralCount, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(isChoiceFormat);
        ORBIT_TRACK_PARAM(pluralCount);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_getPluralName(currency, locale, isChoiceFormat, pluralCount, len, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucurr_getDefaultFractionDigits(uint16_t* currency, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_getDefaultFractionDigits(currency, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucurr_getDefaultFractionDigitsForUsage(uint16_t* currency, win32::Windows::Win32::Globalization::UCurrencyUsage usage, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(usage);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_getDefaultFractionDigitsForUsage(currency, usage, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_ucurr_getRoundingIncrement(uint16_t* currency, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_getRoundingIncrement(currency, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_ucurr_getRoundingIncrementForUsage(uint16_t* currency, win32::Windows::Win32::Globalization::UCurrencyUsage usage, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(usage);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_getRoundingIncrementForUsage(currency, usage, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucurr_openISOCurrencies(uint32_t currType, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currType);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucurr_openISOCurrencies(currType, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucurr_isAvailable(uint16_t* isoCode, double from, double to, win32::Windows::Win32::Globalization::UErrorCode* errorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(isoCode);
        ORBIT_TRACK_PARAM(from);
        ORBIT_TRACK_PARAM(to);
        ORBIT_TRACK_PARAM(errorCode);

        auto win32_impl_result = g_api_table.ucurr_isAvailable(isoCode, from, to, errorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucurr_countCurrencies(win32::Windows::Win32::Foundation::PSTR locale, double date, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(date);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_countCurrencies(locale, date, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucurr_forLocaleAndDate(win32::Windows::Win32::Foundation::PSTR locale, double date, int32_t index, uint16_t* buff, int32_t buffCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(date);
        ORBIT_TRACK_PARAM(index);
        ORBIT_TRACK_PARAM(buff);
        ORBIT_TRACK_PARAM(buffCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucurr_forLocaleAndDate(locale, date, index, buff, buffCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucurr_getKeywordValuesForLocale(win32::Windows::Win32::Foundation::PSTR key, win32::Windows::Win32::Foundation::PSTR locale, int8_t commonlyUsed, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(commonlyUsed);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucurr_getKeywordValuesForLocale(key, locale, commonlyUsed, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucurr_getNumericCode(uint16_t* currency) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(currency);

        auto win32_impl_result = g_api_table.ucurr_getNumericCode(currency);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ucpmap_get(win32::Windows::Win32::Globalization::UCPMap* map, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.ucpmap_get(map, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucpmap_getRange(win32::Windows::Win32::Globalization::UCPMap* map, int32_t start, win32::Windows::Win32::Globalization::UCPMapRangeOption option, uint32_t surrogateValue, win32::Windows::Win32::Globalization::UCPMapValueFilter** filter, void* context, uint32_t* pValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(option);
        ORBIT_TRACK_PARAM(surrogateValue);
        ORBIT_TRACK_PARAM(filter);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(pValue);

        auto win32_impl_result = g_api_table.ucpmap_getRange(map, start, option, surrogateValue, filter, context, pValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCPTrie* __stdcall ORBIT_IMPL_ucptrie_openFromBinary(win32::Windows::Win32::Globalization::UCPTrieType type, win32::Windows::Win32::Globalization::UCPTrieValueWidth valueWidth, void* data, int32_t length, int32_t* pActualLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(valueWidth);
        ORBIT_TRACK_PARAM(data);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(pActualLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucptrie_openFromBinary(type, valueWidth, data, length, pActualLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucptrie_close(win32::Windows::Win32::Globalization::UCPTrie* trie) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);

        g_api_table.ucptrie_close(trie);
        
    }

    win32::Windows::Win32::Globalization::UCPTrieType __stdcall ORBIT_IMPL_ucptrie_getType(win32::Windows::Win32::Globalization::UCPTrie* trie) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);

        auto win32_impl_result = g_api_table.ucptrie_getType(trie);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCPTrieValueWidth __stdcall ORBIT_IMPL_ucptrie_getValueWidth(win32::Windows::Win32::Globalization::UCPTrie* trie) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);

        auto win32_impl_result = g_api_table.ucptrie_getValueWidth(trie);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ucptrie_get(win32::Windows::Win32::Globalization::UCPTrie* trie, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.ucptrie_get(trie, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucptrie_getRange(win32::Windows::Win32::Globalization::UCPTrie* trie, int32_t start, win32::Windows::Win32::Globalization::UCPMapRangeOption option, uint32_t surrogateValue, win32::Windows::Win32::Globalization::UCPMapValueFilter** filter, void* context, uint32_t* pValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(option);
        ORBIT_TRACK_PARAM(surrogateValue);
        ORBIT_TRACK_PARAM(filter);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(pValue);

        auto win32_impl_result = g_api_table.ucptrie_getRange(trie, start, option, surrogateValue, filter, context, pValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucptrie_toBinary(win32::Windows::Win32::Globalization::UCPTrie* trie, void* data, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(data);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucptrie_toBinary(trie, data, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucptrie_internalSmallIndex(win32::Windows::Win32::Globalization::UCPTrie* trie, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.ucptrie_internalSmallIndex(trie, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucptrie_internalSmallU8Index(win32::Windows::Win32::Globalization::UCPTrie* trie, int32_t lt1, uint8_t t2, uint8_t t3) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(lt1);
        ORBIT_TRACK_PARAM(t2);
        ORBIT_TRACK_PARAM(t3);

        auto win32_impl_result = g_api_table.ucptrie_internalSmallU8Index(trie, lt1, t2, t3);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucptrie_internalU8PrevIndex(win32::Windows::Win32::Globalization::UCPTrie* trie, int32_t c, uint8_t* start, uint8_t* src) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(src);

        auto win32_impl_result = g_api_table.ucptrie_internalU8PrevIndex(trie, c, start, src);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UMutableCPTrie* __stdcall ORBIT_IMPL_umutablecptrie_open(uint32_t initialValue, uint32_t errorValue, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(initialValue);
        ORBIT_TRACK_PARAM(errorValue);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.umutablecptrie_open(initialValue, errorValue, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UMutableCPTrie* __stdcall ORBIT_IMPL_umutablecptrie_clone(win32::Windows::Win32::Globalization::UMutableCPTrie* other, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(other);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.umutablecptrie_clone(other, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_umutablecptrie_close(win32::Windows::Win32::Globalization::UMutableCPTrie* trie) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);

        g_api_table.umutablecptrie_close(trie);
        
    }

    win32::Windows::Win32::Globalization::UMutableCPTrie* __stdcall ORBIT_IMPL_umutablecptrie_fromUCPMap(win32::Windows::Win32::Globalization::UCPMap* map, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.umutablecptrie_fromUCPMap(map, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UMutableCPTrie* __stdcall ORBIT_IMPL_umutablecptrie_fromUCPTrie(win32::Windows::Win32::Globalization::UCPTrie* trie, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.umutablecptrie_fromUCPTrie(trie, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_umutablecptrie_get(win32::Windows::Win32::Globalization::UMutableCPTrie* trie, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.umutablecptrie_get(trie, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_umutablecptrie_getRange(win32::Windows::Win32::Globalization::UMutableCPTrie* trie, int32_t start, win32::Windows::Win32::Globalization::UCPMapRangeOption option, uint32_t surrogateValue, win32::Windows::Win32::Globalization::UCPMapValueFilter** filter, void* context, uint32_t* pValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(option);
        ORBIT_TRACK_PARAM(surrogateValue);
        ORBIT_TRACK_PARAM(filter);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(pValue);

        auto win32_impl_result = g_api_table.umutablecptrie_getRange(trie, start, option, surrogateValue, filter, context, pValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_umutablecptrie_set(win32::Windows::Win32::Globalization::UMutableCPTrie* trie, int32_t c, uint32_t value, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.umutablecptrie_set(trie, c, value, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_umutablecptrie_setRange(win32::Windows::Win32::Globalization::UMutableCPTrie* trie, int32_t start, int32_t end, uint32_t value, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.umutablecptrie_setRange(trie, start, end, value, pErrorCode);
        
    }

    win32::Windows::Win32::Globalization::UCPTrie* __stdcall ORBIT_IMPL_umutablecptrie_buildImmutable(win32::Windows::Win32::Globalization::UMutableCPTrie* trie, win32::Windows::Win32::Globalization::UCPTrieType type, win32::Windows::Win32::Globalization::UCPTrieValueWidth valueWidth, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trie);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(valueWidth);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.umutablecptrie_buildImmutable(trie, type, valueWidth, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_UCNV_FROM_U_CALLBACK_STOP(void* context, win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(fromUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(codePoint);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_FROM_U_CALLBACK_STOP(context, fromUArgs, codeUnits, length, codePoint, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_TO_U_CALLBACK_STOP(void* context, win32::Windows::Win32::Globalization::UConverterToUnicodeArgs* toUArgs, win32::Windows::Win32::Foundation::PSTR codeUnits, int32_t length, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(toUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_TO_U_CALLBACK_STOP(context, toUArgs, codeUnits, length, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_FROM_U_CALLBACK_SKIP(void* context, win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(fromUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(codePoint);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_FROM_U_CALLBACK_SKIP(context, fromUArgs, codeUnits, length, codePoint, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_FROM_U_CALLBACK_SUBSTITUTE(void* context, win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(fromUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(codePoint);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_FROM_U_CALLBACK_SUBSTITUTE(context, fromUArgs, codeUnits, length, codePoint, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_FROM_U_CALLBACK_ESCAPE(void* context, win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* fromUArgs, uint16_t* codeUnits, int32_t length, int32_t codePoint, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(fromUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(codePoint);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_FROM_U_CALLBACK_ESCAPE(context, fromUArgs, codeUnits, length, codePoint, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_TO_U_CALLBACK_SKIP(void* context, win32::Windows::Win32::Globalization::UConverterToUnicodeArgs* toUArgs, win32::Windows::Win32::Foundation::PSTR codeUnits, int32_t length, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(toUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_TO_U_CALLBACK_SKIP(context, toUArgs, codeUnits, length, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_TO_U_CALLBACK_SUBSTITUTE(void* context, win32::Windows::Win32::Globalization::UConverterToUnicodeArgs* toUArgs, win32::Windows::Win32::Foundation::PSTR codeUnits, int32_t length, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(toUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_TO_U_CALLBACK_SUBSTITUTE(context, toUArgs, codeUnits, length, reason, err);
        
    }

    void __stdcall ORBIT_IMPL_UCNV_TO_U_CALLBACK_ESCAPE(void* context, win32::Windows::Win32::Globalization::UConverterToUnicodeArgs* toUArgs, win32::Windows::Win32::Foundation::PSTR codeUnits, int32_t length, win32::Windows::Win32::Globalization::UConverterCallbackReason reason, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(toUArgs);
        ORBIT_TRACK_PARAM(codeUnits);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(err);

        g_api_table.UCNV_TO_U_CALLBACK_ESCAPE(context, toUArgs, codeUnits, length, reason, err);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_compareNames(win32::Windows::Win32::Foundation::PSTR name1, win32::Windows::Win32::Foundation::PSTR name2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name1);
        ORBIT_TRACK_PARAM(name2);

        auto win32_impl_result = g_api_table.ucnv_compareNames(name1, name2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverter* __stdcall ORBIT_IMPL_ucnv_open(win32::Windows::Win32::Foundation::PSTR converterName, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converterName);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_open(converterName, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverter* __stdcall ORBIT_IMPL_ucnv_openU(uint16_t* name, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_openU(name, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverter* __stdcall ORBIT_IMPL_ucnv_openCCSID(int32_t codepage, win32::Windows::Win32::Globalization::UConverterPlatform platform, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(codepage);
        ORBIT_TRACK_PARAM(platform);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_openCCSID(codepage, platform, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverter* __stdcall ORBIT_IMPL_ucnv_openPackage(win32::Windows::Win32::Foundation::PSTR packageName, win32::Windows::Win32::Foundation::PSTR converterName, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageName);
        ORBIT_TRACK_PARAM(converterName);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_openPackage(packageName, converterName, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverter* __stdcall ORBIT_IMPL_ucnv_safeClone(win32::Windows::Win32::Globalization::UConverter* cnv, void* stackBuffer, int32_t* pBufferSize, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(stackBuffer);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnv_safeClone(cnv, stackBuffer, pBufferSize, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_close(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        g_api_table.ucnv_close(converter);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_getSubstChars(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Foundation::PSTR subChars, int8_t* len, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(subChars);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_getSubstChars(converter, subChars, len, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_setSubstChars(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Foundation::PSTR subChars, int8_t len, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(subChars);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_setSubstChars(converter, subChars, len, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_setSubstString(win32::Windows::Win32::Globalization::UConverter* cnv, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_setSubstString(cnv, s, length, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_getInvalidChars(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Foundation::PSTR errBytes, int8_t* len, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(errBytes);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_getInvalidChars(converter, errBytes, len, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_getInvalidUChars(win32::Windows::Win32::Globalization::UConverter* converter, uint16_t* errUChars, int8_t* len, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(errUChars);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_getInvalidUChars(converter, errUChars, len, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_reset(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        g_api_table.ucnv_reset(converter);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_resetToUnicode(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        g_api_table.ucnv_resetToUnicode(converter);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_resetFromUnicode(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        g_api_table.ucnv_resetFromUnicode(converter);
        
    }

    int8_t __stdcall ORBIT_IMPL_ucnv_getMaxCharSize(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        auto win32_impl_result = g_api_table.ucnv_getMaxCharSize(converter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucnv_getMinCharSize(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        auto win32_impl_result = g_api_table.ucnv_getMinCharSize(converter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_getDisplayName(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Foundation::PSTR displayLocale, uint16_t* displayName, int32_t displayNameCapacity, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(displayLocale);
        ORBIT_TRACK_PARAM(displayName);
        ORBIT_TRACK_PARAM(displayNameCapacity);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_getDisplayName(converter, displayLocale, displayName, displayNameCapacity, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getName(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_getName(converter, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_getCCSID(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_getCCSID(converter, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverterPlatform __stdcall ORBIT_IMPL_ucnv_getPlatform(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_getPlatform(converter, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverterType __stdcall ORBIT_IMPL_ucnv_getType(win32::Windows::Win32::Globalization::UConverter* converter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);

        auto win32_impl_result = g_api_table.ucnv_getType(converter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_getStarters(win32::Windows::Win32::Globalization::UConverter* converter, int8_t* starters, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(starters);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_getStarters(converter, starters, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_getUnicodeSet(win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Globalization::USet* setFillIn, win32::Windows::Win32::Globalization::UConverterUnicodeSet whichSet, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(setFillIn);
        ORBIT_TRACK_PARAM(whichSet);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucnv_getUnicodeSet(cnv, setFillIn, whichSet, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_getToUCallBack(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UConverterToUCallback** action, void** context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(action);
        ORBIT_TRACK_PARAM(context);

        g_api_table.ucnv_getToUCallBack(converter, action, context);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_getFromUCallBack(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UConverterFromUCallback** action, void** context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(action);
        ORBIT_TRACK_PARAM(context);

        g_api_table.ucnv_getFromUCallBack(converter, action, context);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_setToUCallBack(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UConverterToUCallback* newAction, void* newContext, win32::Windows::Win32::Globalization::UConverterToUCallback** oldAction, void** oldContext, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(newAction);
        ORBIT_TRACK_PARAM(newContext);
        ORBIT_TRACK_PARAM(oldAction);
        ORBIT_TRACK_PARAM(oldContext);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_setToUCallBack(converter, newAction, newContext, oldAction, oldContext, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_setFromUCallBack(win32::Windows::Win32::Globalization::UConverter* converter, win32::Windows::Win32::Globalization::UConverterFromUCallback* newAction, void* newContext, win32::Windows::Win32::Globalization::UConverterFromUCallback** oldAction, void** oldContext, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(newAction);
        ORBIT_TRACK_PARAM(newContext);
        ORBIT_TRACK_PARAM(oldAction);
        ORBIT_TRACK_PARAM(oldContext);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_setFromUCallBack(converter, newAction, newContext, oldAction, oldContext, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_fromUnicode(win32::Windows::Win32::Globalization::UConverter* converter, int8_t** target, win32::Windows::Win32::Foundation::PSTR targetLimit, uint16_t** source, uint16_t* sourceLimit, int32_t* offsets, int8_t flush, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLimit);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLimit);
        ORBIT_TRACK_PARAM(offsets);
        ORBIT_TRACK_PARAM(flush);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_fromUnicode(converter, target, targetLimit, source, sourceLimit, offsets, flush, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_toUnicode(win32::Windows::Win32::Globalization::UConverter* converter, uint16_t** target, uint16_t* targetLimit, int8_t** source, win32::Windows::Win32::Foundation::PSTR sourceLimit, int32_t* offsets, int8_t flush, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLimit);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLimit);
        ORBIT_TRACK_PARAM(offsets);
        ORBIT_TRACK_PARAM(flush);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_toUnicode(converter, target, targetLimit, source, sourceLimit, offsets, flush, err);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_fromUChars(win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_fromUChars(cnv, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_toUChars(win32::Windows::Win32::Globalization::UConverter* cnv, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_toUChars(cnv, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_getNextUChar(win32::Windows::Win32::Globalization::UConverter* converter, int8_t** source, win32::Windows::Win32::Foundation::PSTR sourceLimit, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converter);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLimit);
        ORBIT_TRACK_PARAM(err);

        auto win32_impl_result = g_api_table.ucnv_getNextUChar(converter, source, sourceLimit, err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_convertEx(win32::Windows::Win32::Globalization::UConverter* targetCnv, win32::Windows::Win32::Globalization::UConverter* sourceCnv, int8_t** target, win32::Windows::Win32::Foundation::PSTR targetLimit, int8_t** source, win32::Windows::Win32::Foundation::PSTR sourceLimit, uint16_t* pivotStart, uint16_t** pivotSource, uint16_t** pivotTarget, uint16_t* pivotLimit, int8_t reset, int8_t flush, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(targetCnv);
        ORBIT_TRACK_PARAM(sourceCnv);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLimit);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLimit);
        ORBIT_TRACK_PARAM(pivotStart);
        ORBIT_TRACK_PARAM(pivotSource);
        ORBIT_TRACK_PARAM(pivotTarget);
        ORBIT_TRACK_PARAM(pivotLimit);
        ORBIT_TRACK_PARAM(reset);
        ORBIT_TRACK_PARAM(flush);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucnv_convertEx(targetCnv, sourceCnv, target, targetLimit, source, sourceLimit, pivotStart, pivotSource, pivotTarget, pivotLimit, reset, flush, pErrorCode);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_convert(win32::Windows::Win32::Foundation::PSTR toConverterName, win32::Windows::Win32::Foundation::PSTR fromConverterName, win32::Windows::Win32::Foundation::PSTR target, int32_t targetCapacity, win32::Windows::Win32::Foundation::PSTR source, int32_t sourceLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(toConverterName);
        ORBIT_TRACK_PARAM(fromConverterName);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetCapacity);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_convert(toConverterName, fromConverterName, target, targetCapacity, source, sourceLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_toAlgorithmic(win32::Windows::Win32::Globalization::UConverterType algorithmicType, win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Foundation::PSTR target, int32_t targetCapacity, win32::Windows::Win32::Foundation::PSTR source, int32_t sourceLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(algorithmicType);
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetCapacity);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_toAlgorithmic(algorithmicType, cnv, target, targetCapacity, source, sourceLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_fromAlgorithmic(win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Globalization::UConverterType algorithmicType, win32::Windows::Win32::Foundation::PSTR target, int32_t targetCapacity, win32::Windows::Win32::Foundation::PSTR source, int32_t sourceLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(algorithmicType);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetCapacity);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_fromAlgorithmic(cnv, algorithmicType, target, targetCapacity, source, sourceLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_flushCache() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucnv_flushCache();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucnv_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getAvailableName(int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.ucnv_getAvailableName(n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucnv_openAllNames(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_openAllNames(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_ucnv_countAliases(win32::Windows::Win32::Foundation::PSTR alias, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(alias);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_countAliases(alias, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getAlias(win32::Windows::Win32::Foundation::PSTR alias, uint16_t n, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(alias);
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_getAlias(alias, n, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_getAliases(win32::Windows::Win32::Foundation::PSTR alias, int8_t** aliases, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(alias);
        ORBIT_TRACK_PARAM(aliases);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucnv_getAliases(alias, aliases, pErrorCode);
        
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucnv_openStandardNames(win32::Windows::Win32::Foundation::PSTR convName, win32::Windows::Win32::Foundation::PSTR standard, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(convName);
        ORBIT_TRACK_PARAM(standard);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_openStandardNames(convName, standard, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_ucnv_countStandards() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucnv_countStandards();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getStandard(uint16_t n, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_getStandard(n, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getStandardName(win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Foundation::PSTR standard, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(standard);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_getStandardName(name, standard, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getCanonicalName(win32::Windows::Win32::Foundation::PSTR alias, win32::Windows::Win32::Foundation::PSTR standard, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(alias);
        ORBIT_TRACK_PARAM(standard);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_getCanonicalName(alias, standard, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_getDefaultName() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucnv_getDefaultName();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_setDefaultName(win32::Windows::Win32::Foundation::PSTR name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        g_api_table.ucnv_setDefaultName(name);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_fixFileSeparator(win32::Windows::Win32::Globalization::UConverter* cnv, uint16_t* source, int32_t sourceLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLen);

        g_api_table.ucnv_fixFileSeparator(cnv, source, sourceLen);
        
    }

    int8_t __stdcall ORBIT_IMPL_ucnv_isAmbiguous(win32::Windows::Win32::Globalization::UConverter* cnv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);

        auto win32_impl_result = g_api_table.ucnv_isAmbiguous(cnv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_setFallback(win32::Windows::Win32::Globalization::UConverter* cnv, int8_t usesFallback) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(usesFallback);

        g_api_table.ucnv_setFallback(cnv, usesFallback);
        
    }

    int8_t __stdcall ORBIT_IMPL_ucnv_usesFallback(win32::Windows::Win32::Globalization::UConverter* cnv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);

        auto win32_impl_result = g_api_table.ucnv_usesFallback(cnv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucnv_detectUnicodeSignature(win32::Windows::Win32::Foundation::PSTR source, int32_t sourceLength, int32_t* signatureLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(signatureLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucnv_detectUnicodeSignature(source, sourceLength, signatureLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_fromUCountPending(win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnv_fromUCountPending(cnv, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnv_toUCountPending(win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnv_toUCountPending(cnv, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucnv_isFixedWidth(win32::Windows::Win32::Globalization::UConverter* cnv, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cnv);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnv_isFixedWidth(cnv, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnv_cbFromUWriteBytes(win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* args, win32::Windows::Win32::Foundation::PSTR source, int32_t length, int32_t offsetIndex, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(args);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(offsetIndex);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_cbFromUWriteBytes(args, source, length, offsetIndex, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_cbFromUWriteSub(win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* args, int32_t offsetIndex, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(args);
        ORBIT_TRACK_PARAM(offsetIndex);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_cbFromUWriteSub(args, offsetIndex, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_cbFromUWriteUChars(win32::Windows::Win32::Globalization::UConverterFromUnicodeArgs* args, uint16_t** source, uint16_t* sourceLimit, int32_t offsetIndex, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(args);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLimit);
        ORBIT_TRACK_PARAM(offsetIndex);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_cbFromUWriteUChars(args, source, sourceLimit, offsetIndex, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_cbToUWriteUChars(win32::Windows::Win32::Globalization::UConverterToUnicodeArgs* args, uint16_t* source, int32_t length, int32_t offsetIndex, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(args);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(offsetIndex);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_cbToUWriteUChars(args, source, length, offsetIndex, err);
        
    }

    void __stdcall ORBIT_IMPL_ucnv_cbToUWriteSub(win32::Windows::Win32::Globalization::UConverterToUnicodeArgs* args, int32_t offsetIndex, win32::Windows::Win32::Globalization::UErrorCode* err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(args);
        ORBIT_TRACK_PARAM(offsetIndex);
        ORBIT_TRACK_PARAM(err);

        g_api_table.ucnv_cbToUWriteSub(args, offsetIndex, err);
        
    }

    void __stdcall ORBIT_IMPL_u_init(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_init(status);
        
    }

    void __stdcall ORBIT_IMPL_u_cleanup() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.u_cleanup();
        
    }

    void __stdcall ORBIT_IMPL_u_setMemoryFunctions(void* context, win32::Windows::Win32::Globalization::UMemAllocFn** a, win32::Windows::Win32::Globalization::UMemReallocFn** r, win32::Windows::Win32::Globalization::UMemFreeFn** f, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(a);
        ORBIT_TRACK_PARAM(r);
        ORBIT_TRACK_PARAM(f);
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_setMemoryFunctions(context, a, r, f, status);
        
    }

    win32::Windows::Win32::Globalization::UResourceBundle* __stdcall ORBIT_IMPL_u_catopen(win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.u_catopen(name, locale, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_catclose(win32::Windows::Win32::Globalization::UResourceBundle* catd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(catd);

        g_api_table.u_catclose(catd);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_u_catgets(win32::Windows::Win32::Globalization::UResourceBundle* catd, int32_t set_num, int32_t msg_num, uint16_t* s, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(catd);
        ORBIT_TRACK_PARAM(set_num);
        ORBIT_TRACK_PARAM(msg_num);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.u_catgets(catd, set_num, msg_num, s, len, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_hasBinaryProperty(int32_t c, win32::Windows::Win32::Globalization::UProperty which) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(which);

        auto win32_impl_result = g_api_table.u_hasBinaryProperty(c, which);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_u_getBinaryPropertySet(win32::Windows::Win32::Globalization::UProperty property, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_getBinaryPropertySet(property, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isUAlphabetic(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isUAlphabetic(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isULowercase(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isULowercase(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isUUppercase(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isUUppercase(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isUWhiteSpace(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isUWhiteSpace(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_getIntPropertyValue(int32_t c, win32::Windows::Win32::Globalization::UProperty which) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(which);

        auto win32_impl_result = g_api_table.u_getIntPropertyValue(c, which);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_getIntPropertyMinValue(win32::Windows::Win32::Globalization::UProperty which) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(which);

        auto win32_impl_result = g_api_table.u_getIntPropertyMinValue(which);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_getIntPropertyMaxValue(win32::Windows::Win32::Globalization::UProperty which) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(which);

        auto win32_impl_result = g_api_table.u_getIntPropertyMaxValue(which);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCPMap* __stdcall ORBIT_IMPL_u_getIntPropertyMap(win32::Windows::Win32::Globalization::UProperty property, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_getIntPropertyMap(property, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_u_getNumericValue(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_getNumericValue(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_islower(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_islower(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isupper(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isupper(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_istitle(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_istitle(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isdigit(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isdigit(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isalpha(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isalpha(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isalnum(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isalnum(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isxdigit(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isxdigit(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_ispunct(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_ispunct(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isgraph(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isgraph(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isblank(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isblank(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isdefined(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isdefined(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isspace(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isspace(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isJavaSpaceChar(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isJavaSpaceChar(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isWhitespace(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isWhitespace(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_iscntrl(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_iscntrl(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isISOControl(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isISOControl(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isprint(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isprint(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isbase(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isbase(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCharDirection __stdcall ORBIT_IMPL_u_charDirection(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_charDirection(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isMirrored(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isMirrored(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_charMirror(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_charMirror(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_getBidiPairedBracket(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_getBidiPairedBracket(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_charType(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_charType(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_enumCharTypes(win32::Windows::Win32::Globalization::UCharEnumTypeRange** enumRange, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(enumRange);
        ORBIT_TRACK_PARAM(context);

        g_api_table.u_enumCharTypes(enumRange, context);
        
    }

    uint8_t __stdcall ORBIT_IMPL_u_getCombiningClass(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_getCombiningClass(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_charDigitValue(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_charDigitValue(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBlockCode __stdcall ORBIT_IMPL_ublock_getCode(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.ublock_getCode(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_charName(int32_t code, win32::Windows::Win32::Globalization::UCharNameChoice nameChoice, win32::Windows::Win32::Foundation::PSTR buffer, int32_t bufferLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(code);
        ORBIT_TRACK_PARAM(nameChoice);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_charName(code, nameChoice, buffer, bufferLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_charFromName(win32::Windows::Win32::Globalization::UCharNameChoice nameChoice, win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nameChoice);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_charFromName(nameChoice, name, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_enumCharNames(int32_t start, int32_t limit, win32::Windows::Win32::Globalization::UEnumCharNamesFn** fn, void* context, win32::Windows::Win32::Globalization::UCharNameChoice nameChoice, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(fn);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(nameChoice);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.u_enumCharNames(start, limit, fn, context, nameChoice, pErrorCode);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_getPropertyName(win32::Windows::Win32::Globalization::UProperty property, win32::Windows::Win32::Globalization::UPropertyNameChoice nameChoice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(nameChoice);

        auto win32_impl_result = g_api_table.u_getPropertyName(property, nameChoice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UProperty __stdcall ORBIT_IMPL_u_getPropertyEnum(win32::Windows::Win32::Foundation::PSTR alias) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(alias);

        auto win32_impl_result = g_api_table.u_getPropertyEnum(alias);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_getPropertyValueName(win32::Windows::Win32::Globalization::UProperty property, int32_t value, win32::Windows::Win32::Globalization::UPropertyNameChoice nameChoice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(nameChoice);

        auto win32_impl_result = g_api_table.u_getPropertyValueName(property, value, nameChoice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_getPropertyValueEnum(win32::Windows::Win32::Globalization::UProperty property, win32::Windows::Win32::Foundation::PSTR alias) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(alias);

        auto win32_impl_result = g_api_table.u_getPropertyValueEnum(property, alias);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isIDStart(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isIDStart(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isIDPart(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isIDPart(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isIDIgnorable(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isIDIgnorable(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isJavaIDStart(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isJavaIDStart(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_isJavaIDPart(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_isJavaIDPart(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_tolower(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_tolower(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_toupper(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_toupper(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_totitle(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_totitle(c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_foldCase(int32_t c, uint32_t options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(options);

        auto win32_impl_result = g_api_table.u_foldCase(c, options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_digit(int32_t ch, int8_t radix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ch);
        ORBIT_TRACK_PARAM(radix);

        auto win32_impl_result = g_api_table.u_digit(ch, radix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_forDigit(int32_t digit, int8_t radix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(digit);
        ORBIT_TRACK_PARAM(radix);

        auto win32_impl_result = g_api_table.u_forDigit(digit, radix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_charAge(int32_t c, uint8_t* versionArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(versionArray);

        g_api_table.u_charAge(c, versionArray);
        
    }

    void __stdcall ORBIT_IMPL_u_getUnicodeVersion(uint8_t* versionArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(versionArray);

        g_api_table.u_getUnicodeVersion(versionArray);
        
    }

    int32_t __stdcall ORBIT_IMPL_u_getFC_NFKC_Closure(int32_t c, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_getFC_NFKC_Closure(c, dest, destCapacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBiDi* __stdcall ORBIT_IMPL_ubidi_open() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ubidi_open();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBiDi* __stdcall ORBIT_IMPL_ubidi_openSized(int32_t maxLength, int32_t maxRunCount, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(maxLength);
        ORBIT_TRACK_PARAM(maxRunCount);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_openSized(maxLength, maxRunCount, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_close(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        g_api_table.ubidi_close(pBiDi);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_setInverse(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int8_t isInverse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(isInverse);

        g_api_table.ubidi_setInverse(pBiDi, isInverse);
        
    }

    int8_t __stdcall ORBIT_IMPL_ubidi_isInverse(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_isInverse(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_orderParagraphsLTR(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int8_t orderParagraphsLTR) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(orderParagraphsLTR);

        g_api_table.ubidi_orderParagraphsLTR(pBiDi, orderParagraphsLTR);
        
    }

    int8_t __stdcall ORBIT_IMPL_ubidi_isOrderParagraphsLTR(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_isOrderParagraphsLTR(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_setReorderingMode(win32::Windows::Win32::Globalization::UBiDi* pBiDi, win32::Windows::Win32::Globalization::UBiDiReorderingMode reorderingMode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(reorderingMode);

        g_api_table.ubidi_setReorderingMode(pBiDi, reorderingMode);
        
    }

    win32::Windows::Win32::Globalization::UBiDiReorderingMode __stdcall ORBIT_IMPL_ubidi_getReorderingMode(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getReorderingMode(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_setReorderingOptions(win32::Windows::Win32::Globalization::UBiDi* pBiDi, uint32_t reorderingOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(reorderingOptions);

        g_api_table.ubidi_setReorderingOptions(pBiDi, reorderingOptions);
        
    }

    uint32_t __stdcall ORBIT_IMPL_ubidi_getReorderingOptions(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getReorderingOptions(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_setContext(win32::Windows::Win32::Globalization::UBiDi* pBiDi, uint16_t* prologue, int32_t proLength, uint16_t* epilogue, int32_t epiLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(prologue);
        ORBIT_TRACK_PARAM(proLength);
        ORBIT_TRACK_PARAM(epilogue);
        ORBIT_TRACK_PARAM(epiLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_setContext(pBiDi, prologue, proLength, epilogue, epiLength, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_setPara(win32::Windows::Win32::Globalization::UBiDi* pBiDi, uint16_t* text, int32_t length, uint8_t paraLevel, uint8_t* embeddingLevels, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(paraLevel);
        ORBIT_TRACK_PARAM(embeddingLevels);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_setPara(pBiDi, text, length, paraLevel, embeddingLevels, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_setLine(win32::Windows::Win32::Globalization::UBiDi* pParaBiDi, int32_t start, int32_t limit, win32::Windows::Win32::Globalization::UBiDi* pLineBiDi, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pParaBiDi);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(pLineBiDi);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_setLine(pParaBiDi, start, limit, pLineBiDi, pErrorCode);
        
    }

    win32::Windows::Win32::Globalization::UBiDiDirection __stdcall ORBIT_IMPL_ubidi_getDirection(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getDirection(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBiDiDirection __stdcall ORBIT_IMPL_ubidi_getBaseDirection(uint16_t* text, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.ubidi_getBaseDirection(text, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ubidi_getText(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getText(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_getLength(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getLength(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t __stdcall ORBIT_IMPL_ubidi_getParaLevel(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getParaLevel(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_countParagraphs(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_countParagraphs(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_getParagraph(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t charIndex, int32_t* pParaStart, int32_t* pParaLimit, uint8_t* pParaLevel, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(charIndex);
        ORBIT_TRACK_PARAM(pParaStart);
        ORBIT_TRACK_PARAM(pParaLimit);
        ORBIT_TRACK_PARAM(pParaLevel);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_getParagraph(pBiDi, charIndex, pParaStart, pParaLimit, pParaLevel, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_getParagraphByIndex(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t paraIndex, int32_t* pParaStart, int32_t* pParaLimit, uint8_t* pParaLevel, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(paraIndex);
        ORBIT_TRACK_PARAM(pParaStart);
        ORBIT_TRACK_PARAM(pParaLimit);
        ORBIT_TRACK_PARAM(pParaLevel);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_getParagraphByIndex(pBiDi, paraIndex, pParaStart, pParaLimit, pParaLevel, pErrorCode);
        
    }

    uint8_t __stdcall ORBIT_IMPL_ubidi_getLevelAt(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t charIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(charIndex);

        auto win32_impl_result = g_api_table.ubidi_getLevelAt(pBiDi, charIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t* __stdcall ORBIT_IMPL_ubidi_getLevels(win32::Windows::Win32::Globalization::UBiDi* pBiDi, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_getLevels(pBiDi, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_getLogicalRun(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t logicalPosition, int32_t* pLogicalLimit, uint8_t* pLevel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(logicalPosition);
        ORBIT_TRACK_PARAM(pLogicalLimit);
        ORBIT_TRACK_PARAM(pLevel);

        g_api_table.ubidi_getLogicalRun(pBiDi, logicalPosition, pLogicalLimit, pLevel);
        
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_countRuns(win32::Windows::Win32::Globalization::UBiDi* pBiDi, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_countRuns(pBiDi, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBiDiDirection __stdcall ORBIT_IMPL_ubidi_getVisualRun(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t runIndex, int32_t* pLogicalStart, int32_t* pLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(runIndex);
        ORBIT_TRACK_PARAM(pLogicalStart);
        ORBIT_TRACK_PARAM(pLength);

        auto win32_impl_result = g_api_table.ubidi_getVisualRun(pBiDi, runIndex, pLogicalStart, pLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_getVisualIndex(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t logicalIndex, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(logicalIndex);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_getVisualIndex(pBiDi, logicalIndex, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_getLogicalIndex(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t visualIndex, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(visualIndex);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_getLogicalIndex(pBiDi, visualIndex, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_getLogicalMap(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t* indexMap, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(indexMap);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_getLogicalMap(pBiDi, indexMap, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_getVisualMap(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t* indexMap, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(indexMap);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_getVisualMap(pBiDi, indexMap, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_reorderLogical(uint8_t* levels, int32_t length, int32_t* indexMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(levels);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(indexMap);

        g_api_table.ubidi_reorderLogical(levels, length, indexMap);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_reorderVisual(uint8_t* levels, int32_t length, int32_t* indexMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(levels);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(indexMap);

        g_api_table.ubidi_reorderVisual(levels, length, indexMap);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_invertMap(int32_t* srcMap, int32_t* destMap, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(srcMap);
        ORBIT_TRACK_PARAM(destMap);
        ORBIT_TRACK_PARAM(length);

        g_api_table.ubidi_invertMap(srcMap, destMap, length);
        
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_getProcessedLength(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getProcessedLength(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_getResultLength(win32::Windows::Win32::Globalization::UBiDi* pBiDi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);

        auto win32_impl_result = g_api_table.ubidi_getResultLength(pBiDi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCharDirection __stdcall ORBIT_IMPL_ubidi_getCustomizedClass(win32::Windows::Win32::Globalization::UBiDi* pBiDi, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.ubidi_getCustomizedClass(pBiDi, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubidi_setClassCallback(win32::Windows::Win32::Globalization::UBiDi* pBiDi, win32::Windows::Win32::Globalization::UBiDiClassCallback* newFn, void* newContext, win32::Windows::Win32::Globalization::UBiDiClassCallback** oldFn, void** oldContext, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(newFn);
        ORBIT_TRACK_PARAM(newContext);
        ORBIT_TRACK_PARAM(oldFn);
        ORBIT_TRACK_PARAM(oldContext);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ubidi_setClassCallback(pBiDi, newFn, newContext, oldFn, oldContext, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ubidi_getClassCallback(win32::Windows::Win32::Globalization::UBiDi* pBiDi, win32::Windows::Win32::Globalization::UBiDiClassCallback** fn, void** context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(fn);
        ORBIT_TRACK_PARAM(context);

        g_api_table.ubidi_getClassCallback(pBiDi, fn, context);
        
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_writeReordered(win32::Windows::Win32::Globalization::UBiDi* pBiDi, uint16_t* dest, int32_t destSize, uint16_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDi);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destSize);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_writeReordered(pBiDi, dest, destSize, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubidi_writeReverse(uint16_t* src, int32_t srcLength, uint16_t* dest, int32_t destSize, uint16_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destSize);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubidi_writeReverse(src, srcLength, dest, destSize, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ubiditransform_transform(win32::Windows::Win32::Globalization::UBiDiTransform* pBiDiTransform, uint16_t* src, int32_t srcLength, uint16_t* dest, int32_t destSize, uint8_t inParaLevel, win32::Windows::Win32::Globalization::UBiDiOrder inOrder, uint8_t outParaLevel, win32::Windows::Win32::Globalization::UBiDiOrder outOrder, win32::Windows::Win32::Globalization::UBiDiMirroring doMirroring, uint32_t shapingOptions, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBiDiTransform);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destSize);
        ORBIT_TRACK_PARAM(inParaLevel);
        ORBIT_TRACK_PARAM(inOrder);
        ORBIT_TRACK_PARAM(outParaLevel);
        ORBIT_TRACK_PARAM(outOrder);
        ORBIT_TRACK_PARAM(doMirroring);
        ORBIT_TRACK_PARAM(shapingOptions);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubiditransform_transform(pBiDiTransform, src, srcLength, dest, destSize, inParaLevel, inOrder, outParaLevel, outOrder, doMirroring, shapingOptions, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBiDiTransform* __stdcall ORBIT_IMPL_ubiditransform_open(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ubiditransform_open(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubiditransform_close(win32::Windows::Win32::Globalization::UBiDiTransform* pBidiTransform) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBidiTransform);

        g_api_table.ubiditransform_close(pBidiTransform);
        
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_utext_close(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_close(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_utext_openUTF8(win32::Windows::Win32::Globalization::UText* ut, win32::Windows::Win32::Foundation::PSTR s, int64_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utext_openUTF8(ut, s, length, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_utext_openUChars(win32::Windows::Win32::Globalization::UText* ut, uint16_t* s, int64_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utext_openUChars(ut, s, length, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_utext_clone(win32::Windows::Win32::Globalization::UText* dest, win32::Windows::Win32::Globalization::UText* src, int8_t deep, int8_t readOnly, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(deep);
        ORBIT_TRACK_PARAM(readOnly);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utext_clone(dest, src, deep, readOnly, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_utext_equals(win32::Windows::Win32::Globalization::UText* a, win32::Windows::Win32::Globalization::UText* b) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(a);
        ORBIT_TRACK_PARAM(b);

        auto win32_impl_result = g_api_table.utext_equals(a, b);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_utext_nativeLength(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_nativeLength(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_utext_isLengthExpensive(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_isLengthExpensive(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_char32At(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeIndex);

        auto win32_impl_result = g_api_table.utext_char32At(ut, nativeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_current32(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_current32(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_next32(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_next32(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_previous32(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_previous32(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_next32From(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeIndex);

        auto win32_impl_result = g_api_table.utext_next32From(ut, nativeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_previous32From(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeIndex);

        auto win32_impl_result = g_api_table.utext_previous32From(ut, nativeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_utext_getNativeIndex(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_getNativeIndex(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utext_setNativeIndex(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeIndex);

        g_api_table.utext_setNativeIndex(ut, nativeIndex);
        
    }

    int8_t __stdcall ORBIT_IMPL_utext_moveIndex32(win32::Windows::Win32::Globalization::UText* ut, int32_t delta) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(delta);

        auto win32_impl_result = g_api_table.utext_moveIndex32(ut, delta);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_utext_getPreviousNativeIndex(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_getPreviousNativeIndex(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_extract(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeStart, int64_t nativeLimit, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeStart);
        ORBIT_TRACK_PARAM(nativeLimit);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utext_extract(ut, nativeStart, nativeLimit, dest, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_utext_isWritable(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_isWritable(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_utext_hasMetaData(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        auto win32_impl_result = g_api_table.utext_hasMetaData(ut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_utext_replace(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeStart, int64_t nativeLimit, uint16_t* replacementText, int32_t replacementLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeStart);
        ORBIT_TRACK_PARAM(nativeLimit);
        ORBIT_TRACK_PARAM(replacementText);
        ORBIT_TRACK_PARAM(replacementLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utext_replace(ut, nativeStart, nativeLimit, replacementText, replacementLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utext_copy(win32::Windows::Win32::Globalization::UText* ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, int8_t move, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(nativeStart);
        ORBIT_TRACK_PARAM(nativeLimit);
        ORBIT_TRACK_PARAM(destIndex);
        ORBIT_TRACK_PARAM(move);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utext_copy(ut, nativeStart, nativeLimit, destIndex, move, status);
        
    }

    void __stdcall ORBIT_IMPL_utext_freeze(win32::Windows::Win32::Globalization::UText* ut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);

        g_api_table.utext_freeze(ut);
        
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_utext_setup(win32::Windows::Win32::Globalization::UText* ut, int32_t extraSpace, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ut);
        ORBIT_TRACK_PARAM(extraSpace);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utext_setup(ut, extraSpace, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uset_openEmpty() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.uset_openEmpty();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uset_open(int32_t start, int32_t end) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);

        auto win32_impl_result = g_api_table.uset_open(start, end);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uset_openPattern(uint16_t* pattern, int32_t patternLength, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.uset_openPattern(pattern, patternLength, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uset_openPatternOptions(uint16_t* pattern, int32_t patternLength, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.uset_openPatternOptions(pattern, patternLength, options, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uset_close(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        g_api_table.uset_close(set);
        
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uset_clone(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_clone(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_isFrozen(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_isFrozen(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uset_freeze(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        g_api_table.uset_freeze(set);
        
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uset_cloneAsThawed(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_cloneAsThawed(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uset_set(win32::Windows::Win32::Globalization::USet* set, int32_t start, int32_t end) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);

        g_api_table.uset_set(set, start, end);
        
    }

    int32_t __stdcall ORBIT_IMPL_uset_applyPattern(win32::Windows::Win32::Globalization::USet* set, uint16_t* pattern, int32_t patternLength, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uset_applyPattern(set, pattern, patternLength, options, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uset_applyIntPropertyValue(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Globalization::UProperty prop, int32_t value, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(prop);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.uset_applyIntPropertyValue(set, prop, value, ec);
        
    }

    void __stdcall ORBIT_IMPL_uset_applyPropertyAlias(win32::Windows::Win32::Globalization::USet* set, uint16_t* prop, int32_t propLength, uint16_t* value, int32_t valueLength, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(prop);
        ORBIT_TRACK_PARAM(propLength);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueLength);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.uset_applyPropertyAlias(set, prop, propLength, value, valueLength, ec);
        
    }

    int8_t __stdcall ORBIT_IMPL_uset_resemblesPattern(uint16_t* pattern, int32_t patternLength, int32_t pos) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(pos);

        auto win32_impl_result = g_api_table.uset_resemblesPattern(pattern, patternLength, pos);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_toPattern(win32::Windows::Win32::Globalization::USet* set, uint16_t* result, int32_t resultCapacity, int8_t escapeUnprintable, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(escapeUnprintable);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.uset_toPattern(set, result, resultCapacity, escapeUnprintable, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uset_add(win32::Windows::Win32::Globalization::USet* set, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(c);

        g_api_table.uset_add(set, c);
        
    }

    void __stdcall ORBIT_IMPL_uset_addAll(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Globalization::USet* additionalSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(additionalSet);

        g_api_table.uset_addAll(set, additionalSet);
        
    }

    void __stdcall ORBIT_IMPL_uset_addRange(win32::Windows::Win32::Globalization::USet* set, int32_t start, int32_t end) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);

        g_api_table.uset_addRange(set, start, end);
        
    }

    void __stdcall ORBIT_IMPL_uset_addString(win32::Windows::Win32::Globalization::USet* set, uint16_t* str, int32_t strLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(str);
        ORBIT_TRACK_PARAM(strLen);

        g_api_table.uset_addString(set, str, strLen);
        
    }

    void __stdcall ORBIT_IMPL_uset_addAllCodePoints(win32::Windows::Win32::Globalization::USet* set, uint16_t* str, int32_t strLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(str);
        ORBIT_TRACK_PARAM(strLen);

        g_api_table.uset_addAllCodePoints(set, str, strLen);
        
    }

    void __stdcall ORBIT_IMPL_uset_remove(win32::Windows::Win32::Globalization::USet* set, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(c);

        g_api_table.uset_remove(set, c);
        
    }

    void __stdcall ORBIT_IMPL_uset_removeRange(win32::Windows::Win32::Globalization::USet* set, int32_t start, int32_t end) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);

        g_api_table.uset_removeRange(set, start, end);
        
    }

    void __stdcall ORBIT_IMPL_uset_removeString(win32::Windows::Win32::Globalization::USet* set, uint16_t* str, int32_t strLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(str);
        ORBIT_TRACK_PARAM(strLen);

        g_api_table.uset_removeString(set, str, strLen);
        
    }

    void __stdcall ORBIT_IMPL_uset_removeAll(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Globalization::USet* removeSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(removeSet);

        g_api_table.uset_removeAll(set, removeSet);
        
    }

    void __stdcall ORBIT_IMPL_uset_retain(win32::Windows::Win32::Globalization::USet* set, int32_t start, int32_t end) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);

        g_api_table.uset_retain(set, start, end);
        
    }

    void __stdcall ORBIT_IMPL_uset_retainAll(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Globalization::USet* retain) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(retain);

        g_api_table.uset_retainAll(set, retain);
        
    }

    void __stdcall ORBIT_IMPL_uset_compact(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        g_api_table.uset_compact(set);
        
    }

    void __stdcall ORBIT_IMPL_uset_complement(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        g_api_table.uset_complement(set);
        
    }

    void __stdcall ORBIT_IMPL_uset_complementAll(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Globalization::USet* complement) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(complement);

        g_api_table.uset_complementAll(set, complement);
        
    }

    void __stdcall ORBIT_IMPL_uset_clear(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        g_api_table.uset_clear(set);
        
    }

    void __stdcall ORBIT_IMPL_uset_closeOver(win32::Windows::Win32::Globalization::USet* set, int32_t attributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(attributes);

        g_api_table.uset_closeOver(set, attributes);
        
    }

    void __stdcall ORBIT_IMPL_uset_removeAllStrings(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        g_api_table.uset_removeAllStrings(set);
        
    }

    int8_t __stdcall ORBIT_IMPL_uset_isEmpty(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_isEmpty(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_contains(win32::Windows::Win32::Globalization::USet* set, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.uset_contains(set, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_containsRange(win32::Windows::Win32::Globalization::USet* set, int32_t start, int32_t end) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);

        auto win32_impl_result = g_api_table.uset_containsRange(set, start, end);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_containsString(win32::Windows::Win32::Globalization::USet* set, uint16_t* str, int32_t strLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(str);
        ORBIT_TRACK_PARAM(strLen);

        auto win32_impl_result = g_api_table.uset_containsString(set, str, strLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_indexOf(win32::Windows::Win32::Globalization::USet* set, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.uset_indexOf(set, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_charAt(win32::Windows::Win32::Globalization::USet* set, int32_t charIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(charIndex);

        auto win32_impl_result = g_api_table.uset_charAt(set, charIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_size(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_size(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_getItemCount(win32::Windows::Win32::Globalization::USet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_getItemCount(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_getItem(win32::Windows::Win32::Globalization::USet* set, int32_t itemIndex, int32_t* start, int32_t* end, uint16_t* str, int32_t strCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(itemIndex);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(end);
        ORBIT_TRACK_PARAM(str);
        ORBIT_TRACK_PARAM(strCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.uset_getItem(set, itemIndex, start, end, str, strCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_containsAll(win32::Windows::Win32::Globalization::USet* set1, win32::Windows::Win32::Globalization::USet* set2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set1);
        ORBIT_TRACK_PARAM(set2);

        auto win32_impl_result = g_api_table.uset_containsAll(set1, set2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_containsAllCodePoints(win32::Windows::Win32::Globalization::USet* set, uint16_t* str, int32_t strLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(str);
        ORBIT_TRACK_PARAM(strLen);

        auto win32_impl_result = g_api_table.uset_containsAllCodePoints(set, str, strLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_containsNone(win32::Windows::Win32::Globalization::USet* set1, win32::Windows::Win32::Globalization::USet* set2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set1);
        ORBIT_TRACK_PARAM(set2);

        auto win32_impl_result = g_api_table.uset_containsNone(set1, set2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_containsSome(win32::Windows::Win32::Globalization::USet* set1, win32::Windows::Win32::Globalization::USet* set2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set1);
        ORBIT_TRACK_PARAM(set2);

        auto win32_impl_result = g_api_table.uset_containsSome(set1, set2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_span(win32::Windows::Win32::Globalization::USet* set, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::USetSpanCondition spanCondition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(spanCondition);

        auto win32_impl_result = g_api_table.uset_span(set, s, length, spanCondition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_spanBack(win32::Windows::Win32::Globalization::USet* set, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::USetSpanCondition spanCondition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(spanCondition);

        auto win32_impl_result = g_api_table.uset_spanBack(set, s, length, spanCondition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_spanUTF8(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Foundation::PSTR s, int32_t length, win32::Windows::Win32::Globalization::USetSpanCondition spanCondition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(spanCondition);

        auto win32_impl_result = g_api_table.uset_spanUTF8(set, s, length, spanCondition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_spanBackUTF8(win32::Windows::Win32::Globalization::USet* set, win32::Windows::Win32::Foundation::PSTR s, int32_t length, win32::Windows::Win32::Globalization::USetSpanCondition spanCondition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(spanCondition);

        auto win32_impl_result = g_api_table.uset_spanBackUTF8(set, s, length, spanCondition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_equals(win32::Windows::Win32::Globalization::USet* set1, win32::Windows::Win32::Globalization::USet* set2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set1);
        ORBIT_TRACK_PARAM(set2);

        auto win32_impl_result = g_api_table.uset_equals(set1, set2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_serialize(win32::Windows::Win32::Globalization::USet* set, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uset_serialize(set, dest, destCapacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_getSerializedSet(win32::Windows::Win32::Globalization::USerializedSet* fillSet, uint16_t* src, int32_t srcLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fillSet);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);

        auto win32_impl_result = g_api_table.uset_getSerializedSet(fillSet, src, srcLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uset_setSerializedToOne(win32::Windows::Win32::Globalization::USerializedSet* fillSet, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fillSet);
        ORBIT_TRACK_PARAM(c);

        g_api_table.uset_setSerializedToOne(fillSet, c);
        
    }

    int8_t __stdcall ORBIT_IMPL_uset_serializedContains(win32::Windows::Win32::Globalization::USerializedSet* set, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.uset_serializedContains(set, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uset_getSerializedRangeCount(win32::Windows::Win32::Globalization::USerializedSet* set) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);

        auto win32_impl_result = g_api_table.uset_getSerializedRangeCount(set);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uset_getSerializedRange(win32::Windows::Win32::Globalization::USerializedSet* set, int32_t rangeIndex, int32_t* pStart, int32_t* pEnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(set);
        ORBIT_TRACK_PARAM(rangeIndex);
        ORBIT_TRACK_PARAM(pStart);
        ORBIT_TRACK_PARAM(pEnd);

        auto win32_impl_result = g_api_table.uset_getSerializedRange(set, rangeIndex, pStart, pEnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_getNFCInstance(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getNFCInstance(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_getNFDInstance(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getNFDInstance(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_getNFKCInstance(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getNFKCInstance(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_getNFKDInstance(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getNFKDInstance(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_getNFKCCasefoldInstance(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getNFKCCasefoldInstance(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_getInstance(win32::Windows::Win32::Foundation::PSTR packageName, win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Globalization::UNormalization2Mode mode, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageName);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(mode);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getInstance(packageName, name, mode, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizer2* __stdcall ORBIT_IMPL_unorm2_openFiltered(win32::Windows::Win32::Globalization::UNormalizer2* norm2, win32::Windows::Win32::Globalization::USet* filterSet, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(filterSet);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_openFiltered(norm2, filterSet, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unorm2_close(win32::Windows::Win32::Globalization::UNormalizer2* norm2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);

        g_api_table.unorm2_close(norm2);
        
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_normalize(win32::Windows::Win32::Globalization::UNormalizer2* norm2, uint16_t* src, int32_t length, uint16_t* dest, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_normalize(norm2, src, length, dest, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_normalizeSecondAndAppend(win32::Windows::Win32::Globalization::UNormalizer2* norm2, uint16_t* first, int32_t firstLength, int32_t firstCapacity, uint16_t* second, int32_t secondLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(first);
        ORBIT_TRACK_PARAM(firstLength);
        ORBIT_TRACK_PARAM(firstCapacity);
        ORBIT_TRACK_PARAM(second);
        ORBIT_TRACK_PARAM(secondLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_normalizeSecondAndAppend(norm2, first, firstLength, firstCapacity, second, secondLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_append(win32::Windows::Win32::Globalization::UNormalizer2* norm2, uint16_t* first, int32_t firstLength, int32_t firstCapacity, uint16_t* second, int32_t secondLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(first);
        ORBIT_TRACK_PARAM(firstLength);
        ORBIT_TRACK_PARAM(firstCapacity);
        ORBIT_TRACK_PARAM(second);
        ORBIT_TRACK_PARAM(secondLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_append(norm2, first, firstLength, firstCapacity, second, secondLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_getDecomposition(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t c, uint16_t* decomposition, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(decomposition);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getDecomposition(norm2, c, decomposition, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_getRawDecomposition(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t c, uint16_t* decomposition, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(decomposition);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_getRawDecomposition(norm2, c, decomposition, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_composePair(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t a, int32_t b) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(a);
        ORBIT_TRACK_PARAM(b);

        auto win32_impl_result = g_api_table.unorm2_composePair(norm2, a, b);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t __stdcall ORBIT_IMPL_unorm2_getCombiningClass(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.unorm2_getCombiningClass(norm2, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_unorm2_isNormalized(win32::Windows::Win32::Globalization::UNormalizer2* norm2, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_isNormalized(norm2, s, length, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNormalizationCheckResult __stdcall ORBIT_IMPL_unorm2_quickCheck(win32::Windows::Win32::Globalization::UNormalizer2* norm2, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_quickCheck(norm2, s, length, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm2_spanQuickCheckYes(win32::Windows::Win32::Globalization::UNormalizer2* norm2, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm2_spanQuickCheckYes(norm2, s, length, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_unorm2_hasBoundaryBefore(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.unorm2_hasBoundaryBefore(norm2, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_unorm2_hasBoundaryAfter(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.unorm2_hasBoundaryAfter(norm2, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_unorm2_isInert(win32::Windows::Win32::Globalization::UNormalizer2* norm2, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(norm2);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.unorm2_isInert(norm2, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unorm_compare(uint16_t* s1, int32_t length1, uint16_t* s2, int32_t length2, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(length1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(length2);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.unorm_compare(s1, length1, s2, length2, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConverterSelector* __stdcall ORBIT_IMPL_ucnvsel_open(int8_t** converterList, int32_t converterListSize, win32::Windows::Win32::Globalization::USet* excludedCodePoints, win32::Windows::Win32::Globalization::UConverterUnicodeSet whichSet, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(converterList);
        ORBIT_TRACK_PARAM(converterListSize);
        ORBIT_TRACK_PARAM(excludedCodePoints);
        ORBIT_TRACK_PARAM(whichSet);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnvsel_open(converterList, converterListSize, excludedCodePoints, whichSet, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucnvsel_close(win32::Windows::Win32::Globalization::UConverterSelector* sel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sel);

        g_api_table.ucnvsel_close(sel);
        
    }

    win32::Windows::Win32::Globalization::UConverterSelector* __stdcall ORBIT_IMPL_ucnvsel_openFromSerialized(void* buffer, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnvsel_openFromSerialized(buffer, length, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucnvsel_serialize(win32::Windows::Win32::Globalization::UConverterSelector* sel, void* buffer, int32_t bufferCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sel);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnvsel_serialize(sel, buffer, bufferCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucnvsel_selectForString(win32::Windows::Win32::Globalization::UConverterSelector* sel, uint16_t* s, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sel);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnvsel_selectForString(sel, s, length, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucnvsel_selectForUTF8(win32::Windows::Win32::Globalization::UConverterSelector* sel, win32::Windows::Win32::Foundation::PSTR s, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sel);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucnvsel_selectForUTF8(sel, s, length, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_charsToUChars(win32::Windows::Win32::Foundation::PSTR cs, uint16_t* us, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cs);
        ORBIT_TRACK_PARAM(us);
        ORBIT_TRACK_PARAM(length);

        g_api_table.u_charsToUChars(cs, us, length);
        
    }

    void __stdcall ORBIT_IMPL_u_UCharsToChars(uint16_t* us, win32::Windows::Win32::Foundation::PSTR cs, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(us);
        ORBIT_TRACK_PARAM(cs);
        ORBIT_TRACK_PARAM(length);

        g_api_table.u_UCharsToChars(us, cs, length);
        
    }

    int32_t __stdcall ORBIT_IMPL_u_strlen(uint16_t* s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        auto win32_impl_result = g_api_table.u_strlen(s);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_countChar32(uint16_t* s, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.u_countChar32(s, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_u_strHasMoreChar32Than(uint16_t* s, int32_t length, int32_t number) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(number);

        auto win32_impl_result = g_api_table.u_strHasMoreChar32Than(s, length, number);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strcat(uint16_t* dst, uint16_t* src) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);

        auto win32_impl_result = g_api_table.u_strcat(dst, src);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strncat(uint16_t* dst, uint16_t* src, int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.u_strncat(dst, src, n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strstr(uint16_t* s, uint16_t* substring) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(substring);

        auto win32_impl_result = g_api_table.u_strstr(s, substring);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFindFirst(uint16_t* s, int32_t length, uint16_t* substring, int32_t subLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(substring);
        ORBIT_TRACK_PARAM(subLength);

        auto win32_impl_result = g_api_table.u_strFindFirst(s, length, substring, subLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strchr(uint16_t* s, uint16_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_strchr(s, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strchr32(uint16_t* s, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_strchr32(s, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strrstr(uint16_t* s, uint16_t* substring) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(substring);

        auto win32_impl_result = g_api_table.u_strrstr(s, substring);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFindLast(uint16_t* s, int32_t length, uint16_t* substring, int32_t subLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(substring);
        ORBIT_TRACK_PARAM(subLength);

        auto win32_impl_result = g_api_table.u_strFindLast(s, length, substring, subLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strrchr(uint16_t* s, uint16_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_strrchr(s, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strrchr32(uint16_t* s, int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);

        auto win32_impl_result = g_api_table.u_strrchr32(s, c);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strpbrk(uint16_t* string, uint16_t* matchSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(string);
        ORBIT_TRACK_PARAM(matchSet);

        auto win32_impl_result = g_api_table.u_strpbrk(string, matchSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strcspn(uint16_t* string, uint16_t* matchSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(string);
        ORBIT_TRACK_PARAM(matchSet);

        auto win32_impl_result = g_api_table.u_strcspn(string, matchSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strspn(uint16_t* string, uint16_t* matchSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(string);
        ORBIT_TRACK_PARAM(matchSet);

        auto win32_impl_result = g_api_table.u_strspn(string, matchSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strtok_r(uint16_t* src, uint16_t* delim, uint16_t** saveState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(delim);
        ORBIT_TRACK_PARAM(saveState);

        auto win32_impl_result = g_api_table.u_strtok_r(src, delim, saveState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strcmp(uint16_t* s1, uint16_t* s2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);

        auto win32_impl_result = g_api_table.u_strcmp(s1, s2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strcmpCodePointOrder(uint16_t* s1, uint16_t* s2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);

        auto win32_impl_result = g_api_table.u_strcmpCodePointOrder(s1, s2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strCompare(uint16_t* s1, int32_t length1, uint16_t* s2, int32_t length2, int8_t codePointOrder) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(length1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(length2);
        ORBIT_TRACK_PARAM(codePointOrder);

        auto win32_impl_result = g_api_table.u_strCompare(s1, length1, s2, length2, codePointOrder);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strCompareIter(win32::Windows::Win32::Globalization::UCharIterator* iter1, win32::Windows::Win32::Globalization::UCharIterator* iter2, int8_t codePointOrder) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iter1);
        ORBIT_TRACK_PARAM(iter2);
        ORBIT_TRACK_PARAM(codePointOrder);

        auto win32_impl_result = g_api_table.u_strCompareIter(iter1, iter2, codePointOrder);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strCaseCompare(uint16_t* s1, int32_t length1, uint16_t* s2, int32_t length2, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(length1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(length2);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strCaseCompare(s1, length1, s2, length2, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strncmp(uint16_t* ucs1, uint16_t* ucs2, int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucs1);
        ORBIT_TRACK_PARAM(ucs2);
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.u_strncmp(ucs1, ucs2, n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strncmpCodePointOrder(uint16_t* s1, uint16_t* s2, int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.u_strncmpCodePointOrder(s1, s2, n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strcasecmp(uint16_t* s1, uint16_t* s2, uint32_t options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(options);

        auto win32_impl_result = g_api_table.u_strcasecmp(s1, s2, options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strncasecmp(uint16_t* s1, uint16_t* s2, int32_t n, uint32_t options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(options);

        auto win32_impl_result = g_api_table.u_strncasecmp(s1, s2, n, options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_memcasecmp(uint16_t* s1, uint16_t* s2, int32_t length, uint32_t options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(options);

        auto win32_impl_result = g_api_table.u_memcasecmp(s1, s2, length, options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strcpy(uint16_t* dst, uint16_t* src) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);

        auto win32_impl_result = g_api_table.u_strcpy(dst, src);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strncpy(uint16_t* dst, uint16_t* src, int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.u_strncpy(dst, src, n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_uastrcpy(uint16_t* dst, win32::Windows::Win32::Foundation::PSTR src) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);

        auto win32_impl_result = g_api_table.u_uastrcpy(dst, src);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_uastrncpy(uint16_t* dst, win32::Windows::Win32::Foundation::PSTR src, int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.u_uastrncpy(dst, src, n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_austrcpy(win32::Windows::Win32::Foundation::PSTR dst, uint16_t* src) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);

        auto win32_impl_result = g_api_table.u_austrcpy(dst, src);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_austrncpy(win32::Windows::Win32::Foundation::PSTR dst, uint16_t* src, int32_t n) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dst);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(n);

        auto win32_impl_result = g_api_table.u_austrncpy(dst, src, n);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memcpy(uint16_t* dest, uint16_t* src, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memcpy(dest, src, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memmove(uint16_t* dest, uint16_t* src, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memmove(dest, src, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memset(uint16_t* dest, uint16_t c, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memset(dest, c, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_memcmp(uint16_t* buf1, uint16_t* buf2, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(buf1);
        ORBIT_TRACK_PARAM(buf2);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memcmp(buf1, buf2, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_memcmpCodePointOrder(uint16_t* s1, uint16_t* s2, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s1);
        ORBIT_TRACK_PARAM(s2);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memcmpCodePointOrder(s1, s2, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memchr(uint16_t* s, uint16_t c, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memchr(s, c, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memchr32(uint16_t* s, int32_t c, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memchr32(s, c, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memrchr(uint16_t* s, uint16_t c, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memrchr(s, c, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_memrchr32(uint16_t* s, int32_t c, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(count);

        auto win32_impl_result = g_api_table.u_memrchr32(s, c, count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_unescape(win32::Windows::Win32::Foundation::PSTR src, uint16_t* dest, int32_t destCapacity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);

        auto win32_impl_result = g_api_table.u_unescape(src, dest, destCapacity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_unescapeAt(win32::Windows::Win32::Globalization::UNESCAPE_CHAR_AT* charAt, int32_t* offset, int32_t length, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(charAt);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.u_unescapeAt(charAt, offset, length, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strToUpper(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToUpper(dest, destCapacity, src, srcLength, locale, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strToLower(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToLower(dest, destCapacity, src, srcLength, locale, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strToTitle(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UBreakIterator* titleIter, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(titleIter);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToTitle(dest, destCapacity, src, srcLength, titleIter, locale, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_strFoldCase(uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFoldCase(dest, destCapacity, src, srcLength, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_u_strToWCS(win32::Windows::Win32::Foundation::PWSTR dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToWCS(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromWCS(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, win32::Windows::Win32::Foundation::PWSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromWCS(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_strToUTF8(win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToUTF8(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromUTF8(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromUTF8(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_strToUTF8WithSub(win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(subchar);
        ORBIT_TRACK_PARAM(pNumSubstitutions);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromUTF8WithSub(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(subchar);
        ORBIT_TRACK_PARAM(pNumSubstitutions);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromUTF8Lenient(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromUTF8Lenient(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t* __stdcall ORBIT_IMPL_u_strToUTF32(int32_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToUTF32(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromUTF32(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int32_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromUTF32(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t* __stdcall ORBIT_IMPL_u_strToUTF32WithSub(int32_t* dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(subchar);
        ORBIT_TRACK_PARAM(pNumSubstitutions);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToUTF32WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromUTF32WithSub(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, int32_t* src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(subchar);
        ORBIT_TRACK_PARAM(pNumSubstitutions);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromUTF32WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_u_strToJavaModifiedUTF8(win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, int32_t* pDestLength, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strToJavaModifiedUTF8(dest, destCapacity, pDestLength, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_u_strFromJavaModifiedUTF8WithSub(uint16_t* dest, int32_t destCapacity, int32_t* pDestLength, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, int32_t subchar, int32_t* pNumSubstitutions, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pDestLength);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(subchar);
        ORBIT_TRACK_PARAM(pNumSubstitutions);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.u_strFromJavaModifiedUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, subchar, pNumSubstitutions, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCaseMap* __stdcall ORBIT_IMPL_ucasemap_open(win32::Windows::Win32::Foundation::PSTR locale, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucasemap_open(locale, options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucasemap_close(win32::Windows::Win32::Globalization::UCaseMap* csm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);

        g_api_table.ucasemap_close(csm);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucasemap_getLocale(win32::Windows::Win32::Globalization::UCaseMap* csm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);

        auto win32_impl_result = g_api_table.ucasemap_getLocale(csm);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ucasemap_getOptions(win32::Windows::Win32::Globalization::UCaseMap* csm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);

        auto win32_impl_result = g_api_table.ucasemap_getOptions(csm);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucasemap_setLocale(win32::Windows::Win32::Globalization::UCaseMap* csm, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucasemap_setLocale(csm, locale, pErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_ucasemap_setOptions(win32::Windows::Win32::Globalization::UCaseMap* csm, uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucasemap_setOptions(csm, options, pErrorCode);
        
    }

    win32::Windows::Win32::Globalization::UBreakIterator* __stdcall ORBIT_IMPL_ucasemap_getBreakIterator(win32::Windows::Win32::Globalization::UCaseMap* csm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);

        auto win32_impl_result = g_api_table.ucasemap_getBreakIterator(csm);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucasemap_setBreakIterator(win32::Windows::Win32::Globalization::UCaseMap* csm, win32::Windows::Win32::Globalization::UBreakIterator* iterToAdopt, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(iterToAdopt);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucasemap_setBreakIterator(csm, iterToAdopt, pErrorCode);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucasemap_toTitle(win32::Windows::Win32::Globalization::UCaseMap* csm, uint16_t* dest, int32_t destCapacity, uint16_t* src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucasemap_toTitle(csm, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucasemap_utf8ToLower(win32::Windows::Win32::Globalization::UCaseMap* csm, win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucasemap_utf8ToLower(csm, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucasemap_utf8ToUpper(win32::Windows::Win32::Globalization::UCaseMap* csm, win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucasemap_utf8ToUpper(csm, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucasemap_utf8ToTitle(win32::Windows::Win32::Globalization::UCaseMap* csm, win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucasemap_utf8ToTitle(csm, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucasemap_utf8FoldCase(win32::Windows::Win32::Globalization::UCaseMap* csm, win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, win32::Windows::Win32::Foundation::PSTR src, int32_t srcLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(csm);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucasemap_utf8FoldCase(csm, dest, destCapacity, src, srcLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UStringPrepProfile* __stdcall ORBIT_IMPL_usprep_open(win32::Windows::Win32::Foundation::PSTR path, win32::Windows::Win32::Foundation::PSTR fileName, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(path);
        ORBIT_TRACK_PARAM(fileName);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usprep_open(path, fileName, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UStringPrepProfile* __stdcall ORBIT_IMPL_usprep_openByType(win32::Windows::Win32::Globalization::UStringPrepProfileType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usprep_openByType(type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usprep_close(win32::Windows::Win32::Globalization::UStringPrepProfile* profile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(profile);

        g_api_table.usprep_close(profile);
        
    }

    int32_t __stdcall ORBIT_IMPL_usprep_prepare(win32::Windows::Win32::Globalization::UStringPrepProfile* prep, uint16_t* src, int32_t srcLength, uint16_t* dest, int32_t destCapacity, int32_t options, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(prep);
        ORBIT_TRACK_PARAM(src);
        ORBIT_TRACK_PARAM(srcLength);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usprep_prepare(prep, src, srcLength, dest, destCapacity, options, parseError, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UIDNA* __stdcall ORBIT_IMPL_uidna_openUTS46(uint32_t options, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_openUTS46(options, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uidna_close(win32::Windows::Win32::Globalization::UIDNA* idna) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);

        g_api_table.uidna_close(idna);
        
    }

    int32_t __stdcall ORBIT_IMPL_uidna_labelToASCII(win32::Windows::Win32::Globalization::UIDNA* idna, uint16_t* label, int32_t length, uint16_t* dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(label);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_labelToASCII(idna, label, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_labelToUnicode(win32::Windows::Win32::Globalization::UIDNA* idna, uint16_t* label, int32_t length, uint16_t* dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(label);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_labelToUnicode(idna, label, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_nameToASCII(win32::Windows::Win32::Globalization::UIDNA* idna, uint16_t* name, int32_t length, uint16_t* dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_nameToASCII(idna, name, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_nameToUnicode(win32::Windows::Win32::Globalization::UIDNA* idna, uint16_t* name, int32_t length, uint16_t* dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_nameToUnicode(idna, name, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_labelToASCII_UTF8(win32::Windows::Win32::Globalization::UIDNA* idna, win32::Windows::Win32::Foundation::PSTR label, int32_t length, win32::Windows::Win32::Foundation::PSTR dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(label);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_labelToASCII_UTF8(idna, label, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_labelToUnicodeUTF8(win32::Windows::Win32::Globalization::UIDNA* idna, win32::Windows::Win32::Foundation::PSTR label, int32_t length, win32::Windows::Win32::Foundation::PSTR dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(label);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_labelToUnicodeUTF8(idna, label, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_nameToASCII_UTF8(win32::Windows::Win32::Globalization::UIDNA* idna, win32::Windows::Win32::Foundation::PSTR name, int32_t length, win32::Windows::Win32::Foundation::PSTR dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_nameToASCII_UTF8(idna, name, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uidna_nameToUnicodeUTF8(win32::Windows::Win32::Globalization::UIDNA* idna, win32::Windows::Win32::Foundation::PSTR name, int32_t length, win32::Windows::Win32::Foundation::PSTR dest, int32_t capacity, win32::Windows::Win32::Globalization::UIDNAInfo* pInfo, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idna);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uidna_nameToUnicodeUTF8(idna, name, length, dest, capacity, pInfo, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBreakIterator* __stdcall ORBIT_IMPL_ubrk_open(win32::Windows::Win32::Globalization::UBreakIteratorType type, win32::Windows::Win32::Foundation::PSTR locale, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_open(type, locale, text, textLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBreakIterator* __stdcall ORBIT_IMPL_ubrk_openRules(uint16_t* rules, int32_t rulesLength, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UParseError* parseErr, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(rules);
        ORBIT_TRACK_PARAM(rulesLength);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parseErr);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_openRules(rules, rulesLength, text, textLength, parseErr, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBreakIterator* __stdcall ORBIT_IMPL_ubrk_openBinaryRules(uint8_t* binaryRules, int32_t rulesLength, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(binaryRules);
        ORBIT_TRACK_PARAM(rulesLength);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_openBinaryRules(binaryRules, rulesLength, text, textLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UBreakIterator* __stdcall ORBIT_IMPL_ubrk_safeClone(win32::Windows::Win32::Globalization::UBreakIterator* bi, void* stackBuffer, int32_t* pBufferSize, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(stackBuffer);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_safeClone(bi, stackBuffer, pBufferSize, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubrk_close(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        g_api_table.ubrk_close(bi);
        
    }

    void __stdcall ORBIT_IMPL_ubrk_setText(win32::Windows::Win32::Globalization::UBreakIterator* bi, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ubrk_setText(bi, text, textLength, status);
        
    }

    void __stdcall ORBIT_IMPL_ubrk_setUText(win32::Windows::Win32::Globalization::UBreakIterator* bi, win32::Windows::Win32::Globalization::UText* text, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ubrk_setUText(bi, text, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_current(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        auto win32_impl_result = g_api_table.ubrk_current(bi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_next(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        auto win32_impl_result = g_api_table.ubrk_next(bi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_previous(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        auto win32_impl_result = g_api_table.ubrk_previous(bi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_first(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        auto win32_impl_result = g_api_table.ubrk_first(bi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_last(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        auto win32_impl_result = g_api_table.ubrk_last(bi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_preceding(win32::Windows::Win32::Globalization::UBreakIterator* bi, int32_t offset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(offset);

        auto win32_impl_result = g_api_table.ubrk_preceding(bi, offset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_following(win32::Windows::Win32::Globalization::UBreakIterator* bi, int32_t offset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(offset);

        auto win32_impl_result = g_api_table.ubrk_following(bi, offset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ubrk_getAvailable(int32_t index) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(index);

        auto win32_impl_result = g_api_table.ubrk_getAvailable(index);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ubrk_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ubrk_isBoundary(win32::Windows::Win32::Globalization::UBreakIterator* bi, int32_t offset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(offset);

        auto win32_impl_result = g_api_table.ubrk_isBoundary(bi, offset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_getRuleStatus(win32::Windows::Win32::Globalization::UBreakIterator* bi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);

        auto win32_impl_result = g_api_table.ubrk_getRuleStatus(bi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_getRuleStatusVec(win32::Windows::Win32::Globalization::UBreakIterator* bi, int32_t* fillInVec, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(fillInVec);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_getRuleStatusVec(bi, fillInVec, capacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ubrk_getLocaleByType(win32::Windows::Win32::Globalization::UBreakIterator* bi, win32::Windows::Win32::Globalization::ULocDataLocaleType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_getLocaleByType(bi, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ubrk_refreshUText(win32::Windows::Win32::Globalization::UBreakIterator* bi, win32::Windows::Win32::Globalization::UText* text, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ubrk_refreshUText(bi, text, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ubrk_getBinaryRules(win32::Windows::Win32::Globalization::UBreakIterator* bi, uint8_t* binaryRules, int32_t rulesCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bi);
        ORBIT_TRACK_PARAM(binaryRules);
        ORBIT_TRACK_PARAM(rulesCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ubrk_getBinaryRules(bi, binaryRules, rulesCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_getDataVersion(uint8_t* dataVersionFillin, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dataVersionFillin);
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_getDataVersion(dataVersionFillin, status);
        
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucal_openTimeZoneIDEnumeration(win32::Windows::Win32::Globalization::USystemTimeZoneType zoneType, win32::Windows::Win32::Foundation::PSTR region, int32_t* rawOffset, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(zoneType);
        ORBIT_TRACK_PARAM(region);
        ORBIT_TRACK_PARAM(rawOffset);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucal_openTimeZoneIDEnumeration(zoneType, region, rawOffset, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucal_openTimeZones(win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucal_openTimeZones(ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucal_openCountryTimeZones(win32::Windows::Win32::Foundation::PSTR country, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(country);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucal_openCountryTimeZones(country, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getDefaultTimeZone(uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucal_getDefaultTimeZone(result, resultCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_setDefaultTimeZone(uint16_t* zoneID, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(zoneID);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucal_setDefaultTimeZone(zoneID, ec);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getHostTimeZone(uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucal_getHostTimeZone(result, resultCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getDSTSavings(uint16_t* zoneID, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(zoneID);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucal_getDSTSavings(zoneID, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_ucal_getNow() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucal_getNow();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_ucal_open(uint16_t* zoneID, int32_t len, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UCalendarType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(zoneID);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_open(zoneID, len, locale, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_close(void** cal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);

        g_api_table.ucal_close(cal);
        
    }

    void** __stdcall ORBIT_IMPL_ucal_clone(void** cal, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_clone(cal, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_setTimeZone(void** cal, uint16_t* zoneID, int32_t len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(zoneID);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucal_setTimeZone(cal, zoneID, len, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getTimeZoneID(void** cal, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getTimeZoneID(cal, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getTimeZoneDisplayName(void** cal, win32::Windows::Win32::Globalization::UCalendarDisplayNameType type, win32::Windows::Win32::Foundation::PSTR locale, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getTimeZoneDisplayName(cal, type, locale, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucal_inDaylightTime(void** cal, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_inDaylightTime(cal, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_setGregorianChange(void** cal, double date, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(date);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucal_setGregorianChange(cal, date, pErrorCode);
        
    }

    double __stdcall ORBIT_IMPL_ucal_getGregorianChange(void** cal, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucal_getGregorianChange(cal, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getAttribute(void** cal, win32::Windows::Win32::Globalization::UCalendarAttribute attr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(attr);

        auto win32_impl_result = g_api_table.ucal_getAttribute(cal, attr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_setAttribute(void** cal, win32::Windows::Win32::Globalization::UCalendarAttribute attr, int32_t newValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(newValue);

        g_api_table.ucal_setAttribute(cal, attr, newValue);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucal_getAvailable(int32_t localeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeIndex);

        auto win32_impl_result = g_api_table.ucal_getAvailable(localeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucal_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_ucal_getMillis(void** cal, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getMillis(cal, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_setMillis(void** cal, double dateTime, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(dateTime);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucal_setMillis(cal, dateTime, status);
        
    }

    void __stdcall ORBIT_IMPL_ucal_setDate(void** cal, int32_t year, int32_t month, int32_t date, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(year);
        ORBIT_TRACK_PARAM(month);
        ORBIT_TRACK_PARAM(date);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucal_setDate(cal, year, month, date, status);
        
    }

    void __stdcall ORBIT_IMPL_ucal_setDateTime(void** cal, int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(year);
        ORBIT_TRACK_PARAM(month);
        ORBIT_TRACK_PARAM(date);
        ORBIT_TRACK_PARAM(hour);
        ORBIT_TRACK_PARAM(minute);
        ORBIT_TRACK_PARAM(second);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucal_setDateTime(cal, year, month, date, hour, minute, second, status);
        
    }

    int8_t __stdcall ORBIT_IMPL_ucal_equivalentTo(void** cal1, void** cal2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal1);
        ORBIT_TRACK_PARAM(cal2);

        auto win32_impl_result = g_api_table.ucal_equivalentTo(cal1, cal2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_add(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field, int32_t amount, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(amount);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucal_add(cal, field, amount, status);
        
    }

    void __stdcall ORBIT_IMPL_ucal_roll(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field, int32_t amount, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(amount);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucal_roll(cal, field, amount, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucal_get(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_get(cal, field, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_set(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field, int32_t value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(value);

        g_api_table.ucal_set(cal, field, value);
        
    }

    int8_t __stdcall ORBIT_IMPL_ucal_isSet(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);

        auto win32_impl_result = g_api_table.ucal_isSet(cal, field);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucal_clearField(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);

        g_api_table.ucal_clearField(cal, field);
        
    }

    void __stdcall ORBIT_IMPL_ucal_clear(void** calendar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(calendar);

        g_api_table.ucal_clear(calendar);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getLimit(void** cal, win32::Windows::Win32::Globalization::UCalendarDateFields field, win32::Windows::Win32::Globalization::UCalendarLimitType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getLimit(cal, field, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucal_getLocaleByType(void** cal, win32::Windows::Win32::Globalization::ULocDataLocaleType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getLocaleByType(cal, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucal_getTZDataVersion(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getTZDataVersion(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getCanonicalTimeZoneID(uint16_t* id, int32_t len, uint16_t* result, int32_t resultCapacity, int8_t* isSystemID, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(isSystemID);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getCanonicalTimeZoneID(id, len, result, resultCapacity, isSystemID, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucal_getType(void** cal, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getType(cal, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucal_getKeywordValuesForLocale(win32::Windows::Win32::Foundation::PSTR key, win32::Windows::Win32::Foundation::PSTR locale, int8_t commonlyUsed, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(commonlyUsed);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getKeywordValuesForLocale(key, locale, commonlyUsed, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCalendarWeekdayType __stdcall ORBIT_IMPL_ucal_getDayOfWeekType(void** cal, win32::Windows::Win32::Globalization::UCalendarDaysOfWeek dayOfWeek, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(dayOfWeek);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getDayOfWeekType(cal, dayOfWeek, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getWeekendTransition(void** cal, win32::Windows::Win32::Globalization::UCalendarDaysOfWeek dayOfWeek, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(dayOfWeek);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getWeekendTransition(cal, dayOfWeek, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucal_isWeekend(void** cal, double date, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(date);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_isWeekend(cal, date, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getFieldDifference(void** cal, double target, win32::Windows::Win32::Globalization::UCalendarDateFields field, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getFieldDifference(cal, target, field, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucal_getTimeZoneTransitionDate(void** cal, win32::Windows::Win32::Globalization::UTimeZoneTransitionType type, double* transition, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cal);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(transition);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getTimeZoneTransitionDate(cal, type, transition, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getWindowsTimeZoneID(uint16_t* id, int32_t len, uint16_t* winid, int32_t winidCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(winid);
        ORBIT_TRACK_PARAM(winidCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getWindowsTimeZoneID(id, len, winid, winidCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucal_getTimeZoneIDForWindowsID(uint16_t* winid, int32_t len, win32::Windows::Win32::Foundation::PSTR region, uint16_t* id, int32_t idCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(winid);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(region);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(idCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucal_getTimeZoneIDForWindowsID(winid, len, region, id, idCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollator* __stdcall ORBIT_IMPL_ucol_open(win32::Windows::Win32::Foundation::PSTR loc, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(loc);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_open(loc, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollator* __stdcall ORBIT_IMPL_ucol_openRules(uint16_t* rules, int32_t rulesLength, win32::Windows::Win32::Globalization::UColAttributeValue normalizationMode, win32::Windows::Win32::Globalization::UColAttributeValue strength, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(rules);
        ORBIT_TRACK_PARAM(rulesLength);
        ORBIT_TRACK_PARAM(normalizationMode);
        ORBIT_TRACK_PARAM(strength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_openRules(rules, rulesLength, normalizationMode, strength, parseError, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_getContractionsAndExpansions(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::USet* contractions, win32::Windows::Win32::Globalization::USet* expansions, int8_t addPrefixes, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(contractions);
        ORBIT_TRACK_PARAM(expansions);
        ORBIT_TRACK_PARAM(addPrefixes);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucol_getContractionsAndExpansions(coll, contractions, expansions, addPrefixes, status);
        
    }

    void __stdcall ORBIT_IMPL_ucol_close(win32::Windows::Win32::Globalization::UCollator* coll) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);

        g_api_table.ucol_close(coll);
        
    }

    win32::Windows::Win32::Globalization::UCollationResult __stdcall ORBIT_IMPL_ucol_strcoll(win32::Windows::Win32::Globalization::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLength);

        auto win32_impl_result = g_api_table.ucol_strcoll(coll, source, sourceLength, target, targetLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollationResult __stdcall ORBIT_IMPL_ucol_strcollUTF8(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Foundation::PSTR source, int32_t sourceLength, win32::Windows::Win32::Foundation::PSTR target, int32_t targetLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_strcollUTF8(coll, source, sourceLength, target, targetLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucol_greater(win32::Windows::Win32::Globalization::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLength);

        auto win32_impl_result = g_api_table.ucol_greater(coll, source, sourceLength, target, targetLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucol_greaterOrEqual(win32::Windows::Win32::Globalization::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLength);

        auto win32_impl_result = g_api_table.ucol_greaterOrEqual(coll, source, sourceLength, target, targetLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucol_equal(win32::Windows::Win32::Globalization::UCollator* coll, uint16_t* source, int32_t sourceLength, uint16_t* target, int32_t targetLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(targetLength);

        auto win32_impl_result = g_api_table.ucol_equal(coll, source, sourceLength, target, targetLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollationResult __stdcall ORBIT_IMPL_ucol_strcollIter(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UCharIterator* sIter, win32::Windows::Win32::Globalization::UCharIterator* tIter, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(sIter);
        ORBIT_TRACK_PARAM(tIter);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_strcollIter(coll, sIter, tIter, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UColAttributeValue __stdcall ORBIT_IMPL_ucol_getStrength(win32::Windows::Win32::Globalization::UCollator* coll) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);

        auto win32_impl_result = g_api_table.ucol_getStrength(coll);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_setStrength(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UColAttributeValue strength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(strength);

        g_api_table.ucol_setStrength(coll, strength);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getReorderCodes(win32::Windows::Win32::Globalization::UCollator* coll, int32_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucol_getReorderCodes(coll, dest, destCapacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_setReorderCodes(win32::Windows::Win32::Globalization::UCollator* coll, int32_t* reorderCodes, int32_t reorderCodesLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(reorderCodes);
        ORBIT_TRACK_PARAM(reorderCodesLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucol_setReorderCodes(coll, reorderCodes, reorderCodesLength, pErrorCode);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getEquivalentReorderCodes(int32_t reorderCode, int32_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reorderCode);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.ucol_getEquivalentReorderCodes(reorderCode, dest, destCapacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getDisplayName(win32::Windows::Win32::Foundation::PSTR objLoc, win32::Windows::Win32::Foundation::PSTR dispLoc, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(objLoc);
        ORBIT_TRACK_PARAM(dispLoc);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getDisplayName(objLoc, dispLoc, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucol_getAvailable(int32_t localeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeIndex);

        auto win32_impl_result = g_api_table.ucol_getAvailable(localeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ucol_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucol_openAvailableLocales(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_openAvailableLocales(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucol_getKeywords(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getKeywords(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucol_getKeywordValues(win32::Windows::Win32::Foundation::PSTR keyword, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getKeywordValues(keyword, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucol_getKeywordValuesForLocale(win32::Windows::Win32::Foundation::PSTR key, win32::Windows::Win32::Foundation::PSTR locale, int8_t commonlyUsed, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(commonlyUsed);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getKeywordValuesForLocale(key, locale, commonlyUsed, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getFunctionalEquivalent(win32::Windows::Win32::Foundation::PSTR result, int32_t resultCapacity, win32::Windows::Win32::Foundation::PSTR keyword, win32::Windows::Win32::Foundation::PSTR locale, int8_t* isAvailable, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(isAvailable);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getFunctionalEquivalent(result, resultCapacity, keyword, locale, isAvailable, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ucol_getRules(win32::Windows::Win32::Globalization::UCollator* coll, int32_t* length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.ucol_getRules(coll, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getSortKey(win32::Windows::Win32::Globalization::UCollator* coll, uint16_t* source, int32_t sourceLength, uint8_t* result, int32_t resultLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);

        auto win32_impl_result = g_api_table.ucol_getSortKey(coll, source, sourceLength, result, resultLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_nextSortKeyPart(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UCharIterator* iter, uint32_t* state, uint8_t* dest, int32_t count, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(iter);
        ORBIT_TRACK_PARAM(state);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_nextSortKeyPart(coll, iter, state, dest, count, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getBound(uint8_t* source, int32_t sourceLength, win32::Windows::Win32::Globalization::UColBoundMode boundType, uint32_t noOfLevels, uint8_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(boundType);
        ORBIT_TRACK_PARAM(noOfLevels);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getBound(source, sourceLength, boundType, noOfLevels, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_getVersion(win32::Windows::Win32::Globalization::UCollator* coll, uint8_t* info) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(info);

        g_api_table.ucol_getVersion(coll, info);
        
    }

    void __stdcall ORBIT_IMPL_ucol_getUCAVersion(win32::Windows::Win32::Globalization::UCollator* coll, uint8_t* info) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(info);

        g_api_table.ucol_getUCAVersion(coll, info);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucol_mergeSortkeys(uint8_t* src1, int32_t src1Length, uint8_t* src2, int32_t src2Length, uint8_t* dest, int32_t destCapacity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(src1);
        ORBIT_TRACK_PARAM(src1Length);
        ORBIT_TRACK_PARAM(src2);
        ORBIT_TRACK_PARAM(src2Length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);

        auto win32_impl_result = g_api_table.ucol_mergeSortkeys(src1, src1Length, src2, src2Length, dest, destCapacity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_setAttribute(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UColAttribute attr, win32::Windows::Win32::Globalization::UColAttributeValue value, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucol_setAttribute(coll, attr, value, status);
        
    }

    win32::Windows::Win32::Globalization::UColAttributeValue __stdcall ORBIT_IMPL_ucol_getAttribute(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UColAttribute attr, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getAttribute(coll, attr, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_setMaxVariable(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UColReorderCode group, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(group);
        ORBIT_TRACK_PARAM(pErrorCode);

        g_api_table.ucol_setMaxVariable(coll, group, pErrorCode);
        
    }

    win32::Windows::Win32::Globalization::UColReorderCode __stdcall ORBIT_IMPL_ucol_getMaxVariable(win32::Windows::Win32::Globalization::UCollator* coll) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);

        auto win32_impl_result = g_api_table.ucol_getMaxVariable(coll);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ucol_getVariableTop(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getVariableTop(coll, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollator* __stdcall ORBIT_IMPL_ucol_safeClone(win32::Windows::Win32::Globalization::UCollator* coll, void* stackBuffer, int32_t* pBufferSize, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(stackBuffer);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_safeClone(coll, stackBuffer, pBufferSize, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getRulesEx(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UColRuleOption delta, uint16_t* buffer, int32_t bufferLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(delta);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferLen);

        auto win32_impl_result = g_api_table.ucol_getRulesEx(coll, delta, buffer, bufferLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucol_getLocaleByType(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::ULocDataLocaleType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getLocaleByType(coll, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_ucol_getTailoredSet(win32::Windows::Win32::Globalization::UCollator* coll, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_getTailoredSet(coll, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_cloneBinary(win32::Windows::Win32::Globalization::UCollator* coll, uint8_t* buffer, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_cloneBinary(coll, buffer, capacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollator* __stdcall ORBIT_IMPL_ucol_openBinary(uint8_t* bin, int32_t length, win32::Windows::Win32::Globalization::UCollator* base, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bin);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(base);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_openBinary(bin, length, base, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollationElements* __stdcall ORBIT_IMPL_ucol_openElements(win32::Windows::Win32::Globalization::UCollator* coll, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coll);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_openElements(coll, text, textLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_keyHashCode(uint8_t* key, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.ucol_keyHashCode(key, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_closeElements(win32::Windows::Win32::Globalization::UCollationElements* elems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);

        g_api_table.ucol_closeElements(elems);
        
    }

    void __stdcall ORBIT_IMPL_ucol_reset(win32::Windows::Win32::Globalization::UCollationElements* elems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);

        g_api_table.ucol_reset(elems);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucol_next(win32::Windows::Win32::Globalization::UCollationElements* elems, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_next(elems, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_previous(win32::Windows::Win32::Globalization::UCollationElements* elems, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucol_previous(elems, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getMaxExpansion(win32::Windows::Win32::Globalization::UCollationElements* elems, int32_t order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);
        ORBIT_TRACK_PARAM(order);

        auto win32_impl_result = g_api_table.ucol_getMaxExpansion(elems, order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_setText(win32::Windows::Win32::Globalization::UCollationElements* elems, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucol_setText(elems, text, textLength, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucol_getOffset(win32::Windows::Win32::Globalization::UCollationElements* elems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);

        auto win32_impl_result = g_api_table.ucol_getOffset(elems);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucol_setOffset(win32::Windows::Win32::Globalization::UCollationElements* elems, int32_t offset, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(elems);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucol_setOffset(elems, offset, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucol_primaryOrder(int32_t order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(order);

        auto win32_impl_result = g_api_table.ucol_primaryOrder(order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_secondaryOrder(int32_t order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(order);

        auto win32_impl_result = g_api_table.ucol_secondaryOrder(order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucol_tertiaryOrder(int32_t order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(order);

        auto win32_impl_result = g_api_table.ucol_tertiaryOrder(order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCharsetDetector* __stdcall ORBIT_IMPL_ucsdet_open(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_open(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucsdet_close(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);

        g_api_table.ucsdet_close(ucsd);
        
    }

    void __stdcall ORBIT_IMPL_ucsdet_setText(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd, win32::Windows::Win32::Foundation::PSTR textIn, int32_t len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);
        ORBIT_TRACK_PARAM(textIn);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucsdet_setText(ucsd, textIn, len, status);
        
    }

    void __stdcall ORBIT_IMPL_ucsdet_setDeclaredEncoding(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd, win32::Windows::Win32::Foundation::PSTR encoding, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);
        ORBIT_TRACK_PARAM(encoding);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ucsdet_setDeclaredEncoding(ucsd, encoding, length, status);
        
    }

    win32::Windows::Win32::Globalization::UCharsetMatch* __stdcall ORBIT_IMPL_ucsdet_detect(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_detect(ucsd, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCharsetMatch** __stdcall ORBIT_IMPL_ucsdet_detectAll(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd, int32_t* matchesFound, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);
        ORBIT_TRACK_PARAM(matchesFound);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_detectAll(ucsd, matchesFound, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucsdet_getName(win32::Windows::Win32::Globalization::UCharsetMatch* ucsm, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsm);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_getName(ucsm, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucsdet_getConfidence(win32::Windows::Win32::Globalization::UCharsetMatch* ucsm, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsm);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_getConfidence(ucsm, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ucsdet_getLanguage(win32::Windows::Win32::Globalization::UCharsetMatch* ucsm, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsm);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_getLanguage(ucsm, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucsdet_getUChars(win32::Windows::Win32::Globalization::UCharsetMatch* ucsm, uint16_t* buf, int32_t cap, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsm);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(cap);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_getUChars(ucsm, buf, cap, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_ucsdet_getAllDetectableCharsets(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ucsdet_getAllDetectableCharsets(ucsd, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucsdet_isInputFilterEnabled(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);

        auto win32_impl_result = g_api_table.ucsdet_isInputFilterEnabled(ucsd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ucsdet_enableInputFilter(win32::Windows::Win32::Globalization::UCharsetDetector* ucsd, int8_t filter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucsd);
        ORBIT_TRACK_PARAM(filter);

        auto win32_impl_result = g_api_table.ucsdet_enableInputFilter(ucsd, filter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UFieldPositionIterator* __stdcall ORBIT_IMPL_ufieldpositer_open(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufieldpositer_open(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ufieldpositer_close(win32::Windows::Win32::Globalization::UFieldPositionIterator* fpositer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fpositer);

        g_api_table.ufieldpositer_close(fpositer);
        
    }

    int32_t __stdcall ORBIT_IMPL_ufieldpositer_next(win32::Windows::Win32::Globalization::UFieldPositionIterator* fpositer, int32_t* beginIndex, int32_t* endIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fpositer);
        ORBIT_TRACK_PARAM(beginIndex);
        ORBIT_TRACK_PARAM(endIndex);

        auto win32_impl_result = g_api_table.ufieldpositer_next(fpositer, beginIndex, endIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_ufmt_open(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_open(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ufmt_close(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        g_api_table.ufmt_close(fmt);
        
    }

    win32::Windows::Win32::Globalization::UFormattableType __stdcall ORBIT_IMPL_ufmt_getType(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getType(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ufmt_isNumeric(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        auto win32_impl_result = g_api_table.ufmt_isNumeric(fmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_ufmt_getDate(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getDate(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_ufmt_getDouble(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getDouble(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ufmt_getLong(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getLong(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_ufmt_getInt64(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getInt64(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_ufmt_getObject(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getObject(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_ufmt_getUChars(void** fmt, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getUChars(fmt, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ufmt_getArrayLength(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getArrayLength(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_ufmt_getArrayItemByIndex(void** fmt, int32_t n, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getArrayItemByIndex(fmt, n, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_ufmt_getDecNumChars(void** fmt, int32_t* len, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ufmt_getDecNumChars(fmt, len, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UConstrainedFieldPosition* __stdcall ORBIT_IMPL_ucfpos_open(win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucfpos_open(ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucfpos_reset(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucfpos_reset(ucfpos, ec);
        
    }

    void __stdcall ORBIT_IMPL_ucfpos_close(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);

        g_api_table.ucfpos_close(ucfpos);
        
    }

    void __stdcall ORBIT_IMPL_ucfpos_constrainCategory(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, int32_t category, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucfpos_constrainCategory(ucfpos, category, ec);
        
    }

    void __stdcall ORBIT_IMPL_ucfpos_constrainField(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, int32_t category, int32_t field, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucfpos_constrainField(ucfpos, category, field, ec);
        
    }

    int32_t __stdcall ORBIT_IMPL_ucfpos_getCategory(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucfpos_getCategory(ucfpos, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ucfpos_getField(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucfpos_getField(ucfpos, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucfpos_getIndexes(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, int32_t* pStart, int32_t* pLimit, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(pStart);
        ORBIT_TRACK_PARAM(pLimit);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucfpos_getIndexes(ucfpos, pStart, pLimit, ec);
        
    }

    int64_t __stdcall ORBIT_IMPL_ucfpos_getInt64IterationContext(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucfpos_getInt64IterationContext(ucfpos, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucfpos_setInt64IterationContext(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, int64_t context, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucfpos_setInt64IterationContext(ucfpos, context, ec);
        
    }

    int8_t __stdcall ORBIT_IMPL_ucfpos_matchesField(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, int32_t category, int32_t field, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ucfpos_matchesField(ucfpos, category, field, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ucfpos_setState(win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, int32_t category, int32_t field, int32_t start, int32_t limit, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.ucfpos_setState(ucfpos, category, field, start, limit, ec);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_ufmtval_getString(win32::Windows::Win32::Globalization::UFormattedValue* ufmtval, int32_t* pLength, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ufmtval);
        ORBIT_TRACK_PARAM(pLength);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ufmtval_getString(ufmtval, pLength, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_ufmtval_nextPosition(win32::Windows::Win32::Globalization::UFormattedValue* ufmtval, win32::Windows::Win32::Globalization::UConstrainedFieldPosition* ucfpos, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ufmtval);
        ORBIT_TRACK_PARAM(ucfpos);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ufmtval_nextPosition(ufmtval, ucfpos, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UDateIntervalFormat* __stdcall ORBIT_IMPL_udtitvfmt_open(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* skeleton, int32_t skeletonLength, uint16_t* tzID, int32_t tzIDLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(skeletonLength);
        ORBIT_TRACK_PARAM(tzID);
        ORBIT_TRACK_PARAM(tzIDLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udtitvfmt_open(locale, skeleton, skeletonLength, tzID, tzIDLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udtitvfmt_close(win32::Windows::Win32::Globalization::UDateIntervalFormat* formatter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(formatter);

        g_api_table.udtitvfmt_close(formatter);
        
    }

    win32::Windows::Win32::Globalization::UFormattedDateInterval* __stdcall ORBIT_IMPL_udtitvfmt_openResult(win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.udtitvfmt_openResult(ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UFormattedValue* __stdcall ORBIT_IMPL_udtitvfmt_resultAsValue(win32::Windows::Win32::Globalization::UFormattedDateInterval* uresult, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.udtitvfmt_resultAsValue(uresult, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udtitvfmt_closeResult(win32::Windows::Win32::Globalization::UFormattedDateInterval* uresult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);

        g_api_table.udtitvfmt_closeResult(uresult);
        
    }

    int32_t __stdcall ORBIT_IMPL_udtitvfmt_format(win32::Windows::Win32::Globalization::UDateIntervalFormat* formatter, double fromDate, double toDate, uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UFieldPosition* position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(formatter);
        ORBIT_TRACK_PARAM(fromDate);
        ORBIT_TRACK_PARAM(toDate);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udtitvfmt_format(formatter, fromDate, toDate, result, resultCapacity, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UGenderInfo* __stdcall ORBIT_IMPL_ugender_getInstance(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ugender_getInstance(locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UGender __stdcall ORBIT_IMPL_ugender_getListGender(win32::Windows::Win32::Globalization::UGenderInfo* genderInfo, win32::Windows::Win32::Globalization::UGender* genders, int32_t size, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(genderInfo);
        ORBIT_TRACK_PARAM(genders);
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ugender_getListGender(genderInfo, genders, size, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UListFormatter* __stdcall ORBIT_IMPL_ulistfmt_open(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulistfmt_open(locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UListFormatter* __stdcall ORBIT_IMPL_ulistfmt_openForType(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UListFormatterType type, win32::Windows::Win32::Globalization::UListFormatterWidth width, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulistfmt_openForType(locale, type, width, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ulistfmt_close(win32::Windows::Win32::Globalization::UListFormatter* listfmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listfmt);

        g_api_table.ulistfmt_close(listfmt);
        
    }

    win32::Windows::Win32::Globalization::UFormattedList* __stdcall ORBIT_IMPL_ulistfmt_openResult(win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ulistfmt_openResult(ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UFormattedValue* __stdcall ORBIT_IMPL_ulistfmt_resultAsValue(win32::Windows::Win32::Globalization::UFormattedList* uresult, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ulistfmt_resultAsValue(uresult, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ulistfmt_closeResult(win32::Windows::Win32::Globalization::UFormattedList* uresult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);

        g_api_table.ulistfmt_closeResult(uresult);
        
    }

    int32_t __stdcall ORBIT_IMPL_ulistfmt_format(win32::Windows::Win32::Globalization::UListFormatter* listfmt, uint16_t** strings, int32_t* stringLengths, int32_t stringCount, uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listfmt);
        ORBIT_TRACK_PARAM(strings);
        ORBIT_TRACK_PARAM(stringLengths);
        ORBIT_TRACK_PARAM(stringCount);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulistfmt_format(listfmt, strings, stringLengths, stringCount, result, resultCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ulistfmt_formatStringsToResult(win32::Windows::Win32::Globalization::UListFormatter* listfmt, uint16_t** strings, int32_t* stringLengths, int32_t stringCount, win32::Windows::Win32::Globalization::UFormattedList* uresult, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listfmt);
        ORBIT_TRACK_PARAM(strings);
        ORBIT_TRACK_PARAM(stringLengths);
        ORBIT_TRACK_PARAM(stringCount);
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ulistfmt_formatStringsToResult(listfmt, strings, stringLengths, stringCount, uresult, status);
        
    }

    win32::Windows::Win32::Globalization::ULocaleData* __stdcall ORBIT_IMPL_ulocdata_open(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulocdata_open(localeID, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ulocdata_close(win32::Windows::Win32::Globalization::ULocaleData* uld) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);

        g_api_table.ulocdata_close(uld);
        
    }

    void __stdcall ORBIT_IMPL_ulocdata_setNoSubstitute(win32::Windows::Win32::Globalization::ULocaleData* uld, int8_t setting) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);
        ORBIT_TRACK_PARAM(setting);

        g_api_table.ulocdata_setNoSubstitute(uld, setting);
        
    }

    int8_t __stdcall ORBIT_IMPL_ulocdata_getNoSubstitute(win32::Windows::Win32::Globalization::ULocaleData* uld) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);

        auto win32_impl_result = g_api_table.ulocdata_getNoSubstitute(uld);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_ulocdata_getExemplarSet(win32::Windows::Win32::Globalization::ULocaleData* uld, win32::Windows::Win32::Globalization::USet* fillIn, uint32_t options, win32::Windows::Win32::Globalization::ULocaleDataExemplarSetType extype, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);
        ORBIT_TRACK_PARAM(fillIn);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(extype);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulocdata_getExemplarSet(uld, fillIn, options, extype, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ulocdata_getDelimiter(win32::Windows::Win32::Globalization::ULocaleData* uld, win32::Windows::Win32::Globalization::ULocaleDataDelimiterType type, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulocdata_getDelimiter(uld, type, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UMeasurementSystem __stdcall ORBIT_IMPL_ulocdata_getMeasurementSystem(win32::Windows::Win32::Foundation::PSTR localeID, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulocdata_getMeasurementSystem(localeID, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ulocdata_getPaperSize(win32::Windows::Win32::Foundation::PSTR localeID, int32_t* height, int32_t* width, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeID);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ulocdata_getPaperSize(localeID, height, width, status);
        
    }

    void __stdcall ORBIT_IMPL_ulocdata_getCLDRVersion(uint8_t* versionArray, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(versionArray);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ulocdata_getCLDRVersion(versionArray, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ulocdata_getLocaleDisplayPattern(win32::Windows::Win32::Globalization::ULocaleData* uld, uint16_t* pattern, int32_t patternCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulocdata_getLocaleDisplayPattern(uld, pattern, patternCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ulocdata_getLocaleSeparator(win32::Windows::Win32::Globalization::ULocaleData* uld, uint16_t* separator, int32_t separatorCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uld);
        ORBIT_TRACK_PARAM(separator);
        ORBIT_TRACK_PARAM(separatorCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ulocdata_getLocaleSeparator(uld, separator, separatorCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_formatMessage(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.u_formatMessage(locale, pattern, patternLength, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_vformatMessage(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, int8_t* ap, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(ap);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.u_vformatMessage(locale, pattern, patternLength, result, resultLength, ap, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_parseMessage(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_parseMessage(locale, pattern, patternLength, source, sourceLength, status);
        
    }

    void __stdcall ORBIT_IMPL_u_vparseMessage(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, int8_t* ap, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(ap);
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_vparseMessage(locale, pattern, patternLength, source, sourceLength, ap, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_u_formatMessageWithError(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.u_formatMessageWithError(locale, pattern, patternLength, result, resultLength, parseError, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_u_vformatMessageWithError(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UParseError* parseError, int8_t* ap, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(ap);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.u_vformatMessageWithError(locale, pattern, patternLength, result, resultLength, parseError, ap, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_u_parseMessageWithError(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_parseMessageWithError(locale, pattern, patternLength, source, sourceLength, parseError, status);
        
    }

    void __stdcall ORBIT_IMPL_u_vparseMessageWithError(win32::Windows::Win32::Foundation::PSTR locale, uint16_t* pattern, int32_t patternLength, uint16_t* source, int32_t sourceLength, int8_t* ap, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(ap);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        g_api_table.u_vparseMessageWithError(locale, pattern, patternLength, source, sourceLength, ap, parseError, status);
        
    }

    void** __stdcall ORBIT_IMPL_umsg_open(uint16_t* pattern, int32_t patternLength, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.umsg_open(pattern, patternLength, locale, parseError, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_umsg_close(void** format) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);

        g_api_table.umsg_close(format);
        
    }

    void* __stdcall ORBIT_IMPL_umsg_clone(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.umsg_clone(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_umsg_setLocale(void** fmt, win32::Windows::Win32::Foundation::PSTR locale) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(locale);

        g_api_table.umsg_setLocale(fmt, locale);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_umsg_getLocale(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        auto win32_impl_result = g_api_table.umsg_getLocale(fmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_umsg_applyPattern(void** fmt, uint16_t* pattern, int32_t patternLength, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        g_api_table.umsg_applyPattern(fmt, pattern, patternLength, parseError, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_umsg_toPattern(void** fmt, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.umsg_toPattern(fmt, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_umsg_format(void** fmt, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.umsg_format(fmt, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_umsg_vformat(void** fmt, uint16_t* result, int32_t resultLength, int8_t* ap, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(ap);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.umsg_vformat(fmt, result, resultLength, ap, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_umsg_parse(void** fmt, uint16_t* source, int32_t sourceLength, int32_t* count, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(status);

        g_api_table.umsg_parse(fmt, source, sourceLength, count, status);
        
    }

    void __stdcall ORBIT_IMPL_umsg_vparse(void** fmt, uint16_t* source, int32_t sourceLength, int32_t* count, int8_t* ap, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(sourceLength);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(ap);
        ORBIT_TRACK_PARAM(status);

        g_api_table.umsg_vparse(fmt, source, sourceLength, count, ap, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_umsg_autoQuoteApostrophe(uint16_t* pattern, int32_t patternLength, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.umsg_autoQuoteApostrophe(pattern, patternLength, dest, destCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_unum_open(win32::Windows::Win32::Globalization::UNumberFormatStyle style, uint16_t* pattern, int32_t patternLength, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UParseError* parseErr, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(style);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(parseErr);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_open(style, pattern, patternLength, locale, parseErr, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_close(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        g_api_table.unum_close(fmt);
        
    }

    void** __stdcall ORBIT_IMPL_unum_clone(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_clone(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_format(void** fmt, int32_t number, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_format(fmt, number, result, resultLength, pos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_formatInt64(void** fmt, int64_t number, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_formatInt64(fmt, number, result, resultLength, pos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_formatDouble(void** fmt, double number, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_formatDouble(fmt, number, result, resultLength, pos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_formatDoubleForFields(void** format, double number, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPositionIterator* fpositer, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(fpositer);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_formatDoubleForFields(format, number, result, resultLength, fpositer, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_formatDecimal(void** fmt, win32::Windows::Win32::Foundation::PSTR number, int32_t length, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_formatDecimal(fmt, number, length, result, resultLength, pos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_formatDoubleCurrency(void** fmt, double number, uint16_t* currency, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_formatDoubleCurrency(fmt, number, currency, result, resultLength, pos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_formatUFormattable(void** fmt, void** number, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_formatUFormattable(fmt, number, result, resultLength, pos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_parse(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_parse(fmt, text, textLength, parsePos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_unum_parseInt64(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_parseInt64(fmt, text, textLength, parsePos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_unum_parseDouble(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_parseDouble(fmt, text, textLength, parsePos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_parseDecimal(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Foundation::PSTR outBuf, int32_t outBufLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(outBuf);
        ORBIT_TRACK_PARAM(outBufLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_parseDecimal(fmt, text, textLength, parsePos, outBuf, outBufLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_unum_parseDoubleCurrency(void** fmt, uint16_t* text, int32_t textLength, int32_t* parsePos, uint16_t* currency, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(currency);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_parseDoubleCurrency(fmt, text, textLength, parsePos, currency, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_unum_parseToUFormattable(void** fmt, void** result, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_parseToUFormattable(fmt, result, text, textLength, parsePos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_applyPattern(void** format, int8_t localized, uint16_t* pattern, int32_t patternLength, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(localized);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(status);

        g_api_table.unum_applyPattern(format, localized, pattern, patternLength, parseError, status);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_unum_getAvailable(int32_t localeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeIndex);

        auto win32_impl_result = g_api_table.unum_getAvailable(localeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.unum_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_getAttribute(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatAttribute attr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(attr);

        auto win32_impl_result = g_api_table.unum_getAttribute(fmt, attr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_setAttribute(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatAttribute attr, int32_t newValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(newValue);

        g_api_table.unum_setAttribute(fmt, attr, newValue);
        
    }

    double __stdcall ORBIT_IMPL_unum_getDoubleAttribute(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatAttribute attr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(attr);

        auto win32_impl_result = g_api_table.unum_getDoubleAttribute(fmt, attr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_setDoubleAttribute(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatAttribute attr, double newValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(newValue);

        g_api_table.unum_setDoubleAttribute(fmt, attr, newValue);
        
    }

    int32_t __stdcall ORBIT_IMPL_unum_getTextAttribute(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatTextAttribute tag, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(tag);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_getTextAttribute(fmt, tag, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_setTextAttribute(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatTextAttribute tag, uint16_t* newValue, int32_t newValueLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(tag);
        ORBIT_TRACK_PARAM(newValue);
        ORBIT_TRACK_PARAM(newValueLength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.unum_setTextAttribute(fmt, tag, newValue, newValueLength, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_unum_toPattern(void** fmt, int8_t isPatternLocalized, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(isPatternLocalized);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_toPattern(fmt, isPatternLocalized, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unum_getSymbol(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatSymbol symbol, uint16_t* buffer, int32_t size, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(symbol);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_getSymbol(fmt, symbol, buffer, size, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_setSymbol(void** fmt, win32::Windows::Win32::Globalization::UNumberFormatSymbol symbol, uint16_t* value, int32_t length, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(symbol);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(status);

        g_api_table.unum_setSymbol(fmt, symbol, value, length, status);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_unum_getLocaleByType(void** fmt, win32::Windows::Win32::Globalization::ULocDataLocaleType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_getLocaleByType(fmt, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unum_setContext(void** fmt, win32::Windows::Win32::Globalization::UDisplayContext value, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(status);

        g_api_table.unum_setContext(fmt, value, status);
        
    }

    win32::Windows::Win32::Globalization::UDisplayContext __stdcall ORBIT_IMPL_unum_getContext(void** fmt, win32::Windows::Win32::Globalization::UDisplayContextType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unum_getContext(fmt, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCalendarDateFields __stdcall ORBIT_IMPL_udat_toCalendarDateField(win32::Windows::Win32::Globalization::UDateFormatField field) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(field);

        auto win32_impl_result = g_api_table.udat_toCalendarDateField(field);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_udat_open(win32::Windows::Win32::Globalization::UDateFormatStyle timeStyle, win32::Windows::Win32::Globalization::UDateFormatStyle dateStyle, win32::Windows::Win32::Foundation::PSTR locale, uint16_t* tzID, int32_t tzIDLength, uint16_t* pattern, int32_t patternLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(timeStyle);
        ORBIT_TRACK_PARAM(dateStyle);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(tzID);
        ORBIT_TRACK_PARAM(tzIDLength);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_open(timeStyle, dateStyle, locale, tzID, tzIDLength, pattern, patternLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_close(void** format) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);

        g_api_table.udat_close(format);
        
    }

    int8_t __stdcall ORBIT_IMPL_udat_getBooleanAttribute(void** fmt, win32::Windows::Win32::Globalization::UDateFormatBooleanAttribute attr, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_getBooleanAttribute(fmt, attr, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_setBooleanAttribute(void** fmt, win32::Windows::Win32::Globalization::UDateFormatBooleanAttribute attr, int8_t newValue, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(attr);
        ORBIT_TRACK_PARAM(newValue);
        ORBIT_TRACK_PARAM(status);

        g_api_table.udat_setBooleanAttribute(fmt, attr, newValue, status);
        
    }

    void** __stdcall ORBIT_IMPL_udat_clone(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_clone(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udat_format(void** format, double dateToFormat, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPosition* position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(dateToFormat);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_format(format, dateToFormat, result, resultLength, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udat_formatCalendar(void** format, void** calendar, uint16_t* result, int32_t capacity, win32::Windows::Win32::Globalization::UFieldPosition* position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(calendar);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_formatCalendar(format, calendar, result, capacity, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udat_formatForFields(void** format, double dateToFormat, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UFieldPositionIterator* fpositer, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(dateToFormat);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(fpositer);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_formatForFields(format, dateToFormat, result, resultLength, fpositer, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udat_formatCalendarForFields(void** format, void** calendar, uint16_t* result, int32_t capacity, win32::Windows::Win32::Globalization::UFieldPositionIterator* fpositer, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(calendar);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(fpositer);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_formatCalendarForFields(format, calendar, result, capacity, fpositer, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_udat_parse(void** format, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_parse(format, text, textLength, parsePos, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_parseCalendar(void** format, void** calendar, uint16_t* text, int32_t textLength, int32_t* parsePos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(calendar);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(parsePos);
        ORBIT_TRACK_PARAM(status);

        g_api_table.udat_parseCalendar(format, calendar, text, textLength, parsePos, status);
        
    }

    int8_t __stdcall ORBIT_IMPL_udat_isLenient(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        auto win32_impl_result = g_api_table.udat_isLenient(fmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_setLenient(void** fmt, int8_t isLenient) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(isLenient);

        g_api_table.udat_setLenient(fmt, isLenient);
        
    }

    void** __stdcall ORBIT_IMPL_udat_getCalendar(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        auto win32_impl_result = g_api_table.udat_getCalendar(fmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_setCalendar(void** fmt, void** calendarToSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(calendarToSet);

        g_api_table.udat_setCalendar(fmt, calendarToSet);
        
    }

    void** __stdcall ORBIT_IMPL_udat_getNumberFormat(void** fmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);

        auto win32_impl_result = g_api_table.udat_getNumberFormat(fmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_udat_getNumberFormatForField(void** fmt, uint16_t field) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(field);

        auto win32_impl_result = g_api_table.udat_getNumberFormatForField(fmt, field);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_adoptNumberFormatForFields(void** fmt, uint16_t* fields, void** numberFormatToSet, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(fields);
        ORBIT_TRACK_PARAM(numberFormatToSet);
        ORBIT_TRACK_PARAM(status);

        g_api_table.udat_adoptNumberFormatForFields(fmt, fields, numberFormatToSet, status);
        
    }

    void __stdcall ORBIT_IMPL_udat_setNumberFormat(void** fmt, void** numberFormatToSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(numberFormatToSet);

        g_api_table.udat_setNumberFormat(fmt, numberFormatToSet);
        
    }

    void __stdcall ORBIT_IMPL_udat_adoptNumberFormat(void** fmt, void** numberFormatToAdopt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(numberFormatToAdopt);

        g_api_table.udat_adoptNumberFormat(fmt, numberFormatToAdopt);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_udat_getAvailable(int32_t localeIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(localeIndex);

        auto win32_impl_result = g_api_table.udat_getAvailable(localeIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udat_countAvailable() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.udat_countAvailable();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    double __stdcall ORBIT_IMPL_udat_get2DigitYearStart(void** fmt, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_get2DigitYearStart(fmt, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_set2DigitYearStart(void** fmt, double d, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(d);
        ORBIT_TRACK_PARAM(status);

        g_api_table.udat_set2DigitYearStart(fmt, d, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_udat_toPattern(void** fmt, int8_t localized, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(localized);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_toPattern(fmt, localized, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_applyPattern(void** format, int8_t localized, uint16_t* pattern, int32_t patternLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(localized);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);

        g_api_table.udat_applyPattern(format, localized, pattern, patternLength);
        
    }

    int32_t __stdcall ORBIT_IMPL_udat_getSymbols(void** fmt, win32::Windows::Win32::Globalization::UDateFormatSymbolType type, int32_t symbolIndex, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(symbolIndex);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_getSymbols(fmt, type, symbolIndex, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udat_countSymbols(void** fmt, win32::Windows::Win32::Globalization::UDateFormatSymbolType type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(type);

        auto win32_impl_result = g_api_table.udat_countSymbols(fmt, type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_setSymbols(void** format, win32::Windows::Win32::Globalization::UDateFormatSymbolType type, int32_t symbolIndex, uint16_t* value, int32_t valueLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(symbolIndex);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueLength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.udat_setSymbols(format, type, symbolIndex, value, valueLength, status);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_udat_getLocaleByType(void** fmt, win32::Windows::Win32::Globalization::ULocDataLocaleType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_getLocaleByType(fmt, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udat_setContext(void** fmt, win32::Windows::Win32::Globalization::UDisplayContext value, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(status);

        g_api_table.udat_setContext(fmt, value, status);
        
    }

    win32::Windows::Win32::Globalization::UDisplayContext __stdcall ORBIT_IMPL_udat_getContext(void** fmt, win32::Windows::Win32::Globalization::UDisplayContextType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fmt);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.udat_getContext(fmt, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_udatpg_open(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_open(locale, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_udatpg_openEmpty(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_openEmpty(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udatpg_close(void** dtpg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);

        g_api_table.udatpg_close(dtpg);
        
    }

    void** __stdcall ORBIT_IMPL_udatpg_clone(void** dtpg, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_clone(dtpg, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_getBestPattern(void** dtpg, uint16_t* skeleton, int32_t length, uint16_t* bestPattern, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(bestPattern);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_getBestPattern(dtpg, skeleton, length, bestPattern, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_getBestPatternWithOptions(void** dtpg, uint16_t* skeleton, int32_t length, win32::Windows::Win32::Globalization::UDateTimePatternMatchOptions options, uint16_t* bestPattern, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(bestPattern);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_getBestPatternWithOptions(dtpg, skeleton, length, options, bestPattern, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_getSkeleton(void** unusedDtpg, uint16_t* pattern, int32_t length, uint16_t* skeleton, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unusedDtpg);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_getSkeleton(unusedDtpg, pattern, length, skeleton, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_getBaseSkeleton(void** unusedDtpg, uint16_t* pattern, int32_t length, uint16_t* baseSkeleton, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unusedDtpg);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(baseSkeleton);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_getBaseSkeleton(unusedDtpg, pattern, length, baseSkeleton, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UDateTimePatternConflict __stdcall ORBIT_IMPL_udatpg_addPattern(void** dtpg, uint16_t* pattern, int32_t patternLength, int8_t override, uint16_t* conflictingPattern, int32_t capacity, int32_t* pLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(override);
        ORBIT_TRACK_PARAM(conflictingPattern);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_addPattern(dtpg, pattern, patternLength, override, conflictingPattern, capacity, pLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udatpg_setAppendItemFormat(void** dtpg, win32::Windows::Win32::Globalization::UDateTimePatternField field, uint16_t* value, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(length);

        g_api_table.udatpg_setAppendItemFormat(dtpg, field, value, length);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_udatpg_getAppendItemFormat(void** dtpg, win32::Windows::Win32::Globalization::UDateTimePatternField field, int32_t* pLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(pLength);

        auto win32_impl_result = g_api_table.udatpg_getAppendItemFormat(dtpg, field, pLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udatpg_setAppendItemName(void** dtpg, win32::Windows::Win32::Globalization::UDateTimePatternField field, uint16_t* value, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(length);

        g_api_table.udatpg_setAppendItemName(dtpg, field, value, length);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_udatpg_getAppendItemName(void** dtpg, win32::Windows::Win32::Globalization::UDateTimePatternField field, int32_t* pLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(pLength);

        auto win32_impl_result = g_api_table.udatpg_getAppendItemName(dtpg, field, pLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_getFieldDisplayName(void** dtpg, win32::Windows::Win32::Globalization::UDateTimePatternField field, win32::Windows::Win32::Globalization::UDateTimePGDisplayWidth width, uint16_t* fieldName, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(field);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(fieldName);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_getFieldDisplayName(dtpg, field, width, fieldName, capacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udatpg_setDateTimeFormat(void** dtpg, uint16_t* dtFormat, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(dtFormat);
        ORBIT_TRACK_PARAM(length);

        g_api_table.udatpg_setDateTimeFormat(dtpg, dtFormat, length);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_udatpg_getDateTimeFormat(void** dtpg, int32_t* pLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pLength);

        auto win32_impl_result = g_api_table.udatpg_getDateTimeFormat(dtpg, pLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_udatpg_setDecimal(void** dtpg, uint16_t* decimal, int32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(decimal);
        ORBIT_TRACK_PARAM(length);

        g_api_table.udatpg_setDecimal(dtpg, decimal, length);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_udatpg_getDecimal(void** dtpg, int32_t* pLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pLength);

        auto win32_impl_result = g_api_table.udatpg_getDecimal(dtpg, pLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_replaceFieldTypes(void** dtpg, uint16_t* pattern, int32_t patternLength, uint16_t* skeleton, int32_t skeletonLength, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(skeletonLength);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_replaceFieldTypes(dtpg, pattern, patternLength, skeleton, skeletonLength, dest, destCapacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_udatpg_replaceFieldTypesWithOptions(void** dtpg, uint16_t* pattern, int32_t patternLength, uint16_t* skeleton, int32_t skeletonLength, win32::Windows::Win32::Globalization::UDateTimePatternMatchOptions options, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(skeletonLength);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_replaceFieldTypesWithOptions(dtpg, pattern, patternLength, skeleton, skeletonLength, options, dest, destCapacity, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_udatpg_openSkeletons(void** dtpg, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_openSkeletons(dtpg, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_udatpg_openBaseSkeletons(void** dtpg, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.udatpg_openBaseSkeletons(dtpg, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_udatpg_getPatternForSkeleton(void** dtpg, uint16_t* skeleton, int32_t skeletonLength, int32_t* pLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dtpg);
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(skeletonLength);
        ORBIT_TRACK_PARAM(pLength);

        auto win32_impl_result = g_api_table.udatpg_getPatternForSkeleton(dtpg, skeleton, skeletonLength, pLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNumberFormatter* __stdcall ORBIT_IMPL_unumf_openForSkeletonAndLocale(uint16_t* skeleton, int32_t skeletonLen, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(skeletonLen);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.unumf_openForSkeletonAndLocale(skeleton, skeletonLen, locale, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNumberFormatter* __stdcall ORBIT_IMPL_unumf_openForSkeletonAndLocaleWithError(uint16_t* skeleton, int32_t skeletonLen, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UParseError* perror, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(skeleton);
        ORBIT_TRACK_PARAM(skeletonLen);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(perror);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.unumf_openForSkeletonAndLocaleWithError(skeleton, skeletonLen, locale, perror, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UFormattedNumber* __stdcall ORBIT_IMPL_unumf_openResult(win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.unumf_openResult(ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unumf_formatInt(win32::Windows::Win32::Globalization::UNumberFormatter* uformatter, int64_t value, win32::Windows::Win32::Globalization::UFormattedNumber* uresult, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uformatter);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.unumf_formatInt(uformatter, value, uresult, ec);
        
    }

    void __stdcall ORBIT_IMPL_unumf_formatDouble(win32::Windows::Win32::Globalization::UNumberFormatter* uformatter, double value, win32::Windows::Win32::Globalization::UFormattedNumber* uresult, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uformatter);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.unumf_formatDouble(uformatter, value, uresult, ec);
        
    }

    void __stdcall ORBIT_IMPL_unumf_formatDecimal(win32::Windows::Win32::Globalization::UNumberFormatter* uformatter, win32::Windows::Win32::Foundation::PSTR value, int32_t valueLen, win32::Windows::Win32::Globalization::UFormattedNumber* uresult, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uformatter);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueLen);
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.unumf_formatDecimal(uformatter, value, valueLen, uresult, ec);
        
    }

    win32::Windows::Win32::Globalization::UFormattedValue* __stdcall ORBIT_IMPL_unumf_resultAsValue(win32::Windows::Win32::Globalization::UFormattedNumber* uresult, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.unumf_resultAsValue(uresult, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unumf_resultToString(win32::Windows::Win32::Globalization::UFormattedNumber* uresult, uint16_t* buffer, int32_t bufferCapacity, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferCapacity);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.unumf_resultToString(uresult, buffer, bufferCapacity, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_unumf_resultNextFieldPosition(win32::Windows::Win32::Globalization::UFormattedNumber* uresult, win32::Windows::Win32::Globalization::UFieldPosition* ufpos, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ufpos);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.unumf_resultNextFieldPosition(uresult, ufpos, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unumf_resultGetAllFieldPositions(win32::Windows::Win32::Globalization::UFormattedNumber* uresult, win32::Windows::Win32::Globalization::UFieldPositionIterator* ufpositer, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);
        ORBIT_TRACK_PARAM(ufpositer);
        ORBIT_TRACK_PARAM(ec);

        g_api_table.unumf_resultGetAllFieldPositions(uresult, ufpositer, ec);
        
    }

    void __stdcall ORBIT_IMPL_unumf_close(win32::Windows::Win32::Globalization::UNumberFormatter* uformatter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uformatter);

        g_api_table.unumf_close(uformatter);
        
    }

    void __stdcall ORBIT_IMPL_unumf_closeResult(win32::Windows::Win32::Globalization::UFormattedNumber* uresult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uresult);

        g_api_table.unumf_closeResult(uresult);
        
    }

    win32::Windows::Win32::Globalization::UNumberingSystem* __stdcall ORBIT_IMPL_unumsys_open(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unumsys_open(locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UNumberingSystem* __stdcall ORBIT_IMPL_unumsys_openByName(win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unumsys_openByName(name, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_unumsys_close(win32::Windows::Win32::Globalization::UNumberingSystem* unumsys) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unumsys);

        g_api_table.unumsys_close(unumsys);
        
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_unumsys_openAvailableNames(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unumsys_openAvailableNames(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_unumsys_getName(win32::Windows::Win32::Globalization::UNumberingSystem* unumsys) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unumsys);

        auto win32_impl_result = g_api_table.unumsys_getName(unumsys);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_unumsys_isAlgorithmic(win32::Windows::Win32::Globalization::UNumberingSystem* unumsys) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unumsys);

        auto win32_impl_result = g_api_table.unumsys_isAlgorithmic(unumsys);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unumsys_getRadix(win32::Windows::Win32::Globalization::UNumberingSystem* unumsys) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unumsys);

        auto win32_impl_result = g_api_table.unumsys_getRadix(unumsys);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_unumsys_getDescription(win32::Windows::Win32::Globalization::UNumberingSystem* unumsys, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unumsys);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.unumsys_getDescription(unumsys, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UPluralRules* __stdcall ORBIT_IMPL_uplrules_open(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uplrules_open(locale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UPluralRules* __stdcall ORBIT_IMPL_uplrules_openForType(win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UPluralType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uplrules_openForType(locale, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uplrules_close(win32::Windows::Win32::Globalization::UPluralRules* uplrules) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uplrules);

        g_api_table.uplrules_close(uplrules);
        
    }

    int32_t __stdcall ORBIT_IMPL_uplrules_select(win32::Windows::Win32::Globalization::UPluralRules* uplrules, double number, uint16_t* keyword, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uplrules);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uplrules_select(uplrules, number, keyword, capacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uplrules_selectFormatted(win32::Windows::Win32::Globalization::UPluralRules* uplrules, win32::Windows::Win32::Globalization::UFormattedNumber* number, uint16_t* keyword, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uplrules);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(keyword);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uplrules_selectFormatted(uplrules, number, keyword, capacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uplrules_getKeywords(win32::Windows::Win32::Globalization::UPluralRules* uplrules, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uplrules);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uplrules_getKeywords(uplrules, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegularExpression* __stdcall ORBIT_IMPL_uregex_open(uint16_t* pattern, int32_t patternLength, uint32_t flags, win32::Windows::Win32::Globalization::UParseError* pe, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternLength);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(pe);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_open(pattern, patternLength, flags, pe, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegularExpression* __stdcall ORBIT_IMPL_uregex_openUText(win32::Windows::Win32::Globalization::UText* pattern, uint32_t flags, win32::Windows::Win32::Globalization::UParseError* pe, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(pe);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_openUText(pattern, flags, pe, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegularExpression* __stdcall ORBIT_IMPL_uregex_openC(win32::Windows::Win32::Foundation::PSTR pattern, uint32_t flags, win32::Windows::Win32::Globalization::UParseError* pe, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(pe);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_openC(pattern, flags, pe, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_close(win32::Windows::Win32::Globalization::URegularExpression* regexp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);

        g_api_table.uregex_close(regexp);
        
    }

    win32::Windows::Win32::Globalization::URegularExpression* __stdcall ORBIT_IMPL_uregex_clone(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_clone(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t* __stdcall ORBIT_IMPL_uregex_pattern(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t* patLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(patLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_pattern(regexp, patLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_uregex_patternUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_patternUText(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_flags(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_flags(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_setText(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t* text, int32_t textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setText(regexp, text, textLength, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_setUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* text, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setUText(regexp, text, status);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_uregex_getText(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t* textLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_getText(regexp, textLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_uregex_getUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* dest, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_getUText(regexp, dest, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_refreshUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* text, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_refreshUText(regexp, text, status);
        
    }

    int8_t __stdcall ORBIT_IMPL_uregex_matches(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_matches(regexp, startIndex, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_matches64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int64_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_matches64(regexp, startIndex, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_lookingAt(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_lookingAt(regexp, startIndex, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_lookingAt64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int64_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_lookingAt64(regexp, startIndex, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_find(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_find(regexp, startIndex, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_find64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int64_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_find64(regexp, startIndex, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_findNext(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_findNext(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_groupCount(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_groupCount(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_groupNumberFromName(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t* groupName, int32_t nameLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupName);
        ORBIT_TRACK_PARAM(nameLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_groupNumberFromName(regexp, groupName, nameLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_groupNumberFromCName(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Foundation::PSTR groupName, int32_t nameLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupName);
        ORBIT_TRACK_PARAM(nameLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_groupNumberFromCName(regexp, groupName, nameLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_group(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t groupNum, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupNum);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_group(regexp, groupNum, dest, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_uregex_groupUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t groupNum, win32::Windows::Win32::Globalization::UText* dest, int64_t* groupLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupNum);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(groupLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_groupUText(regexp, groupNum, dest, groupLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_start(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t groupNum, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupNum);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_start(regexp, groupNum, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_uregex_start64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t groupNum, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupNum);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_start64(regexp, groupNum, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_end(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t groupNum, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupNum);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_end(regexp, groupNum, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_uregex_end64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t groupNum, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(groupNum);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_end64(regexp, groupNum, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_reset(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t index, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(index);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_reset(regexp, index, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_reset64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int64_t index, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(index);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_reset64(regexp, index, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_setRegion(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t regionStart, int32_t regionLimit, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(regionStart);
        ORBIT_TRACK_PARAM(regionLimit);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setRegion(regexp, regionStart, regionLimit, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_setRegion64(win32::Windows::Win32::Globalization::URegularExpression* regexp, int64_t regionStart, int64_t regionLimit, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(regionStart);
        ORBIT_TRACK_PARAM(regionLimit);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setRegion64(regexp, regionStart, regionLimit, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_setRegionAndStart(win32::Windows::Win32::Globalization::URegularExpression* regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(regionStart);
        ORBIT_TRACK_PARAM(regionLimit);
        ORBIT_TRACK_PARAM(startIndex);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setRegionAndStart(regexp, regionStart, regionLimit, startIndex, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_uregex_regionStart(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_regionStart(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_uregex_regionStart64(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_regionStart64(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_regionEnd(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_regionEnd(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_uregex_regionEnd64(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_regionEnd64(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_hasTransparentBounds(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_hasTransparentBounds(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_useTransparentBounds(win32::Windows::Win32::Globalization::URegularExpression* regexp, int8_t b, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(b);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_useTransparentBounds(regexp, b, status);
        
    }

    int8_t __stdcall ORBIT_IMPL_uregex_hasAnchoringBounds(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_hasAnchoringBounds(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_useAnchoringBounds(win32::Windows::Win32::Globalization::URegularExpression* regexp, int8_t b, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(b);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_useAnchoringBounds(regexp, b, status);
        
    }

    int8_t __stdcall ORBIT_IMPL_uregex_hitEnd(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_hitEnd(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregex_requireEnd(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_requireEnd(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_replaceAll(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t* replacementText, int32_t replacementLength, uint16_t* destBuf, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(replacementText);
        ORBIT_TRACK_PARAM(replacementLength);
        ORBIT_TRACK_PARAM(destBuf);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_replaceAll(regexp, replacementText, replacementLength, destBuf, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_uregex_replaceAllUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* replacement, win32::Windows::Win32::Globalization::UText* dest, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(replacement);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_replaceAllUText(regexp, replacement, dest, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_replaceFirst(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t* replacementText, int32_t replacementLength, uint16_t* destBuf, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(replacementText);
        ORBIT_TRACK_PARAM(replacementLength);
        ORBIT_TRACK_PARAM(destBuf);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_replaceFirst(regexp, replacementText, replacementLength, destBuf, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_uregex_replaceFirstUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* replacement, win32::Windows::Win32::Globalization::UText* dest, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(replacement);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_replaceFirstUText(regexp, replacement, dest, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_appendReplacement(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t* replacementText, int32_t replacementLength, uint16_t** destBuf, int32_t* destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(replacementText);
        ORBIT_TRACK_PARAM(replacementLength);
        ORBIT_TRACK_PARAM(destBuf);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_appendReplacement(regexp, replacementText, replacementLength, destBuf, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_appendReplacementUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* replacementText, win32::Windows::Win32::Globalization::UText* dest, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(replacementText);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_appendReplacementUText(regexp, replacementText, dest, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_uregex_appendTail(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t** destBuf, int32_t* destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(destBuf);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_appendTail(regexp, destBuf, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UText* __stdcall ORBIT_IMPL_uregex_appendTailUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText* dest, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_appendTailUText(regexp, dest, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_split(win32::Windows::Win32::Globalization::URegularExpression* regexp, uint16_t* destBuf, int32_t destCapacity, int32_t* requiredCapacity, uint16_t** destFields, int32_t destFieldsCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(destBuf);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(requiredCapacity);
        ORBIT_TRACK_PARAM(destFields);
        ORBIT_TRACK_PARAM(destFieldsCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_split(regexp, destBuf, destCapacity, requiredCapacity, destFields, destFieldsCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregex_splitUText(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UText** destFields, int32_t destFieldsCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(destFields);
        ORBIT_TRACK_PARAM(destFieldsCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_splitUText(regexp, destFields, destFieldsCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_setTimeLimit(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t limit, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setTimeLimit(regexp, limit, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_uregex_getTimeLimit(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_getTimeLimit(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_setStackLimit(win32::Windows::Win32::Globalization::URegularExpression* regexp, int32_t limit, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setStackLimit(regexp, limit, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_uregex_getStackLimit(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregex_getStackLimit(regexp, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uregex_setMatchCallback(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::URegexMatchCallback* callback, void* context, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setMatchCallback(regexp, callback, context, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_getMatchCallback(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::URegexMatchCallback** callback, void** context, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_getMatchCallback(regexp, callback, context, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_setFindProgressCallback(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::URegexFindProgressCallback* callback, void* context, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_setFindProgressCallback(regexp, callback, context, status);
        
    }

    void __stdcall ORBIT_IMPL_uregex_getFindProgressCallback(win32::Windows::Win32::Globalization::URegularExpression* regexp, win32::Windows::Win32::Globalization::URegexFindProgressCallback** callback, void** context, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regexp);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uregex_getFindProgressCallback(regexp, callback, context, status);
        
    }

    win32::Windows::Win32::Globalization::URegion* __stdcall ORBIT_IMPL_uregion_getRegionFromCode(win32::Windows::Win32::Foundation::PSTR regionCode, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(regionCode);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregion_getRegionFromCode(regionCode, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegion* __stdcall ORBIT_IMPL_uregion_getRegionFromNumericCode(int32_t code, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(code);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregion_getRegionFromNumericCode(code, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uregion_getAvailable(win32::Windows::Win32::Globalization::URegionType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregion_getAvailable(type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregion_areEqual(win32::Windows::Win32::Globalization::URegion* uregion, win32::Windows::Win32::Globalization::URegion* otherRegion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);
        ORBIT_TRACK_PARAM(otherRegion);

        auto win32_impl_result = g_api_table.uregion_areEqual(uregion, otherRegion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegion* __stdcall ORBIT_IMPL_uregion_getContainingRegion(win32::Windows::Win32::Globalization::URegion* uregion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);

        auto win32_impl_result = g_api_table.uregion_getContainingRegion(uregion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegion* __stdcall ORBIT_IMPL_uregion_getContainingRegionOfType(win32::Windows::Win32::Globalization::URegion* uregion, win32::Windows::Win32::Globalization::URegionType type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);
        ORBIT_TRACK_PARAM(type);

        auto win32_impl_result = g_api_table.uregion_getContainingRegionOfType(uregion, type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uregion_getContainedRegions(win32::Windows::Win32::Globalization::URegion* uregion, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregion_getContainedRegions(uregion, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uregion_getContainedRegionsOfType(win32::Windows::Win32::Globalization::URegion* uregion, win32::Windows::Win32::Globalization::URegionType type, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregion_getContainedRegionsOfType(uregion, type, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int8_t __stdcall ORBIT_IMPL_uregion_contains(win32::Windows::Win32::Globalization::URegion* uregion, win32::Windows::Win32::Globalization::URegion* otherRegion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);
        ORBIT_TRACK_PARAM(otherRegion);

        auto win32_impl_result = g_api_table.uregion_contains(uregion, otherRegion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_uregion_getPreferredValues(win32::Windows::Win32::Globalization::URegion* uregion, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uregion_getPreferredValues(uregion, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uregion_getRegionCode(win32::Windows::Win32::Globalization::URegion* uregion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);

        auto win32_impl_result = g_api_table.uregion_getRegionCode(uregion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uregion_getNumericCode(win32::Windows::Win32::Globalization::URegion* uregion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);

        auto win32_impl_result = g_api_table.uregion_getNumericCode(uregion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URegionType __stdcall ORBIT_IMPL_uregion_getType(win32::Windows::Win32::Globalization::URegion* uregion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uregion);

        auto win32_impl_result = g_api_table.uregion_getType(uregion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* __stdcall ORBIT_IMPL_ureldatefmt_open(win32::Windows::Win32::Foundation::PSTR locale, void** nfToAdopt, win32::Windows::Win32::Globalization::UDateRelativeDateTimeFormatterStyle width, win32::Windows::Win32::Globalization::UDisplayContext capitalizationContext, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(nfToAdopt);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(capitalizationContext);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ureldatefmt_open(locale, nfToAdopt, width, capitalizationContext, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ureldatefmt_close(win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* reldatefmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reldatefmt);

        g_api_table.ureldatefmt_close(reldatefmt);
        
    }

    win32::Windows::Win32::Globalization::UFormattedRelativeDateTime* __stdcall ORBIT_IMPL_ureldatefmt_openResult(win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ureldatefmt_openResult(ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UFormattedValue* __stdcall ORBIT_IMPL_ureldatefmt_resultAsValue(win32::Windows::Win32::Globalization::UFormattedRelativeDateTime* ufrdt, win32::Windows::Win32::Globalization::UErrorCode* ec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ufrdt);
        ORBIT_TRACK_PARAM(ec);

        auto win32_impl_result = g_api_table.ureldatefmt_resultAsValue(ufrdt, ec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ureldatefmt_closeResult(win32::Windows::Win32::Globalization::UFormattedRelativeDateTime* ufrdt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ufrdt);

        g_api_table.ureldatefmt_closeResult(ufrdt);
        
    }

    int32_t __stdcall ORBIT_IMPL_ureldatefmt_formatNumeric(win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* reldatefmt, double offset, win32::Windows::Win32::Globalization::URelativeDateTimeUnit unit, uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reldatefmt);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(unit);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ureldatefmt_formatNumeric(reldatefmt, offset, unit, result, resultCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ureldatefmt_formatNumericToResult(win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* reldatefmt, double offset, win32::Windows::Win32::Globalization::URelativeDateTimeUnit unit, win32::Windows::Win32::Globalization::UFormattedRelativeDateTime* result, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reldatefmt);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(unit);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ureldatefmt_formatNumericToResult(reldatefmt, offset, unit, result, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ureldatefmt_format(win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* reldatefmt, double offset, win32::Windows::Win32::Globalization::URelativeDateTimeUnit unit, uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reldatefmt);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(unit);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ureldatefmt_format(reldatefmt, offset, unit, result, resultCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ureldatefmt_formatToResult(win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* reldatefmt, double offset, win32::Windows::Win32::Globalization::URelativeDateTimeUnit unit, win32::Windows::Win32::Globalization::UFormattedRelativeDateTime* result, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reldatefmt);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(unit);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(status);

        g_api_table.ureldatefmt_formatToResult(reldatefmt, offset, unit, result, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_ureldatefmt_combineDateAndTime(win32::Windows::Win32::Globalization::URelativeDateTimeFormatter* reldatefmt, uint16_t* relativeDateString, int32_t relativeDateStringLen, uint16_t* timeString, int32_t timeStringLen, uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reldatefmt);
        ORBIT_TRACK_PARAM(relativeDateString);
        ORBIT_TRACK_PARAM(relativeDateStringLen);
        ORBIT_TRACK_PARAM(timeString);
        ORBIT_TRACK_PARAM(timeStringLen);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.ureldatefmt_combineDateAndTime(reldatefmt, relativeDateString, relativeDateStringLen, timeString, timeStringLen, result, resultCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UStringSearch* __stdcall ORBIT_IMPL_usearch_open(uint16_t* pattern, int32_t patternlength, uint16_t* text, int32_t textlength, win32::Windows::Win32::Foundation::PSTR locale, win32::Windows::Win32::Globalization::UBreakIterator* breakiter, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternlength);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textlength);
        ORBIT_TRACK_PARAM(locale);
        ORBIT_TRACK_PARAM(breakiter);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_open(pattern, patternlength, text, textlength, locale, breakiter, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UStringSearch* __stdcall ORBIT_IMPL_usearch_openFromCollator(uint16_t* pattern, int32_t patternlength, uint16_t* text, int32_t textlength, win32::Windows::Win32::Globalization::UCollator* collator, win32::Windows::Win32::Globalization::UBreakIterator* breakiter, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternlength);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textlength);
        ORBIT_TRACK_PARAM(collator);
        ORBIT_TRACK_PARAM(breakiter);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_openFromCollator(pattern, patternlength, text, textlength, collator, breakiter, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usearch_close(win32::Windows::Win32::Globalization::UStringSearch* searchiter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(searchiter);

        g_api_table.usearch_close(searchiter);
        
    }

    void __stdcall ORBIT_IMPL_usearch_setOffset(win32::Windows::Win32::Globalization::UStringSearch* strsrch, int32_t position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        g_api_table.usearch_setOffset(strsrch, position, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_usearch_getOffset(win32::Windows::Win32::Globalization::UStringSearch* strsrch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);

        auto win32_impl_result = g_api_table.usearch_getOffset(strsrch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usearch_setAttribute(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::USearchAttribute attribute, win32::Windows::Win32::Globalization::USearchAttributeValue value, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(attribute);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(status);

        g_api_table.usearch_setAttribute(strsrch, attribute, value, status);
        
    }

    win32::Windows::Win32::Globalization::USearchAttributeValue __stdcall ORBIT_IMPL_usearch_getAttribute(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::USearchAttribute attribute) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(attribute);

        auto win32_impl_result = g_api_table.usearch_getAttribute(strsrch, attribute);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_getMatchedStart(win32::Windows::Win32::Globalization::UStringSearch* strsrch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);

        auto win32_impl_result = g_api_table.usearch_getMatchedStart(strsrch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_getMatchedLength(win32::Windows::Win32::Globalization::UStringSearch* strsrch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);

        auto win32_impl_result = g_api_table.usearch_getMatchedLength(strsrch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_getMatchedText(win32::Windows::Win32::Globalization::UStringSearch* strsrch, uint16_t* result, int32_t resultCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_getMatchedText(strsrch, result, resultCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usearch_setBreakIterator(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::UBreakIterator* breakiter, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(breakiter);
        ORBIT_TRACK_PARAM(status);

        g_api_table.usearch_setBreakIterator(strsrch, breakiter, status);
        
    }

    win32::Windows::Win32::Globalization::UBreakIterator* __stdcall ORBIT_IMPL_usearch_getBreakIterator(win32::Windows::Win32::Globalization::UStringSearch* strsrch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);

        auto win32_impl_result = g_api_table.usearch_getBreakIterator(strsrch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usearch_setText(win32::Windows::Win32::Globalization::UStringSearch* strsrch, uint16_t* text, int32_t textlength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textlength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.usearch_setText(strsrch, text, textlength, status);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_usearch_getText(win32::Windows::Win32::Globalization::UStringSearch* strsrch, int32_t* length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.usearch_getText(strsrch, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UCollator* __stdcall ORBIT_IMPL_usearch_getCollator(win32::Windows::Win32::Globalization::UStringSearch* strsrch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);

        auto win32_impl_result = g_api_table.usearch_getCollator(strsrch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usearch_setCollator(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::UCollator* collator, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(collator);
        ORBIT_TRACK_PARAM(status);

        g_api_table.usearch_setCollator(strsrch, collator, status);
        
    }

    void __stdcall ORBIT_IMPL_usearch_setPattern(win32::Windows::Win32::Globalization::UStringSearch* strsrch, uint16_t* pattern, int32_t patternlength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(pattern);
        ORBIT_TRACK_PARAM(patternlength);
        ORBIT_TRACK_PARAM(status);

        g_api_table.usearch_setPattern(strsrch, pattern, patternlength, status);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_usearch_getPattern(win32::Windows::Win32::Globalization::UStringSearch* strsrch, int32_t* length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.usearch_getPattern(strsrch, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_first(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_first(strsrch, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_following(win32::Windows::Win32::Globalization::UStringSearch* strsrch, int32_t position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_following(strsrch, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_last(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_last(strsrch, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_preceding(win32::Windows::Win32::Globalization::UStringSearch* strsrch, int32_t position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_preceding(strsrch, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_next(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_next(strsrch, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_usearch_previous(win32::Windows::Win32::Globalization::UStringSearch* strsrch, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.usearch_previous(strsrch, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_usearch_reset(win32::Windows::Win32::Globalization::UStringSearch* strsrch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strsrch);

        g_api_table.usearch_reset(strsrch);
        
    }

    win32::Windows::Win32::Globalization::USpoofChecker* __stdcall ORBIT_IMPL_uspoof_open(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_open(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USpoofChecker* __stdcall ORBIT_IMPL_uspoof_openFromSerialized(void* data, int32_t length, int32_t* pActualLength, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(data);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(pActualLength);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.uspoof_openFromSerialized(data, length, pActualLength, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USpoofChecker* __stdcall ORBIT_IMPL_uspoof_openFromSource(win32::Windows::Win32::Foundation::PSTR confusables, int32_t confusablesLen, win32::Windows::Win32::Foundation::PSTR confusablesWholeScript, int32_t confusablesWholeScriptLen, int32_t* errType, win32::Windows::Win32::Globalization::UParseError* pe, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(confusables);
        ORBIT_TRACK_PARAM(confusablesLen);
        ORBIT_TRACK_PARAM(confusablesWholeScript);
        ORBIT_TRACK_PARAM(confusablesWholeScriptLen);
        ORBIT_TRACK_PARAM(errType);
        ORBIT_TRACK_PARAM(pe);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_openFromSource(confusables, confusablesLen, confusablesWholeScript, confusablesWholeScriptLen, errType, pe, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uspoof_close(win32::Windows::Win32::Globalization::USpoofChecker* sc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);

        g_api_table.uspoof_close(sc);
        
    }

    win32::Windows::Win32::Globalization::USpoofChecker* __stdcall ORBIT_IMPL_uspoof_clone(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_clone(sc, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uspoof_setChecks(win32::Windows::Win32::Globalization::USpoofChecker* sc, int32_t checks, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(checks);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uspoof_setChecks(sc, checks, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_getChecks(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getChecks(sc, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uspoof_setRestrictionLevel(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Globalization::URestrictionLevel restrictionLevel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(restrictionLevel);

        g_api_table.uspoof_setRestrictionLevel(sc, restrictionLevel);
        
    }

    win32::Windows::Win32::Globalization::URestrictionLevel __stdcall ORBIT_IMPL_uspoof_getRestrictionLevel(win32::Windows::Win32::Globalization::USpoofChecker* sc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);

        auto win32_impl_result = g_api_table.uspoof_getRestrictionLevel(sc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uspoof_setAllowedLocales(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Foundation::PSTR localesList, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(localesList);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uspoof_setAllowedLocales(sc, localesList, status);
        
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_uspoof_getAllowedLocales(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getAllowedLocales(sc, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uspoof_setAllowedChars(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Globalization::USet* chars, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(chars);
        ORBIT_TRACK_PARAM(status);

        g_api_table.uspoof_setAllowedChars(sc, chars, status);
        
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uspoof_getAllowedChars(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getAllowedChars(sc, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_check(win32::Windows::Win32::Globalization::USpoofChecker* sc, uint16_t* id, int32_t length, int32_t* position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_check(sc, id, length, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_checkUTF8(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Foundation::PSTR id, int32_t length, int32_t* position, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(position);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_checkUTF8(sc, id, length, position, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_check2(win32::Windows::Win32::Globalization::USpoofChecker* sc, uint16_t* id, int32_t length, win32::Windows::Win32::Globalization::USpoofCheckResult* checkResult, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(checkResult);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_check2(sc, id, length, checkResult, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_check2UTF8(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Foundation::PSTR id, int32_t length, win32::Windows::Win32::Globalization::USpoofCheckResult* checkResult, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(checkResult);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_check2UTF8(sc, id, length, checkResult, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USpoofCheckResult* __stdcall ORBIT_IMPL_uspoof_openCheckResult(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_openCheckResult(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_uspoof_closeCheckResult(win32::Windows::Win32::Globalization::USpoofCheckResult* checkResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(checkResult);

        g_api_table.uspoof_closeCheckResult(checkResult);
        
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_getCheckResultChecks(win32::Windows::Win32::Globalization::USpoofCheckResult* checkResult, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(checkResult);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getCheckResultChecks(checkResult, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::URestrictionLevel __stdcall ORBIT_IMPL_uspoof_getCheckResultRestrictionLevel(win32::Windows::Win32::Globalization::USpoofCheckResult* checkResult, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(checkResult);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getCheckResultRestrictionLevel(checkResult, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uspoof_getCheckResultNumerics(win32::Windows::Win32::Globalization::USpoofCheckResult* checkResult, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(checkResult);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getCheckResultNumerics(checkResult, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_areConfusable(win32::Windows::Win32::Globalization::USpoofChecker* sc, uint16_t* id1, int32_t length1, uint16_t* id2, int32_t length2, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(id1);
        ORBIT_TRACK_PARAM(length1);
        ORBIT_TRACK_PARAM(id2);
        ORBIT_TRACK_PARAM(length2);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_areConfusable(sc, id1, length1, id2, length2, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_areConfusableUTF8(win32::Windows::Win32::Globalization::USpoofChecker* sc, win32::Windows::Win32::Foundation::PSTR id1, int32_t length1, win32::Windows::Win32::Foundation::PSTR id2, int32_t length2, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(id1);
        ORBIT_TRACK_PARAM(length1);
        ORBIT_TRACK_PARAM(id2);
        ORBIT_TRACK_PARAM(length2);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_areConfusableUTF8(sc, id1, length1, id2, length2, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_getSkeleton(win32::Windows::Win32::Globalization::USpoofChecker* sc, uint32_t type, uint16_t* id, int32_t length, uint16_t* dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getSkeleton(sc, type, id, length, dest, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_getSkeletonUTF8(win32::Windows::Win32::Globalization::USpoofChecker* sc, uint32_t type, win32::Windows::Win32::Foundation::PSTR id, int32_t length, win32::Windows::Win32::Foundation::PSTR dest, int32_t destCapacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(length);
        ORBIT_TRACK_PARAM(dest);
        ORBIT_TRACK_PARAM(destCapacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getSkeletonUTF8(sc, type, id, length, dest, destCapacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uspoof_getInclusionSet(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getInclusionSet(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_uspoof_getRecommendedSet(win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_getRecommendedSet(status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_uspoof_serialize(win32::Windows::Win32::Globalization::USpoofChecker* sc, void* data, int32_t capacity, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sc);
        ORBIT_TRACK_PARAM(data);
        ORBIT_TRACK_PARAM(capacity);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.uspoof_serialize(sc, data, capacity, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_utmscale_getTimeScaleValue(win32::Windows::Win32::Globalization::UDateTimeScale timeScale, win32::Windows::Win32::Globalization::UTimeScaleValue value, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(timeScale);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utmscale_getTimeScaleValue(timeScale, value, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_utmscale_fromInt64(int64_t otherTime, win32::Windows::Win32::Globalization::UDateTimeScale timeScale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(otherTime);
        ORBIT_TRACK_PARAM(timeScale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utmscale_fromInt64(otherTime, timeScale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_utmscale_toInt64(int64_t universalTime, win32::Windows::Win32::Globalization::UDateTimeScale timeScale, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(universalTime);
        ORBIT_TRACK_PARAM(timeScale);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utmscale_toInt64(universalTime, timeScale, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_utrans_openU(uint16_t* id, int32_t idLength, win32::Windows::Win32::Globalization::UTransDirection dir, uint16_t* rules, int32_t rulesLength, win32::Windows::Win32::Globalization::UParseError* parseError, win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(idLength);
        ORBIT_TRACK_PARAM(dir);
        ORBIT_TRACK_PARAM(rules);
        ORBIT_TRACK_PARAM(rulesLength);
        ORBIT_TRACK_PARAM(parseError);
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.utrans_openU(id, idLength, dir, rules, rulesLength, parseError, pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_utrans_openInverse(void** trans, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utrans_openInverse(trans, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void** __stdcall ORBIT_IMPL_utrans_clone(void** trans, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utrans_clone(trans, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utrans_close(void** trans) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);

        g_api_table.utrans_close(trans);
        
    }

    uint16_t* __stdcall ORBIT_IMPL_utrans_getUnicodeID(void** trans, int32_t* resultLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(resultLength);

        auto win32_impl_result = g_api_table.utrans_getUnicodeID(trans, resultLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utrans_register(void** adoptedTrans, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(adoptedTrans);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utrans_register(adoptedTrans, status);
        
    }

    void __stdcall ORBIT_IMPL_utrans_unregisterID(uint16_t* id, int32_t idLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(idLength);

        g_api_table.utrans_unregisterID(id, idLength);
        
    }

    void __stdcall ORBIT_IMPL_utrans_setFilter(void** trans, uint16_t* filterPattern, int32_t filterPatternLen, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(filterPattern);
        ORBIT_TRACK_PARAM(filterPatternLen);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utrans_setFilter(trans, filterPattern, filterPatternLen, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_utrans_countAvailableIDs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.utrans_countAvailableIDs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::UEnumeration* __stdcall ORBIT_IMPL_utrans_openIDs(win32::Windows::Win32::Globalization::UErrorCode* pErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pErrorCode);

        auto win32_impl_result = g_api_table.utrans_openIDs(pErrorCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_utrans_trans(void** trans, void** rep, win32::Windows::Win32::Globalization::UReplaceableCallbacks* repFunc, int32_t start, int32_t* limit, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(rep);
        ORBIT_TRACK_PARAM(repFunc);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utrans_trans(trans, rep, repFunc, start, limit, status);
        
    }

    void __stdcall ORBIT_IMPL_utrans_transIncremental(void** trans, void** rep, win32::Windows::Win32::Globalization::UReplaceableCallbacks* repFunc, win32::Windows::Win32::Globalization::UTransPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(rep);
        ORBIT_TRACK_PARAM(repFunc);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utrans_transIncremental(trans, rep, repFunc, pos, status);
        
    }

    void __stdcall ORBIT_IMPL_utrans_transUChars(void** trans, uint16_t* text, int32_t* textLength, int32_t textCapacity, int32_t start, int32_t* limit, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(textCapacity);
        ORBIT_TRACK_PARAM(start);
        ORBIT_TRACK_PARAM(limit);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utrans_transUChars(trans, text, textLength, textCapacity, start, limit, status);
        
    }

    void __stdcall ORBIT_IMPL_utrans_transIncrementalUChars(void** trans, uint16_t* text, int32_t* textLength, int32_t textCapacity, win32::Windows::Win32::Globalization::UTransPosition* pos, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(textLength);
        ORBIT_TRACK_PARAM(textCapacity);
        ORBIT_TRACK_PARAM(pos);
        ORBIT_TRACK_PARAM(status);

        g_api_table.utrans_transIncrementalUChars(trans, text, textLength, textCapacity, pos, status);
        
    }

    int32_t __stdcall ORBIT_IMPL_utrans_toRules(void** trans, int8_t escapeUnprintable, uint16_t* result, int32_t resultLength, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(escapeUnprintable);
        ORBIT_TRACK_PARAM(result);
        ORBIT_TRACK_PARAM(resultLength);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utrans_toRules(trans, escapeUnprintable, result, resultLength, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Globalization::USet* __stdcall ORBIT_IMPL_utrans_getSourceSet(void** trans, int8_t ignoreFilter, win32::Windows::Win32::Globalization::USet* fillIn, win32::Windows::Win32::Globalization::UErrorCode* status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(trans);
        ORBIT_TRACK_PARAM(ignoreFilter);
        ORBIT_TRACK_PARAM(fillIn);
        ORBIT_TRACK_PARAM(status);

        auto win32_impl_result = g_api_table.utrans_getSourceSet(trans, ignoreFilter, fillIn, status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetDistanceOfClosestLanguageInList(win32::Windows::Win32::Foundation::PWSTR pszLanguage, win32::Windows::Win32::Foundation::PWSTR pszLanguagesList, char wchListDelimiter, double* pClosestDistance) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszLanguage);
        ORBIT_TRACK_PARAM(pszLanguagesList);
        ORBIT_TRACK_PARAM(wchListDelimiter);
        ORBIT_TRACK_PARAM(pClosestDistance);

        auto win32_impl_result = g_api_table.GetDistanceOfClosestLanguageInList(pszLanguage, pszLanguagesList, wchListDelimiter, pClosestDistance);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t __stdcall ORBIT_IMPL_IsWellFormedTag(win32::Windows::Win32::Foundation::PWSTR pszTag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszTag);

        auto win32_impl_result = g_api_table.IsWellFormedTag(pszTag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_FindStringOrdinal(uint32_t dwFindStringOrdinalFlags, win32::Windows::Win32::Foundation::PWSTR lpStringSource, int32_t cchSource, win32::Windows::Win32::Foundation::PWSTR lpStringValue, int32_t cchValue, win32::Windows::Win32::Foundation::BOOL bIgnoreCase) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFindStringOrdinalFlags);
        ORBIT_TRACK_PARAM(lpStringSource);
        ORBIT_TRACK_PARAM(cchSource);
        ORBIT_TRACK_PARAM(lpStringValue);
        ORBIT_TRACK_PARAM(cchValue);
        ORBIT_TRACK_PARAM(bIgnoreCase);

        auto win32_impl_result = g_api_table.FindStringOrdinal(dwFindStringOrdinalFlags, lpStringSource, cchSource, lpStringValue, cchValue, bIgnoreCase);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_lstrcmpA(win32::Windows::Win32::Foundation::PSTR lpString1, win32::Windows::Win32::Foundation::PSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcmpA(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_lstrcmpW(win32::Windows::Win32::Foundation::PWSTR lpString1, win32::Windows::Win32::Foundation::PWSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcmpW(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_lstrcmpiA(win32::Windows::Win32::Foundation::PSTR lpString1, win32::Windows::Win32::Foundation::PSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcmpiA(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_lstrcmpiW(win32::Windows::Win32::Foundation::PWSTR lpString1, win32::Windows::Win32::Foundation::PWSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcmpiW(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_lstrcpynA(win32::Windows::Win32::Foundation::PSTR lpString1, win32::Windows::Win32::Foundation::PSTR lpString2, int32_t iMaxLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);
        ORBIT_TRACK_PARAM(iMaxLength);

        auto win32_impl_result = g_api_table.lstrcpynA(lpString1, lpString2, iMaxLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_lstrcpynW(win32::Windows::Win32::Foundation::PWSTR lpString1, win32::Windows::Win32::Foundation::PWSTR lpString2, int32_t iMaxLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);
        ORBIT_TRACK_PARAM(iMaxLength);

        auto win32_impl_result = g_api_table.lstrcpynW(lpString1, lpString2, iMaxLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_lstrcpyA(win32::Windows::Win32::Foundation::PSTR lpString1, win32::Windows::Win32::Foundation::PSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcpyA(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_lstrcpyW(win32::Windows::Win32::Foundation::PWSTR lpString1, win32::Windows::Win32::Foundation::PWSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcpyW(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_lstrcatA(win32::Windows::Win32::Foundation::PSTR lpString1, win32::Windows::Win32::Foundation::PSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcatA(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_lstrcatW(win32::Windows::Win32::Foundation::PWSTR lpString1, win32::Windows::Win32::Foundation::PWSTR lpString2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString1);
        ORBIT_TRACK_PARAM(lpString2);

        auto win32_impl_result = g_api_table.lstrcatW(lpString1, lpString2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_lstrlenA(win32::Windows::Win32::Foundation::PSTR lpString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString);

        auto win32_impl_result = g_api_table.lstrlenA(lpString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_lstrlenW(win32::Windows::Win32::Foundation::PWSTR lpString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpString);

        auto win32_impl_result = g_api_table.lstrlenW(lpString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsTextUnicode(void* lpv, int32_t iSize, win32::Windows::Win32::Globalization::IS_TEXT_UNICODE_RESULT* lpiResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpv);
        ORBIT_TRACK_PARAM(iSize);
        ORBIT_TRACK_PARAM(lpiResult);

        auto win32_impl_result = g_api_table.IsTextUnicode(lpv, iSize, lpiResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
