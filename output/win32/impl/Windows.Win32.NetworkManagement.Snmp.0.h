// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_Snmp_0_H
#define WIN32_Windows_Win32_NetworkManagement_Snmp_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HANDLE;
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::Snmp
{
#pragma region enums
    enum class SNMP_API_TRANSLATE_MODE : uint32_t
    {
        SNMPAPI_TRANSLATED = 0x0,
        SNMPAPI_UNTRANSLATED_V1 = 0x1,
        SNMPAPI_UNTRANSLATED_V2 = 0x2,
    };
    enum class SNMP_ERROR : uint32_t
    {
        SNMP_ERROR_NOERROR = 0x0,
        SNMP_ERROR_TOOBIG = 0x1,
        SNMP_ERROR_NOSUCHNAME = 0x2,
        SNMP_ERROR_BADVALUE = 0x3,
        SNMP_ERROR_READONLY = 0x4,
        SNMP_ERROR_GENERR = 0x5,
        SNMP_ERROR_NOACCESS = 0x6,
        SNMP_ERROR_WRONGTYPE = 0x7,
        SNMP_ERROR_WRONGLENGTH = 0x8,
        SNMP_ERROR_WRONGENCODING = 0x9,
        SNMP_ERROR_WRONGVALUE = 0xa,
        SNMP_ERROR_NOCREATION = 0xb,
        SNMP_ERROR_INCONSISTENTVALUE = 0xc,
        SNMP_ERROR_RESOURCEUNAVAILABLE = 0xd,
        SNMP_ERROR_COMMITFAILED = 0xe,
        SNMP_ERROR_UNDOFAILED = 0xf,
        SNMP_ERROR_AUTHORIZATIONERROR = 0x10,
        SNMP_ERROR_NOTWRITABLE = 0x11,
        SNMP_ERROR_INCONSISTENTNAME = 0x12,
    };
    enum class SNMP_ERROR_STATUS : uint32_t
    {
        SNMP_ERRORSTATUS_NOERROR = 0x0,
        SNMP_ERRORSTATUS_TOOBIG = 0x1,
        SNMP_ERRORSTATUS_NOSUCHNAME = 0x2,
        SNMP_ERRORSTATUS_BADVALUE = 0x3,
        SNMP_ERRORSTATUS_READONLY = 0x4,
        SNMP_ERRORSTATUS_GENERR = 0x5,
        SNMP_ERRORSTATUS_NOACCESS = 0x6,
        SNMP_ERRORSTATUS_WRONGTYPE = 0x7,
        SNMP_ERRORSTATUS_WRONGLENGTH = 0x8,
        SNMP_ERRORSTATUS_WRONGENCODING = 0x9,
        SNMP_ERRORSTATUS_WRONGVALUE = 0xa,
        SNMP_ERRORSTATUS_NOCREATION = 0xb,
        SNMP_ERRORSTATUS_INCONSISTENTVALUE = 0xc,
        SNMP_ERRORSTATUS_RESOURCEUNAVAILABLE = 0xd,
        SNMP_ERRORSTATUS_COMMITFAILED = 0xe,
        SNMP_ERRORSTATUS_UNDOFAILED = 0xf,
        SNMP_ERRORSTATUS_AUTHORIZATIONERROR = 0x10,
        SNMP_ERRORSTATUS_NOTWRITABLE = 0x11,
        SNMP_ERRORSTATUS_INCONSISTENTNAME = 0x12,
    };
    enum class SNMP_EXTENSION_REQUEST_TYPE : uint32_t
    {
        SNMP_EXTENSION_GET = 0xa0,
        SNMP_EXTENSION_GET_NEXT = 0xa1,
        SNMP_EXTENSION_SET_TEST = 0xe0,
        SNMP_EXTENSION_SET_COMMIT = 0xa3,
        SNMP_EXTENSION_SET_UNDO = 0xe1,
        SNMP_EXTENSION_SET_CLEANUP = 0xe2,
    };
    enum class SNMP_GENERICTRAP : uint32_t
    {
        SNMP_GENERICTRAP_COLDSTART = 0x0,
        SNMP_GENERICTRAP_WARMSTART = 0x1,
        SNMP_GENERICTRAP_LINKDOWN = 0x2,
        SNMP_GENERICTRAP_LINKUP = 0x3,
        SNMP_GENERICTRAP_AUTHFAILURE = 0x4,
        SNMP_GENERICTRAP_EGPNEIGHLOSS = 0x5,
        SNMP_GENERICTRAP_ENTERSPECIFIC = 0x6,
    };
    enum class SNMP_LOG : uint32_t
    {
        SNMP_LOG_SILENT = 0x0,
        SNMP_LOG_FATAL = 0x1,
        SNMP_LOG_ERROR = 0x2,
        SNMP_LOG_WARNING = 0x3,
        SNMP_LOG_TRACE = 0x4,
        SNMP_LOG_VERBOSE = 0x5,
    };
    enum class SNMP_OUTPUT_LOG_TYPE : uint32_t
    {
        SNMP_OUTPUT_TO_CONSOLE = 0x1,
        SNMP_OUTPUT_TO_LOGFILE = 0x2,
        SNMP_OUTPUT_TO_DEBUGGER = 0x8,
    };
    enum class SNMP_PDU_TYPE : uint32_t
    {
        SNMP_PDU_GET = 0xa0,
        SNMP_PDU_GETNEXT = 0xa1,
        SNMP_PDU_RESPONSE = 0xa2,
        SNMP_PDU_SET = 0xa3,
        SNMP_PDU_GETBULK = 0xa5,
        SNMP_PDU_TRAP = 0xa7,
    };
    enum class SNMP_STATUS : uint32_t
    {
        SNMPAPI_ON = 0x1,
        SNMPAPI_OFF = 0x0,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct AsnAny;
    struct AsnObjectIdentifier;
    struct AsnOctetString;
    struct SnmpVarBind;
    struct SnmpVarBindList;
    struct smiCNTR64;
    struct smiOCTETS;
    struct smiOID;
    struct smiVALUE;
    struct smiVENDORINFO;
#pragma endregion forward_declarations

#pragma region delegates
    using PFNSNMPEXTENSIONINIT = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Foundation::HANDLE*, Windows::Win32::NetworkManagement::Snmp::AsnObjectIdentifier*);
    using PFNSNMPEXTENSIONINITEX = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::NetworkManagement::Snmp::AsnObjectIdentifier*);
    using PFNSNMPEXTENSIONMONITOR = Windows::Win32::Foundation::BOOL __stdcall(void*);
    using PFNSNMPEXTENSIONQUERY = Windows::Win32::Foundation::BOOL __stdcall(uint8_t, Windows::Win32::NetworkManagement::Snmp::SnmpVarBindList*, int32_t*, int32_t*);
    using PFNSNMPEXTENSIONQUERYEX = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, uint32_t, Windows::Win32::NetworkManagement::Snmp::SnmpVarBindList*, Windows::Win32::NetworkManagement::Snmp::AsnOctetString*, int32_t*, int32_t*);
    using PFNSNMPEXTENSIONTRAP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::NetworkManagement::Snmp::AsnObjectIdentifier*, int32_t*, int32_t*, uint32_t*, Windows::Win32::NetworkManagement::Snmp::SnmpVarBindList*);
    using PFNSNMPEXTENSIONCLOSE = void __stdcall();
    using SNMPAPI_CALLBACK = uint32_t __stdcall(intptr_t, Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM, void*);
    using PFNSNMPSTARTUPEX = uint32_t __stdcall(uint32_t*, uint32_t*, uint32_t*, uint32_t*, uint32_t*);
    using PFNSNMPCLEANUPEX = uint32_t __stdcall();
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
