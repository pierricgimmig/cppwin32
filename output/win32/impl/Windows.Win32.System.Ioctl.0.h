// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Ioctl_0_H
#define WIN32_Windows_Win32_System_Ioctl_0_H
WIN32_EXPORT namespace win32::Windows::Win32::System::Ioctl
{
#pragma region enums
    enum class BIN_TYPES : int32_t
    {
        RequestSize = 0,
        RequestLocation = 1,
    };
    enum class CHANGER_DEVICE_PROBLEM_TYPE : int32_t
    {
        DeviceProblemNone = 0,
        DeviceProblemHardware = 1,
        DeviceProblemCHMError = 2,
        DeviceProblemDoorOpen = 3,
        DeviceProblemCalibrationError = 4,
        DeviceProblemTargetFailure = 5,
        DeviceProblemCHMMoveError = 6,
        DeviceProblemCHMZeroError = 7,
        DeviceProblemCartridgeInsertError = 8,
        DeviceProblemPositionError = 9,
        DeviceProblemSensorError = 10,
        DeviceProblemCartridgeEjectError = 11,
        DeviceProblemGripperError = 12,
        DeviceProblemDriveError = 13,
    };
    enum class CHANGER_ELEMENT_STATUS_FLAGS : uint32_t
    {
        ELEMENT_STATUS_ACCESS = 0x8,
        ELEMENT_STATUS_AVOLTAG = 0x20000000,
        ELEMENT_STATUS_EXCEPT = 0x4,
        ELEMENT_STATUS_EXENAB = 0x10,
        ELEMENT_STATUS_FULL = 0x1,
        ELEMENT_STATUS_ID_VALID = 0x2000,
        ELEMENT_STATUS_IMPEXP = 0x2,
        ELEMENT_STATUS_INENAB = 0x20,
        ELEMENT_STATUS_INVERT = 0x400000,
        ELEMENT_STATUS_LUN_VALID = 0x1000,
        ELEMENT_STATUS_NOT_BUS = 0x8000,
        ELEMENT_STATUS_PVOLTAG = 0x10000000,
        ELEMENT_STATUS_SVALID = 0x800000,
        ELEMENT_STATUS_PRODUCT_DATA = 0x40,
    };
    enum class CHANGER_FEATURES : uint32_t
    {
        CHANGER_BAR_CODE_SCANNER_INSTALLED = 0x1,
        CHANGER_CARTRIDGE_MAGAZINE = 0x100,
        CHANGER_CLEANER_ACCESS_NOT_VALID = 0x40000,
        CHANGER_CLEANER_SLOT = 0x40,
        CHANGER_CLOSE_IEPORT = 0x4,
        CHANGER_DEVICE_REINITIALIZE_CAPABLE = 0x8000000,
        CHANGER_DRIVE_CLEANING_REQUIRED = 0x10000,
        CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 0x20000000,
        CHANGER_EXCHANGE_MEDIA = 0x20,
        CHANGER_INIT_ELEM_STAT_WITH_RANGE = 0x2,
        CHANGER_KEYPAD_ENABLE_DISABLE = 0x10000000,
        CHANGER_LOCK_UNLOCK = 0x80,
        CHANGER_MEDIUM_FLIP = 0x200,
        CHANGER_OPEN_IEPORT = 0x8,
        CHANGER_POSITION_TO_ELEMENT = 0x400,
        CHANGER_PREDISMOUNT_EJECT_REQUIRED = 0x20000,
        CHANGER_PREMOUNT_EJECT_REQUIRED = 0x80000,
        CHANGER_REPORT_IEPORT_STATE = 0x800,
        CHANGER_SERIAL_NUMBER_VALID = 0x4000000,
        CHANGER_STATUS_NON_VOLATILE = 0x10,
        CHANGER_STORAGE_DRIVE = 0x1000,
        CHANGER_STORAGE_IEPORT = 0x2000,
        CHANGER_STORAGE_SLOT = 0x4000,
        CHANGER_STORAGE_TRANSPORT = 0x8000,
        CHANGER_VOLUME_ASSERT = 0x400000,
        CHANGER_VOLUME_IDENTIFICATION = 0x100000,
        CHANGER_VOLUME_REPLACE = 0x800000,
        CHANGER_VOLUME_SEARCH = 0x200000,
        CHANGER_VOLUME_UNDEFINE = 0x1000000,
    };
    enum class CSVFS_DISK_CONNECTIVITY : int32_t
    {
        CsvFsDiskConnectivityNone = 0,
        CsvFsDiskConnectivityMdsNodeOnly = 1,
        CsvFsDiskConnectivitySubsetOfNodes = 2,
        CsvFsDiskConnectivityAllNodes = 3,
    };
    enum class CSV_CONTROL_OP : int32_t
    {
        CsvControlStartRedirectFile = 2,
        CsvControlStopRedirectFile = 3,
        CsvControlQueryRedirectState = 4,
        CsvControlQueryFileRevision = 6,
        CsvControlQueryMdsPath = 8,
        CsvControlQueryFileRevisionFileId128 = 9,
        CsvControlQueryVolumeRedirectState = 10,
        CsvControlEnableUSNRangeModificationTracking = 13,
        CsvControlMarkHandleLocalVolumeMount = 14,
        CsvControlUnmarkHandleLocalVolumeMount = 15,
        CsvControlGetCsvFsMdsPathV2 = 18,
        CsvControlDisableCaching = 19,
        CsvControlEnableCaching = 20,
        CsvControlStartForceDFO = 21,
        CsvControlStopForceDFO = 22,
        CsvControlQueryMdsPathNoPause = 23,
        CsvControlSetVolumeId = 24,
        CsvControlQueryVolumeId = 25,
    };
    enum class DETECTION_TYPE : int32_t
    {
        DetectNone = 0,
        DetectInt13 = 1,
        DetectExInt13 = 2,
    };
    enum class DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE : int32_t
    {
        DeviceInternalStatusDataRequestTypeUndefined = 0,
        DeviceCurrentInternalStatusDataHeader = 1,
        DeviceCurrentInternalStatusData = 2,
        DeviceSavedInternalStatusDataHeader = 3,
        DeviceSavedInternalStatusData = 4,
    };
    enum class DEVICE_INTERNAL_STATUS_DATA_SET : int32_t
    {
        DeviceStatusDataSetUndefined = 0,
        DeviceStatusDataSet1 = 1,
        DeviceStatusDataSet2 = 2,
        DeviceStatusDataSet3 = 3,
        DeviceStatusDataSet4 = 4,
        DeviceStatusDataSetMax = 5,
    };
    enum class DISK_CACHE_RETENTION_PRIORITY : int32_t
    {
        EqualPriority = 0,
        KeepPrefetchedData = 1,
        KeepReadData = 2,
    };
    enum class DUPLICATE_EXTENTS_STATE : int32_t
    {
        FileSnapStateInactive = 0,
        FileSnapStateSource = 1,
        FileSnapStateTarget = 2,
    };
    enum class ELEMENT_TYPE : int32_t
    {
        AllElements = 0,
        ChangerTransport = 1,
        ChangerSlot = 2,
        ChangerIEPort = 3,
        ChangerDrive = 4,
        ChangerDoor = 5,
        ChangerKeypad = 6,
        ChangerMaxElement = 7,
    };
    enum class FILESYSTEM_STATISTICS_TYPE : uint16_t
    {
        FILESYSTEM_STATISTICS_TYPE_EXFAT = 0x3,
        FILESYSTEM_STATISTICS_TYPE_FAT = 0x2,
        FILESYSTEM_STATISTICS_TYPE_NTFS = 0x1,
    };
    enum class FILE_STORAGE_TIER_CLASS : int32_t
    {
        FileStorageTierClassUnspecified = 0,
        FileStorageTierClassCapacity = 1,
        FileStorageTierClassPerformance = 2,
        FileStorageTierClassMax = 3,
    };
    enum class FILE_STORAGE_TIER_FLAGS : uint32_t
    {
        FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY = 0x20000,
    };
    enum class FILE_STORAGE_TIER_MEDIA_TYPE : int32_t
    {
        FileStorageTierMediaTypeUnspecified = 0,
        FileStorageTierMediaTypeDisk = 1,
        FileStorageTierMediaTypeSsd = 2,
        FileStorageTierMediaTypeScm = 4,
        FileStorageTierMediaTypeMax = 5,
    };
    enum class FS_BPIO_INFLAGS : int32_t
    {
        FSBPIO_INFL_None = 0,
        FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 1,
    };
    enum class FS_BPIO_OPERATIONS : int32_t
    {
        FS_BPIO_OP_ENABLE = 1,
        FS_BPIO_OP_DISABLE = 2,
        FS_BPIO_OP_QUERY = 3,
        FS_BPIO_OP_VOLUME_STACK_PAUSE = 4,
        FS_BPIO_OP_VOLUME_STACK_RESUME = 5,
        FS_BPIO_OP_STREAM_PAUSE = 6,
        FS_BPIO_OP_STREAM_RESUME = 7,
        FS_BPIO_OP_GET_INFO = 8,
        FS_BPIO_OP_MAX_OPERATION = 9,
    };
    enum class FS_BPIO_OUTFLAGS : int32_t
    {
        FSBPIO_OUTFL_None = 0,
        FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 1,
        FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 2,
        FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 4,
        FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 8,
    };
    enum class GET_CHANGER_PARAMETERS_FEATURES1 : uint32_t
    {
        CHANGER_CLEANER_AUTODISMOUNT = 0x80000004,
        CHANGER_CLEANER_OPS_NOT_SUPPORTED = 0x80000040,
        CHANGER_IEPORT_USER_CONTROL_CLOSE = 0x80000100,
        CHANGER_IEPORT_USER_CONTROL_OPEN = 0x80000080,
        CHANGER_MOVE_EXTENDS_IEPORT = 0x80000200,
        CHANGER_MOVE_RETRACTS_IEPORT = 0x80000400,
        CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE = 0x80000002,
        CHANGER_PREDISMOUNT_ALIGN_TO_SLOT = 0x80000001,
        CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR = 0x80000020,
        CHANGER_SLOTS_USE_TRAYS = 0x80000010,
        CHANGER_TRUE_EXCHANGE_CAPABLE = 0x80000008,
    };
    enum class GPT_ATTRIBUTES : uint64_t
    {
        GPT_ATTRIBUTE_PLATFORM_REQUIRED = 0x1,
        GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER = 0x8000000000000000,
        GPT_BASIC_DATA_ATTRIBUTE_HIDDEN = 0x4000000000000000,
        GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY = 0x2000000000000000,
        GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY = 0x1000000000000000,
    };
    enum class MEDIA_TYPE : int32_t
    {
        Unknown = 0,
        F5_1Pt2_512 = 1,
        F3_1Pt44_512 = 2,
        F3_2Pt88_512 = 3,
        F3_20Pt8_512 = 4,
        F3_720_512 = 5,
        F5_360_512 = 6,
        F5_320_512 = 7,
        F5_320_1024 = 8,
        F5_180_512 = 9,
        F5_160_512 = 10,
        RemovableMedia = 11,
        FixedMedia = 12,
        F3_120M_512 = 13,
        F3_640_512 = 14,
        F5_640_512 = 15,
        F5_720_512 = 16,
        F3_1Pt2_512 = 17,
        F3_1Pt23_1024 = 18,
        F5_1Pt23_1024 = 19,
        F3_128Mb_512 = 20,
        F3_230Mb_512 = 21,
        F8_256_128 = 22,
        F3_200Mb_512 = 23,
        F3_240M_512 = 24,
        F3_32M_512 = 25,
    };
    enum class PARTITION_STYLE : int32_t
    {
        PARTITION_STYLE_MBR = 0,
        PARTITION_STYLE_GPT = 1,
        PARTITION_STYLE_RAW = 2,
    };
    enum class QUERY_FILE_LAYOUT_FILTER_TYPE : int32_t
    {
        QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
        QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
        QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
        QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3,
        QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4,
    };
    enum class REFS_SMR_VOLUME_GC_ACTION : int32_t
    {
        SmrGcActionStart = 1,
        SmrGcActionStartFullSpeed = 2,
        SmrGcActionPause = 3,
        SmrGcActionStop = 4,
    };
    enum class REFS_SMR_VOLUME_GC_METHOD : int32_t
    {
        SmrGcMethodCompaction = 1,
        SmrGcMethodCompression = 2,
        SmrGcMethodRotation = 3,
    };
    enum class REFS_SMR_VOLUME_GC_STATE : int32_t
    {
        SmrGcStateInactive = 0,
        SmrGcStatePaused = 1,
        SmrGcStateActive = 2,
        SmrGcStateActiveFullSpeed = 3,
    };
    enum class SCM_BUS_FIRMWARE_ACTIVATION_STATE : int32_t
    {
        ScmBusFirmwareActivationState_Idle = 0,
        ScmBusFirmwareActivationState_Armed = 1,
        ScmBusFirmwareActivationState_Busy = 2,
    };
    enum class SCM_BUS_PROPERTY_ID : int32_t
    {
        ScmBusProperty_RuntimeFwActivationInfo = 0,
        ScmBusProperty_DedicatedMemoryInfo = 1,
        ScmBusProperty_DedicatedMemoryState = 2,
        ScmBusProperty_Max = 3,
    };
    enum class SCM_BUS_QUERY_TYPE : int32_t
    {
        ScmBusQuery_Descriptor = 0,
        ScmBusQuery_IsSupported = 1,
        ScmBusQuery_Max = 2,
    };
    enum class SCM_BUS_SET_TYPE : int32_t
    {
        ScmBusSet_Descriptor = 0,
        ScmBusSet_IsSupported = 1,
        ScmBusSet_Max = 2,
    };
    enum class SCM_PD_FIRMWARE_ACTIVATION_STATE : int32_t
    {
        ScmPdFirmwareActivationState_Idle = 0,
        ScmPdFirmwareActivationState_Armed = 1,
        ScmPdFirmwareActivationState_Busy = 2,
    };
    enum class SCM_PD_HEALTH_STATUS : int32_t
    {
        ScmPhysicalDeviceHealth_Unknown = 0,
        ScmPhysicalDeviceHealth_Unhealthy = 1,
        ScmPhysicalDeviceHealth_Warning = 2,
        ScmPhysicalDeviceHealth_Healthy = 3,
        ScmPhysicalDeviceHealth_Max = 4,
    };
    enum class SCM_PD_LAST_FW_ACTIVATION_STATUS : int32_t
    {
        ScmPdLastFwActivationStatus_None = 0,
        ScmPdLastFwActivationStatus_Success = 1,
        ScmPdLastFwActivationStatus_FwNotFound = 2,
        ScmPdLastFwActivationStatus_ColdRebootRequired = 3,
        ScmPdLastFwActivaitonStatus_ActivationInProgress = 4,
        ScmPdLastFwActivaitonStatus_Retry = 5,
        ScmPdLastFwActivaitonStatus_FwUnsupported = 6,
        ScmPdLastFwActivaitonStatus_UnknownError = 7,
    };
    enum class SCM_PD_MEDIA_REINITIALIZATION_STATUS : int32_t
    {
        ScmPhysicalDeviceReinit_Success = 0,
        ScmPhysicalDeviceReinit_RebootNeeded = 1,
        ScmPhysicalDeviceReinit_ColdBootNeeded = 2,
        ScmPhysicalDeviceReinit_Max = 3,
    };
    enum class SCM_PD_OPERATIONAL_STATUS : int32_t
    {
        ScmPhysicalDeviceOpStatus_Unknown = 0,
        ScmPhysicalDeviceOpStatus_Ok = 1,
        ScmPhysicalDeviceOpStatus_PredictingFailure = 2,
        ScmPhysicalDeviceOpStatus_InService = 3,
        ScmPhysicalDeviceOpStatus_HardwareError = 4,
        ScmPhysicalDeviceOpStatus_NotUsable = 5,
        ScmPhysicalDeviceOpStatus_TransientError = 6,
        ScmPhysicalDeviceOpStatus_Missing = 7,
        ScmPhysicalDeviceOpStatus_Max = 8,
    };
    enum class SCM_PD_OPERATIONAL_STATUS_REASON : int32_t
    {
        ScmPhysicalDeviceOpReason_Unknown = 0,
        ScmPhysicalDeviceOpReason_Media = 1,
        ScmPhysicalDeviceOpReason_ThresholdExceeded = 2,
        ScmPhysicalDeviceOpReason_LostData = 3,
        ScmPhysicalDeviceOpReason_EnergySource = 4,
        ScmPhysicalDeviceOpReason_Configuration = 5,
        ScmPhysicalDeviceOpReason_DeviceController = 6,
        ScmPhysicalDeviceOpReason_MediaController = 7,
        ScmPhysicalDeviceOpReason_Component = 8,
        ScmPhysicalDeviceOpReason_BackgroundOperation = 9,
        ScmPhysicalDeviceOpReason_InvalidFirmware = 10,
        ScmPhysicalDeviceOpReason_HealthCheck = 11,
        ScmPhysicalDeviceOpReason_LostDataPersistence = 12,
        ScmPhysicalDeviceOpReason_DisabledByPlatform = 13,
        ScmPhysicalDeviceOpReason_PermanentError = 14,
        ScmPhysicalDeviceOpReason_LostWritePersistence = 15,
        ScmPhysicalDeviceOpReason_FatalError = 16,
        ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17,
        ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18,
        ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19,
        ScmPhysicalDeviceOpReason_PerformanceDegradation = 20,
        ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21,
        ScmPhysicalDeviceOpReason_InternalFailure = 22,
        ScmPhysicalDeviceOpReason_Max = 23,
    };
    enum class SCM_PD_PROPERTY_ID : int32_t
    {
        ScmPhysicalDeviceProperty_DeviceInfo = 0,
        ScmPhysicalDeviceProperty_ManagementStatus = 1,
        ScmPhysicalDeviceProperty_FirmwareInfo = 2,
        ScmPhysicalDeviceProperty_LocationString = 3,
        ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4,
        ScmPhysicalDeviceProperty_DeviceHandle = 5,
        ScmPhysicalDeviceProperty_FruIdString = 6,
        ScmPhysicalDeviceProperty_RuntimeFwActivationInfo = 7,
        ScmPhysicalDeviceProperty_RuntimeFwActivationArmState = 8,
        ScmPhysicalDeviceProperty_Max = 9,
    };
    enum class SCM_PD_QUERY_TYPE : int32_t
    {
        ScmPhysicalDeviceQuery_Descriptor = 0,
        ScmPhysicalDeviceQuery_IsSupported = 1,
        ScmPhysicalDeviceQuery_Max = 2,
    };
    enum class SCM_PD_SET_TYPE : int32_t
    {
        ScmPhysicalDeviceSet_Descriptor = 0,
        ScmPhysicalDeviceSet_IsSupported = 1,
        ScmPhysicalDeviceSet_Max = 2,
    };
    enum class SCM_REGION_FLAG : int32_t
    {
        ScmRegionFlagNone = 0,
        ScmRegionFlagLabel = 1,
    };
    enum class SHRINK_VOLUME_REQUEST_TYPES : int32_t
    {
        ShrinkPrepare = 1,
        ShrinkCommit = 2,
        ShrinkAbort = 3,
    };
    enum class STORAGE_ASSOCIATION_TYPE : int32_t
    {
        StorageIdAssocDevice = 0,
        StorageIdAssocPort = 1,
        StorageIdAssocTarget = 2,
    };
    enum class STORAGE_ATTRIBUTE_MGMT_ACTION : int32_t
    {
        StorAttributeMgmt_ClearAttribute = 0,
        StorAttributeMgmt_SetAttribute = 1,
        StorAttributeMgmt_ResetAttribute = 2,
    };
    enum class STORAGE_COMPONENT_HEALTH_STATUS : int32_t
    {
        HealthStatusUnknown = 0,
        HealthStatusNormal = 1,
        HealthStatusThrottled = 2,
        HealthStatusWarning = 3,
        HealthStatusDisabled = 4,
        HealthStatusFailed = 5,
    };
    enum class STORAGE_COUNTER_TYPE : int32_t
    {
        StorageCounterTypeUnknown = 0,
        StorageCounterTypeTemperatureCelsius = 1,
        StorageCounterTypeTemperatureCelsiusMax = 2,
        StorageCounterTypeReadErrorsTotal = 3,
        StorageCounterTypeReadErrorsCorrected = 4,
        StorageCounterTypeReadErrorsUncorrected = 5,
        StorageCounterTypeWriteErrorsTotal = 6,
        StorageCounterTypeWriteErrorsCorrected = 7,
        StorageCounterTypeWriteErrorsUncorrected = 8,
        StorageCounterTypeManufactureDate = 9,
        StorageCounterTypeStartStopCycleCount = 10,
        StorageCounterTypeStartStopCycleCountMax = 11,
        StorageCounterTypeLoadUnloadCycleCount = 12,
        StorageCounterTypeLoadUnloadCycleCountMax = 13,
        StorageCounterTypeWearPercentage = 14,
        StorageCounterTypeWearPercentageWarning = 15,
        StorageCounterTypeWearPercentageMax = 16,
        StorageCounterTypePowerOnHours = 17,
        StorageCounterTypeReadLatency100NSMax = 18,
        StorageCounterTypeWriteLatency100NSMax = 19,
        StorageCounterTypeFlushLatency100NSMax = 20,
        StorageCounterTypeMax = 21,
    };
    enum class STORAGE_CRYPTO_ALGORITHM_ID : int32_t
    {
        StorageCryptoAlgorithmUnknown = 0,
        StorageCryptoAlgorithmXTSAES = 1,
        StorageCryptoAlgorithmBitlockerAESCBC = 2,
        StorageCryptoAlgorithmAESECB = 3,
        StorageCryptoAlgorithmESSIVAESCBC = 4,
        StorageCryptoAlgorithmMax = 5,
    };
    enum class STORAGE_CRYPTO_KEY_SIZE : int32_t
    {
        StorageCryptoKeySizeUnknown = 0,
        StorageCryptoKeySize128Bits = 1,
        StorageCryptoKeySize192Bits = 2,
        StorageCryptoKeySize256Bits = 3,
        StorageCryptoKeySize512Bits = 4,
    };
    enum class STORAGE_DEVICE_FORM_FACTOR : int32_t
    {
        FormFactorUnknown = 0,
        FormFactor3_5 = 1,
        FormFactor2_5 = 2,
        FormFactor1_8 = 3,
        FormFactor1_8Less = 4,
        FormFactorEmbedded = 5,
        FormFactorMemoryCard = 6,
        FormFactormSata = 7,
        FormFactorM_2 = 8,
        FormFactorPCIeBoard = 9,
        FormFactorDimm = 10,
    };
    enum class STORAGE_DEVICE_POWER_CAP_UNITS : int32_t
    {
        StorageDevicePowerCapUnitsPercent = 0,
        StorageDevicePowerCapUnitsMilliwatts = 1,
    };
    enum class STORAGE_DIAGNOSTIC_LEVEL : int32_t
    {
        StorageDiagnosticLevelDefault = 0,
        StorageDiagnosticLevelMax = 1,
    };
    enum class STORAGE_DIAGNOSTIC_TARGET_TYPE : int32_t
    {
        StorageDiagnosticTargetTypeUndefined = 0,
        StorageDiagnosticTargetTypePort = 1,
        StorageDiagnosticTargetTypeMiniport = 2,
        StorageDiagnosticTargetTypeHbaFirmware = 3,
        StorageDiagnosticTargetTypeMax = 4,
    };
    enum class STORAGE_DISK_HEALTH_STATUS : int32_t
    {
        DiskHealthUnknown = 0,
        DiskHealthUnhealthy = 1,
        DiskHealthWarning = 2,
        DiskHealthHealthy = 3,
        DiskHealthMax = 4,
    };
    enum class STORAGE_DISK_OPERATIONAL_STATUS : int32_t
    {
        DiskOpStatusNone = 0,
        DiskOpStatusUnknown = 1,
        DiskOpStatusOk = 2,
        DiskOpStatusPredictingFailure = 3,
        DiskOpStatusInService = 4,
        DiskOpStatusHardwareError = 5,
        DiskOpStatusNotUsable = 6,
        DiskOpStatusTransientError = 7,
        DiskOpStatusMissing = 8,
    };
    enum class STORAGE_IDENTIFIER_CODE_SET : int32_t
    {
        StorageIdCodeSetReserved = 0,
        StorageIdCodeSetBinary = 1,
        StorageIdCodeSetAscii = 2,
        StorageIdCodeSetUtf8 = 3,
    };
    enum class STORAGE_IDENTIFIER_TYPE : int32_t
    {
        StorageIdTypeVendorSpecific = 0,
        StorageIdTypeVendorId = 1,
        StorageIdTypeEUI64 = 2,
        StorageIdTypeFCPHName = 3,
        StorageIdTypePortRelative = 4,
        StorageIdTypeTargetPortGroup = 5,
        StorageIdTypeLogicalUnitGroup = 6,
        StorageIdTypeMD5LogicalUnitIdentifier = 7,
        StorageIdTypeScsiNameString = 8,
    };
    enum class STORAGE_ID_NAA_FORMAT : int32_t
    {
        StorageIdNAAFormatIEEEExtended = 2,
        StorageIdNAAFormatIEEERegistered = 3,
        StorageIdNAAFormatIEEEERegisteredExtended = 5,
    };
    enum class STORAGE_MEDIA_TYPE : int32_t
    {
        DDS_4mm = 32,
        MiniQic = 33,
        Travan = 34,
        QIC = 35,
        MP_8mm = 36,
        AME_8mm = 37,
        AIT1_8mm = 38,
        DLT = 39,
        NCTP = 40,
        IBM_3480 = 41,
        IBM_3490E = 42,
        IBM_Magstar_3590 = 43,
        IBM_Magstar_MP = 44,
        STK_DATA_D3 = 45,
        SONY_DTF = 46,
        DV_6mm = 47,
        DMI = 48,
        SONY_D2 = 49,
        CLEANER_CARTRIDGE = 50,
        CD_ROM = 51,
        CD_R = 52,
        CD_RW = 53,
        DVD_ROM = 54,
        DVD_R = 55,
        DVD_RW = 56,
        MO_3_RW = 57,
        MO_5_WO = 58,
        MO_5_RW = 59,
        MO_5_LIMDOW = 60,
        PC_5_WO = 61,
        PC_5_RW = 62,
        PD_5_RW = 63,
        ABL_5_WO = 64,
        PINNACLE_APEX_5_RW = 65,
        SONY_12_WO = 66,
        PHILIPS_12_WO = 67,
        HITACHI_12_WO = 68,
        CYGNET_12_WO = 69,
        KODAK_14_WO = 70,
        MO_NFR_525 = 71,
        NIKON_12_RW = 72,
        IOMEGA_ZIP = 73,
        IOMEGA_JAZ = 74,
        SYQUEST_EZ135 = 75,
        SYQUEST_EZFLYER = 76,
        SYQUEST_SYJET = 77,
        AVATAR_F2 = 78,
        MP2_8mm = 79,
        DST_S = 80,
        DST_M = 81,
        DST_L = 82,
        VXATape_1 = 83,
        VXATape_2 = 84,
        STK_9840 = 85,
        LTO_Ultrium = 86,
        LTO_Accelis = 87,
        DVD_RAM = 88,
        AIT_8mm = 89,
        ADR_1 = 90,
        ADR_2 = 91,
        STK_9940 = 92,
        SAIT = 93,
        VXATape = 94,
    };
    enum class STORAGE_OPERATIONAL_STATUS_REASON : int32_t
    {
        DiskOpReasonUnknown = 0,
        DiskOpReasonScsiSenseCode = 1,
        DiskOpReasonMedia = 2,
        DiskOpReasonIo = 3,
        DiskOpReasonThresholdExceeded = 4,
        DiskOpReasonLostData = 5,
        DiskOpReasonEnergySource = 6,
        DiskOpReasonConfiguration = 7,
        DiskOpReasonDeviceController = 8,
        DiskOpReasonMediaController = 9,
        DiskOpReasonComponent = 10,
        DiskOpReasonNVDIMM_N = 11,
        DiskOpReasonBackgroundOperation = 12,
        DiskOpReasonInvalidFirmware = 13,
        DiskOpReasonHealthCheck = 14,
        DiskOpReasonLostDataPersistence = 15,
        DiskOpReasonDisabledByPlatform = 16,
        DiskOpReasonLostWritePersistence = 17,
        DiskOpReasonDataPersistenceLossImminent = 18,
        DiskOpReasonWritePersistenceLossImminent = 19,
        DiskOpReasonMax = 20,
    };
    enum class STORAGE_PORT_CODE_SET : int32_t
    {
        StoragePortCodeSetReserved = 0,
        StoragePortCodeSetStorport = 1,
        StoragePortCodeSetSCSIport = 2,
        StoragePortCodeSetSpaceport = 3,
        StoragePortCodeSetATAport = 4,
        StoragePortCodeSetUSBport = 5,
        StoragePortCodeSetSBP2port = 6,
        StoragePortCodeSetSDport = 7,
    };
    enum class STORAGE_POWERUP_REASON_TYPE : int32_t
    {
        StoragePowerupUnknown = 0,
        StoragePowerupIO = 1,
        StoragePowerupDeviceAttention = 2,
    };
    enum class STORAGE_PROPERTY_ID : int32_t
    {
        StorageDeviceProperty = 0,
        StorageAdapterProperty = 1,
        StorageDeviceIdProperty = 2,
        StorageDeviceUniqueIdProperty = 3,
        StorageDeviceWriteCacheProperty = 4,
        StorageMiniportProperty = 5,
        StorageAccessAlignmentProperty = 6,
        StorageDeviceSeekPenaltyProperty = 7,
        StorageDeviceTrimProperty = 8,
        StorageDeviceWriteAggregationProperty = 9,
        StorageDeviceDeviceTelemetryProperty = 10,
        StorageDeviceLBProvisioningProperty = 11,
        StorageDevicePowerProperty = 12,
        StorageDeviceCopyOffloadProperty = 13,
        StorageDeviceResiliencyProperty = 14,
        StorageDeviceMediumProductType = 15,
        StorageAdapterRpmbProperty = 16,
        StorageAdapterCryptoProperty = 17,
        StorageDeviceIoCapabilityProperty = 48,
        StorageAdapterProtocolSpecificProperty = 49,
        StorageDeviceProtocolSpecificProperty = 50,
        StorageAdapterTemperatureProperty = 51,
        StorageDeviceTemperatureProperty = 52,
        StorageAdapterPhysicalTopologyProperty = 53,
        StorageDevicePhysicalTopologyProperty = 54,
        StorageDeviceAttributesProperty = 55,
        StorageDeviceManagementStatus = 56,
        StorageAdapterSerialNumberProperty = 57,
        StorageDeviceLocationProperty = 58,
        StorageDeviceNumaProperty = 59,
        StorageDeviceZonedDeviceProperty = 60,
        StorageDeviceUnsafeShutdownCount = 61,
        StorageDeviceEnduranceProperty = 62,
        StorageDeviceLedStateProperty = 63,
        StorageDeviceSelfEncryptionProperty = 64,
        StorageFruIdProperty = 65,
    };
    enum class STORAGE_PROTOCOL_ATA_DATA_TYPE : int32_t
    {
        AtaDataTypeUnknown = 0,
        AtaDataTypeIdentify = 1,
        AtaDataTypeLogPage = 2,
    };
    enum class STORAGE_PROTOCOL_NVME_DATA_TYPE : int32_t
    {
        NVMeDataTypeUnknown = 0,
        NVMeDataTypeIdentify = 1,
        NVMeDataTypeLogPage = 2,
        NVMeDataTypeFeature = 3,
    };
    enum class STORAGE_PROTOCOL_TYPE : int32_t
    {
        ProtocolTypeUnknown = 0,
        ProtocolTypeScsi = 1,
        ProtocolTypeAta = 2,
        ProtocolTypeNvme = 3,
        ProtocolTypeSd = 4,
        ProtocolTypeUfs = 5,
        ProtocolTypeProprietary = 126,
        ProtocolTypeMaxReserved = 127,
    };
    enum class STORAGE_PROTOCOL_UFS_DATA_TYPE : int32_t
    {
        UfsDataTypeUnknown = 0,
        UfsDataTypeQueryDescriptor = 1,
        UfsDataTypeQueryAttribute = 2,
        UfsDataTypeQueryFlag = 3,
        UfsDataTypeQueryDmeAttribute = 4,
        UfsDataTypeQueryDmePeerAttribute = 5,
        UfsDataTypeMax = 6,
    };
    enum class STORAGE_QUERY_TYPE : int32_t
    {
        PropertyStandardQuery = 0,
        PropertyExistsQuery = 1,
        PropertyMaskQuery = 2,
        PropertyQueryMaxDefined = 3,
    };
    enum class STORAGE_RESERVE_ID : int32_t
    {
        StorageReserveIdNone = 0,
        StorageReserveIdHard = 1,
        StorageReserveIdSoft = 2,
        StorageReserveIdUpdateScratch = 3,
        StorageReserveIdMax = 4,
    };
    enum class STORAGE_RPMB_COMMAND_TYPE : int32_t
    {
        StorRpmbProgramAuthKey = 1,
        StorRpmbQueryWriteCounter = 2,
        StorRpmbAuthenticatedWrite = 3,
        StorRpmbAuthenticatedRead = 4,
        StorRpmbReadResultRequest = 5,
        StorRpmbAuthenticatedDeviceConfigWrite = 6,
        StorRpmbAuthenticatedDeviceConfigRead = 7,
    };
    enum class STORAGE_RPMB_FRAME_TYPE : int32_t
    {
        StorageRpmbFrameTypeUnknown = 0,
        StorageRpmbFrameTypeStandard = 1,
        StorageRpmbFrameTypeMax = 2,
    };
    enum class STORAGE_SANITIZE_METHOD : int32_t
    {
        StorageSanitizeMethodDefault = 0,
        StorageSanitizeMethodBlockErase = 1,
        StorageSanitizeMethodCryptoErase = 2,
    };
    enum class STORAGE_SET_TYPE : int32_t
    {
        PropertyStandardSet = 0,
        PropertyExistsSet = 1,
        PropertySetMaxDefined = 2,
    };
    enum class STORAGE_TIER_CLASS : int32_t
    {
        StorageTierClassUnspecified = 0,
        StorageTierClassCapacity = 1,
        StorageTierClassPerformance = 2,
        StorageTierClassMax = 3,
    };
    enum class STORAGE_TIER_MEDIA_TYPE : int32_t
    {
        StorageTierMediaTypeUnspecified = 0,
        StorageTierMediaTypeDisk = 1,
        StorageTierMediaTypeSsd = 2,
        StorageTierMediaTypeScm = 4,
        StorageTierMediaTypeMax = 5,
    };
    enum class STORAGE_ZONED_DEVICE_TYPES : int32_t
    {
        ZonedDeviceTypeUnknown = 0,
        ZonedDeviceTypeHostManaged = 1,
        ZonedDeviceTypeHostAware = 2,
        ZonedDeviceTypeDeviceManaged = 3,
    };
    enum class STORAGE_ZONES_ATTRIBUTES : int32_t
    {
        ZonesAttributeTypeAndLengthMayDifferent = 0,
        ZonesAttributeTypeSameLengthSame = 1,
        ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
        ZonesAttributeTypeMayDifferentLengthSame = 3,
    };
    enum class STORAGE_ZONE_CONDITION : int32_t
    {
        ZoneConditionConventional = 0,
        ZoneConditionEmpty = 1,
        ZoneConditionImplicitlyOpened = 2,
        ZoneConditionExplicitlyOpened = 3,
        ZoneConditionClosed = 4,
        ZoneConditionReadOnly = 13,
        ZoneConditionFull = 14,
        ZoneConditionOffline = 15,
    };
    enum class STORAGE_ZONE_TYPES : int32_t
    {
        ZoneTypeUnknown = 0,
        ZoneTypeConventional = 1,
        ZoneTypeSequentialWriteRequired = 2,
        ZoneTypeSequentialWritePreferred = 3,
        ZoneTypeMax = 4,
    };
    enum class TXFS_RMF_LAGS : uint32_t
    {
        TXFS_RM_FLAG_LOGGING_MODE = 0x1,
        TXFS_RM_FLAG_RENAME_RM = 0x2,
        TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX = 0x4,
        TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN = 0x8,
        TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS = 0x10,
        TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT = 0x20,
        TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE = 0x40,
        TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX = 0x80,
        TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN = 0x100,
        TXFS_RM_FLAG_GROW_LOG = 0x400,
        TXFS_RM_FLAG_SHRINK_LOG = 0x800,
        TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE = 0x1000,
        TXFS_RM_FLAG_PRESERVE_CHANGES = 0x2000,
        TXFS_RM_FLAG_RESET_RM_AT_NEXT_START = 0x4000,
        TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START = 0x8000,
        TXFS_RM_FLAG_PREFER_CONSISTENCY = 0x10000,
        TXFS_RM_FLAG_PREFER_AVAILABILITY = 0x20000,
    };
    enum class USN_DELETE_FLAGS : uint32_t
    {
        USN_DELETE_FLAG_DELETE = 0x1,
        USN_DELETE_FLAG_NOTIFY = 0x2,
    };
    enum class USN_SOURCE_INFO_ID : uint32_t
    {
        USN_SOURCE_AUXILIARY_DATA = 0x2,
        USN_SOURCE_DATA_MANAGEMENT = 0x1,
        USN_SOURCE_REPLICATION_MANAGEMENT = 0x4,
        USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT = 0x8,
    };
    enum class VIRTUAL_STORAGE_BEHAVIOR_CODE : int32_t
    {
        VirtualStorageBehaviorUndefined = 0,
        VirtualStorageBehaviorCacheWriteThrough = 1,
        VirtualStorageBehaviorCacheWriteBack = 2,
        VirtualStorageBehaviorStopIoProcessing = 3,
        VirtualStorageBehaviorRestartIoProcessing = 4,
    };
    enum class WRITE_CACHE_CHANGE : int32_t
    {
        WriteCacheChangeUnknown = 0,
        WriteCacheNotChangeable = 1,
        WriteCacheChangeable = 2,
    };
    enum class WRITE_CACHE_ENABLE : int32_t
    {
        WriteCacheEnableUnknown = 0,
        WriteCacheDisabled = 1,
        WriteCacheEnabled = 2,
    };
    enum class WRITE_CACHE_TYPE : int32_t
    {
        WriteCacheTypeUnknown = 0,
        WriteCacheTypeNone = 1,
        WriteCacheTypeWriteBack = 2,
        WriteCacheTypeWriteThrough = 3,
    };
    enum class WRITE_THROUGH : int32_t
    {
        WriteThroughUnknown = 0,
        WriteThroughNotSupported = 1,
        WriteThroughSupported = 2,
    };
    enum class _DEVICEDUMP_COLLECTION_TYPE : int32_t
    {
        TCCollectionBugCheck = 1,
        TCCollectionApplicationRequested = 2,
        TCCollectionDeviceRequested = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ASYNC_DUPLICATE_EXTENTS_STATUS;
    struct BIN_COUNT;
    struct BIN_RANGE;
    struct BIN_RESULTS;
    struct BOOT_AREA_INFO;
    struct BULK_SECURITY_TEST_DATA;
    struct CHANGER_ELEMENT;
    struct CHANGER_ELEMENT_LIST;
    struct CHANGER_ELEMENT_STATUS;
    struct CHANGER_ELEMENT_STATUS_EX;
    struct CHANGER_EXCHANGE_MEDIUM;
    struct CHANGER_INITIALIZE_ELEMENT_STATUS;
    struct CHANGER_MOVE_MEDIUM;
    struct CHANGER_PRODUCT_DATA;
    struct CHANGER_READ_ELEMENT_STATUS;
    struct CHANGER_SEND_VOLUME_TAG_INFORMATION;
    struct CHANGER_SET_ACCESS;
    struct CHANGER_SET_POSITION;
    struct CLASS_MEDIA_CHANGE_CONTEXT;
    struct CLUSTER_RANGE;
    struct CONTAINER_ROOT_INFO_INPUT;
    struct CONTAINER_ROOT_INFO_OUTPUT;
    struct CONTAINER_VOLUME_STATE;
    struct CREATE_DISK;
    struct CREATE_DISK_GPT;
    struct CREATE_DISK_MBR;
    struct CREATE_USN_JOURNAL_DATA;
    struct CSV_CONTROL_PARAM;
    struct CSV_IS_OWNED_BY_CSVFS;
    struct CSV_MGMT_LOCK;
    struct CSV_NAMESPACE_INFO;
    struct CSV_QUERY_FILE_REVISION;
    struct CSV_QUERY_FILE_REVISION_FILE_ID_128;
    struct CSV_QUERY_MDS_PATH;
    struct CSV_QUERY_MDS_PATH_V2;
    struct CSV_QUERY_REDIRECT_STATE;
    struct CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
    struct CSV_QUERY_VOLUME_ID;
    struct CSV_QUERY_VOLUME_REDIRECT_STATE;
    struct CSV_SET_VOLUME_ID;
    struct DECRYPTION_STATUS_BUFFER;
    struct DELETE_USN_JOURNAL_DATA;
    struct DEVICEDUMP_PRIVATE_SUBSECTION;
    struct DEVICEDUMP_PUBLIC_SUBSECTION;
    struct DEVICEDUMP_RESTRICTED_SUBSECTION;
    struct DEVICEDUMP_SECTION_HEADER;
    struct DEVICEDUMP_STORAGEDEVICE_DATA;
    struct DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
    struct DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
    struct DEVICEDUMP_STRUCTURE_VERSION;
    struct DEVICEDUMP_SUBSECTION_POINTER;
    struct DEVICE_COPY_OFFLOAD_DESCRIPTOR;
    struct DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
    struct DEVICE_DATA_SET_LB_PROVISIONING_STATE;
    struct DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
    struct DEVICE_DATA_SET_RANGE;
    struct DEVICE_DATA_SET_REPAIR_OUTPUT;
    struct DEVICE_DATA_SET_REPAIR_PARAMETERS;
    struct DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
    struct DEVICE_DATA_SET_SCRUB_OUTPUT;
    struct DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
    struct DEVICE_DSM_CONVERSION_OUTPUT;
    struct DEVICE_DSM_DEFINITION;
    struct DEVICE_DSM_FREE_SPACE_OUTPUT;
    struct DEVICE_DSM_LOST_QUERY_OUTPUT;
    struct DEVICE_DSM_LOST_QUERY_PARAMETERS;
    struct DEVICE_DSM_NOTIFICATION_PARAMETERS;
    struct DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
    struct DEVICE_DSM_OFFLOAD_READ_PARAMETERS;
    struct DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
    struct DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
    struct DEVICE_DSM_RANGE_ERROR_INFO;
    struct DEVICE_DSM_REPORT_ZONES_DATA;
    struct DEVICE_DSM_REPORT_ZONES_PARAMETERS;
    struct DEVICE_DSM_TIERING_QUERY_INPUT;
    struct DEVICE_DSM_TIERING_QUERY_OUTPUT;
    struct DEVICE_INTERNAL_STATUS_DATA;
    struct DEVICE_LB_PROVISIONING_DESCRIPTOR;
    struct DEVICE_LOCATION;
    struct DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
    struct DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
    struct DEVICE_MEDIA_INFO;
    struct DEVICE_POWER_DESCRIPTOR;
    struct DEVICE_SEEK_PENALTY_DESCRIPTOR;
    struct DEVICE_STORAGE_ADDRESS_RANGE;
    struct DEVICE_STORAGE_RANGE_ATTRIBUTES;
    struct DEVICE_TRIM_DESCRIPTOR;
    struct DEVICE_WRITE_AGGREGATION_DESCRIPTOR;
    struct DISK_CACHE_INFORMATION;
    struct DISK_CONTROLLER_NUMBER;
    struct DISK_DETECTION_INFO;
    struct DISK_EXTENT;
    struct DISK_EX_INT13_INFO;
    struct DISK_GEOMETRY;
    struct DISK_GEOMETRY_EX;
    struct DISK_GROW_PARTITION;
    struct DISK_HISTOGRAM;
    struct DISK_INT13_INFO;
    struct DISK_LOGGING;
    struct DISK_PARTITION_INFO;
    struct DISK_PERFORMANCE;
    struct DISK_RECORD;
    struct DRIVERSTATUS;
    struct DRIVE_LAYOUT_INFORMATION;
    struct DRIVE_LAYOUT_INFORMATION_EX;
    struct DRIVE_LAYOUT_INFORMATION_GPT;
    struct DRIVE_LAYOUT_INFORMATION_MBR;
    struct DUPLICATE_EXTENTS_DATA;
    struct DUPLICATE_EXTENTS_DATA32;
    struct DUPLICATE_EXTENTS_DATA_EX;
    struct DUPLICATE_EXTENTS_DATA_EX32;
    struct ENCRYPTED_DATA_INFO;
    struct ENCRYPTION_BUFFER;
    struct ENCRYPTION_KEY_CTRL_INPUT;
    struct EXFAT_STATISTICS;
    struct EXTENDED_ENCRYPTED_DATA_INFO;
    struct FAT_STATISTICS;
    struct FILESYSTEM_STATISTICS;
    struct FILESYSTEM_STATISTICS_EX;
    struct FILE_ALLOCATED_RANGE_BUFFER;
    struct FILE_DESIRED_STORAGE_CLASS_INFORMATION;
    struct FILE_FS_PERSISTENT_VOLUME_INFORMATION;
    struct FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
    struct FILE_LAYOUT_ENTRY;
    struct FILE_LAYOUT_INFO_ENTRY;
    struct FILE_LAYOUT_NAME_ENTRY;
    struct FILE_LEVEL_TRIM;
    struct FILE_LEVEL_TRIM_OUTPUT;
    struct FILE_LEVEL_TRIM_RANGE;
    struct FILE_MAKE_COMPATIBLE_BUFFER;
    struct FILE_OBJECTID_BUFFER;
    struct FILE_PREFETCH;
    struct FILE_PREFETCH_EX;
    struct FILE_PROVIDER_EXTERNAL_INFO_V0;
    struct FILE_PROVIDER_EXTERNAL_INFO_V1;
    struct FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
    struct FILE_QUERY_SPARING_BUFFER;
    struct FILE_REFERENCE_RANGE;
    struct FILE_REGION_INFO;
    struct FILE_REGION_INPUT;
    struct FILE_REGION_OUTPUT;
    struct FILE_SET_DEFECT_MGMT_BUFFER;
    struct FILE_SET_SPARSE_BUFFER;
    struct FILE_STORAGE_TIER;
    struct FILE_STORAGE_TIER_REGION;
    struct FILE_SYSTEM_RECOGNITION_INFORMATION;
    struct FILE_TYPE_NOTIFICATION_INPUT;
    struct FILE_ZERO_DATA_INFORMATION;
    struct FILE_ZERO_DATA_INFORMATION_EX;
    struct FIND_BY_SID_DATA;
    struct FIND_BY_SID_OUTPUT;
    struct FORMAT_EX_PARAMETERS;
    struct FORMAT_PARAMETERS;
    struct FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
    struct FSCTL_OFFLOAD_READ_INPUT;
    struct FSCTL_OFFLOAD_READ_OUTPUT;
    struct FSCTL_OFFLOAD_WRITE_INPUT;
    struct FSCTL_OFFLOAD_WRITE_OUTPUT;
    struct FSCTL_QUERY_FAT_BPB_BUFFER;
    struct FSCTL_QUERY_REGION_INFO_INPUT;
    struct FSCTL_QUERY_REGION_INFO_OUTPUT;
    struct FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
    struct FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
    struct FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
    struct FS_BPIO_INFO;
    struct FS_BPIO_INPUT;
    struct FS_BPIO_OUTPUT;
    struct FS_BPIO_RESULTS;
    struct GETVERSIONINPARAMS;
    struct GET_CHANGER_PARAMETERS;
    struct GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
    struct GET_DISK_ATTRIBUTES;
    struct GET_FILTER_FILE_IDENTIFIER_INPUT;
    struct GET_FILTER_FILE_IDENTIFIER_OUTPUT;
    struct GET_LENGTH_INFORMATION;
    struct GET_MEDIA_TYPES;
    struct GP_LOG_PAGE_DESCRIPTOR;
    struct HISTOGRAM_BUCKET;
    struct IDEREGS;
    struct IO_IRP_EXT_TRACK_OFFSET_HEADER;
    struct LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
    struct LOOKUP_STREAM_FROM_CLUSTER_INPUT;
    struct LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
    struct MARK_HANDLE_INFO;
    struct MARK_HANDLE_INFO32;
    struct MFT_ENUM_DATA_V0;
    struct MFT_ENUM_DATA_V1;
    struct MOVE_FILE_DATA;
    struct MOVE_FILE_DATA32;
    struct MOVE_FILE_RECORD_DATA;
    struct NTFS_EXTENDED_VOLUME_DATA;
    struct NTFS_FILE_RECORD_INPUT_BUFFER;
    struct NTFS_FILE_RECORD_OUTPUT_BUFFER;
    struct NTFS_STATISTICS;
    struct NTFS_STATISTICS_EX;
    struct NTFS_VOLUME_DATA_BUFFER;
    struct PARTITION_INFORMATION;
    struct PARTITION_INFORMATION_EX;
    struct PARTITION_INFORMATION_GPT;
    struct PARTITION_INFORMATION_MBR;
    struct PATHNAME_BUFFER;
    struct PERF_BIN;
    struct PERSISTENT_RESERVE_COMMAND;
    struct PHYSICAL_ELEMENT_STATUS;
    struct PHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
    struct PHYSICAL_ELEMENT_STATUS_REQUEST;
    struct PLEX_READ_DATA_REQUEST;
    struct PREVENT_MEDIA_REMOVAL;
    struct QUERY_BAD_RANGES_INPUT;
    struct QUERY_BAD_RANGES_INPUT_RANGE;
    struct QUERY_BAD_RANGES_OUTPUT;
    struct QUERY_BAD_RANGES_OUTPUT_RANGE;
    struct QUERY_FILE_LAYOUT_INPUT;
    struct QUERY_FILE_LAYOUT_OUTPUT;
    struct READ_ELEMENT_ADDRESS_INFO;
    struct READ_FILE_USN_DATA;
    struct READ_USN_JOURNAL_DATA_V0;
    struct READ_USN_JOURNAL_DATA_V1;
    struct REASSIGN_BLOCKS;
    struct REASSIGN_BLOCKS_EX;
    struct REFS_SMR_VOLUME_GC_PARAMETERS;
    struct REFS_SMR_VOLUME_INFO_OUTPUT;
    struct REFS_VOLUME_DATA_BUFFER;
    struct REMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
    struct REPAIR_COPIES_INPUT;
    struct REPAIR_COPIES_OUTPUT;
    struct REQUEST_OPLOCK_INPUT_BUFFER;
    struct REQUEST_OPLOCK_OUTPUT_BUFFER;
    struct REQUEST_RAW_ENCRYPTED_DATA;
    struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
    struct RETRIEVAL_POINTERS_BUFFER;
    struct RETRIEVAL_POINTER_BASE;
    struct RETRIEVAL_POINTER_COUNT;
    struct SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO;
    struct SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO;
    struct SCM_BUS_DEDICATED_MEMORY_STATE;
    struct SCM_BUS_PROPERTY_QUERY;
    struct SCM_BUS_PROPERTY_SET;
    struct SCM_BUS_RUNTIME_FW_ACTIVATION_INFO;
    struct SCM_INTERLEAVED_PD_INFO;
    struct SCM_LD_INTERLEAVE_SET_INFO;
    struct SCM_LOGICAL_DEVICES;
    struct SCM_LOGICAL_DEVICE_INSTANCE;
    struct SCM_PD_DESCRIPTOR_HEADER;
    struct SCM_PD_DEVICE_HANDLE;
    struct SCM_PD_DEVICE_INFO;
    struct SCM_PD_DEVICE_SPECIFIC_INFO;
    struct SCM_PD_DEVICE_SPECIFIC_PROPERTY;
    struct SCM_PD_FIRMWARE_ACTIVATE;
    struct SCM_PD_FIRMWARE_DOWNLOAD;
    struct SCM_PD_FIRMWARE_INFO;
    struct SCM_PD_FIRMWARE_SLOT_INFO;
    struct SCM_PD_FRU_ID_STRING;
    struct SCM_PD_HEALTH_NOTIFICATION_DATA;
    struct SCM_PD_LOCATION_STRING;
    struct SCM_PD_MANAGEMENT_STATUS;
    struct SCM_PD_PASSTHROUGH_INPUT;
    struct SCM_PD_PASSTHROUGH_INVDIMM_INPUT;
    struct SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
    struct SCM_PD_PASSTHROUGH_OUTPUT;
    struct SCM_PD_PROPERTY_QUERY;
    struct SCM_PD_PROPERTY_SET;
    struct SCM_PD_REINITIALIZE_MEDIA_INPUT;
    struct SCM_PD_REINITIALIZE_MEDIA_OUTPUT;
    struct SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE;
    struct SCM_PD_RUNTIME_FW_ACTIVATION_INFO;
    struct SCM_PHYSICAL_DEVICES;
    struct SCM_PHYSICAL_DEVICE_INSTANCE;
    struct SCM_REGION;
    struct SCM_REGIONS;
    struct SD_CHANGE_MACHINE_SID_INPUT;
    struct SD_CHANGE_MACHINE_SID_OUTPUT;
    struct SD_ENUM_SDS_ENTRY;
    struct SD_ENUM_SDS_INPUT;
    struct SD_ENUM_SDS_OUTPUT;
    struct SD_GLOBAL_CHANGE_INPUT;
    struct SD_GLOBAL_CHANGE_OUTPUT;
    struct SD_QUERY_STATS_INPUT;
    struct SD_QUERY_STATS_OUTPUT;
    struct SENDCMDINPARAMS;
    struct SENDCMDOUTPARAMS;
    struct SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
    struct SET_DISK_ATTRIBUTES;
    struct SET_PARTITION_INFORMATION;
    struct SET_PARTITION_INFORMATION_EX;
    struct SET_PURGE_FAILURE_MODE_INPUT;
    struct SHRINK_VOLUME_INFORMATION;
    struct SI_COPYFILE;
    struct SMB_SHARE_FLUSH_AND_PURGE_INPUT;
    struct SMB_SHARE_FLUSH_AND_PURGE_OUTPUT;
    struct STARTING_LCN_INPUT_BUFFER;
    struct STARTING_LCN_INPUT_BUFFER_EX;
    struct STARTING_VCN_INPUT_BUFFER;
    struct STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
    struct STORAGE_ADAPTER_DESCRIPTOR;
    struct STORAGE_ADAPTER_SERIAL_NUMBER;
    struct STORAGE_ALLOCATE_BC_STREAM_INPUT;
    struct STORAGE_ALLOCATE_BC_STREAM_OUTPUT;
    struct STORAGE_ATTRIBUTE_MGMT;
    struct STORAGE_BREAK_RESERVATION_REQUEST;
    struct STORAGE_BUS_RESET_REQUEST;
    struct STORAGE_COUNTER;
    struct STORAGE_COUNTERS;
    struct STORAGE_CRYPTO_CAPABILITY;
    struct STORAGE_CRYPTO_DESCRIPTOR;
    struct STORAGE_DESCRIPTOR_HEADER;
    struct STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
    struct STORAGE_DEVICE_DESCRIPTOR;
    struct STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
    struct STORAGE_DEVICE_ID_DESCRIPTOR;
    struct STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
    struct STORAGE_DEVICE_LED_STATE_DESCRIPTOR;
    struct STORAGE_DEVICE_LOCATION_DESCRIPTOR;
    struct STORAGE_DEVICE_MANAGEMENT_STATUS;
    struct STORAGE_DEVICE_NUMA_PROPERTY;
    struct STORAGE_DEVICE_NUMBER;
    struct STORAGE_DEVICE_NUMBERS;
    struct STORAGE_DEVICE_NUMBER_EX;
    struct STORAGE_DEVICE_POWER_CAP;
    struct STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
    struct STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY;
    struct STORAGE_DEVICE_TIERING_DESCRIPTOR;
    struct STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
    struct STORAGE_DIAGNOSTIC_DATA;
    struct STORAGE_DIAGNOSTIC_REQUEST;
    struct STORAGE_EVENT_NOTIFICATION;
    struct STORAGE_FAILURE_PREDICTION_CONFIG;
    struct STORAGE_FRU_ID_DESCRIPTOR;
    struct STORAGE_GET_BC_PROPERTIES_OUTPUT;
    struct STORAGE_HOTPLUG_INFO;
    struct STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
    struct STORAGE_HW_ENDURANCE_INFO;
    struct STORAGE_HW_FIRMWARE_ACTIVATE;
    struct STORAGE_HW_FIRMWARE_DOWNLOAD;
    struct STORAGE_HW_FIRMWARE_DOWNLOAD_V2;
    struct STORAGE_HW_FIRMWARE_INFO;
    struct STORAGE_HW_FIRMWARE_INFO_QUERY;
    struct STORAGE_HW_FIRMWARE_SLOT_INFO;
    struct STORAGE_IDENTIFIER;
    struct STORAGE_IDLE_POWER;
    struct STORAGE_IDLE_POWERUP_REASON;
    struct STORAGE_LB_PROVISIONING_MAP_RESOURCES;
    struct STORAGE_MEDIA_SERIAL_NUMBER_DATA;
    struct STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
    struct STORAGE_MINIPORT_DESCRIPTOR;
    struct STORAGE_OFFLOAD_READ_OUTPUT;
    struct STORAGE_OFFLOAD_TOKEN;
    struct STORAGE_OFFLOAD_WRITE_OUTPUT;
    struct STORAGE_OPERATIONAL_REASON;
    struct STORAGE_PHYSICAL_ADAPTER_DATA;
    struct STORAGE_PHYSICAL_DEVICE_DATA;
    struct STORAGE_PHYSICAL_NODE_DATA;
    struct STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
    struct STORAGE_PREDICT_FAILURE;
    struct STORAGE_PRIORITY_HINT_SUPPORT;
    struct STORAGE_PROPERTY_QUERY;
    struct STORAGE_PROPERTY_SET;
    struct STORAGE_PROTOCOL_COMMAND;
    struct STORAGE_PROTOCOL_DATA_DESCRIPTOR;
    struct STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
    union STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE;
    struct STORAGE_PROTOCOL_SPECIFIC_DATA;
    struct STORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
    struct STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
    struct STORAGE_READ_CAPACITY;
    struct STORAGE_REINITIALIZE_MEDIA;
    struct STORAGE_RPMB_DATA_FRAME;
    struct STORAGE_RPMB_DESCRIPTOR;
    union STORAGE_SPEC_VERSION;
    struct STORAGE_TEMPERATURE_DATA_DESCRIPTOR;
    struct STORAGE_TEMPERATURE_INFO;
    struct STORAGE_TEMPERATURE_THRESHOLD;
    struct STORAGE_TIER;
    struct STORAGE_TIER_REGION;
    struct STORAGE_WRITE_CACHE_PROPERTY;
    struct STORAGE_ZONED_DEVICE_DESCRIPTOR;
    struct STORAGE_ZONE_DESCRIPTOR;
    struct STORAGE_ZONE_GROUP;
    struct STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
    struct STREAMS_QUERY_ID_OUTPUT_BUFFER;
    struct STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
    struct STREAM_EXTENT_ENTRY;
    struct STREAM_INFORMATION_ENTRY;
    struct STREAM_LAYOUT_ENTRY;
    struct TAPE_GET_STATISTICS;
    struct TAPE_STATISTICS;
    struct TXFS_CREATE_MINIVERSION_INFO;
    struct TXFS_GET_METADATA_INFO_OUT;
    struct TXFS_GET_TRANSACTED_VERSION;
    struct TXFS_LIST_TRANSACTIONS;
    struct TXFS_LIST_TRANSACTIONS_ENTRY;
    struct TXFS_LIST_TRANSACTION_LOCKED_FILES;
    struct TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
    struct TXFS_MODIFY_RM;
    struct TXFS_QUERY_RM_INFORMATION;
    struct TXFS_READ_BACKUP_INFORMATION_OUT;
    struct TXFS_ROLLFORWARD_REDO_INFORMATION;
    struct TXFS_SAVEPOINT_INFORMATION;
    struct TXFS_START_RM_INFORMATION;
    struct TXFS_TRANSACTION_ACTIVE_INFO;
    struct TXFS_WRITE_BACKUP_INFORMATION;
    struct USN_JOURNAL_DATA_V0;
    struct USN_JOURNAL_DATA_V1;
    struct USN_JOURNAL_DATA_V2;
    struct USN_RANGE_TRACK_OUTPUT;
    struct USN_RECORD_COMMON_HEADER;
    struct USN_RECORD_EXTENT;
    union USN_RECORD_UNION;
    struct USN_RECORD_V2;
    struct USN_RECORD_V3;
    struct USN_RECORD_V4;
    struct USN_TRACK_MODIFIED_RANGES;
    struct VERIFY_INFORMATION;
    struct VIRTUALIZATION_INSTANCE_INFO_INPUT;
    struct VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
    struct VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
    struct VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
    struct VOLUME_BITMAP_BUFFER;
    struct VOLUME_DISK_EXTENTS;
    struct VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
    struct WIM_PROVIDER_ADD_OVERLAY_INPUT;
    struct WIM_PROVIDER_EXTERNAL_INFO;
    struct WIM_PROVIDER_OVERLAY_ENTRY;
    struct WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
    struct WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
    struct WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
    struct WOF_EXTERNAL_FILE_ID;
    struct WOF_EXTERNAL_INFO;
    struct WOF_VERSION_INFO;
    struct WRITE_USN_REASON_INPUT;
#pragma endregion forward_declarations

#pragma region delegates
    using PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK = void __stdcall(Windows::Win32::System::Ioctl::IO_IRP_EXT_TRACK_OFFSET_HEADER*, Windows::Win32::System::Ioctl::IO_IRP_EXT_TRACK_OFFSET_HEADER*, int64_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
