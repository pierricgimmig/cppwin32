// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_EnterpriseData_2_H
#define WIN32_Windows_Win32_Security_EnterpriseData_2_H
#include "win32/Windows.Win32.Security.EnterpriseData.h"
#include "win32/impl/Windows.Win32.Security.EnterpriseData.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Security::EnterpriseData
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpCreateThreadNetworkContext(win32::Windows::Win32::Foundation::PWSTR enterpriseId, win32::Windows::Win32::Security::EnterpriseData::HTHREAD_NETWORK_CONTEXT* threadNetworkContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(enterpriseId);
        ORBIT_TRACK_PARAM(threadNetworkContext);

        auto win32_impl_result = g_api_table.SrpCreateThreadNetworkContext(enterpriseId, threadNetworkContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpCloseThreadNetworkContext(win32::Windows::Win32::Security::EnterpriseData::HTHREAD_NETWORK_CONTEXT* threadNetworkContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(threadNetworkContext);

        auto win32_impl_result = g_api_table.SrpCloseThreadNetworkContext(threadNetworkContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpSetTokenEnterpriseId(win32::Windows::Win32::Foundation::HANDLE tokenHandle, win32::Windows::Win32::Foundation::PWSTR enterpriseId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tokenHandle);
        ORBIT_TRACK_PARAM(enterpriseId);

        auto win32_impl_result = g_api_table.SrpSetTokenEnterpriseId(tokenHandle, enterpriseId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpGetEnterpriseIds(win32::Windows::Win32::Foundation::HANDLE tokenHandle, uint32_t* numberOfBytes, win32::Windows::Win32::Foundation::PWSTR* enterpriseIds, uint32_t* enterpriseIdCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tokenHandle);
        ORBIT_TRACK_PARAM(numberOfBytes);
        ORBIT_TRACK_PARAM(enterpriseIds);
        ORBIT_TRACK_PARAM(enterpriseIdCount);

        auto win32_impl_result = g_api_table.SrpGetEnterpriseIds(tokenHandle, numberOfBytes, enterpriseIds, enterpriseIdCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpEnablePermissiveModeFileEncryption(win32::Windows::Win32::Foundation::PWSTR enterpriseId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(enterpriseId);

        auto win32_impl_result = g_api_table.SrpEnablePermissiveModeFileEncryption(enterpriseId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpDisablePermissiveModeFileEncryption() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.SrpDisablePermissiveModeFileEncryption();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpGetEnterprisePolicy(win32::Windows::Win32::Foundation::HANDLE tokenHandle, win32::Windows::Win32::Security::EnterpriseData::ENTERPRISE_DATA_POLICIES* policyFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tokenHandle);
        ORBIT_TRACK_PARAM(policyFlags);

        auto win32_impl_result = g_api_table.SrpGetEnterprisePolicy(tokenHandle, policyFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SrpIsTokenService(win32::Windows::Win32::Foundation::HANDLE TokenHandle, uint8_t* IsTokenService) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TokenHandle);
        ORBIT_TRACK_PARAM(IsTokenService);

        auto win32_impl_result = g_api_table.SrpIsTokenService(TokenHandle, IsTokenService);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpDoesPolicyAllowAppExecution(win32::Windows::Win32::Storage::Packaging::Appx::PACKAGE_ID* packageId, win32::Windows::Win32::Foundation::BOOL* isAllowed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(packageId);
        ORBIT_TRACK_PARAM(isAllowed);

        auto win32_impl_result = g_api_table.SrpDoesPolicyAllowAppExecution(packageId, isAllowed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SrpHostingInitialize(win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_VERSION Version, win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_TYPE Type, void* pvData, uint32_t cbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(cbData);

        auto win32_impl_result = g_api_table.SrpHostingInitialize(Version, Type, pvData, cbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SrpHostingTerminate(win32::Windows::Win32::Security::EnterpriseData::SRPHOSTING_TYPE Type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Type);

        g_api_table.SrpHostingTerminate(Type);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ProtectFileToEnterpriseIdentity(win32::Windows::Win32::Foundation::PWSTR fileOrFolderPath, win32::Windows::Win32::Foundation::PWSTR identity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileOrFolderPath);
        ORBIT_TRACK_PARAM(identity);

        auto win32_impl_result = g_api_table.ProtectFileToEnterpriseIdentity(fileOrFolderPath, identity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_UnprotectFile(win32::Windows::Win32::Foundation::PWSTR fileOrFolderPath, win32::Windows::Win32::Security::EnterpriseData::FILE_UNPROTECT_OPTIONS* options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileOrFolderPath);
        ORBIT_TRACK_PARAM(options);

        auto win32_impl_result = g_api_table.UnprotectFile(fileOrFolderPath, options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
