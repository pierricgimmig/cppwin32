// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Media_MediaFoundation_0_H
#define WIN32_Windows_Win32_Media_MediaFoundation_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct HANDLE;
    struct HRESULT;
}
WIN32_EXPORT namespace win32::Windows::Win32::Graphics::Direct3D9
{
    enum class D3DFORMAT : uint32_t;
    struct IDirect3DDevice9Ex;
    struct IDirect3DSurface9;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Com
{
    struct IUnknown;
}
WIN32_EXPORT namespace win32::Windows::Win32::Media::MediaFoundation
{
#pragma region enums
    enum class AEC_INPUT_STREAM : int32_t
    {
        AEC_CAPTURE_STREAM = 0,
        AEC_REFERENCE_STREAM = 1,
    };
    enum class AEC_SYSTEM_MODE : int32_t
    {
        SINGLE_CHANNEL_AEC = 0,
        ADAPTIVE_ARRAY_ONLY = 1,
        OPTIBEAM_ARRAY_ONLY = 2,
        ADAPTIVE_ARRAY_AND_AEC = 3,
        OPTIBEAM_ARRAY_AND_AEC = 4,
        SINGLE_CHANNEL_NSAGC = 5,
        MODE_NOT_SET = 6,
    };
    enum class AEC_VAD_MODE : int32_t
    {
        AEC_VAD_DISABLED = 0,
        AEC_VAD_NORMAL = 1,
        AEC_VAD_FOR_AGC = 2,
        AEC_VAD_FOR_SILENCE_SUPPRESSION = 3,
    };
    enum class ASF_SELECTION_STATUS : int32_t
    {
        ASF_STATUS_NOTSELECTED = 0,
        ASF_STATUS_CLEANPOINTSONLY = 1,
        ASF_STATUS_ALLDATAUNITS = 2,
    };
    enum class ASF_STATUSFLAGS : int32_t
    {
        ASF_STATUSFLAGS_INCOMPLETE = 1,
        ASF_STATUSFLAGS_NONFATAL_ERROR = 2,
    };
    enum class D3D12_BITSTREAM_ENCRYPTION_TYPE : int32_t
    {
        D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0,
    };
    enum class D3D12_FEATURE_VIDEO : int32_t
    {
        D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0,
        D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1,
        D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2,
        D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3,
        D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5,
        D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6,
        D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7,
        D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8,
        D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9,
        D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10,
        D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11,
        D3D12_FEATURE_VIDEO_ARCHITECTURE = 17,
        D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18,
        D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19,
        D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20,
        D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27,
        D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28,
        D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29,
        D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30,
        D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31,
        D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32,
    };
    enum class D3D12_VIDEO_DECODE_ARGUMENT_TYPE : int32_t
    {
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0,
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1,
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2,
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3,
    };
    enum class D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS : uint32_t
    {
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0x0,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 0x1,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 0x2,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 0x4,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 0x8,
    };
    enum class D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS : uint32_t
    {
        D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0x0,
        D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 0x1,
    };
    enum class D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT : int32_t
    {
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3,
    };
    enum class D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS : uint32_t
    {
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0x0,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = 0x1,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = 0x2,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = 0x4,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = 0x1,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = 0x2,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = 0x4,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = 0x8,
    };
    enum class D3D12_VIDEO_DECODE_STATUS : int32_t
    {
        D3D12_VIDEO_DECODE_STATUS_OK = 0,
        D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1,
        D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2,
        D3D12_VIDEO_DECODE_STATUS_RESTART = 3,
        D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4,
    };
    enum class D3D12_VIDEO_DECODE_SUPPORT_FLAGS : uint32_t
    {
        D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0x0,
        D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 0x1,
    };
    enum class D3D12_VIDEO_DECODE_TIER : int32_t
    {
        D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0,
        D3D12_VIDEO_DECODE_TIER_1 = 1,
        D3D12_VIDEO_DECODE_TIER_2 = 2,
        D3D12_VIDEO_DECODE_TIER_3 = 3,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC : int32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_H264 = 0,
        D3D12_VIDEO_ENCODER_CODEC_HEVC = 1,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES : int32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED = 0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL = 1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL = 2,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 0x1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM = 0x2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING = 0x4,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 0x8,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES : int32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING = 3,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES = 4,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 5,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 6,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED = 0x1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES = 0x2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS = 0x4,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING = 0x8,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES = 0x10,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES = 0x20,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING = 0x40,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE : int32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8 = 0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 = 1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 = 2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 = 3,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES = 0x1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES = 0x2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER = 0x4,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES = 0x8,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION = 0x10,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING = 0x20,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION = 0x40,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE : int32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4 = 0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8 = 1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 = 2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 = 3,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT = 0x1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 0x2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 0x4,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT = 0x8,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT = 0x10,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT = 0x20,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 0x40,
    };
    enum class D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT = 0x1,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT = 0x2,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT = 0x4,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT = 0x8,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT = 0x10,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED = 0x20,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT = 0x40,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT = 0x80,
        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES = 0x100,
    };
    enum class D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR = 0x0,
        D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED = 0x1,
        D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED = 0x2,
        D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES = 0x4,
        D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED = 0x8,
        D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE = 0x10,
    };
    enum class D3D12_VIDEO_ENCODER_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_FLAG_NONE = 0x0,
    };
    enum class D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE : int32_t
    {
        D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME = 0,
        D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION = 1,
        D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED = 2,
        D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION = 3,
        D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME = 4,
    };
    enum class D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 : int32_t
    {
        D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME = 0,
        D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME = 1,
        D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME = 2,
        D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME = 3,
    };
    enum class D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC : int32_t
    {
        D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME = 0,
        D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME = 1,
        D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME = 2,
        D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME = 3,
    };
    enum class D3D12_VIDEO_ENCODER_HEAP_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE = 0x0,
    };
    enum class D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE : int32_t
    {
        D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE = 0,
        D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED = 1,
    };
    enum class D3D12_VIDEO_ENCODER_LEVELS_H264 : int32_t
    {
        D3D12_VIDEO_ENCODER_LEVELS_H264_1 = 0,
        D3D12_VIDEO_ENCODER_LEVELS_H264_1b = 1,
        D3D12_VIDEO_ENCODER_LEVELS_H264_11 = 2,
        D3D12_VIDEO_ENCODER_LEVELS_H264_12 = 3,
        D3D12_VIDEO_ENCODER_LEVELS_H264_13 = 4,
        D3D12_VIDEO_ENCODER_LEVELS_H264_2 = 5,
        D3D12_VIDEO_ENCODER_LEVELS_H264_21 = 6,
        D3D12_VIDEO_ENCODER_LEVELS_H264_22 = 7,
        D3D12_VIDEO_ENCODER_LEVELS_H264_3 = 8,
        D3D12_VIDEO_ENCODER_LEVELS_H264_31 = 9,
        D3D12_VIDEO_ENCODER_LEVELS_H264_32 = 10,
        D3D12_VIDEO_ENCODER_LEVELS_H264_4 = 11,
        D3D12_VIDEO_ENCODER_LEVELS_H264_41 = 12,
        D3D12_VIDEO_ENCODER_LEVELS_H264_42 = 13,
        D3D12_VIDEO_ENCODER_LEVELS_H264_5 = 14,
        D3D12_VIDEO_ENCODER_LEVELS_H264_51 = 15,
        D3D12_VIDEO_ENCODER_LEVELS_H264_52 = 16,
        D3D12_VIDEO_ENCODER_LEVELS_H264_6 = 17,
        D3D12_VIDEO_ENCODER_LEVELS_H264_61 = 18,
        D3D12_VIDEO_ENCODER_LEVELS_H264_62 = 19,
    };
    enum class D3D12_VIDEO_ENCODER_LEVELS_HEVC : int32_t
    {
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_1 = 0,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_2 = 1,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 = 2,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_3 = 3,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 = 4,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_4 = 5,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 = 6,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_5 = 7,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 = 8,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 = 9,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_6 = 10,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 = 11,
        D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 = 12,
    };
    enum class D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE : int32_t
    {
        D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM = 0,
        D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL = 1,
        D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL = 2,
        D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL = 3,
    };
    enum class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 0x1,
    };
    enum class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES = 0x1,
    };
    enum class D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE = 0x1,
    };
    enum class D3D12_VIDEO_ENCODER_PROFILE_H264 : int32_t
    {
        D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN = 0,
        D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH = 1,
        D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 = 2,
    };
    enum class D3D12_VIDEO_ENCODER_PROFILE_HEVC : int32_t
    {
        D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN = 0,
        D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 = 1,
    };
    enum class D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP = 0x1,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS = 0x2,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE = 0x4,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP = 0x8,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE = 0x10,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES = 0x20,
    };
    enum class D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE : int32_t
    {
        D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP = 0,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP = 1,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR = 2,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR = 3,
        D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR = 4,
    };
    enum class D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE = 0x1,
        D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE = 0x2,
        D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE = 0x4,
        D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH = 0x8,
        D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE = 0x10,
    };
    enum class D3D12_VIDEO_ENCODER_SUPPORT_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK = 0x1,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE = 0x2,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE = 0x4,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE = 0x8,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE = 0x10,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS = 0x20,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE = 0x40,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE = 0x80,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE = 0x100,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE = 0x200,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE = 0x400,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE = 0x800,
        D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE = 0x1000,
    };
    enum class D3D12_VIDEO_ENCODER_TIER_HEVC : int32_t
    {
        D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN = 0,
        D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH = 1,
    };
    enum class D3D12_VIDEO_ENCODER_VALIDATION_FLAGS : uint32_t
    {
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE = 0x0,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED = 0x1,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED = 0x8,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED = 0x10,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED = 0x20,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED = 0x40,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED = 0x80,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED = 0x100,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST = 0x200,
        D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED = 0x800,
    };
    enum class D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS : uint32_t
    {
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0x0,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 0x1,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 0x2,
    };
    enum class D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE : int32_t
    {
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6,
    };
    enum class D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE : int32_t
    {
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10,
    };
    enum class D3D12_VIDEO_FIELD_TYPE : int32_t
    {
        D3D12_VIDEO_FIELD_TYPE_NONE = 0,
        D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1,
        D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2,
    };
    enum class D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE : int32_t
    {
        D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0,
        D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1,
    };
    enum class D3D12_VIDEO_FRAME_STEREO_FORMAT : int32_t
    {
        D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4,
    };
    enum class D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE : int32_t
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0,
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1,
    };
    enum class D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS : uint32_t
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0x0,
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = 0x1,
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = 0x2,
    };
    enum class D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION : int32_t
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0,
    };
    enum class D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS : uint32_t
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0x0,
        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = 0x1,
    };
    enum class D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE : int32_t
    {
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0,
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1,
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2,
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3,
    };
    enum class D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 0x1,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 0x2,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 0x4,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 0x8,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 0x10,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 0x20,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 0x40,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 0x80,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = 0x80000000,
    };
    enum class D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 0x1,
        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = 0x80000000,
    };
    enum class D3D12_VIDEO_PROCESS_FEATURE_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 0x1,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 0x2,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 0x4,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 0x8,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 0x10,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 0x20,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 0x40,
    };
    enum class D3D12_VIDEO_PROCESS_FILTER : int32_t
    {
        D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0,
        D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1,
        D3D12_VIDEO_PROCESS_FILTER_HUE = 2,
        D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3,
        D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4,
        D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5,
        D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6,
        D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7,
    };
    enum class D3D12_VIDEO_PROCESS_FILTER_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = 0x1,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = 0x2,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = 0x4,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = 0x8,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = 0x10,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = 0x20,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = 0x40,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = 0x80,
    };
    enum class D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 0x1,
        D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 0x2,
    };
    enum class D3D12_VIDEO_PROCESS_ORIENTATION : int32_t
    {
        D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0,
        D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4,
        D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7,
    };
    enum class D3D12_VIDEO_PROCESS_SUPPORT_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 0x1,
    };
    enum class D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS : uint32_t
    {
        D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0x0,
        D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 0x1,
    };
    enum class D3D12_VIDEO_SCALE_SUPPORT_FLAGS : uint32_t
    {
        D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0x0,
        D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 0x1,
        D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 0x2,
    };
    enum class DXVA2_BufferfType : int32_t
    {
        DXVA2_PictureParametersBufferType = 0,
        DXVA2_MacroBlockControlBufferType = 1,
        DXVA2_ResidualDifferenceBufferType = 2,
        DXVA2_DeblockingControlBufferType = 3,
        DXVA2_InverseQuantizationMatrixBufferType = 4,
        DXVA2_SliceControlBufferType = 5,
        DXVA2_BitStreamDateBufferType = 6,
        DXVA2_MotionVectorBuffer = 7,
        DXVA2_FilmGrainBuffer = 8,
    };
    enum class DXVA2_DeinterlaceTech : int32_t
    {
        DXVA2_DeinterlaceTech_Unknown = 0,
        DXVA2_DeinterlaceTech_BOBLineReplicate = 1,
        DXVA2_DeinterlaceTech_BOBVerticalStretch = 2,
        DXVA2_DeinterlaceTech_BOBVerticalStretch4Tap = 4,
        DXVA2_DeinterlaceTech_MedianFiltering = 8,
        DXVA2_DeinterlaceTech_EdgeFiltering = 16,
        DXVA2_DeinterlaceTech_FieldAdaptive = 32,
        DXVA2_DeinterlaceTech_PixelAdaptive = 64,
        DXVA2_DeinterlaceTech_MotionVectorSteered = 128,
        DXVA2_DeinterlaceTech_InverseTelecine = 256,
        DXVA2_DeinterlaceTech_Mask = 511,
    };
    enum class DXVA2_DestData : int32_t
    {
        DXVA2_DestData_RFF = 1,
        DXVA2_DestData_TFF = 2,
        DXVA2_DestData_RFF_TFF_Present = 4,
        DXVA2_DestData_Mask = 65535,
    };
    enum class DXVA2_DetailFilterTech : int32_t
    {
        DXVA2_DetailFilterTech_Unsupported = 0,
        DXVA2_DetailFilterTech_Unknown = 1,
        DXVA2_DetailFilterTech_Edge = 2,
        DXVA2_DetailFilterTech_Sharpening = 4,
        DXVA2_DetailFilterTech_Mask = 7,
    };
    enum class DXVA2_FilterType : int32_t
    {
        DXVA2_NoiseFilterLumaLevel = 1,
        DXVA2_NoiseFilterLumaThreshold = 2,
        DXVA2_NoiseFilterLumaRadius = 3,
        DXVA2_NoiseFilterChromaLevel = 4,
        DXVA2_NoiseFilterChromaThreshold = 5,
        DXVA2_NoiseFilterChromaRadius = 6,
        DXVA2_DetailFilterLumaLevel = 7,
        DXVA2_DetailFilterLumaThreshold = 8,
        DXVA2_DetailFilterLumaRadius = 9,
        DXVA2_DetailFilterChromaLevel = 10,
        DXVA2_DetailFilterChromaThreshold = 11,
        DXVA2_DetailFilterChromaRadius = 12,
    };
    enum class DXVA2_NoiseFilterTech : int32_t
    {
        DXVA2_NoiseFilterTech_Unsupported = 0,
        DXVA2_NoiseFilterTech_Unknown = 1,
        DXVA2_NoiseFilterTech_Median = 2,
        DXVA2_NoiseFilterTech_Temporal = 4,
        DXVA2_NoiseFilterTech_BlockNoise = 8,
        DXVA2_NoiseFilterTech_MosquitoNoise = 16,
        DXVA2_NoiseFilterTech_Mask = 31,
    };
    enum class DXVA2_NominalRange : int32_t
    {
        DXVA2_NominalRangeMask = 7,
        DXVA2_NominalRange_Unknown = 0,
        DXVA2_NominalRange_Normal = 1,
        DXVA2_NominalRange_Wide = 2,
        DXVA2_NominalRange_0_255 = 1,
        DXVA2_NominalRange_16_235 = 2,
        DXVA2_NominalRange_48_208 = 3,
    };
    enum class DXVA2_ProcAmp : int32_t
    {
        DXVA2_ProcAmp_None = 0,
        DXVA2_ProcAmp_Brightness = 1,
        DXVA2_ProcAmp_Contrast = 2,
        DXVA2_ProcAmp_Hue = 4,
        DXVA2_ProcAmp_Saturation = 8,
        DXVA2_ProcAmp_Mask = 15,
    };
    enum class DXVA2_SampleData : int32_t
    {
        DXVA2_SampleData_RFF = 1,
        DXVA2_SampleData_TFF = 2,
        DXVA2_SampleData_RFF_TFF_Present = 4,
        DXVA2_SampleData_Mask = 65535,
    };
    enum class DXVA2_SampleFormat : int32_t
    {
        DXVA2_SampleFormatMask = 255,
        DXVA2_SampleUnknown = 0,
        DXVA2_SampleProgressiveFrame = 2,
        DXVA2_SampleFieldInterleavedEvenFirst = 3,
        DXVA2_SampleFieldInterleavedOddFirst = 4,
        DXVA2_SampleFieldSingleEven = 5,
        DXVA2_SampleFieldSingleOdd = 6,
        DXVA2_SampleSubStream = 7,
    };
    enum class DXVA2_SurfaceType : int32_t
    {
        DXVA2_SurfaceType_DecoderRenderTarget = 0,
        DXVA2_SurfaceType_ProcessorRenderTarget = 1,
        DXVA2_SurfaceType_D3DRenderTargetTexture = 2,
    };
    enum class DXVA2_VPDev : int32_t
    {
        DXVA2_VPDev_HardwareDevice = 1,
        DXVA2_VPDev_EmulatedDXVA1 = 2,
        DXVA2_VPDev_SoftwareDevice = 4,
        DXVA2_VPDev_Mask = 7,
    };
    enum class DXVA2_VideoChromaSubSampling : int32_t
    {
        DXVA2_VideoChromaSubsamplingMask = 15,
        DXVA2_VideoChromaSubsampling_Unknown = 0,
        DXVA2_VideoChromaSubsampling_ProgressiveChroma = 8,
        DXVA2_VideoChromaSubsampling_Horizontally_Cosited = 4,
        DXVA2_VideoChromaSubsampling_Vertically_Cosited = 2,
        DXVA2_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1,
        DXVA2_VideoChromaSubsampling_MPEG2 = 5,
        DXVA2_VideoChromaSubsampling_MPEG1 = 1,
        DXVA2_VideoChromaSubsampling_DV_PAL = 6,
        DXVA2_VideoChromaSubsampling_Cosited = 7,
    };
    enum class DXVA2_VideoLighting : int32_t
    {
        DXVA2_VideoLightingMask = 15,
        DXVA2_VideoLighting_Unknown = 0,
        DXVA2_VideoLighting_bright = 1,
        DXVA2_VideoLighting_office = 2,
        DXVA2_VideoLighting_dim = 3,
        DXVA2_VideoLighting_dark = 4,
    };
    enum class DXVA2_VideoPrimaries : int32_t
    {
        DXVA2_VideoPrimariesMask = 31,
        DXVA2_VideoPrimaries_Unknown = 0,
        DXVA2_VideoPrimaries_reserved = 1,
        DXVA2_VideoPrimaries_BT709 = 2,
        DXVA2_VideoPrimaries_BT470_2_SysM = 3,
        DXVA2_VideoPrimaries_BT470_2_SysBG = 4,
        DXVA2_VideoPrimaries_SMPTE170M = 5,
        DXVA2_VideoPrimaries_SMPTE240M = 6,
        DXVA2_VideoPrimaries_EBU3213 = 7,
        DXVA2_VideoPrimaries_SMPTE_C = 8,
    };
    enum class DXVA2_VideoProcess : int32_t
    {
        DXVA2_VideoProcess_None = 0,
        DXVA2_VideoProcess_YUV2RGB = 1,
        DXVA2_VideoProcess_StretchX = 2,
        DXVA2_VideoProcess_StretchY = 4,
        DXVA2_VideoProcess_AlphaBlend = 8,
        DXVA2_VideoProcess_SubRects = 16,
        DXVA2_VideoProcess_SubStreams = 32,
        DXVA2_VideoProcess_SubStreamsExtended = 64,
        DXVA2_VideoProcess_YUV2RGBExtended = 128,
        DXVA2_VideoProcess_AlphaBlendExtended = 256,
        DXVA2_VideoProcess_Constriction = 512,
        DXVA2_VideoProcess_NoiseFilter = 1024,
        DXVA2_VideoProcess_DetailFilter = 2048,
        DXVA2_VideoProcess_PlanarAlpha = 4096,
        DXVA2_VideoProcess_LinearScaling = 8192,
        DXVA2_VideoProcess_GammaCompensated = 16384,
        DXVA2_VideoProcess_MaintainsOriginalFieldData = 32768,
        DXVA2_VideoProcess_Mask = 65535,
    };
    enum class DXVA2_VideoRenderTargetType : int32_t
    {
        DXVA2_VideoDecoderRenderTarget = 0,
        DXVA2_VideoProcessorRenderTarget = 1,
        DXVA2_VideoSoftwareRenderTarget = 2,
    };
    enum class DXVA2_VideoTransferFunction : int32_t
    {
        DXVA2_VideoTransFuncMask = 31,
        DXVA2_VideoTransFunc_Unknown = 0,
        DXVA2_VideoTransFunc_10 = 1,
        DXVA2_VideoTransFunc_18 = 2,
        DXVA2_VideoTransFunc_20 = 3,
        DXVA2_VideoTransFunc_22 = 4,
        DXVA2_VideoTransFunc_709 = 5,
        DXVA2_VideoTransFunc_240M = 6,
        DXVA2_VideoTransFunc_sRGB = 7,
        DXVA2_VideoTransFunc_28 = 8,
    };
    enum class DXVA2_VideoTransferMatrix : int32_t
    {
        DXVA2_VideoTransferMatrixMask = 7,
        DXVA2_VideoTransferMatrix_Unknown = 0,
        DXVA2_VideoTransferMatrix_BT709 = 1,
        DXVA2_VideoTransferMatrix_BT601 = 2,
        DXVA2_VideoTransferMatrix_SMPTE240M = 3,
    };
    enum class DXVAHD_ALPHA_FILL_MODE : int32_t
    {
        DXVAHD_ALPHA_FILL_MODE_OPAQUE = 0,
        DXVAHD_ALPHA_FILL_MODE_BACKGROUND = 1,
        DXVAHD_ALPHA_FILL_MODE_DESTINATION = 2,
        DXVAHD_ALPHA_FILL_MODE_SOURCE_STREAM = 3,
    };
    enum class DXVAHD_BLT_STATE : int32_t
    {
        DXVAHD_BLT_STATE_TARGET_RECT = 0,
        DXVAHD_BLT_STATE_BACKGROUND_COLOR = 1,
        DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE = 2,
        DXVAHD_BLT_STATE_ALPHA_FILL = 3,
        DXVAHD_BLT_STATE_CONSTRICTION = 4,
        DXVAHD_BLT_STATE_PRIVATE = 1000,
    };
    enum class DXVAHD_DEVICE_CAPS : int32_t
    {
        DXVAHD_DEVICE_CAPS_LINEAR_SPACE = 1,
        DXVAHD_DEVICE_CAPS_xvYCC = 2,
        DXVAHD_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4,
        DXVAHD_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8,
    };
    enum class DXVAHD_DEVICE_TYPE : int32_t
    {
        DXVAHD_DEVICE_TYPE_HARDWARE = 0,
        DXVAHD_DEVICE_TYPE_SOFTWARE = 1,
        DXVAHD_DEVICE_TYPE_REFERENCE = 2,
        DXVAHD_DEVICE_TYPE_OTHER = 3,
    };
    enum class DXVAHD_DEVICE_USAGE : int32_t
    {
        DXVAHD_DEVICE_USAGE_PLAYBACK_NORMAL = 0,
        DXVAHD_DEVICE_USAGE_OPTIMAL_SPEED = 1,
        DXVAHD_DEVICE_USAGE_OPTIMAL_QUALITY = 2,
    };
    enum class DXVAHD_FEATURE_CAPS : int32_t
    {
        DXVAHD_FEATURE_CAPS_ALPHA_FILL = 1,
        DXVAHD_FEATURE_CAPS_CONSTRICTION = 2,
        DXVAHD_FEATURE_CAPS_LUMA_KEY = 4,
        DXVAHD_FEATURE_CAPS_ALPHA_PALETTE = 8,
    };
    enum class DXVAHD_FILTER : int32_t
    {
        DXVAHD_FILTER_BRIGHTNESS = 0,
        DXVAHD_FILTER_CONTRAST = 1,
        DXVAHD_FILTER_HUE = 2,
        DXVAHD_FILTER_SATURATION = 3,
        DXVAHD_FILTER_NOISE_REDUCTION = 4,
        DXVAHD_FILTER_EDGE_ENHANCEMENT = 5,
        DXVAHD_FILTER_ANAMORPHIC_SCALING = 6,
    };
    enum class DXVAHD_FILTER_CAPS : int32_t
    {
        DXVAHD_FILTER_CAPS_BRIGHTNESS = 1,
        DXVAHD_FILTER_CAPS_CONTRAST = 2,
        DXVAHD_FILTER_CAPS_HUE = 4,
        DXVAHD_FILTER_CAPS_SATURATION = 8,
        DXVAHD_FILTER_CAPS_NOISE_REDUCTION = 16,
        DXVAHD_FILTER_CAPS_EDGE_ENHANCEMENT = 32,
        DXVAHD_FILTER_CAPS_ANAMORPHIC_SCALING = 64,
    };
    enum class DXVAHD_FRAME_FORMAT : int32_t
    {
        DXVAHD_FRAME_FORMAT_PROGRESSIVE = 0,
        DXVAHD_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1,
        DXVAHD_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2,
    };
    enum class DXVAHD_INPUT_FORMAT_CAPS : int32_t
    {
        DXVAHD_INPUT_FORMAT_CAPS_RGB_INTERLACED = 1,
        DXVAHD_INPUT_FORMAT_CAPS_RGB_PROCAMP = 2,
        DXVAHD_INPUT_FORMAT_CAPS_RGB_LUMA_KEY = 4,
        DXVAHD_INPUT_FORMAT_CAPS_PALETTE_INTERLACED = 8,
    };
    enum class DXVAHD_ITELECINE_CAPS : int32_t
    {
        DXVAHD_ITELECINE_CAPS_32 = 1,
        DXVAHD_ITELECINE_CAPS_22 = 2,
        DXVAHD_ITELECINE_CAPS_2224 = 4,
        DXVAHD_ITELECINE_CAPS_2332 = 8,
        DXVAHD_ITELECINE_CAPS_32322 = 16,
        DXVAHD_ITELECINE_CAPS_55 = 32,
        DXVAHD_ITELECINE_CAPS_64 = 64,
        DXVAHD_ITELECINE_CAPS_87 = 128,
        DXVAHD_ITELECINE_CAPS_222222222223 = 256,
        DXVAHD_ITELECINE_CAPS_OTHER = -2147483648,
    };
    enum class DXVAHD_OUTPUT_RATE : int32_t
    {
        DXVAHD_OUTPUT_RATE_NORMAL = 0,
        DXVAHD_OUTPUT_RATE_HALF = 1,
        DXVAHD_OUTPUT_RATE_CUSTOM = 2,
    };
    enum class DXVAHD_PROCESSOR_CAPS : int32_t
    {
        DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1,
        DXVAHD_PROCESSOR_CAPS_DEINTERLACE_BOB = 2,
        DXVAHD_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4,
        DXVAHD_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8,
        DXVAHD_PROCESSOR_CAPS_INVERSE_TELECINE = 16,
        DXVAHD_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32,
    };
    enum class DXVAHD_STREAM_STATE : int32_t
    {
        DXVAHD_STREAM_STATE_D3DFORMAT = 0,
        DXVAHD_STREAM_STATE_FRAME_FORMAT = 1,
        DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE = 2,
        DXVAHD_STREAM_STATE_OUTPUT_RATE = 3,
        DXVAHD_STREAM_STATE_SOURCE_RECT = 4,
        DXVAHD_STREAM_STATE_DESTINATION_RECT = 5,
        DXVAHD_STREAM_STATE_ALPHA = 6,
        DXVAHD_STREAM_STATE_PALETTE = 7,
        DXVAHD_STREAM_STATE_LUMA_KEY = 8,
        DXVAHD_STREAM_STATE_ASPECT_RATIO = 9,
        DXVAHD_STREAM_STATE_FILTER_BRIGHTNESS = 100,
        DXVAHD_STREAM_STATE_FILTER_CONTRAST = 101,
        DXVAHD_STREAM_STATE_FILTER_HUE = 102,
        DXVAHD_STREAM_STATE_FILTER_SATURATION = 103,
        DXVAHD_STREAM_STATE_FILTER_NOISE_REDUCTION = 104,
        DXVAHD_STREAM_STATE_FILTER_EDGE_ENHANCEMENT = 105,
        DXVAHD_STREAM_STATE_FILTER_ANAMORPHIC_SCALING = 106,
        DXVAHD_STREAM_STATE_PRIVATE = 1000,
    };
    enum class DXVAHD_SURFACE_TYPE : int32_t
    {
        DXVAHD_SURFACE_TYPE_VIDEO_INPUT = 0,
        DXVAHD_SURFACE_TYPE_VIDEO_INPUT_PRIVATE = 1,
        DXVAHD_SURFACE_TYPE_VIDEO_OUTPUT = 2,
    };
    enum class DXVA_DeinterlaceTech : int32_t
    {
        DXVA_DeinterlaceTech_Unknown = 0,
        DXVA_DeinterlaceTech_BOBLineReplicate = 1,
        DXVA_DeinterlaceTech_BOBVerticalStretch = 2,
        DXVA_DeinterlaceTech_BOBVerticalStretch4Tap = 256,
        DXVA_DeinterlaceTech_MedianFiltering = 4,
        DXVA_DeinterlaceTech_EdgeFiltering = 16,
        DXVA_DeinterlaceTech_FieldAdaptive = 32,
        DXVA_DeinterlaceTech_PixelAdaptive = 64,
        DXVA_DeinterlaceTech_MotionVectorSteered = 128,
    };
    enum class DXVA_DestinationFlags : int32_t
    {
        DXVA_DestinationFlagMask = 15,
        DXVA_DestinationFlag_Background_Changed = 1,
        DXVA_DestinationFlag_TargetRect_Changed = 2,
        DXVA_DestinationFlag_ColorData_Changed = 4,
        DXVA_DestinationFlag_Alpha_Changed = 8,
    };
    enum class DXVA_NominalRange : int32_t
    {
        DXVA_NominalRangeShift = 12,
        DXVA_NominalRangeMask = 28672,
        DXVA_NominalRange_Unknown = 0,
        DXVA_NominalRange_Normal = 1,
        DXVA_NominalRange_Wide = 2,
        DXVA_NominalRange_0_255 = 1,
        DXVA_NominalRange_16_235 = 2,
        DXVA_NominalRange_48_208 = 3,
    };
    enum class DXVA_ProcAmpControlProp : int32_t
    {
        DXVA_ProcAmp_None = 0,
        DXVA_ProcAmp_Brightness = 1,
        DXVA_ProcAmp_Contrast = 2,
        DXVA_ProcAmp_Hue = 4,
        DXVA_ProcAmp_Saturation = 8,
    };
    enum class DXVA_SampleFlags : int32_t
    {
        DXVA_SampleFlagsMask = 15,
        DXVA_SampleFlag_Palette_Changed = 1,
        DXVA_SampleFlag_SrcRect_Changed = 2,
        DXVA_SampleFlag_DstRect_Changed = 4,
        DXVA_SampleFlag_ColorData_Changed = 8,
    };
    enum class DXVA_SampleFormat : int32_t
    {
        DXVA_SampleFormatMask = 255,
        DXVA_SampleUnknown = 0,
        DXVA_SamplePreviousFrame = 1,
        DXVA_SampleProgressiveFrame = 2,
        DXVA_SampleFieldInterleavedEvenFirst = 3,
        DXVA_SampleFieldInterleavedOddFirst = 4,
        DXVA_SampleFieldSingleEven = 5,
        DXVA_SampleFieldSingleOdd = 6,
        DXVA_SampleSubStream = 7,
    };
    enum class DXVA_VideoChromaSubsampling : int32_t
    {
        DXVA_VideoChromaSubsamplingShift = 8,
        DXVA_VideoChromaSubsamplingMask = 3840,
        DXVA_VideoChromaSubsampling_Unknown = 0,
        DXVA_VideoChromaSubsampling_ProgressiveChroma = 8,
        DXVA_VideoChromaSubsampling_Horizontally_Cosited = 4,
        DXVA_VideoChromaSubsampling_Vertically_Cosited = 2,
        DXVA_VideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1,
        DXVA_VideoChromaSubsampling_MPEG2 = 5,
        DXVA_VideoChromaSubsampling_MPEG1 = 1,
        DXVA_VideoChromaSubsampling_DV_PAL = 6,
        DXVA_VideoChromaSubsampling_Cosited = 7,
    };
    enum class DXVA_VideoLighting : int32_t
    {
        DXVA_VideoLightingShift = 18,
        DXVA_VideoLightingMask = 3932160,
        DXVA_VideoLighting_Unknown = 0,
        DXVA_VideoLighting_bright = 1,
        DXVA_VideoLighting_office = 2,
        DXVA_VideoLighting_dim = 3,
        DXVA_VideoLighting_dark = 4,
    };
    enum class DXVA_VideoPrimaries : int32_t
    {
        DXVA_VideoPrimariesShift = 22,
        DXVA_VideoPrimariesMask = 130023424,
        DXVA_VideoPrimaries_Unknown = 0,
        DXVA_VideoPrimaries_reserved = 1,
        DXVA_VideoPrimaries_BT709 = 2,
        DXVA_VideoPrimaries_BT470_2_SysM = 3,
        DXVA_VideoPrimaries_BT470_2_SysBG = 4,
        DXVA_VideoPrimaries_SMPTE170M = 5,
        DXVA_VideoPrimaries_SMPTE240M = 6,
        DXVA_VideoPrimaries_EBU3213 = 7,
        DXVA_VideoPrimaries_SMPTE_C = 8,
    };
    enum class DXVA_VideoProcessCaps : int32_t
    {
        DXVA_VideoProcess_None = 0,
        DXVA_VideoProcess_YUV2RGB = 1,
        DXVA_VideoProcess_StretchX = 2,
        DXVA_VideoProcess_StretchY = 4,
        DXVA_VideoProcess_AlphaBlend = 8,
        DXVA_VideoProcess_SubRects = 16,
        DXVA_VideoProcess_SubStreams = 32,
        DXVA_VideoProcess_SubStreamsExtended = 64,
        DXVA_VideoProcess_YUV2RGBExtended = 128,
        DXVA_VideoProcess_AlphaBlendExtended = 256,
    };
    enum class DXVA_VideoTransferFunction : int32_t
    {
        DXVA_VideoTransFuncShift = 27,
        DXVA_VideoTransFuncMask = -134217728,
        DXVA_VideoTransFunc_Unknown = 0,
        DXVA_VideoTransFunc_10 = 1,
        DXVA_VideoTransFunc_18 = 2,
        DXVA_VideoTransFunc_20 = 3,
        DXVA_VideoTransFunc_22 = 4,
        DXVA_VideoTransFunc_22_709 = 5,
        DXVA_VideoTransFunc_22_240M = 6,
        DXVA_VideoTransFunc_22_8bit_sRGB = 7,
        DXVA_VideoTransFunc_28 = 8,
    };
    enum class DXVA_VideoTransferMatrix : int32_t
    {
        DXVA_VideoTransferMatrixShift = 15,
        DXVA_VideoTransferMatrixMask = 229376,
        DXVA_VideoTransferMatrix_Unknown = 0,
        DXVA_VideoTransferMatrix_BT709 = 1,
        DXVA_VideoTransferMatrix_BT601 = 2,
        DXVA_VideoTransferMatrix_SMPTE240M = 3,
    };
    enum class DeviceStreamState : int32_t
    {
        DeviceStreamState_Stop = 0,
        DeviceStreamState_Pause = 1,
        DeviceStreamState_Run = 2,
        DeviceStreamState_Disabled = 3,
    };
    enum class EAllocationType : int32_t
    {
        eAllocationTypeDynamic = 0,
        eAllocationTypeRT = 1,
        eAllocationTypePageable = 2,
        eAllocationTypeIgnore = 3,
    };
    enum class EVRFilterConfigPrefs : int32_t
    {
        EVRFilterConfigPrefs_EnableQoS = 1,
        EVRFilterConfigPrefs_Mask = 1,
    };
    enum class FILE_ACCESSMODE : int32_t
    {
        ACCESSMODE_READ = 1,
        ACCESSMODE_WRITE = 2,
        ACCESSMODE_READWRITE = 3,
        ACCESSMODE_WRITE_EXCLUSIVE = 4,
    };
    enum class FILE_OPENMODE : int32_t
    {
        OPENMODE_FAIL_IF_NOT_EXIST = 0,
        OPENMODE_FAIL_IF_EXIST = 1,
        OPENMODE_RESET_IF_EXIST = 2,
        OPENMODE_APPEND_IF_EXIST = 3,
        OPENMODE_DELETE_IF_EXIST = 4,
    };
    enum class KSMETHOD_OPMVIDEOOUTPUT : int32_t
    {
        KSMETHOD_OPMVIDEOOUTPUT_STARTINITIALIZATION = 0,
        KSMETHOD_OPMVIDEOOUTPUT_FINISHINITIALIZATION = 1,
        KSMETHOD_OPMVIDEOOUTPUT_GETINFORMATION = 2,
    };
    enum class MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS : uint32_t
    {
        MF_EVENT_FLAG_NONE = 0x0,
        MF_EVENT_FLAG_NO_WAIT = 0x1,
    };
    enum class MF2DBuffer_LockFlags : int32_t
    {
        MF2DBuffer_LockFlags_LockTypeMask = 3,
        MF2DBuffer_LockFlags_Read = 1,
        MF2DBuffer_LockFlags_Write = 2,
        MF2DBuffer_LockFlags_ReadWrite = 3,
        MF2DBuffer_LockFlags_ForceDWORD = 2147483647,
    };
    enum class MF3DVideoOutputType : int32_t
    {
        MF3DVideoOutputType_BaseView = 0,
        MF3DVideoOutputType_Stereo = 1,
    };
    enum class MFASF_INDEXER_FLAGS : int32_t
    {
        MFASF_INDEXER_WRITE_NEW_INDEX = 1,
        MFASF_INDEXER_READ_FOR_REVERSEPLAYBACK = 2,
        MFASF_INDEXER_WRITE_FOR_LIVEREAD = 4,
    };
    enum class MFASF_MULTIPLEXERFLAGS : int32_t
    {
        MFASF_MULTIPLEXER_AUTOADJUST_BITRATE = 1,
    };
    enum class MFASF_SPLITTERFLAGS : int32_t
    {
        MFASF_SPLITTER_REVERSE = 1,
        MFASF_SPLITTER_WMDRM = 2,
    };
    enum class MFASF_STREAMSELECTOR_FLAGS : int32_t
    {
        MFASF_STREAMSELECTOR_DISABLE_THINNING = 1,
        MFASF_STREAMSELECTOR_USE_AVERAGE_BITRATE = 2,
    };
    enum class MFASYNC_WORKQUEUE_TYPE : int32_t
    {
        MF_STANDARD_WORKQUEUE = 0,
        MF_WINDOW_WORKQUEUE = 1,
        MF_MULTITHREADED_WORKQUEUE = 2,
    };
    enum class MFAudioConstriction : int32_t
    {
        MFaudioConstrictionOff = 0,
        MFaudioConstriction48_16 = 1,
        MFaudioConstriction44_16 = 2,
        MFaudioConstriction14_14 = 3,
        MFaudioConstrictionMute = 4,
    };
    enum class MFBYTESTREAM_SEEK_ORIGIN : int32_t
    {
        msoBegin = 0,
        msoCurrent = 1,
    };
    enum class MFCLOCK_CHARACTERISTICS_FLAGS : int32_t
    {
        MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = 2,
        MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = 4,
        MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = 8,
    };
    enum class MFCLOCK_RELATIONAL_FLAGS : int32_t
    {
        MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = 1,
    };
    enum class MFCLOCK_STATE : int32_t
    {
        MFCLOCK_STATE_INVALID = 0,
        MFCLOCK_STATE_RUNNING = 1,
        MFCLOCK_STATE_STOPPED = 2,
        MFCLOCK_STATE_PAUSED = 3,
    };
    enum class MFCameraIntrinsic_DistortionModelType : int32_t
    {
        MFCameraIntrinsic_DistortionModelType_6KT = 0,
        MFCameraIntrinsic_DistortionModelType_ArcTan = 1,
    };
    enum class MFCameraOcclusionState : int32_t
    {
        MFCameraOcclusionState_Open = 0,
        MFCameraOcclusionState_OccludedByLid = 1,
        MFCameraOcclusionState_OccludedByCameraHardware = 2,
    };
    enum class MFDepthMeasurement : int32_t
    {
        DistanceToFocalPlane = 0,
        DistanceToOpticalCenter = 1,
    };
    enum class MFFrameSourceTypes : int32_t
    {
        MFFrameSourceTypes_Color = 1,
        MFFrameSourceTypes_Infrared = 2,
        MFFrameSourceTypes_Depth = 4,
        MFFrameSourceTypes_Image = 8,
        MFFrameSourceTypes_Custom = 128,
    };
    enum class MFMEDIASOURCE_CHARACTERISTICS : int32_t
    {
        MFMEDIASOURCE_IS_LIVE = 1,
        MFMEDIASOURCE_CAN_SEEK = 2,
        MFMEDIASOURCE_CAN_PAUSE = 4,
        MFMEDIASOURCE_HAS_SLOW_SEEK = 8,
        MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = 16,
        MFMEDIASOURCE_CAN_SKIPFORWARD = 32,
        MFMEDIASOURCE_CAN_SKIPBACKWARD = 64,
        MFMEDIASOURCE_DOES_NOT_USE_NETWORK = 128,
    };
    enum class MFNETSOURCE_CACHE_STATE : int32_t
    {
        MFNETSOURCE_CACHE_UNAVAILABLE = 0,
        MFNETSOURCE_CACHE_ACTIVE_WRITING = 1,
        MFNETSOURCE_CACHE_ACTIVE_COMPLETE = 2,
    };
    enum class MFNETSOURCE_PROTOCOL_TYPE : int32_t
    {
        MFNETSOURCE_UNDEFINED = 0,
        MFNETSOURCE_HTTP = 1,
        MFNETSOURCE_RTSP = 2,
        MFNETSOURCE_FILE = 3,
        MFNETSOURCE_MULTICAST = 4,
    };
    enum class MFNETSOURCE_STATISTICS_IDS : int32_t
    {
        MFNETSOURCE_RECVPACKETS_ID = 0,
        MFNETSOURCE_LOSTPACKETS_ID = 1,
        MFNETSOURCE_RESENDSREQUESTED_ID = 2,
        MFNETSOURCE_RESENDSRECEIVED_ID = 3,
        MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = 4,
        MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = 5,
        MFNETSOURCE_OUTPACKETS_ID = 6,
        MFNETSOURCE_RECVRATE_ID = 7,
        MFNETSOURCE_AVGBANDWIDTHBPS_ID = 8,
        MFNETSOURCE_BYTESRECEIVED_ID = 9,
        MFNETSOURCE_PROTOCOL_ID = 10,
        MFNETSOURCE_TRANSPORT_ID = 11,
        MFNETSOURCE_CACHE_STATE_ID = 12,
        MFNETSOURCE_LINKBANDWIDTH_ID = 13,
        MFNETSOURCE_CONTENTBITRATE_ID = 14,
        MFNETSOURCE_SPEEDFACTOR_ID = 15,
        MFNETSOURCE_BUFFERSIZE_ID = 16,
        MFNETSOURCE_BUFFERPROGRESS_ID = 17,
        MFNETSOURCE_LASTBWSWITCHTS_ID = 18,
        MFNETSOURCE_SEEKRANGESTART_ID = 19,
        MFNETSOURCE_SEEKRANGEEND_ID = 20,
        MFNETSOURCE_BUFFERINGCOUNT_ID = 21,
        MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = 22,
        MFNETSOURCE_SIGNEDSESSION_ID = 23,
        MFNETSOURCE_MAXBITRATE_ID = 24,
        MFNETSOURCE_RECEPTION_QUALITY_ID = 25,
        MFNETSOURCE_RECOVEREDPACKETS_ID = 26,
        MFNETSOURCE_VBR_ID = 27,
        MFNETSOURCE_DOWNLOADPROGRESS_ID = 28,
        MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = 29,
    };
    enum class MFNETSOURCE_TRANSPORT_TYPE : int32_t
    {
        MFNETSOURCE_UDP = 0,
        MFNETSOURCE_TCP = 1,
    };
    enum class MFNET_PROXYSETTINGS : int32_t
    {
        MFNET_PROXYSETTING_NONE = 0,
        MFNET_PROXYSETTING_MANUAL = 1,
        MFNET_PROXYSETTING_AUTO = 2,
        MFNET_PROXYSETTING_BROWSER = 3,
    };
    enum class MFNetAuthenticationFlags : int32_t
    {
        MFNET_AUTHENTICATION_PROXY = 1,
        MFNET_AUTHENTICATION_CLEAR_TEXT = 2,
        MFNET_AUTHENTICATION_LOGGED_ON_USER = 4,
    };
    enum class MFNetCredentialOptions : int32_t
    {
        MFNET_CREDENTIAL_SAVE = 1,
        MFNET_CREDENTIAL_DONT_CACHE = 2,
        MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = 4,
    };
    enum class MFNetCredentialRequirements : int32_t
    {
        REQUIRE_PROMPT = 1,
        REQUIRE_SAVE_SELECTED = 2,
    };
    enum class MFNominalRange : int32_t
    {
        MFNominalRange_Unknown = 0,
        MFNominalRange_Normal = 1,
        MFNominalRange_Wide = 2,
        MFNominalRange_0_255 = 1,
        MFNominalRange_16_235 = 2,
        MFNominalRange_48_208 = 3,
        MFNominalRange_64_127 = 4,
        MFNominalRange_Last = 5,
        MFNominalRange_ForceDWORD = 2147483647,
    };
    enum class MFPMPSESSION_CREATION_FLAGS : int32_t
    {
        MFPMPSESSION_UNPROTECTED_PROCESS = 1,
        MFPMPSESSION_IN_PROCESS = 2,
    };
    enum class MFPOLICYMANAGER_ACTION : int32_t
    {
        PEACTION_NO = 0,
        PEACTION_PLAY = 1,
        PEACTION_COPY = 2,
        PEACTION_EXPORT = 3,
        PEACTION_EXTRACT = 4,
        PEACTION_RESERVED1 = 5,
        PEACTION_RESERVED2 = 6,
        PEACTION_RESERVED3 = 7,
        PEACTION_LAST = 7,
    };
    enum class MFP_CREATION_OPTIONS : int32_t
    {
        MFP_OPTION_NONE = 0,
        MFP_OPTION_FREE_THREADED_CALLBACK = 1,
        MFP_OPTION_NO_MMCSS = 2,
        MFP_OPTION_NO_REMOTE_DESKTOP_OPTIMIZATION = 4,
    };
    enum class MFP_EVENT_TYPE : int32_t
    {
        MFP_EVENT_TYPE_PLAY = 0,
        MFP_EVENT_TYPE_PAUSE = 1,
        MFP_EVENT_TYPE_STOP = 2,
        MFP_EVENT_TYPE_POSITION_SET = 3,
        MFP_EVENT_TYPE_RATE_SET = 4,
        MFP_EVENT_TYPE_MEDIAITEM_CREATED = 5,
        MFP_EVENT_TYPE_MEDIAITEM_SET = 6,
        MFP_EVENT_TYPE_FRAME_STEP = 7,
        MFP_EVENT_TYPE_MEDIAITEM_CLEARED = 8,
        MFP_EVENT_TYPE_MF = 9,
        MFP_EVENT_TYPE_ERROR = 10,
        MFP_EVENT_TYPE_PLAYBACK_ENDED = 11,
        MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL = 12,
    };
    enum class MFP_MEDIAPLAYER_STATE : int32_t
    {
        MFP_MEDIAPLAYER_STATE_EMPTY = 0,
        MFP_MEDIAPLAYER_STATE_STOPPED = 1,
        MFP_MEDIAPLAYER_STATE_PLAYING = 2,
        MFP_MEDIAPLAYER_STATE_PAUSED = 3,
        MFP_MEDIAPLAYER_STATE_SHUTDOWN = 4,
    };
    enum class MFRATE_DIRECTION : int32_t
    {
        MFRATE_FORWARD = 0,
        MFRATE_REVERSE = 1,
    };
    enum class MFSESSION_GETFULLTOPOLOGY_FLAGS : int32_t
    {
        MFSESSION_GETFULLTOPOLOGY_CURRENT = 1,
    };
    enum class MFSESSION_SETTOPOLOGY_FLAGS : int32_t
    {
        MFSESSION_SETTOPOLOGY_IMMEDIATE = 1,
        MFSESSION_SETTOPOLOGY_NORESOLUTION = 2,
        MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = 4,
    };
    enum class MFSHUTDOWN_STATUS : int32_t
    {
        MFSHUTDOWN_INITIATED = 0,
        MFSHUTDOWN_COMPLETED = 1,
    };
    enum class MFSINK_WMDRMACTION : int32_t
    {
        MFSINK_WMDRMACTION_UNDEFINED = 0,
        MFSINK_WMDRMACTION_ENCODE = 1,
        MFSINK_WMDRMACTION_TRANSCODE = 2,
        MFSINK_WMDRMACTION_TRANSCRYPT = 3,
        MFSINK_WMDRMACTION_LAST = 3,
    };
    enum class MFSTREAMSINK_MARKER_TYPE : int32_t
    {
        MFSTREAMSINK_MARKER_DEFAULT = 0,
        MFSTREAMSINK_MARKER_ENDOFSEGMENT = 1,
        MFSTREAMSINK_MARKER_TICK = 2,
        MFSTREAMSINK_MARKER_EVENT = 3,
    };
    enum class MFSampleAllocatorUsage : int32_t
    {
        MFSampleAllocatorUsage_UsesProvidedAllocator = 0,
        MFSampleAllocatorUsage_UsesCustomAllocator = 1,
        MFSampleAllocatorUsage_DoesNotAllocate = 2,
    };
    enum class MFSampleEncryptionProtectionScheme : int32_t
    {
        MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_NONE = 0,
        MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CTR = 1,
        MF_SAMPLE_ENCRYPTION_PROTECTION_SCHEME_AES_CBC = 2,
    };
    enum class MFSensorDeviceMode : int32_t
    {
        MFSensorDeviceMode_Controller = 0,
        MFSensorDeviceMode_Shared = 1,
    };
    enum class MFSensorDeviceType : int32_t
    {
        MFSensorDeviceType_Unknown = 0,
        MFSensorDeviceType_Device = 1,
        MFSensorDeviceType_MediaSource = 2,
        MFSensorDeviceType_FrameProvider = 3,
        MFSensorDeviceType_SensorTransform = 4,
    };
    enum class MFSensorStreamType : int32_t
    {
        MFSensorStreamType_Unknown = 0,
        MFSensorStreamType_Input = 1,
        MFSensorStreamType_Output = 2,
    };
    enum class MFSequencerTopologyFlags : int32_t
    {
        SequencerTopologyFlags_Last = 1,
    };
    enum class MFStandardVideoFormat : int32_t
    {
        MFStdVideoFormat_reserved = 0,
        MFStdVideoFormat_NTSC = 1,
        MFStdVideoFormat_PAL = 2,
        MFStdVideoFormat_DVD_NTSC = 3,
        MFStdVideoFormat_DVD_PAL = 4,
        MFStdVideoFormat_DV_PAL = 5,
        MFStdVideoFormat_DV_NTSC = 6,
        MFStdVideoFormat_ATSC_SD480i = 7,
        MFStdVideoFormat_ATSC_HD1080i = 8,
        MFStdVideoFormat_ATSC_HD720p = 9,
    };
    enum class MFTIMER_FLAGS : int32_t
    {
        MFTIMER_RELATIVE = 1,
    };
    enum class MFTOPOLOGY_DXVA_MODE : int32_t
    {
        MFTOPOLOGY_DXVA_DEFAULT = 0,
        MFTOPOLOGY_DXVA_NONE = 1,
        MFTOPOLOGY_DXVA_FULL = 2,
    };
    enum class MFTOPOLOGY_HARDWARE_MODE : int32_t
    {
        MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0,
        MFTOPOLOGY_HWMODE_USE_HARDWARE = 1,
        MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2,
    };
    enum class MFT_AUDIO_DECODER_DEGRADATION_REASON : int32_t
    {
        MFT_AUDIO_DECODER_DEGRADATION_REASON_NONE = 0,
        MFT_AUDIO_DECODER_DEGRADATION_REASON_LICENSING_REQUIREMENT = 1,
    };
    enum class MFT_AUDIO_DECODER_DEGRADATION_TYPE : int32_t
    {
        MFT_AUDIO_DECODER_DEGRADATION_TYPE_NONE = 0,
        MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX2CHANNEL = 1,
        MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX6CHANNEL = 2,
        MFT_AUDIO_DECODER_DEGRADATION_TYPE_DOWNMIX8CHANNEL = 3,
    };
    enum class MFT_DRAIN_TYPE : int32_t
    {
        MFT_DRAIN_PRODUCE_TAILS = 0,
        MFT_DRAIN_NO_TAILS = 1,
    };
    enum class MFT_MESSAGE_TYPE : int32_t
    {
        MFT_MESSAGE_COMMAND_FLUSH = 0,
        MFT_MESSAGE_COMMAND_DRAIN = 1,
        MFT_MESSAGE_SET_D3D_MANAGER = 2,
        MFT_MESSAGE_DROP_SAMPLES = 3,
        MFT_MESSAGE_COMMAND_TICK = 4,
        MFT_MESSAGE_NOTIFY_BEGIN_STREAMING = 268435456,
        MFT_MESSAGE_NOTIFY_END_STREAMING = 268435457,
        MFT_MESSAGE_NOTIFY_END_OF_STREAM = 268435458,
        MFT_MESSAGE_NOTIFY_START_OF_STREAM = 268435459,
        MFT_MESSAGE_NOTIFY_RELEASE_RESOURCES = 268435460,
        MFT_MESSAGE_NOTIFY_REACQUIRE_RESOURCES = 268435461,
        MFT_MESSAGE_NOTIFY_EVENT = 268435462,
        MFT_MESSAGE_COMMAND_SET_OUTPUT_STREAM_STATE = 268435463,
        MFT_MESSAGE_COMMAND_FLUSH_OUTPUT_STREAM = 268435464,
        MFT_MESSAGE_COMMAND_MARKER = 536870912,
    };
    enum class MFVP_MESSAGE_TYPE : int32_t
    {
        MFVP_MESSAGE_FLUSH = 0,
        MFVP_MESSAGE_INVALIDATEMEDIATYPE = 1,
        MFVP_MESSAGE_PROCESSINPUTNOTIFY = 2,
        MFVP_MESSAGE_BEGINSTREAMING = 3,
        MFVP_MESSAGE_ENDSTREAMING = 4,
        MFVP_MESSAGE_ENDOFSTREAM = 5,
        MFVP_MESSAGE_STEP = 6,
        MFVP_MESSAGE_CANCELSTEP = 7,
    };
    enum class MFVideo3DFormat : int32_t
    {
        MFVideo3DSampleFormat_BaseView = 0,
        MFVideo3DSampleFormat_MultiView = 1,
        MFVideo3DSampleFormat_Packed_LeftRight = 2,
        MFVideo3DSampleFormat_Packed_TopBottom = 3,
    };
    enum class MFVideo3DSampleFormat : int32_t
    {
        MFSampleExtension_3DVideo_MultiView = 1,
        MFSampleExtension_3DVideo_Packed = 0,
    };
    enum class MFVideoAlphaBitmapFlags : int32_t
    {
        MFVideoAlphaBitmap_EntireDDS = 1,
        MFVideoAlphaBitmap_SrcColorKey = 2,
        MFVideoAlphaBitmap_SrcRect = 4,
        MFVideoAlphaBitmap_DestRect = 8,
        MFVideoAlphaBitmap_FilterMode = 16,
        MFVideoAlphaBitmap_Alpha = 32,
        MFVideoAlphaBitmap_BitMask = 63,
    };
    enum class MFVideoAspectRatioMode : int32_t
    {
        MFVideoARMode_None = 0,
        MFVideoARMode_PreservePicture = 1,
        MFVideoARMode_PreservePixel = 2,
        MFVideoARMode_NonLinearStretch = 4,
        MFVideoARMode_Mask = 7,
    };
    enum class MFVideoChromaSubsampling : int32_t
    {
        MFVideoChromaSubsampling_Unknown = 0,
        MFVideoChromaSubsampling_ProgressiveChroma = 8,
        MFVideoChromaSubsampling_Horizontally_Cosited = 4,
        MFVideoChromaSubsampling_Vertically_Cosited = 2,
        MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes = 1,
        MFVideoChromaSubsampling_MPEG2 = 5,
        MFVideoChromaSubsampling_MPEG1 = 1,
        MFVideoChromaSubsampling_DV_PAL = 6,
        MFVideoChromaSubsampling_Cosited = 7,
        MFVideoChromaSubsampling_Last = 8,
        MFVideoChromaSubsampling_ForceDWORD = 2147483647,
    };
    enum class MFVideoDRMFlags : int32_t
    {
        MFVideoDRMFlag_None = 0,
        MFVideoDRMFlag_AnalogProtected = 1,
        MFVideoDRMFlag_DigitallyProtected = 2,
    };
    enum class MFVideoDSPMode : int32_t
    {
        MFVideoDSPMode_Passthrough = 1,
        MFVideoDSPMode_Stabilization = 4,
    };
    enum class MFVideoFlags : int32_t
    {
        MFVideoFlag_PAD_TO_Mask = 3,
        MFVideoFlag_PAD_TO_None = 0,
        MFVideoFlag_PAD_TO_4x3 = 1,
        MFVideoFlag_PAD_TO_16x9 = 2,
        MFVideoFlag_SrcContentHintMask = 28,
        MFVideoFlag_SrcContentHintNone = 0,
        MFVideoFlag_SrcContentHint16x9 = 4,
        MFVideoFlag_SrcContentHint235_1 = 8,
        MFVideoFlag_AnalogProtected = 32,
        MFVideoFlag_DigitallyProtected = 64,
        MFVideoFlag_ProgressiveContent = 128,
        MFVideoFlag_FieldRepeatCountMask = 1792,
        MFVideoFlag_FieldRepeatCountShift = 8,
        MFVideoFlag_ProgressiveSeqReset = 2048,
        MFVideoFlag_PanScanEnabled = 131072,
        MFVideoFlag_LowerFieldFirst = 262144,
        MFVideoFlag_BottomUpLinearRep = 524288,
        MFVideoFlags_DXVASurface = 1048576,
        MFVideoFlags_RenderTargetSurface = 4194304,
        MFVideoFlags_ForceQWORD = 2147483647,
    };
    enum class MFVideoInterlaceMode : int32_t
    {
        MFVideoInterlace_Unknown = 0,
        MFVideoInterlace_Progressive = 2,
        MFVideoInterlace_FieldInterleavedUpperFirst = 3,
        MFVideoInterlace_FieldInterleavedLowerFirst = 4,
        MFVideoInterlace_FieldSingleUpper = 5,
        MFVideoInterlace_FieldSingleLower = 6,
        MFVideoInterlace_MixedInterlaceOrProgressive = 7,
        MFVideoInterlace_Last = 8,
        MFVideoInterlace_ForceDWORD = 2147483647,
    };
    enum class MFVideoLighting : int32_t
    {
        MFVideoLighting_Unknown = 0,
        MFVideoLighting_bright = 1,
        MFVideoLighting_office = 2,
        MFVideoLighting_dim = 3,
        MFVideoLighting_dark = 4,
        MFVideoLighting_Last = 5,
        MFVideoLighting_ForceDWORD = 2147483647,
    };
    enum class MFVideoMixPrefs : int32_t
    {
        MFVideoMixPrefs_ForceHalfInterlace = 1,
        MFVideoMixPrefs_AllowDropToHalfInterlace = 2,
        MFVideoMixPrefs_AllowDropToBob = 4,
        MFVideoMixPrefs_ForceBob = 8,
        MFVideoMixPrefs_EnableRotation = 16,
        MFVideoMixPrefs_Mask = 31,
    };
    enum class MFVideoPadFlags : int32_t
    {
        MFVideoPadFlag_PAD_TO_None = 0,
        MFVideoPadFlag_PAD_TO_4x3 = 1,
        MFVideoPadFlag_PAD_TO_16x9 = 2,
    };
    enum class MFVideoPrimaries : int32_t
    {
        MFVideoPrimaries_Unknown = 0,
        MFVideoPrimaries_reserved = 1,
        MFVideoPrimaries_BT709 = 2,
        MFVideoPrimaries_BT470_2_SysM = 3,
        MFVideoPrimaries_BT470_2_SysBG = 4,
        MFVideoPrimaries_SMPTE170M = 5,
        MFVideoPrimaries_SMPTE240M = 6,
        MFVideoPrimaries_EBU3213 = 7,
        MFVideoPrimaries_SMPTE_C = 8,
        MFVideoPrimaries_BT2020 = 9,
        MFVideoPrimaries_XYZ = 10,
        MFVideoPrimaries_DCI_P3 = 11,
        MFVideoPrimaries_ACES = 12,
        MFVideoPrimaries_Last = 13,
        MFVideoPrimaries_ForceDWORD = 2147483647,
    };
    enum class MFVideoRenderPrefs : int32_t
    {
        MFVideoRenderPrefs_DoNotRenderBorder = 1,
        MFVideoRenderPrefs_DoNotClipToDevice = 2,
        MFVideoRenderPrefs_AllowOutputThrottling = 4,
        MFVideoRenderPrefs_ForceOutputThrottling = 8,
        MFVideoRenderPrefs_ForceBatching = 16,
        MFVideoRenderPrefs_AllowBatching = 32,
        MFVideoRenderPrefs_ForceScaling = 64,
        MFVideoRenderPrefs_AllowScaling = 128,
        MFVideoRenderPrefs_DoNotRepaintOnStop = 256,
        MFVideoRenderPrefs_Mask = 511,
    };
    enum class MFVideoRotationFormat : int32_t
    {
        MFVideoRotationFormat_0 = 0,
        MFVideoRotationFormat_90 = 90,
        MFVideoRotationFormat_180 = 180,
        MFVideoRotationFormat_270 = 270,
    };
    enum class MFVideoSphericalFormat : int32_t
    {
        MFVideoSphericalFormat_Unsupported = 0,
        MFVideoSphericalFormat_Equirectangular = 1,
        MFVideoSphericalFormat_CubeMap = 2,
        MFVideoSphericalFormat_3DMesh = 3,
    };
    enum class MFVideoSphericalProjectionMode : int32_t
    {
        MFVideoSphericalProjectionMode_Spherical = 0,
        MFVideoSphericalProjectionMode_Flat = 1,
    };
    enum class MFVideoSrcContentHintFlags : int32_t
    {
        MFVideoSrcContentHintFlag_None = 0,
        MFVideoSrcContentHintFlag_16x9 = 1,
        MFVideoSrcContentHintFlag_235_1 = 2,
    };
    enum class MFVideoTransferFunction : int32_t
    {
        MFVideoTransFunc_Unknown = 0,
        MFVideoTransFunc_10 = 1,
        MFVideoTransFunc_18 = 2,
        MFVideoTransFunc_20 = 3,
        MFVideoTransFunc_22 = 4,
        MFVideoTransFunc_709 = 5,
        MFVideoTransFunc_240M = 6,
        MFVideoTransFunc_sRGB = 7,
        MFVideoTransFunc_28 = 8,
        MFVideoTransFunc_Log_100 = 9,
        MFVideoTransFunc_Log_316 = 10,
        MFVideoTransFunc_709_sym = 11,
        MFVideoTransFunc_2020_const = 12,
        MFVideoTransFunc_2020 = 13,
        MFVideoTransFunc_26 = 14,
        MFVideoTransFunc_2084 = 15,
        MFVideoTransFunc_HLG = 16,
        MFVideoTransFunc_10_rel = 17,
        MFVideoTransFunc_Last = 18,
        MFVideoTransFunc_ForceDWORD = 2147483647,
    };
    enum class MFVideoTransferMatrix : int32_t
    {
        MFVideoTransferMatrix_Unknown = 0,
        MFVideoTransferMatrix_BT709 = 1,
        MFVideoTransferMatrix_BT601 = 2,
        MFVideoTransferMatrix_SMPTE240M = 3,
        MFVideoTransferMatrix_BT2020_10 = 4,
        MFVideoTransferMatrix_BT2020_12 = 5,
        MFVideoTransferMatrix_Last = 6,
        MFVideoTransferMatrix_ForceDWORD = 2147483647,
    };
    enum class MFWaveFormatExConvertFlags : int32_t
    {
        MFWaveFormatExConvertFlag_Normal = 0,
        MFWaveFormatExConvertFlag_ForceExtensible = 1,
    };
    enum class MF_ACTIVATE_CUSTOM_MIXER : int32_t
    {
        MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = 1,
    };
    enum class MF_ACTIVATE_CUSTOM_PRESENTER : int32_t
    {
        MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = 1,
    };
    enum class MF_ATTRIBUTES_MATCH_TYPE : int32_t
    {
        MF_ATTRIBUTES_MATCH_OUR_ITEMS = 0,
        MF_ATTRIBUTES_MATCH_THEIR_ITEMS = 1,
        MF_ATTRIBUTES_MATCH_ALL_ITEMS = 2,
        MF_ATTRIBUTES_MATCH_INTERSECTION = 3,
        MF_ATTRIBUTES_MATCH_SMALLER = 4,
    };
    enum class MF_ATTRIBUTE_SERIALIZE_OPTIONS : int32_t
    {
        MF_ATTRIBUTE_SERIALIZE_UNKNOWN_BYREF = 1,
    };
    enum class MF_ATTRIBUTE_TYPE : int32_t
    {
        MF_ATTRIBUTE_UINT32 = 19,
        MF_ATTRIBUTE_UINT64 = 21,
        MF_ATTRIBUTE_DOUBLE = 5,
        MF_ATTRIBUTE_GUID = 72,
        MF_ATTRIBUTE_STRING = 31,
        MF_ATTRIBUTE_BLOB = 4113,
        MF_ATTRIBUTE_IUNKNOWN = 13,
    };
    enum class MF_AUVRHP_ROOMMODEL : int32_t
    {
        VRHP_SMALLROOM = 0,
        VRHP_MEDIUMROOM = 1,
        VRHP_BIGROOM = 2,
        VRHP_CUSTUMIZEDROOM = 3,
    };
    enum class MF_CAPTURE_ENGINE_AUDIO_PROCESSING_MODE : int32_t
    {
        MF_CAPTURE_ENGINE_AUDIO_PROCESSING_DEFAULT = 0,
        MF_CAPTURE_ENGINE_AUDIO_PROCESSING_RAW = 1,
    };
    enum class MF_CAPTURE_ENGINE_DEVICE_TYPE : int32_t
    {
        MF_CAPTURE_ENGINE_DEVICE_TYPE_AUDIO = 0,
        MF_CAPTURE_ENGINE_DEVICE_TYPE_VIDEO = 1,
    };
    enum class MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE : int32_t
    {
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_OTHER = 0,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_COMMUNICATIONS = 1,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_MEDIA = 2,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_GAMECHAT = 3,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_SPEECH = 4,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_FARFIELDSPEECH = 5,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_UNIFORMSPEECH = 6,
        MF_CAPTURE_ENGINE_MEDIA_CATEGORY_TYPE_VOICETYPING = 7,
    };
    enum class MF_CAPTURE_ENGINE_SINK_TYPE : int32_t
    {
        MF_CAPTURE_ENGINE_SINK_TYPE_RECORD = 0,
        MF_CAPTURE_ENGINE_SINK_TYPE_PREVIEW = 1,
        MF_CAPTURE_ENGINE_SINK_TYPE_PHOTO = 2,
    };
    enum class MF_CAPTURE_ENGINE_SOURCE : uint32_t
    {
        MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_PREVIEW = 0xfffffffa,
        MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_VIDEO_RECORD = 0xfffffff9,
        MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_PHOTO = 0xfffffff8,
        MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_AUDIO = 0xfffffff7,
        MF_CAPTURE_ENGINE_PREFERRED_SOURCE_STREAM_FOR_METADATA = 0xfffffff6,
        MF_CAPTURE_ENGINE_MEDIASOURCE = 0xffffffff,
    };
    enum class MF_CAPTURE_ENGINE_STREAM_CATEGORY : int32_t
    {
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_PREVIEW = 0,
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_VIDEO_CAPTURE = 1,
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_INDEPENDENT = 2,
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_PHOTO_DEPENDENT = 3,
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_AUDIO = 4,
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_UNSUPPORTED = 5,
        MF_CAPTURE_ENGINE_STREAM_CATEGORY_METADATA = 6,
    };
    enum class MF_CONNECT_METHOD : int32_t
    {
        MF_CONNECT_DIRECT = 0,
        MF_CONNECT_ALLOW_CONVERTER = 1,
        MF_CONNECT_ALLOW_DECODER = 3,
        MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = 4,
        MF_CONNECT_AS_OPTIONAL = 65536,
        MF_CONNECT_AS_OPTIONAL_BRANCH = 131072,
    };
    enum class MF_CROSS_ORIGIN_POLICY : int32_t
    {
        MF_CROSS_ORIGIN_POLICY_NONE = 0,
        MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1,
        MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2,
    };
    enum class MF_CUSTOM_DECODE_UNIT_TYPE : int32_t
    {
        MF_DECODE_UNIT_NAL = 0,
        MF_DECODE_UNIT_SEI = 1,
    };
    enum class MF_EVENT_TYPE : int32_t
    {
        MEUnknown = 0,
        MEError = 1,
        MEExtendedType = 2,
        MENonFatalError = 3,
        MEGenericV1Anchor = 3,
        MESessionUnknown = 100,
        MESessionTopologySet = 101,
        MESessionTopologiesCleared = 102,
        MESessionStarted = 103,
        MESessionPaused = 104,
        MESessionStopped = 105,
        MESessionClosed = 106,
        MESessionEnded = 107,
        MESessionRateChanged = 108,
        MESessionScrubSampleComplete = 109,
        MESessionCapabilitiesChanged = 110,
        MESessionTopologyStatus = 111,
        MESessionNotifyPresentationTime = 112,
        MENewPresentation = 113,
        MELicenseAcquisitionStart = 114,
        MELicenseAcquisitionCompleted = 115,
        MEIndividualizationStart = 116,
        MEIndividualizationCompleted = 117,
        MEEnablerProgress = 118,
        MEEnablerCompleted = 119,
        MEPolicyError = 120,
        MEPolicyReport = 121,
        MEBufferingStarted = 122,
        MEBufferingStopped = 123,
        MEConnectStart = 124,
        MEConnectEnd = 125,
        MEReconnectStart = 126,
        MEReconnectEnd = 127,
        MERendererEvent = 128,
        MESessionStreamSinkFormatChanged = 129,
        MESessionV1Anchor = 129,
        MESourceUnknown = 200,
        MESourceStarted = 201,
        MEStreamStarted = 202,
        MESourceSeeked = 203,
        MEStreamSeeked = 204,
        MENewStream = 205,
        MEUpdatedStream = 206,
        MESourceStopped = 207,
        MEStreamStopped = 208,
        MESourcePaused = 209,
        MEStreamPaused = 210,
        MEEndOfPresentation = 211,
        MEEndOfStream = 212,
        MEMediaSample = 213,
        MEStreamTick = 214,
        MEStreamThinMode = 215,
        MEStreamFormatChanged = 216,
        MESourceRateChanged = 217,
        MEEndOfPresentationSegment = 218,
        MESourceCharacteristicsChanged = 219,
        MESourceRateChangeRequested = 220,
        MESourceMetadataChanged = 221,
        MESequencerSourceTopologyUpdated = 222,
        MESourceV1Anchor = 222,
        MESinkUnknown = 300,
        MEStreamSinkStarted = 301,
        MEStreamSinkStopped = 302,
        MEStreamSinkPaused = 303,
        MEStreamSinkRateChanged = 304,
        MEStreamSinkRequestSample = 305,
        MEStreamSinkMarker = 306,
        MEStreamSinkPrerolled = 307,
        MEStreamSinkScrubSampleComplete = 308,
        MEStreamSinkFormatChanged = 309,
        MEStreamSinkDeviceChanged = 310,
        MEQualityNotify = 311,
        MESinkInvalidated = 312,
        MEAudioSessionNameChanged = 313,
        MEAudioSessionVolumeChanged = 314,
        MEAudioSessionDeviceRemoved = 315,
        MEAudioSessionServerShutdown = 316,
        MEAudioSessionGroupingParamChanged = 317,
        MEAudioSessionIconChanged = 318,
        MEAudioSessionFormatChanged = 319,
        MEAudioSessionDisconnected = 320,
        MEAudioSessionExclusiveModeOverride = 321,
        MESinkV1Anchor = 321,
        MECaptureAudioSessionVolumeChanged = 322,
        MECaptureAudioSessionDeviceRemoved = 323,
        MECaptureAudioSessionFormatChanged = 324,
        MECaptureAudioSessionDisconnected = 325,
        MECaptureAudioSessionExclusiveModeOverride = 326,
        MECaptureAudioSessionServerShutdown = 327,
        MESinkV2Anchor = 327,
        METrustUnknown = 400,
        MEPolicyChanged = 401,
        MEContentProtectionMessage = 402,
        MEPolicySet = 403,
        METrustV1Anchor = 403,
        MEWMDRMLicenseBackupCompleted = 500,
        MEWMDRMLicenseBackupProgress = 501,
        MEWMDRMLicenseRestoreCompleted = 502,
        MEWMDRMLicenseRestoreProgress = 503,
        MEWMDRMLicenseAcquisitionCompleted = 506,
        MEWMDRMIndividualizationCompleted = 508,
        MEWMDRMIndividualizationProgress = 513,
        MEWMDRMProximityCompleted = 514,
        MEWMDRMLicenseStoreCleaned = 515,
        MEWMDRMRevocationDownloadCompleted = 516,
        MEWMDRMV1Anchor = 516,
        METransformUnknown = 600,
        METransformNeedInput = 601,
        METransformHaveOutput = 602,
        METransformDrainComplete = 603,
        METransformMarker = 604,
        METransformInputStreamStateChanged = 605,
        MEByteStreamCharacteristicsChanged = 700,
        MEVideoCaptureDeviceRemoved = 800,
        MEVideoCaptureDevicePreempted = 801,
        MEStreamSinkFormatInvalidated = 802,
        MEEncodingParameters = 803,
        MEContentProtectionMetadata = 900,
        MEDeviceThermalStateChanged = 950,
        MEReservedMax = 10000,
    };
    enum class MF_FILE_ACCESSMODE : int32_t
    {
        MF_ACCESSMODE_READ = 1,
        MF_ACCESSMODE_WRITE = 2,
        MF_ACCESSMODE_READWRITE = 3,
    };
    enum class MF_FILE_FLAGS : int32_t
    {
        MF_FILEFLAGS_NONE = 0,
        MF_FILEFLAGS_NOBUFFERING = 1,
        MF_FILEFLAGS_ALLOW_WRITE_SHARING = 2,
    };
    enum class MF_FILE_OPENMODE : int32_t
    {
        MF_OPENMODE_FAIL_IF_NOT_EXIST = 0,
        MF_OPENMODE_FAIL_IF_EXIST = 1,
        MF_OPENMODE_RESET_IF_EXIST = 2,
        MF_OPENMODE_APPEND_IF_EXIST = 3,
        MF_OPENMODE_DELETE_IF_EXIST = 4,
    };
    enum class MF_HDCP_STATUS : int32_t
    {
        MF_HDCP_STATUS_ON = 0,
        MF_HDCP_STATUS_OFF = 1,
        MF_HDCP_STATUS_ON_WITH_TYPE_ENFORCEMENT = 2,
    };
    enum class MF_MEDIAKEYSESSION_MESSAGETYPE : int32_t
    {
        MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0,
        MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1,
        MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2,
        MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3,
    };
    enum class MF_MEDIAKEYSESSION_TYPE : int32_t
    {
        MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0,
        MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = 1,
        MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = 2,
        MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = 3,
    };
    enum class MF_MEDIAKEYS_REQUIREMENT : int32_t
    {
        MF_MEDIAKEYS_REQUIREMENT_REQUIRED = 1,
        MF_MEDIAKEYS_REQUIREMENT_OPTIONAL = 2,
        MF_MEDIAKEYS_REQUIREMENT_NOT_ALLOWED = 3,
    };
    enum class MF_MEDIAKEY_STATUS : int32_t
    {
        MF_MEDIAKEY_STATUS_USABLE = 0,
        MF_MEDIAKEY_STATUS_EXPIRED = 1,
        MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = 2,
        MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = 3,
        MF_MEDIAKEY_STATUS_STATUS_PENDING = 4,
        MF_MEDIAKEY_STATUS_INTERNAL_ERROR = 5,
        MF_MEDIAKEY_STATUS_RELEASED = 6,
        MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = 7,
    };
    enum class MF_MEDIA_ENGINE_CANPLAY : int32_t
    {
        MF_MEDIA_ENGINE_CANPLAY_NOT_SUPPORTED = 0,
        MF_MEDIA_ENGINE_CANPLAY_MAYBE = 1,
        MF_MEDIA_ENGINE_CANPLAY_PROBABLY = 2,
    };
    enum class MF_MEDIA_ENGINE_CREATEFLAGS : int32_t
    {
        MF_MEDIA_ENGINE_AUDIOONLY = 1,
        MF_MEDIA_ENGINE_WAITFORSTABLE_STATE = 2,
        MF_MEDIA_ENGINE_FORCEMUTE = 4,
        MF_MEDIA_ENGINE_REAL_TIME_MODE = 8,
        MF_MEDIA_ENGINE_DISABLE_LOCAL_PLUGINS = 16,
        MF_MEDIA_ENGINE_CREATEFLAGS_MASK = 31,
    };
    enum class MF_MEDIA_ENGINE_ERR : int32_t
    {
        MF_MEDIA_ENGINE_ERR_NOERROR = 0,
        MF_MEDIA_ENGINE_ERR_ABORTED = 1,
        MF_MEDIA_ENGINE_ERR_NETWORK = 2,
        MF_MEDIA_ENGINE_ERR_DECODE = 3,
        MF_MEDIA_ENGINE_ERR_SRC_NOT_SUPPORTED = 4,
        MF_MEDIA_ENGINE_ERR_ENCRYPTED = 5,
    };
    enum class MF_MEDIA_ENGINE_EVENT : int32_t
    {
        MF_MEDIA_ENGINE_EVENT_LOADSTART = 1,
        MF_MEDIA_ENGINE_EVENT_PROGRESS = 2,
        MF_MEDIA_ENGINE_EVENT_SUSPEND = 3,
        MF_MEDIA_ENGINE_EVENT_ABORT = 4,
        MF_MEDIA_ENGINE_EVENT_ERROR = 5,
        MF_MEDIA_ENGINE_EVENT_EMPTIED = 6,
        MF_MEDIA_ENGINE_EVENT_STALLED = 7,
        MF_MEDIA_ENGINE_EVENT_PLAY = 8,
        MF_MEDIA_ENGINE_EVENT_PAUSE = 9,
        MF_MEDIA_ENGINE_EVENT_LOADEDMETADATA = 10,
        MF_MEDIA_ENGINE_EVENT_LOADEDDATA = 11,
        MF_MEDIA_ENGINE_EVENT_WAITING = 12,
        MF_MEDIA_ENGINE_EVENT_PLAYING = 13,
        MF_MEDIA_ENGINE_EVENT_CANPLAY = 14,
        MF_MEDIA_ENGINE_EVENT_CANPLAYTHROUGH = 15,
        MF_MEDIA_ENGINE_EVENT_SEEKING = 16,
        MF_MEDIA_ENGINE_EVENT_SEEKED = 17,
        MF_MEDIA_ENGINE_EVENT_TIMEUPDATE = 18,
        MF_MEDIA_ENGINE_EVENT_ENDED = 19,
        MF_MEDIA_ENGINE_EVENT_RATECHANGE = 20,
        MF_MEDIA_ENGINE_EVENT_DURATIONCHANGE = 21,
        MF_MEDIA_ENGINE_EVENT_VOLUMECHANGE = 22,
        MF_MEDIA_ENGINE_EVENT_FORMATCHANGE = 1000,
        MF_MEDIA_ENGINE_EVENT_PURGEQUEUEDEVENTS = 1001,
        MF_MEDIA_ENGINE_EVENT_TIMELINE_MARKER = 1002,
        MF_MEDIA_ENGINE_EVENT_BALANCECHANGE = 1003,
        MF_MEDIA_ENGINE_EVENT_DOWNLOADCOMPLETE = 1004,
        MF_MEDIA_ENGINE_EVENT_BUFFERINGSTARTED = 1005,
        MF_MEDIA_ENGINE_EVENT_BUFFERINGENDED = 1006,
        MF_MEDIA_ENGINE_EVENT_FRAMESTEPCOMPLETED = 1007,
        MF_MEDIA_ENGINE_EVENT_NOTIFYSTABLESTATE = 1008,
        MF_MEDIA_ENGINE_EVENT_FIRSTFRAMEREADY = 1009,
        MF_MEDIA_ENGINE_EVENT_TRACKSCHANGE = 1010,
        MF_MEDIA_ENGINE_EVENT_OPMINFO = 1011,
        MF_MEDIA_ENGINE_EVENT_RESOURCELOST = 1012,
        MF_MEDIA_ENGINE_EVENT_DELAYLOADEVENT_CHANGED = 1013,
        MF_MEDIA_ENGINE_EVENT_STREAMRENDERINGERROR = 1014,
        MF_MEDIA_ENGINE_EVENT_SUPPORTEDRATES_CHANGED = 1015,
        MF_MEDIA_ENGINE_EVENT_AUDIOENDPOINTCHANGE = 1016,
    };
    enum class MF_MEDIA_ENGINE_EXTENSION_TYPE : int32_t
    {
        MF_MEDIA_ENGINE_EXTENSION_TYPE_MEDIASOURCE = 0,
        MF_MEDIA_ENGINE_EXTENSION_TYPE_BYTESTREAM = 1,
    };
    enum class MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAGS : int32_t
    {
        MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_PROTECTED = 1,
        MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_SURFACE_PROTECTION = 2,
        MF_MEDIA_ENGINE_FRAME_PROTECTION_FLAG_REQUIRES_ANTI_SCREEN_SCRAPE_PROTECTION = 4,
    };
    enum class MF_MEDIA_ENGINE_KEYERR : int32_t
    {
        MF_MEDIAENGINE_KEYERR_UNKNOWN = 1,
        MF_MEDIAENGINE_KEYERR_CLIENT = 2,
        MF_MEDIAENGINE_KEYERR_SERVICE = 3,
        MF_MEDIAENGINE_KEYERR_OUTPUT = 4,
        MF_MEDIAENGINE_KEYERR_HARDWARECHANGE = 5,
        MF_MEDIAENGINE_KEYERR_DOMAIN = 6,
    };
    enum class MF_MEDIA_ENGINE_NETWORK : int32_t
    {
        MF_MEDIA_ENGINE_NETWORK_EMPTY = 0,
        MF_MEDIA_ENGINE_NETWORK_IDLE = 1,
        MF_MEDIA_ENGINE_NETWORK_LOADING = 2,
        MF_MEDIA_ENGINE_NETWORK_NO_SOURCE = 3,
    };
    enum class MF_MEDIA_ENGINE_OPM_STATUS : int32_t
    {
        MF_MEDIA_ENGINE_OPM_NOT_REQUESTED = 0,
        MF_MEDIA_ENGINE_OPM_ESTABLISHED = 1,
        MF_MEDIA_ENGINE_OPM_FAILED_VM = 2,
        MF_MEDIA_ENGINE_OPM_FAILED_BDA = 3,
        MF_MEDIA_ENGINE_OPM_FAILED_UNSIGNED_DRIVER = 4,
        MF_MEDIA_ENGINE_OPM_FAILED = 5,
    };
    enum class MF_MEDIA_ENGINE_PRELOAD : int32_t
    {
        MF_MEDIA_ENGINE_PRELOAD_MISSING = 0,
        MF_MEDIA_ENGINE_PRELOAD_EMPTY = 1,
        MF_MEDIA_ENGINE_PRELOAD_NONE = 2,
        MF_MEDIA_ENGINE_PRELOAD_METADATA = 3,
        MF_MEDIA_ENGINE_PRELOAD_AUTOMATIC = 4,
    };
    enum class MF_MEDIA_ENGINE_PROTECTION_FLAGS : int32_t
    {
        MF_MEDIA_ENGINE_ENABLE_PROTECTED_CONTENT = 1,
        MF_MEDIA_ENGINE_USE_PMP_FOR_ALL_CONTENT = 2,
        MF_MEDIA_ENGINE_USE_UNPROTECTED_PMP = 4,
    };
    enum class MF_MEDIA_ENGINE_READY : int32_t
    {
        MF_MEDIA_ENGINE_READY_HAVE_NOTHING = 0,
        MF_MEDIA_ENGINE_READY_HAVE_METADATA = 1,
        MF_MEDIA_ENGINE_READY_HAVE_CURRENT_DATA = 2,
        MF_MEDIA_ENGINE_READY_HAVE_FUTURE_DATA = 3,
        MF_MEDIA_ENGINE_READY_HAVE_ENOUGH_DATA = 4,
    };
    enum class MF_MEDIA_ENGINE_S3D_PACKING_MODE : int32_t
    {
        MF_MEDIA_ENGINE_S3D_PACKING_MODE_NONE = 0,
        MF_MEDIA_ENGINE_S3D_PACKING_MODE_SIDE_BY_SIDE = 1,
        MF_MEDIA_ENGINE_S3D_PACKING_MODE_TOP_BOTTOM = 2,
    };
    enum class MF_MEDIA_ENGINE_SEEK_MODE : int32_t
    {
        MF_MEDIA_ENGINE_SEEK_MODE_NORMAL = 0,
        MF_MEDIA_ENGINE_SEEK_MODE_APPROXIMATE = 1,
    };
    enum class MF_MEDIA_ENGINE_STATISTIC : int32_t
    {
        MF_MEDIA_ENGINE_STATISTIC_FRAMES_RENDERED = 0,
        MF_MEDIA_ENGINE_STATISTIC_FRAMES_DROPPED = 1,
        MF_MEDIA_ENGINE_STATISTIC_BYTES_DOWNLOADED = 2,
        MF_MEDIA_ENGINE_STATISTIC_BUFFER_PROGRESS = 3,
        MF_MEDIA_ENGINE_STATISTIC_FRAMES_PER_SECOND = 4,
        MF_MEDIA_ENGINE_STATISTIC_PLAYBACK_JITTER = 5,
        MF_MEDIA_ENGINE_STATISTIC_FRAMES_CORRUPTED = 6,
        MF_MEDIA_ENGINE_STATISTIC_TOTAL_FRAME_DELAY = 7,
    };
    enum class MF_MEDIA_ENGINE_STREAMTYPE_FAILED : int32_t
    {
        MF_MEDIA_ENGINE_STREAMTYPE_FAILED_UNKNOWN = 0,
        MF_MEDIA_ENGINE_STREAMTYPE_FAILED_AUDIO = 1,
        MF_MEDIA_ENGINE_STREAMTYPE_FAILED_VIDEO = 2,
    };
    enum class MF_MEDIA_SHARING_ENGINE_EVENT : int32_t
    {
        MF_MEDIA_SHARING_ENGINE_EVENT_DISCONNECT = 2000,
    };
    enum class MF_MSE_APPEND_MODE : int32_t
    {
        MF_MSE_APPEND_MODE_SEGMENTS = 0,
        MF_MSE_APPEND_MODE_SEQUENCE = 1,
    };
    enum class MF_MSE_ERROR : int32_t
    {
        MF_MSE_ERROR_NOERROR = 0,
        MF_MSE_ERROR_NETWORK = 1,
        MF_MSE_ERROR_DECODE = 2,
        MF_MSE_ERROR_UNKNOWN_ERROR = 3,
    };
    enum class MF_MSE_OPUS_SUPPORT_TYPE : int32_t
    {
        MF_MSE_OPUS_SUPPORT_ON = 0,
        MF_MSE_OPUS_SUPPORT_OFF = 1,
    };
    enum class MF_MSE_READY : int32_t
    {
        MF_MSE_READY_CLOSED = 1,
        MF_MSE_READY_OPEN = 2,
        MF_MSE_READY_ENDED = 3,
    };
    enum class MF_MSE_VP9_SUPPORT_TYPE : int32_t
    {
        MF_MSE_VP9_SUPPORT_DEFAULT = 0,
        MF_MSE_VP9_SUPPORT_ON = 1,
        MF_MSE_VP9_SUPPORT_OFF = 2,
    };
    enum class MF_OBJECT_TYPE : int32_t
    {
        MF_OBJECT_MEDIASOURCE = 0,
        MF_OBJECT_BYTESTREAM = 1,
        MF_OBJECT_INVALID = 2,
    };
    enum class MF_OPM_ACP_PROTECTION_LEVEL : int32_t
    {
        MF_OPM_ACP_OFF = 0,
        MF_OPM_ACP_LEVEL_ONE = 1,
        MF_OPM_ACP_LEVEL_TWO = 2,
        MF_OPM_ACP_LEVEL_THREE = 3,
        MF_OPM_ACP_FORCE_ULONG = 2147483647,
    };
    enum class MF_OPM_CGMSA_PROTECTION_LEVEL : int32_t
    {
        MF_OPM_CGMSA_OFF = 0,
        MF_OPM_CGMSA_COPY_FREELY = 1,
        MF_OPM_CGMSA_COPY_NO_MORE = 2,
        MF_OPM_CGMSA_COPY_ONE_GENERATION = 3,
        MF_OPM_CGMSA_COPY_NEVER = 4,
        MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8,
    };
    enum class MF_PLUGIN_CONTROL_POLICY : int32_t
    {
        MF_PLUGIN_CONTROL_POLICY_USE_ALL_PLUGINS = 0,
        MF_PLUGIN_CONTROL_POLICY_USE_APPROVED_PLUGINS = 1,
        MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS = 2,
        MF_PLUGIN_CONTROL_POLICY_USE_WEB_PLUGINS_EDGEMODE = 3,
    };
    enum class MF_Plugin_Type : int32_t
    {
        MF_Plugin_Type_MFT = 0,
        MF_Plugin_Type_MediaSource = 1,
        MF_Plugin_Type_MFT_MatchOutputType = 2,
        MF_Plugin_Type_Other = -1,
    };
    enum class MF_QUALITY_ADVISE_FLAGS : int32_t
    {
        MF_QUALITY_CANNOT_KEEP_UP = 1,
    };
    enum class MF_QUALITY_DROP_MODE : int32_t
    {
        MF_DROP_MODE_NONE = 0,
        MF_DROP_MODE_1 = 1,
        MF_DROP_MODE_2 = 2,
        MF_DROP_MODE_3 = 3,
        MF_DROP_MODE_4 = 4,
        MF_DROP_MODE_5 = 5,
        MF_NUM_DROP_MODES = 6,
    };
    enum class MF_QUALITY_LEVEL : int32_t
    {
        MF_QUALITY_NORMAL = 0,
        MF_QUALITY_NORMAL_MINUS_1 = 1,
        MF_QUALITY_NORMAL_MINUS_2 = 2,
        MF_QUALITY_NORMAL_MINUS_3 = 3,
        MF_QUALITY_NORMAL_MINUS_4 = 4,
        MF_QUALITY_NORMAL_MINUS_5 = 5,
        MF_NUM_QUALITY_LEVELS = 6,
    };
    enum class MF_RESOLUTION_FLAGS : uint32_t
    {
        MF_RESOLUTION_MEDIASOURCE = 0x1,
        MF_RESOLUTION_BYTESTREAM = 0x2,
        MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = 0x10,
        MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = 0x20,
        MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = 0x40,
        MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = 0x80,
        MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = 0x100,
        MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = 0x200,
        MF_RESOLUTION_ENABLE_STORE_PLUGINS = 0x400,
        MF_RESOLUTION_READ = 0x10000,
        MF_RESOLUTION_WRITE = 0x20000,
    };
    enum class MF_SERVICE_LOOKUP_TYPE : int32_t
    {
        MF_SERVICE_LOOKUP_UPSTREAM = 0,
        MF_SERVICE_LOOKUP_UPSTREAM_DIRECT = 1,
        MF_SERVICE_LOOKUP_DOWNSTREAM = 2,
        MF_SERVICE_LOOKUP_DOWNSTREAM_DIRECT = 3,
        MF_SERVICE_LOOKUP_ALL = 4,
        MF_SERVICE_LOOKUP_GLOBAL = 5,
    };
    enum class MF_SHARING_ENGINE_EVENT : int32_t
    {
        MF_SHARING_ENGINE_EVENT_DISCONNECT = 2000,
        MF_SHARING_ENGINE_EVENT_LOCALRENDERINGSTARTED = 2001,
        MF_SHARING_ENGINE_EVENT_LOCALRENDERINGENDED = 2002,
        MF_SHARING_ENGINE_EVENT_STOPPED = 2003,
        MF_SHARING_ENGINE_EVENT_ERROR = 2501,
    };
    enum class MF_SINK_WRITER_CONSTANTS : uint32_t
    {
        MF_SINK_WRITER_INVALID_STREAM_INDEX = 0xffffffff,
        MF_SINK_WRITER_ALL_STREAMS = 0xfffffffe,
        MF_SINK_WRITER_MEDIASINK = 0xffffffff,
    };
    enum class MF_SOURCE_READER_CONSTANTS : int32_t
    {
        MF_SOURCE_READER_INVALID_STREAM_INDEX = -1,
        MF_SOURCE_READER_ALL_STREAMS = -2,
        MF_SOURCE_READER_ANY_STREAM = -2,
        MF_SOURCE_READER_FIRST_AUDIO_STREAM = -3,
        MF_SOURCE_READER_FIRST_VIDEO_STREAM = -4,
        MF_SOURCE_READER_MEDIASOURCE = -1,
    };
    enum class MF_SOURCE_READER_CONTROL_FLAG : int32_t
    {
        MF_SOURCE_READER_CONTROLF_DRAIN = 1,
    };
    enum class MF_SOURCE_READER_CURRENT_TYPE_CONSTANTS : int32_t
    {
        MF_SOURCE_READER_CURRENT_TYPE_INDEX = -1,
    };
    enum class MF_SOURCE_READER_FLAG : int32_t
    {
        MF_SOURCE_READERF_ERROR = 1,
        MF_SOURCE_READERF_ENDOFSTREAM = 2,
        MF_SOURCE_READERF_NEWSTREAM = 4,
        MF_SOURCE_READERF_NATIVEMEDIATYPECHANGED = 16,
        MF_SOURCE_READERF_CURRENTMEDIATYPECHANGED = 32,
        MF_SOURCE_READERF_STREAMTICK = 256,
        MF_SOURCE_READERF_ALLEFFECTSREMOVED = 512,
    };
    enum class MF_STREAM_STATE : int32_t
    {
        MF_STREAM_STATE_STOPPED = 0,
        MF_STREAM_STATE_PAUSED = 1,
        MF_STREAM_STATE_RUNNING = 2,
    };
    enum class MF_TIMED_TEXT_ALIGNMENT : int32_t
    {
        MF_TIMED_TEXT_ALIGNMENT_START = 0,
        MF_TIMED_TEXT_ALIGNMENT_END = 1,
        MF_TIMED_TEXT_ALIGNMENT_CENTER = 2,
    };
    enum class MF_TIMED_TEXT_BOUTEN_POSITION : int32_t
    {
        MF_TIMED_TEXT_BOUTEN_POSITION_BEFORE = 0,
        MF_TIMED_TEXT_BOUTEN_POSITION_AFTER = 1,
        MF_TIMED_TEXT_BOUTEN_POSITION_OUTSIDE = 2,
    };
    enum class MF_TIMED_TEXT_BOUTEN_TYPE : int32_t
    {
        MF_TIMED_TEXT_BOUTEN_TYPE_NONE = 0,
        MF_TIMED_TEXT_BOUTEN_TYPE_AUTO = 1,
        MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDCIRCLE = 2,
        MF_TIMED_TEXT_BOUTEN_TYPE_OPENCIRCLE = 3,
        MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDDOT = 4,
        MF_TIMED_TEXT_BOUTEN_TYPE_OPENDOT = 5,
        MF_TIMED_TEXT_BOUTEN_TYPE_FILLEDSESAME = 6,
        MF_TIMED_TEXT_BOUTEN_TYPE_OPENSESAME = 7,
    };
    enum class MF_TIMED_TEXT_CUE_EVENT : int32_t
    {
        MF_TIMED_TEXT_CUE_EVENT_ACTIVE = 0,
        MF_TIMED_TEXT_CUE_EVENT_INACTIVE = 1,
        MF_TIMED_TEXT_CUE_EVENT_CLEAR = 2,
    };
    enum class MF_TIMED_TEXT_DECORATION : int32_t
    {
        MF_TIMED_TEXT_DECORATION_NONE = 0,
        MF_TIMED_TEXT_DECORATION_UNDERLINE = 1,
        MF_TIMED_TEXT_DECORATION_LINE_THROUGH = 2,
        MF_TIMED_TEXT_DECORATION_OVERLINE = 4,
    };
    enum class MF_TIMED_TEXT_DISPLAY_ALIGNMENT : int32_t
    {
        MF_TIMED_TEXT_DISPLAY_ALIGNMENT_BEFORE = 0,
        MF_TIMED_TEXT_DISPLAY_ALIGNMENT_AFTER = 1,
        MF_TIMED_TEXT_DISPLAY_ALIGNMENT_CENTER = 2,
    };
    enum class MF_TIMED_TEXT_ERROR_CODE : int32_t
    {
        MF_TIMED_TEXT_ERROR_CODE_NOERROR = 0,
        MF_TIMED_TEXT_ERROR_CODE_FATAL = 1,
        MF_TIMED_TEXT_ERROR_CODE_DATA_FORMAT = 2,
        MF_TIMED_TEXT_ERROR_CODE_NETWORK = 3,
        MF_TIMED_TEXT_ERROR_CODE_INTERNAL = 4,
    };
    enum class MF_TIMED_TEXT_FONT_STYLE : int32_t
    {
        MF_TIMED_TEXT_FONT_STYLE_NORMAL = 0,
        MF_TIMED_TEXT_FONT_STYLE_OBLIQUE = 1,
        MF_TIMED_TEXT_FONT_STYLE_ITALIC = 2,
    };
    enum class MF_TIMED_TEXT_RUBY_ALIGN : int32_t
    {
        MF_TIMED_TEXT_RUBY_ALIGN_CENTER = 0,
        MF_TIMED_TEXT_RUBY_ALIGN_START = 1,
        MF_TIMED_TEXT_RUBY_ALIGN_END = 2,
        MF_TIMED_TEXT_RUBY_ALIGN_SPACEAROUND = 3,
        MF_TIMED_TEXT_RUBY_ALIGN_SPACEBETWEEN = 4,
        MF_TIMED_TEXT_RUBY_ALIGN_WITHBASE = 5,
    };
    enum class MF_TIMED_TEXT_RUBY_POSITION : int32_t
    {
        MF_TIMED_TEXT_RUBY_POSITION_BEFORE = 0,
        MF_TIMED_TEXT_RUBY_POSITION_AFTER = 1,
        MF_TIMED_TEXT_RUBY_POSITION_OUTSIDE = 2,
    };
    enum class MF_TIMED_TEXT_RUBY_RESERVE : int32_t
    {
        MF_TIMED_TEXT_RUBY_RESERVE_NONE = 0,
        MF_TIMED_TEXT_RUBY_RESERVE_BEFORE = 1,
        MF_TIMED_TEXT_RUBY_RESERVE_AFTER = 2,
        MF_TIMED_TEXT_RUBY_RESERVE_BOTH = 3,
        MF_TIMED_TEXT_RUBY_RESERVE_OUTSIDE = 4,
    };
    enum class MF_TIMED_TEXT_SCROLL_MODE : int32_t
    {
        MF_TIMED_TEXT_SCROLL_MODE_POP_ON = 0,
        MF_TIMED_TEXT_SCROLL_MODE_ROLL_UP = 1,
    };
    enum class MF_TIMED_TEXT_TRACK_KIND : int32_t
    {
        MF_TIMED_TEXT_TRACK_KIND_UNKNOWN = 0,
        MF_TIMED_TEXT_TRACK_KIND_SUBTITLES = 1,
        MF_TIMED_TEXT_TRACK_KIND_CAPTIONS = 2,
        MF_TIMED_TEXT_TRACK_KIND_METADATA = 3,
    };
    enum class MF_TIMED_TEXT_TRACK_READY_STATE : int32_t
    {
        MF_TIMED_TEXT_TRACK_READY_STATE_NONE = 0,
        MF_TIMED_TEXT_TRACK_READY_STATE_LOADING = 1,
        MF_TIMED_TEXT_TRACK_READY_STATE_LOADED = 2,
        MF_TIMED_TEXT_TRACK_READY_STATE_ERROR = 3,
    };
    enum class MF_TIMED_TEXT_UNIT_TYPE : int32_t
    {
        MF_TIMED_TEXT_UNIT_TYPE_PIXELS = 0,
        MF_TIMED_TEXT_UNIT_TYPE_PERCENTAGE = 1,
    };
    enum class MF_TIMED_TEXT_WRITING_MODE : int32_t
    {
        MF_TIMED_TEXT_WRITING_MODE_LRTB = 0,
        MF_TIMED_TEXT_WRITING_MODE_RLTB = 1,
        MF_TIMED_TEXT_WRITING_MODE_TBRL = 2,
        MF_TIMED_TEXT_WRITING_MODE_TBLR = 3,
        MF_TIMED_TEXT_WRITING_MODE_LR = 4,
        MF_TIMED_TEXT_WRITING_MODE_RL = 5,
        MF_TIMED_TEXT_WRITING_MODE_TB = 6,
    };
    enum class MF_TOPOLOGY_RESOLUTION_STATUS_FLAGS : int32_t
    {
        MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0,
        MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = 1,
        MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = 2,
    };
    enum class MF_TOPOLOGY_TYPE : int32_t
    {
        MF_TOPOLOGY_OUTPUT_NODE = 0,
        MF_TOPOLOGY_SOURCESTREAM_NODE = 1,
        MF_TOPOLOGY_TRANSFORM_NODE = 2,
        MF_TOPOLOGY_TEE_NODE = 3,
        MF_TOPOLOGY_MAX = -1,
    };
    enum class MF_TOPONODE_DRAIN_MODE : int32_t
    {
        MF_TOPONODE_DRAIN_DEFAULT = 0,
        MF_TOPONODE_DRAIN_ALWAYS = 1,
        MF_TOPONODE_DRAIN_NEVER = 2,
    };
    enum class MF_TOPONODE_FLUSH_MODE : int32_t
    {
        MF_TOPONODE_FLUSH_ALWAYS = 0,
        MF_TOPONODE_FLUSH_SEEK = 1,
        MF_TOPONODE_FLUSH_NEVER = 2,
    };
    enum class MF_TOPOSTATUS : int32_t
    {
        MF_TOPOSTATUS_INVALID = 0,
        MF_TOPOSTATUS_READY = 100,
        MF_TOPOSTATUS_STARTED_SOURCE = 200,
        MF_TOPOSTATUS_DYNAMIC_CHANGED = 210,
        MF_TOPOSTATUS_SINK_SWITCHED = 300,
        MF_TOPOSTATUS_ENDED = 400,
    };
    enum class MF_TRANSCODE_ADJUST_PROFILE_FLAGS : int32_t
    {
        MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0,
        MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1,
    };
    enum class MF_TRANSCODE_TOPOLOGYMODE_FLAGS : int32_t
    {
        MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0,
        MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1,
    };
    enum class MF_URL_TRUST_STATUS : int32_t
    {
        MF_LICENSE_URL_UNTRUSTED = 0,
        MF_LICENSE_URL_TRUSTED = 1,
        MF_LICENSE_URL_TAMPERED = 2,
    };
    enum class MF_VIDEO_PROCESSOR_ALGORITHM_TYPE : int32_t
    {
        MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0,
        MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1,
    };
    enum class MF_VIDEO_PROCESSOR_MIRROR : int32_t
    {
        MIRROR_NONE = 0,
        MIRROR_HORIZONTAL = 1,
        MIRROR_VERTICAL = 2,
    };
    enum class MF_VIDEO_PROCESSOR_ROTATION : int32_t
    {
        ROTATION_NONE = 0,
        ROTATION_NORMAL = 1,
    };
    enum class MIC_ARRAY_MODE : int32_t
    {
        MICARRAY_SINGLE_CHAN = 0,
        MICARRAY_SIMPLE_SUM = 256,
        MICARRAY_SINGLE_BEAM = 512,
        MICARRAY_FIXED_BEAM = 1024,
        MICARRAY_EXTERN_BEAM = 2048,
    };
    enum class OPM_ACP_PROTECTION_LEVEL : int32_t
    {
        OPM_ACP_OFF = 0,
        OPM_ACP_LEVEL_ONE = 1,
        OPM_ACP_LEVEL_TWO = 2,
        OPM_ACP_LEVEL_THREE = 3,
        OPM_ACP_FORCE_ULONG = 2147483647,
    };
    enum class OPM_BUS_TYPE : int32_t
    {
        OPM_BUS_TYPE_OTHER = 0,
        OPM_BUS_TYPE_PCI = 1,
        OPM_BUS_TYPE_PCIX = 2,
        OPM_BUS_TYPE_PCIEXPRESS = 3,
        OPM_BUS_TYPE_AGP = 4,
        OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET = 65536,
        OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072,
        OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608,
        OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144,
        OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680,
        OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD = -2147483648,
        OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED = -2147483648,
    };
    enum class OPM_CGMSA : int32_t
    {
        OPM_CGMSA_OFF = 0,
        OPM_CGMSA_COPY_FREELY = 1,
        OPM_CGMSA_COPY_NO_MORE = 2,
        OPM_CGMSA_COPY_ONE_GENERATION = 3,
        OPM_CGMSA_COPY_NEVER = 4,
        OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = 8,
    };
    enum class OPM_DPCP_PROTECTION_LEVEL : int32_t
    {
        OPM_DPCP_OFF = 0,
        OPM_DPCP_ON = 1,
        OPM_DPCP_FORCE_ULONG = 2147483647,
    };
    enum class OPM_DVI_CHARACTERISTIC : int32_t
    {
        OPM_DVI_CHARACTERISTIC_1_0 = 1,
        OPM_DVI_CHARACTERISTIC_1_1_OR_ABOVE = 2,
    };
    enum class OPM_HDCP_FLAGS : uint32_t
    {
        OPM_HDCP_FLAG_NONE = 0x0,
        OPM_HDCP_FLAG_REPEATER = 0x1,
    };
    enum class OPM_HDCP_PROTECTION_LEVEL : int32_t
    {
        OPM_HDCP_OFF = 0,
        OPM_HDCP_ON = 1,
        OPM_HDCP_FORCE_ULONG = 2147483647,
    };
    enum class OPM_HDCP_STATUS : int32_t
    {
        OPM_HDCP_STATUS_ON = 0,
        OPM_HDCP_STATUS_OFF = 1,
    };
    enum class OPM_HDCP_TYPE : int32_t
    {
        OPM_HDCP_TYPE_0 = 0,
        OPM_HDCP_TYPE_1 = 1,
    };
    enum class OPM_IMAGE_ASPECT_RATIO_EN300294 : int32_t
    {
        OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3 = 0,
        OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_CENTER = 1,
        OPM_ASPECT_RATIO_EN300294_BOX_14_BY_9_TOP = 2,
        OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_CENTER = 3,
        OPM_ASPECT_RATIO_EN300294_BOX_16_BY_9_TOP = 4,
        OPM_ASPECT_RATIO_EN300294_BOX_GT_16_BY_9_CENTER = 5,
        OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_4_BY_3_PROTECTED_CENTER = 6,
        OPM_ASPECT_RATIO_EN300294_FULL_FORMAT_16_BY_9_ANAMORPHIC = 7,
        OPM_ASPECT_RATIO_FORCE_ULONG = 2147483647,
    };
    enum class OPM_OUTPUT_HARDWARE_PROTECTION : int32_t
    {
        OPM_OUTPUT_HARDWARE_PROTECTION_NOT_SUPPORTED = 0,
        OPM_OUTPUT_HARDWARE_PROTECTION_SUPPORTED = 1,
    };
    enum class OPM_PROTECTION_STANDARD_TYPE : uint32_t
    {
        OPM_PROTECTION_STANDARD_OTHER = 0x80000000,
        OPM_PROTECTION_STANDARD_NONE = 0x0,
        OPM_PROTECTION_STANDARD_IEC61880_525I = 0x1,
        OPM_PROTECTION_STANDARD_IEC61880_2_525I = 0x2,
        OPM_PROTECTION_STANDARD_IEC62375_625P = 0x4,
        OPM_PROTECTION_STANDARD_EIA608B_525 = 0x8,
        OPM_PROTECTION_STANDARD_EN300294_625I = 0x10,
        OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P = 0x20,
        OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P = 0x40,
        OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I = 0x80,
        OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P = 0x100,
        OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P = 0x200,
        OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I = 0x400,
        OPM_PROTECTION_STANDARD_ARIBTRB15_525I = 0x800,
        OPM_PROTECTION_STANDARD_ARIBTRB15_525P = 0x1000,
        OPM_PROTECTION_STANDARD_ARIBTRB15_750P = 0x2000,
        OPM_PROTECTION_STANDARD_ARIBTRB15_1125I = 0x4000,
    };
    enum class OPM_PROTECTION_TYPE : int32_t
    {
        OPM_PROTECTION_TYPE_OTHER = -2147483648,
        OPM_PROTECTION_TYPE_NONE = 0,
        OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP = 1,
        OPM_PROTECTION_TYPE_ACP = 2,
        OPM_PROTECTION_TYPE_CGMSA = 4,
        OPM_PROTECTION_TYPE_HDCP = 8,
        OPM_PROTECTION_TYPE_DPCP = 16,
        OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP = 32,
    };
    enum class OPM_STATUS : int32_t
    {
        OPM_STATUS_NORMAL = 0,
        OPM_STATUS_LINK_LOST = 1,
        OPM_STATUS_RENEGOTIATION_REQUIRED = 2,
        OPM_STATUS_TAMPERING_DETECTED = 4,
        OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED = 8,
    };
    enum class OPM_TYPE : int32_t
    {
        OPM_OMAC_SIZE = 16,
        OPM_128_BIT_RANDOM_NUMBER_SIZE = 16,
        OPM_ENCRYPTED_INITIALIZATION_PARAMETERS_SIZE = 256,
        OPM_CONFIGURE_SETTING_DATA_SIZE = 4056,
        OPM_GET_INFORMATION_PARAMETERS_SIZE = 4056,
        OPM_REQUESTED_INFORMATION_SIZE = 4076,
        OPM_HDCP_KEY_SELECTION_VECTOR_SIZE = 5,
        OPM_PROTECTION_TYPE_SIZE = 4,
        OPM_BUS_TYPE_MASK = 65535,
        OPM_BUS_IMPLEMENTATION_MODIFIER_MASK = 32767,
    };
    enum class OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL : int32_t
    {
        OPM_TYPE_ENFORCEMENT_HDCP_OFF = 0,
        OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION = 1,
        OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION = 2,
        OPM_TYPE_ENFORCEMENT_HDCP_FORCE_ULONG = 2147483647,
    };
    enum class OPM_VIDEO_OUTPUT_SEMANTICS : int32_t
    {
        OPM_VOS_COPP_SEMANTICS = 0,
        OPM_VOS_OPM_SEMANTICS = 1,
        OPM_VOS_OPM_INDIRECT_DISPLAY = 2,
    };
    enum class PLAYTO_SOURCE_CREATEFLAGS : int32_t
    {
        PLAYTO_SOURCE_NONE = 0,
        PLAYTO_SOURCE_IMAGE = 1,
        PLAYTO_SOURCE_AUDIO = 2,
        PLAYTO_SOURCE_VIDEO = 4,
        PLAYTO_SOURCE_PROTECTED = 8,
    };
    enum class PM_CONNECTOR_TYPE : int32_t
    {
        OPM_CONNECTOR_TYPE_OTHER = -1,
        OPM_CONNECTOR_TYPE_VGA = 0,
        OPM_CONNECTOR_TYPE_SVIDEO = 1,
        OPM_CONNECTOR_TYPE_COMPOSITE_VIDEO = 2,
        OPM_CONNECTOR_TYPE_COMPONENT_VIDEO = 3,
        OPM_CONNECTOR_TYPE_DVI = 4,
        OPM_CONNECTOR_TYPE_HDMI = 5,
        OPM_CONNECTOR_TYPE_LVDS = 6,
        OPM_CONNECTOR_TYPE_D_JPN = 8,
        OPM_CONNECTOR_TYPE_SDI = 9,
        OPM_CONNECTOR_TYPE_DISPLAYPORT_EXTERNAL = 10,
        OPM_CONNECTOR_TYPE_DISPLAYPORT_EMBEDDED = 11,
        OPM_CONNECTOR_TYPE_UDI_EXTERNAL = 12,
        OPM_CONNECTOR_TYPE_UDI_EMBEDDED = 13,
        OPM_CONNECTOR_TYPE_RESERVED = 14,
        OPM_CONNECTOR_TYPE_MIRACAST = 15,
        OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A = 16,
        OPM_CONNECTOR_TYPE_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B = 17,
        OPM_COPP_COMPATIBLE_CONNECTOR_TYPE_INTERNAL = -2147483648,
    };
    enum class SAMPLE_PROTECTION_VERSION : int32_t
    {
        SAMPLE_PROTECTION_VERSION_NO = 0,
        SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1,
        SAMPLE_PROTECTION_VERSION_SCATTER = 2,
        SAMPLE_PROTECTION_VERSION_RC4 = 3,
        SAMPLE_PROTECTION_VERSION_AES128CTR = 4,
    };
    enum class SEEK_ORIGIN : int32_t
    {
        _msoBegin = 0,
        _msoCurrent = 1,
    };
    enum class TOC_POS_TYPE : int32_t
    {
        TOC_POS_INHEADER = 0,
        TOC_POS_TOPLEVELOBJECT = 1,
    };
    enum class WMT_PROP_DATATYPE : int32_t
    {
        WMT_PROP_TYPE_DWORD = 0,
        WMT_PROP_TYPE_STRING = 1,
        WMT_PROP_TYPE_BINARY = 2,
        WMT_PROP_TYPE_BOOL = 3,
        WMT_PROP_TYPE_QWORD = 4,
        WMT_PROP_TYPE_WORD = 5,
        WMT_PROP_TYPE_GUID = 6,
    };
    enum class WMV_DYNAMIC_FLAGS : int32_t
    {
        WMV_DYNAMIC_BITRATE = 1,
        WMV_DYNAMIC_RESOLUTION = 2,
        WMV_DYNAMIC_COMPLEXITY = 4,
    };
    enum class _DMO_INPLACE_PROCESS_FLAGS : int32_t
    {
        DMO_INPLACE_NORMAL = 0,
        DMO_INPLACE_ZERO = 1,
    };
    enum class _DMO_INPUT_DATA_BUFFER_FLAGS : int32_t
    {
        DMO_INPUT_DATA_BUFFERF_SYNCPOINT = 1,
        DMO_INPUT_DATA_BUFFERF_TIME = 2,
        DMO_INPUT_DATA_BUFFERF_TIMELENGTH = 4,
        DMO_INPUT_DATA_BUFFERF_DISCONTINUITY = 8,
    };
    enum class _DMO_INPUT_STATUS_FLAGS : int32_t
    {
        DMO_INPUT_STATUSF_ACCEPT_DATA = 1,
    };
    enum class _DMO_INPUT_STREAM_INFO_FLAGS : int32_t
    {
        DMO_INPUT_STREAMF_WHOLE_SAMPLES = 1,
        DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2,
        DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE = 4,
        DMO_INPUT_STREAMF_HOLDS_BUFFERS = 8,
    };
    enum class _DMO_OUTPUT_DATA_BUFFER_FLAGS : int32_t
    {
        DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT = 1,
        DMO_OUTPUT_DATA_BUFFERF_TIME = 2,
        DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH = 4,
        DMO_OUTPUT_DATA_BUFFERF_DISCONTINUITY = 8,
        DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE = 16777216,
    };
    enum class _DMO_OUTPUT_STREAM_INFO_FLAGS : int32_t
    {
        DMO_OUTPUT_STREAMF_WHOLE_SAMPLES = 1,
        DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 2,
        DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE = 4,
        DMO_OUTPUT_STREAMF_DISCARDABLE = 8,
        DMO_OUTPUT_STREAMF_OPTIONAL = 16,
    };
    enum class _DMO_PROCESS_OUTPUT_FLAGS : int32_t
    {
        DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1,
    };
    enum class _DMO_QUALITY_STATUS_FLAGS : int32_t
    {
        DMO_QUALITY_STATUS_ENABLED = 1,
    };
    enum class _DMO_SET_TYPE_FLAGS : int32_t
    {
        DMO_SET_TYPEF_TEST_ONLY = 1,
        DMO_SET_TYPEF_CLEAR = 2,
    };
    enum class _DMO_VIDEO_OUTPUT_STREAM_FLAGS : int32_t
    {
        DMO_VOSF_NEEDS_PREVIOUS_SAMPLE = 1,
    };
    enum class _MFP_CREDENTIAL_FLAGS : int32_t
    {
        MFP_CREDENTIAL_PROMPT = 1,
        MFP_CREDENTIAL_SAVE = 2,
        MFP_CREDENTIAL_DO_NOT_CACHE = 4,
        MFP_CREDENTIAL_CLEAR_TEXT = 8,
        MFP_CREDENTIAL_PROXY = 16,
        MFP_CREDENTIAL_LOGGED_ON_USER = 32,
    };
    enum class _MFP_MEDIAITEM_CHARACTERISTICS : int32_t
    {
        MFP_MEDIAITEM_IS_LIVE = 1,
        MFP_MEDIAITEM_CAN_SEEK = 2,
        MFP_MEDIAITEM_CAN_PAUSE = 4,
        MFP_MEDIAITEM_HAS_SLOW_SEEK = 8,
    };
    enum class _MFT_ENUM_FLAG : int32_t
    {
        MFT_ENUM_FLAG_SYNCMFT = 1,
        MFT_ENUM_FLAG_ASYNCMFT = 2,
        MFT_ENUM_FLAG_HARDWARE = 4,
        MFT_ENUM_FLAG_FIELDOFUSE = 8,
        MFT_ENUM_FLAG_LOCALMFT = 16,
        MFT_ENUM_FLAG_TRANSCODE_ONLY = 32,
        MFT_ENUM_FLAG_SORTANDFILTER = 64,
        MFT_ENUM_FLAG_SORTANDFILTER_APPROVED_ONLY = 192,
        MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY = 320,
        MFT_ENUM_FLAG_SORTANDFILTER_WEB_ONLY_EDGEMODE = 576,
        MFT_ENUM_FLAG_UNTRUSTED_STOREMFT = 1024,
        MFT_ENUM_FLAG_ALL = 63,
    };
    enum class _MFT_INPUT_DATA_BUFFER_FLAGS : int32_t
    {
        MFT_INPUT_DATA_BUFFER_PLACEHOLDER = -1,
    };
    enum class _MFT_INPUT_STATUS_FLAGS : int32_t
    {
        MFT_INPUT_STATUS_ACCEPT_DATA = 1,
    };
    enum class _MFT_INPUT_STREAM_INFO_FLAGS : int32_t
    {
        MFT_INPUT_STREAM_WHOLE_SAMPLES = 1,
        MFT_INPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2,
        MFT_INPUT_STREAM_FIXED_SAMPLE_SIZE = 4,
        MFT_INPUT_STREAM_HOLDS_BUFFERS = 8,
        MFT_INPUT_STREAM_DOES_NOT_ADDREF = 256,
        MFT_INPUT_STREAM_REMOVABLE = 512,
        MFT_INPUT_STREAM_OPTIONAL = 1024,
        MFT_INPUT_STREAM_PROCESSES_IN_PLACE = 2048,
    };
    enum class _MFT_OUTPUT_DATA_BUFFER_FLAGS : int32_t
    {
        MFT_OUTPUT_DATA_BUFFER_INCOMPLETE = 16777216,
        MFT_OUTPUT_DATA_BUFFER_FORMAT_CHANGE = 256,
        MFT_OUTPUT_DATA_BUFFER_STREAM_END = 512,
        MFT_OUTPUT_DATA_BUFFER_NO_SAMPLE = 768,
    };
    enum class _MFT_OUTPUT_STATUS_FLAGS : int32_t
    {
        MFT_OUTPUT_STATUS_SAMPLE_READY = 1,
    };
    enum class _MFT_OUTPUT_STREAM_INFO_FLAGS : int32_t
    {
        MFT_OUTPUT_STREAM_WHOLE_SAMPLES = 1,
        MFT_OUTPUT_STREAM_SINGLE_SAMPLE_PER_BUFFER = 2,
        MFT_OUTPUT_STREAM_FIXED_SAMPLE_SIZE = 4,
        MFT_OUTPUT_STREAM_DISCARDABLE = 8,
        MFT_OUTPUT_STREAM_OPTIONAL = 16,
        MFT_OUTPUT_STREAM_PROVIDES_SAMPLES = 256,
        MFT_OUTPUT_STREAM_CAN_PROVIDE_SAMPLES = 512,
        MFT_OUTPUT_STREAM_LAZY_READ = 1024,
        MFT_OUTPUT_STREAM_REMOVABLE = 2048,
    };
    enum class _MFT_PROCESS_OUTPUT_FLAGS : int32_t
    {
        MFT_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 1,
        MFT_PROCESS_OUTPUT_REGENERATE_LAST_OUTPUT = 2,
    };
    enum class _MFT_PROCESS_OUTPUT_STATUS : int32_t
    {
        MFT_PROCESS_OUTPUT_STATUS_NEW_STREAMS = 256,
    };
    enum class _MFT_SET_TYPE_FLAGS : int32_t
    {
        MFT_SET_TYPE_TEST_ONLY = 1,
    };
    enum class __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 : int32_t
    {
        MFVirtualCameraType_SoftwareCameraSource = 0,
    };
    enum class __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 : int32_t
    {
        MFVirtualCameraLifetime_Session = 0,
        MFVirtualCameraLifetime_System = 1,
    };
    enum class __MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 : int32_t
    {
        MFVirtualCameraAccess_CurrentUser = 0,
        MFVirtualCameraAccess_AllUsers = 1,
    };
    enum class eAVAudioChannelConfig : int32_t
    {
        eAVAudioChannelConfig_FRONT_LEFT = 1,
        eAVAudioChannelConfig_FRONT_RIGHT = 2,
        eAVAudioChannelConfig_FRONT_CENTER = 4,
        eAVAudioChannelConfig_LOW_FREQUENCY = 8,
        eAVAudioChannelConfig_BACK_LEFT = 16,
        eAVAudioChannelConfig_BACK_RIGHT = 32,
        eAVAudioChannelConfig_FRONT_LEFT_OF_CENTER = 64,
        eAVAudioChannelConfig_FRONT_RIGHT_OF_CENTER = 128,
        eAVAudioChannelConfig_BACK_CENTER = 256,
        eAVAudioChannelConfig_SIDE_LEFT = 512,
        eAVAudioChannelConfig_SIDE_RIGHT = 1024,
        eAVAudioChannelConfig_TOP_CENTER = 2048,
        eAVAudioChannelConfig_TOP_FRONT_LEFT = 4096,
        eAVAudioChannelConfig_TOP_FRONT_CENTER = 8192,
        eAVAudioChannelConfig_TOP_FRONT_RIGHT = 16384,
        eAVAudioChannelConfig_TOP_BACK_LEFT = 32768,
        eAVAudioChannelConfig_TOP_BACK_CENTER = 65536,
        eAVAudioChannelConfig_TOP_BACK_RIGHT = 131072,
    };
    enum class eAVDDSurroundMode : int32_t
    {
        eAVDDSurroundMode_NotIndicated = 0,
        eAVDDSurroundMode_No = 1,
        eAVDDSurroundMode_Yes = 2,
    };
    enum class eAVDSPLoudnessEqualization : int32_t
    {
        eAVDSPLoudnessEqualization_OFF = 0,
        eAVDSPLoudnessEqualization_ON = 1,
        eAVDSPLoudnessEqualization_AUTO = 2,
    };
    enum class eAVDSPSpeakerFill : int32_t
    {
        eAVDSPSpeakerFill_OFF = 0,
        eAVDSPSpeakerFill_ON = 1,
        eAVDSPSpeakerFill_AUTO = 2,
    };
    enum class eAVDecAACDownmixMode : int32_t
    {
        eAVDecAACUseISODownmix = 0,
        eAVDecAACUseARIBDownmix = 1,
    };
    enum class eAVDecAudioDualMono : int32_t
    {
        eAVDecAudioDualMono_IsNotDualMono = 0,
        eAVDecAudioDualMono_IsDualMono = 1,
        eAVDecAudioDualMono_UnSpecified = 2,
    };
    enum class eAVDecAudioDualMonoReproMode : int32_t
    {
        eAVDecAudioDualMonoReproMode_STEREO = 0,
        eAVDecAudioDualMonoReproMode_LEFT_MONO = 1,
        eAVDecAudioDualMonoReproMode_RIGHT_MONO = 2,
        eAVDecAudioDualMonoReproMode_MIX_MONO = 3,
    };
    enum class eAVDecDDMatrixDecodingMode : int32_t
    {
        eAVDecDDMatrixDecodingMode_OFF = 0,
        eAVDecDDMatrixDecodingMode_ON = 1,
        eAVDecDDMatrixDecodingMode_AUTO = 2,
    };
    enum class eAVDecDDOperationalMode : int32_t
    {
        eAVDecDDOperationalMode_NONE = 0,
        eAVDecDDOperationalMode_LINE = 1,
        eAVDecDDOperationalMode_RF = 2,
        eAVDecDDOperationalMode_CUSTOM0 = 3,
        eAVDecDDOperationalMode_CUSTOM1 = 4,
        eAVDecDDOperationalMode_PORTABLE8 = 5,
        eAVDecDDOperationalMode_PORTABLE11 = 6,
        eAVDecDDOperationalMode_PORTABLE14 = 7,
    };
    enum class eAVDecDDStereoDownMixMode : int32_t
    {
        eAVDecDDStereoDownMixMode_Auto = 0,
        eAVDecDDStereoDownMixMode_LtRt = 1,
        eAVDecDDStereoDownMixMode_LoRo = 2,
    };
    enum class eAVDecHEAACDynamicRangeControl : int32_t
    {
        eAVDecHEAACDynamicRangeControl_OFF = 0,
        eAVDecHEAACDynamicRangeControl_ON = 1,
    };
    enum class eAVDecVideoCodecType : int32_t
    {
        eAVDecVideoCodecType_NOTPLAYING = 0,
        eAVDecVideoCodecType_MPEG2 = 1,
        eAVDecVideoCodecType_H264 = 2,
    };
    enum class eAVDecVideoDXVABusEncryption : int32_t
    {
        eAVDecVideoDXVABusEncryption_NONE = 0,
        eAVDecVideoDXVABusEncryption_PRIVATE = 1,
        eAVDecVideoDXVABusEncryption_AES = 2,
    };
    enum class eAVDecVideoDXVAMode : int32_t
    {
        eAVDecVideoDXVAMode_NOTPLAYING = 0,
        eAVDecVideoDXVAMode_SW = 1,
        eAVDecVideoDXVAMode_MC = 2,
        eAVDecVideoDXVAMode_IDCT = 3,
        eAVDecVideoDXVAMode_VLD = 4,
    };
    enum class eAVDecVideoH264ErrorConcealment : int32_t
    {
        eErrorConcealmentTypeDrop = 0,
        eErrorConcealmentTypeBasic = 1,
        eErrorConcealmentTypeAdvanced = 2,
        eErrorConcealmentTypeDXVASetBlack = 3,
    };
    enum class eAVDecVideoInputScanType : int32_t
    {
        eAVDecVideoInputScan_Unknown = 0,
        eAVDecVideoInputScan_Progressive = 1,
        eAVDecVideoInputScan_Interlaced_UpperFieldFirst = 2,
        eAVDecVideoInputScan_Interlaced_LowerFieldFirst = 3,
    };
    enum class eAVDecVideoMPEG2ErrorConcealment : int32_t
    {
        eErrorConcealmentOff = 0,
        eErrorConcealmentOn = 1,
    };
    enum class eAVDecVideoSWPowerLevel : int32_t
    {
        eAVDecVideoSWPowerLevel_BatteryLife = 0,
        eAVDecVideoSWPowerLevel_Balanced = 50,
        eAVDecVideoSWPowerLevel_VideoQuality = 100,
    };
    enum class eAVDecVideoSoftwareDeinterlaceMode : int32_t
    {
        eAVDecVideoSoftwareDeinterlaceMode_NoDeinterlacing = 0,
        eAVDecVideoSoftwareDeinterlaceMode_ProgressiveDeinterlacing = 1,
        eAVDecVideoSoftwareDeinterlaceMode_BOBDeinterlacing = 2,
        eAVDecVideoSoftwareDeinterlaceMode_SmartBOBDeinterlacing = 3,
    };
    enum class eAVEncAdaptiveMode : int32_t
    {
        eAVEncAdaptiveMode_None = 0,
        eAVEncAdaptiveMode_Resolution = 1,
        eAVEncAdaptiveMode_FrameRate = 2,
    };
    enum class eAVEncAudioDualMono : int32_t
    {
        eAVEncAudioDualMono_SameAsInput = 0,
        eAVEncAudioDualMono_Off = 1,
        eAVEncAudioDualMono_On = 2,
    };
    enum class eAVEncAudioInputContent : int32_t
    {
        AVEncAudioInputContent_Unknown = 0,
        AVEncAudioInputContent_Voice = 1,
        AVEncAudioInputContent_Music = 2,
    };
    enum class eAVEncChromaEncodeMode : int32_t
    {
        eAVEncChromaEncodeMode_420 = 0,
        eAVEncChromaEncodeMode_444 = 1,
        eAVEncChromaEncodeMode_444_v2 = 2,
    };
    enum class eAVEncCommonRateControlMode : int32_t
    {
        eAVEncCommonRateControlMode_CBR = 0,
        eAVEncCommonRateControlMode_PeakConstrainedVBR = 1,
        eAVEncCommonRateControlMode_UnconstrainedVBR = 2,
        eAVEncCommonRateControlMode_Quality = 3,
        eAVEncCommonRateControlMode_LowDelayVBR = 4,
        eAVEncCommonRateControlMode_GlobalVBR = 5,
        eAVEncCommonRateControlMode_GlobalLowDelayVBR = 6,
    };
    enum class eAVEncCommonStreamEndHandling : int32_t
    {
        eAVEncCommonStreamEndHandling_DiscardPartial = 0,
        eAVEncCommonStreamEndHandling_EnsureComplete = 1,
    };
    enum class eAVEncDDAtoDConverterType : int32_t
    {
        eAVEncDDAtoDConverterType_Standard = 0,
        eAVEncDDAtoDConverterType_HDCD = 1,
    };
    enum class eAVEncDDDynamicRangeCompressionControl : int32_t
    {
        eAVEncDDDynamicRangeCompressionControl_None = 0,
        eAVEncDDDynamicRangeCompressionControl_FilmStandard = 1,
        eAVEncDDDynamicRangeCompressionControl_FilmLight = 2,
        eAVEncDDDynamicRangeCompressionControl_MusicStandard = 3,
        eAVEncDDDynamicRangeCompressionControl_MusicLight = 4,
        eAVEncDDDynamicRangeCompressionControl_Speech = 5,
    };
    enum class eAVEncDDHeadphoneMode : int32_t
    {
        eAVEncDDHeadphoneMode_NotIndicated = 0,
        eAVEncDDHeadphoneMode_NotEncoded = 1,
        eAVEncDDHeadphoneMode_Encoded = 2,
    };
    enum class eAVEncDDPreferredStereoDownMixMode : int32_t
    {
        eAVEncDDPreferredStereoDownMixMode_LtRt = 0,
        eAVEncDDPreferredStereoDownMixMode_LoRo = 1,
    };
    enum class eAVEncDDProductionRoomType : int32_t
    {
        eAVEncDDProductionRoomType_NotIndicated = 0,
        eAVEncDDProductionRoomType_Large = 1,
        eAVEncDDProductionRoomType_Small = 2,
    };
    enum class eAVEncDDService : int32_t
    {
        eAVEncDDService_CM = 0,
        eAVEncDDService_ME = 1,
        eAVEncDDService_VI = 2,
        eAVEncDDService_HI = 3,
        eAVEncDDService_D = 4,
        eAVEncDDService_C = 5,
        eAVEncDDService_E = 6,
        eAVEncDDService_VO = 7,
    };
    enum class eAVEncDDSurroundExMode : int32_t
    {
        eAVEncDDSurroundExMode_NotIndicated = 0,
        eAVEncDDSurroundExMode_No = 1,
        eAVEncDDSurroundExMode_Yes = 2,
    };
    enum class eAVEncH263PictureType : int32_t
    {
        eAVEncH263PictureType_I = 0,
        eAVEncH263PictureType_P = 1,
        eAVEncH263PictureType_B = 2,
    };
    enum class eAVEncH263VLevel : int32_t
    {
        eAVEncH263VLevel1 = 10,
        eAVEncH263VLevel2 = 20,
        eAVEncH263VLevel3 = 30,
        eAVEncH263VLevel4 = 40,
        eAVEncH263VLevel4_5 = 45,
        eAVEncH263VLevel5 = 50,
        eAVEncH263VLevel6 = 60,
        eAVEncH263VLevel7 = 70,
    };
    enum class eAVEncH263VProfile : int32_t
    {
        eAVEncH263VProfile_Base = 0,
        eAVEncH263VProfile_CompatibilityV2 = 1,
        eAVEncH263VProfile_CompatibilityV1 = 2,
        eAVEncH263VProfile_WirelessV2 = 3,
        eAVEncH263VProfile_WirelessV3 = 4,
        eAVEncH263VProfile_HighCompression = 5,
        eAVEncH263VProfile_Internet = 6,
        eAVEncH263VProfile_Interlace = 7,
        eAVEncH263VProfile_HighLatency = 8,
    };
    enum class eAVEncH264PictureType : int32_t
    {
        eAVEncH264PictureType_IDR = 0,
        eAVEncH264PictureType_P = 1,
        eAVEncH264PictureType_B = 2,
    };
    enum class eAVEncH264VLevel : int32_t
    {
        eAVEncH264VLevel1 = 10,
        eAVEncH264VLevel1_b = 11,
        eAVEncH264VLevel1_1 = 11,
        eAVEncH264VLevel1_2 = 12,
        eAVEncH264VLevel1_3 = 13,
        eAVEncH264VLevel2 = 20,
        eAVEncH264VLevel2_1 = 21,
        eAVEncH264VLevel2_2 = 22,
        eAVEncH264VLevel3 = 30,
        eAVEncH264VLevel3_1 = 31,
        eAVEncH264VLevel3_2 = 32,
        eAVEncH264VLevel4 = 40,
        eAVEncH264VLevel4_1 = 41,
        eAVEncH264VLevel4_2 = 42,
        eAVEncH264VLevel5 = 50,
        eAVEncH264VLevel5_1 = 51,
        eAVEncH264VLevel5_2 = 52,
    };
    enum class eAVEncH264VProfile : int32_t
    {
        eAVEncH264VProfile_unknown = 0,
        eAVEncH264VProfile_Simple = 66,
        eAVEncH264VProfile_Base = 66,
        eAVEncH264VProfile_Main = 77,
        eAVEncH264VProfile_High = 100,
        eAVEncH264VProfile_422 = 122,
        eAVEncH264VProfile_High10 = 110,
        eAVEncH264VProfile_444 = 244,
        eAVEncH264VProfile_Extended = 88,
        eAVEncH264VProfile_ScalableBase = 83,
        eAVEncH264VProfile_ScalableHigh = 86,
        eAVEncH264VProfile_MultiviewHigh = 118,
        eAVEncH264VProfile_StereoHigh = 128,
        eAVEncH264VProfile_ConstrainedBase = 256,
        eAVEncH264VProfile_UCConstrainedHigh = 257,
        eAVEncH264VProfile_UCScalableConstrainedBase = 258,
        eAVEncH264VProfile_UCScalableConstrainedHigh = 259,
    };
    enum class eAVEncH265VLevel : int32_t
    {
        eAVEncH265VLevel1 = 30,
        eAVEncH265VLevel2 = 60,
        eAVEncH265VLevel2_1 = 63,
        eAVEncH265VLevel3 = 90,
        eAVEncH265VLevel3_1 = 93,
        eAVEncH265VLevel4 = 120,
        eAVEncH265VLevel4_1 = 123,
        eAVEncH265VLevel5 = 150,
        eAVEncH265VLevel5_1 = 153,
        eAVEncH265VLevel5_2 = 156,
        eAVEncH265VLevel6 = 180,
        eAVEncH265VLevel6_1 = 183,
        eAVEncH265VLevel6_2 = 186,
    };
    enum class eAVEncH265VProfile : int32_t
    {
        eAVEncH265VProfile_unknown = 0,
        eAVEncH265VProfile_Main_420_8 = 1,
        eAVEncH265VProfile_Main_420_10 = 2,
        eAVEncH265VProfile_Main_420_12 = 3,
        eAVEncH265VProfile_Main_422_10 = 4,
        eAVEncH265VProfile_Main_422_12 = 5,
        eAVEncH265VProfile_Main_444_8 = 6,
        eAVEncH265VProfile_Main_444_10 = 7,
        eAVEncH265VProfile_Main_444_12 = 8,
        eAVEncH265VProfile_Monochrome_12 = 9,
        eAVEncH265VProfile_Monochrome_16 = 10,
        eAVEncH265VProfile_MainIntra_420_8 = 11,
        eAVEncH265VProfile_MainIntra_420_10 = 12,
        eAVEncH265VProfile_MainIntra_420_12 = 13,
        eAVEncH265VProfile_MainIntra_422_10 = 14,
        eAVEncH265VProfile_MainIntra_422_12 = 15,
        eAVEncH265VProfile_MainIntra_444_8 = 16,
        eAVEncH265VProfile_MainIntra_444_10 = 17,
        eAVEncH265VProfile_MainIntra_444_12 = 18,
        eAVEncH265VProfile_MainIntra_444_16 = 19,
        eAVEncH265VProfile_MainStill_420_8 = 20,
        eAVEncH265VProfile_MainStill_444_8 = 21,
        eAVEncH265VProfile_MainStill_444_16 = 22,
    };
    enum class eAVEncInputVideoSystem : int32_t
    {
        eAVEncInputVideoSystem_Unspecified = 0,
        eAVEncInputVideoSystem_PAL = 1,
        eAVEncInputVideoSystem_NTSC = 2,
        eAVEncInputVideoSystem_SECAM = 3,
        eAVEncInputVideoSystem_MAC = 4,
        eAVEncInputVideoSystem_HDV = 5,
        eAVEncInputVideoSystem_Component = 6,
    };
    enum class eAVEncMPACodingMode : int32_t
    {
        eAVEncMPACodingMode_Mono = 0,
        eAVEncMPACodingMode_Stereo = 1,
        eAVEncMPACodingMode_DualChannel = 2,
        eAVEncMPACodingMode_JointStereo = 3,
        eAVEncMPACodingMode_Surround = 4,
    };
    enum class eAVEncMPAEmphasisType : int32_t
    {
        eAVEncMPAEmphasisType_None = 0,
        eAVEncMPAEmphasisType_50_15 = 1,
        eAVEncMPAEmphasisType_Reserved = 2,
        eAVEncMPAEmphasisType_CCITT_J17 = 3,
    };
    enum class eAVEncMPALayer : int32_t
    {
        eAVEncMPALayer_1 = 1,
        eAVEncMPALayer_2 = 2,
        eAVEncMPALayer_3 = 3,
    };
    enum class eAVEncMPVFrameFieldMode : int32_t
    {
        eAVEncMPVFrameFieldMode_FieldMode = 0,
        eAVEncMPVFrameFieldMode_FrameMode = 1,
    };
    enum class eAVEncMPVIntraVLCTable : int32_t
    {
        eAVEncMPVIntraVLCTable_Auto = 0,
        eAVEncMPVIntraVLCTable_MPEG1 = 1,
        eAVEncMPVIntraVLCTable_Alternate = 2,
    };
    enum class eAVEncMPVLevel : int32_t
    {
        eAVEncMPVLevel_Low = 1,
        eAVEncMPVLevel_Main = 2,
        eAVEncMPVLevel_High1440 = 3,
        eAVEncMPVLevel_High = 4,
    };
    enum class eAVEncMPVProfile : int32_t
    {
        eAVEncMPVProfile_unknown = 0,
        eAVEncMPVProfile_Simple = 1,
        eAVEncMPVProfile_Main = 2,
        eAVEncMPVProfile_High = 3,
        eAVEncMPVProfile_422 = 4,
    };
    enum class eAVEncMPVQScaleType : int32_t
    {
        eAVEncMPVQScaleType_Auto = 0,
        eAVEncMPVQScaleType_Linear = 1,
        eAVEncMPVQScaleType_NonLinear = 2,
    };
    enum class eAVEncMPVScanPattern : int32_t
    {
        eAVEncMPVScanPattern_Auto = 0,
        eAVEncMPVScanPattern_ZigZagScan = 1,
        eAVEncMPVScanPattern_AlternateScan = 2,
    };
    enum class eAVEncMPVSceneDetection : int32_t
    {
        eAVEncMPVSceneDetection_None = 0,
        eAVEncMPVSceneDetection_InsertIPicture = 1,
        eAVEncMPVSceneDetection_StartNewGOP = 2,
        eAVEncMPVSceneDetection_StartNewLocatableGOP = 3,
    };
    enum class eAVEncMuxOutput : int32_t
    {
        eAVEncMuxOutputAuto = 0,
        eAVEncMuxOutputPS = 1,
        eAVEncMuxOutputTS = 2,
    };
    enum class eAVEncVP9VProfile : int32_t
    {
        eAVEncVP9VProfile_unknown = 0,
        eAVEncVP9VProfile_420_8 = 1,
        eAVEncVP9VProfile_420_10 = 2,
        eAVEncVP9VProfile_420_12 = 3,
    };
    enum class eAVEncVideoChromaResolution : int32_t
    {
        eAVEncVideoChromaResolution_SameAsSource = 0,
        eAVEncVideoChromaResolution_444 = 1,
        eAVEncVideoChromaResolution_422 = 2,
        eAVEncVideoChromaResolution_420 = 3,
        eAVEncVideoChromaResolution_411 = 4,
    };
    enum class eAVEncVideoChromaSubsampling : int32_t
    {
        eAVEncVideoChromaSubsamplingFormat_SameAsSource = 0,
        eAVEncVideoChromaSubsamplingFormat_ProgressiveChroma = 8,
        eAVEncVideoChromaSubsamplingFormat_Horizontally_Cosited = 4,
        eAVEncVideoChromaSubsamplingFormat_Vertically_Cosited = 2,
        eAVEncVideoChromaSubsamplingFormat_Vertically_AlignedChromaPlanes = 1,
    };
    enum class eAVEncVideoColorLighting : int32_t
    {
        eAVEncVideoColorLighting_SameAsSource = 0,
        eAVEncVideoColorLighting_Unknown = 1,
        eAVEncVideoColorLighting_Bright = 2,
        eAVEncVideoColorLighting_Office = 3,
        eAVEncVideoColorLighting_Dim = 4,
        eAVEncVideoColorLighting_Dark = 5,
    };
    enum class eAVEncVideoColorNominalRange : int32_t
    {
        eAVEncVideoColorNominalRange_SameAsSource = 0,
        eAVEncVideoColorNominalRange_0_255 = 1,
        eAVEncVideoColorNominalRange_16_235 = 2,
        eAVEncVideoColorNominalRange_48_208 = 3,
    };
    enum class eAVEncVideoColorPrimaries : int32_t
    {
        eAVEncVideoColorPrimaries_SameAsSource = 0,
        eAVEncVideoColorPrimaries_Reserved = 1,
        eAVEncVideoColorPrimaries_BT709 = 2,
        eAVEncVideoColorPrimaries_BT470_2_SysM = 3,
        eAVEncVideoColorPrimaries_BT470_2_SysBG = 4,
        eAVEncVideoColorPrimaries_SMPTE170M = 5,
        eAVEncVideoColorPrimaries_SMPTE240M = 6,
        eAVEncVideoColorPrimaries_EBU3231 = 7,
        eAVEncVideoColorPrimaries_SMPTE_C = 8,
    };
    enum class eAVEncVideoColorTransferFunction : int32_t
    {
        eAVEncVideoColorTransferFunction_SameAsSource = 0,
        eAVEncVideoColorTransferFunction_10 = 1,
        eAVEncVideoColorTransferFunction_18 = 2,
        eAVEncVideoColorTransferFunction_20 = 3,
        eAVEncVideoColorTransferFunction_22 = 4,
        eAVEncVideoColorTransferFunction_22_709 = 5,
        eAVEncVideoColorTransferFunction_22_240M = 6,
        eAVEncVideoColorTransferFunction_22_8bit_sRGB = 7,
        eAVEncVideoColorTransferFunction_28 = 8,
    };
    enum class eAVEncVideoColorTransferMatrix : int32_t
    {
        eAVEncVideoColorTransferMatrix_SameAsSource = 0,
        eAVEncVideoColorTransferMatrix_BT709 = 1,
        eAVEncVideoColorTransferMatrix_BT601 = 2,
        eAVEncVideoColorTransferMatrix_SMPTE240M = 3,
    };
    enum class eAVEncVideoContentType : int32_t
    {
        eAVEncVideoContentType_Unknown = 0,
        eAVEncVideoContentType_FixedCameraAngle = 1,
    };
    enum class eAVEncVideoFilmContent : int32_t
    {
        eAVEncVideoFilmContent_VideoOnly = 0,
        eAVEncVideoFilmContent_FilmOnly = 1,
        eAVEncVideoFilmContent_Mixed = 2,
    };
    enum class eAVEncVideoOutputFrameRateConversion : int32_t
    {
        eAVEncVideoOutputFrameRateConversion_Disable = 0,
        eAVEncVideoOutputFrameRateConversion_Enable = 1,
        eAVEncVideoOutputFrameRateConversion_Alias = 2,
    };
    enum class eAVEncVideoOutputScanType : int32_t
    {
        eAVEncVideoOutputScan_Progressive = 0,
        eAVEncVideoOutputScan_Interlaced = 1,
        eAVEncVideoOutputScan_SameAsInput = 2,
        eAVEncVideoOutputScan_Automatic = 3,
    };
    enum class eAVEncVideoSourceScanType : int32_t
    {
        eAVEncVideoSourceScan_Automatic = 0,
        eAVEncVideoSourceScan_Interlaced = 1,
        eAVEncVideoSourceScan_Progressive = 2,
    };
    enum class eAVFastDecodeMode : int32_t
    {
        eVideoDecodeCompliant = 0,
        eVideoDecodeOptimalLF = 1,
        eVideoDecodeDisableLF = 2,
        eVideoDecodeFastest = 32,
    };
    enum class eAVScenarioInfo : int32_t
    {
        eAVScenarioInfo_Unknown = 0,
        eAVScenarioInfo_DisplayRemoting = 1,
        eAVScenarioInfo_VideoConference = 2,
        eAVScenarioInfo_Archive = 3,
        eAVScenarioInfo_LiveStreaming = 4,
        eAVScenarioInfo_CameraRecord = 5,
        eAVScenarioInfo_DisplayRemotingWithFeatureMap = 6,
    };
    enum class eVideoEncoderDisplayContentType : int32_t
    {
        eVideoEncoderDisplayContent_Unknown = 0,
        eVideoEncoderDisplayContent_FullScreenVideo = 1,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct AACMFTEncoder;
    struct ALawCodecWrapper;
    struct ASF_FLAT_PICTURE;
    struct ASF_FLAT_SYNCHRONISED_LYRICS;
    struct ASF_INDEX_DESCRIPTOR;
    struct ASF_INDEX_IDENTIFIER;
    struct ASF_MUX_STATISTICS;
    struct AecQualityMetrics_Struct;
    struct CAC3DecMediaObject;
    struct CClusterDetectorDmo;
    struct CColorControlDmo;
    struct CColorConvertDMO;
    struct CColorLegalizerDmo;
    struct CDTVAudDecoderDS;
    struct CDTVVidDecoderDS;
    struct CDVDecoderMediaObject;
    struct CDVEncoderMediaObject;
    struct CDeColorConvMediaObject;
    struct CFrameInterpDMO;
    struct CFrameRateConvertDmo;
    struct CInterlaceMediaObject;
    struct CMP3DecMediaObject;
    struct CMPEG2AudDecoderDS;
    struct CMPEG2AudioEncoderMFT;
    struct CMPEG2EncoderAudioDS;
    struct CMPEG2EncoderDS;
    struct CMPEG2EncoderVideoDS;
    struct CMPEG2VidDecoderDS;
    struct CMPEG2VideoEncoderMFT;
    struct CMPEGAACDecMediaObject;
    struct CMSAACDecMFT;
    struct CMSAC3Enc;
    struct CMSALACDecMFT;
    struct CMSALACEncMFT;
    struct CMSDDPlusDecMFT;
    struct CMSDolbyDigitalEncMFT;
    struct CMSFLACDecMFT;
    struct CMSFLACEncMFT;
    struct CMSH263EncoderMFT;
    struct CMSH264DecoderMFT;
    struct CMSH264EncoderMFT;
    struct CMSH264RemuxMFT;
    struct CMSH265EncoderMFT;
    struct CMSMPEGAudDecMFT;
    struct CMSMPEGDecoderMFT;
    struct CMSOpusDecMFT;
    struct CMSSCDecMediaObject;
    struct CMSSCEncMediaObject;
    struct CMSSCEncMediaObject2;
    struct CMSVPXEncoderMFT;
    struct CMSVideoDSPMFT;
    struct CMpeg2DecMediaObject;
    struct CMpeg43DecMediaObject;
    struct CMpeg4DecMediaObject;
    struct CMpeg4EncMediaObject;
    struct CMpeg4sDecMFT;
    struct CMpeg4sDecMediaObject;
    struct CMpeg4sEncMediaObject;
    struct CNokiaAACCCDecMediaObject;
    struct CNokiaAACDecMediaObject;
    struct CODECAPI_AVAudioChannelConfig;
    struct CODECAPI_AVAudioChannelCount;
    struct CODECAPI_AVAudioSampleRate;
    struct CODECAPI_AVDDSurroundMode;
    struct CODECAPI_AVDSPLoudnessEqualization;
    struct CODECAPI_AVDSPSpeakerFill;
    struct CODECAPI_AVDecAACDownmixMode;
    struct CODECAPI_AVDecAudioDualMono;
    struct CODECAPI_AVDecAudioDualMonoReproMode;
    struct CODECAPI_AVDecCommonInputFormat;
    struct CODECAPI_AVDecCommonMeanBitRate;
    struct CODECAPI_AVDecCommonMeanBitRateInterval;
    struct CODECAPI_AVDecCommonOutputFormat;
    struct CODECAPI_AVDecDDDynamicRangeScaleHigh;
    struct CODECAPI_AVDecDDDynamicRangeScaleLow;
    struct CODECAPI_AVDecDDMatrixDecodingMode;
    struct CODECAPI_AVDecDDOperationalMode;
    struct CODECAPI_AVDecDDStereoDownMixMode;
    struct CODECAPI_AVDecDisableVideoPostProcessing;
    struct CODECAPI_AVDecHEAACDynamicRangeControl;
    struct CODECAPI_AVDecNumWorkerThreads;
    struct CODECAPI_AVDecSoftwareDynamicFormatChange;
    struct CODECAPI_AVDecVideoAcceleration_H264;
    struct CODECAPI_AVDecVideoAcceleration_MPEG2;
    struct CODECAPI_AVDecVideoAcceleration_VC1;
    struct CODECAPI_AVDecVideoCodecType;
    struct CODECAPI_AVDecVideoDXVABusEncryption;
    struct CODECAPI_AVDecVideoDXVAMode;
    struct CODECAPI_AVDecVideoDropPicWithMissingRef;
    struct CODECAPI_AVDecVideoFastDecodeMode;
    struct CODECAPI_AVDecVideoH264ErrorConcealment;
    struct CODECAPI_AVDecVideoImageSize;
    struct CODECAPI_AVDecVideoInputScanType;
    struct CODECAPI_AVDecVideoMPEG2ErrorConcealment;
    struct CODECAPI_AVDecVideoMaxCodedHeight;
    struct CODECAPI_AVDecVideoMaxCodedWidth;
    struct CODECAPI_AVDecVideoPixelAspectRatio;
    struct CODECAPI_AVDecVideoProcDeinterlaceCSC;
    struct CODECAPI_AVDecVideoSWPowerLevel;
    struct CODECAPI_AVDecVideoSoftwareDeinterlaceMode;
    struct CODECAPI_AVDecVideoThumbnailGenerationMode;
    struct CODECAPI_AVEnableInLoopDeblockFilter;
    struct CODECAPI_AVEncAdaptiveMode;
    struct CODECAPI_AVEncAudioDualMono;
    struct CODECAPI_AVEncAudioInputContent;
    struct CODECAPI_AVEncAudioIntervalToEncode;
    struct CODECAPI_AVEncAudioIntervalToSkip;
    struct CODECAPI_AVEncAudioMapDestChannel0;
    struct CODECAPI_AVEncAudioMapDestChannel1;
    struct CODECAPI_AVEncAudioMapDestChannel10;
    struct CODECAPI_AVEncAudioMapDestChannel11;
    struct CODECAPI_AVEncAudioMapDestChannel12;
    struct CODECAPI_AVEncAudioMapDestChannel13;
    struct CODECAPI_AVEncAudioMapDestChannel14;
    struct CODECAPI_AVEncAudioMapDestChannel15;
    struct CODECAPI_AVEncAudioMapDestChannel2;
    struct CODECAPI_AVEncAudioMapDestChannel3;
    struct CODECAPI_AVEncAudioMapDestChannel4;
    struct CODECAPI_AVEncAudioMapDestChannel5;
    struct CODECAPI_AVEncAudioMapDestChannel6;
    struct CODECAPI_AVEncAudioMapDestChannel7;
    struct CODECAPI_AVEncAudioMapDestChannel8;
    struct CODECAPI_AVEncAudioMapDestChannel9;
    struct CODECAPI_AVEncAudioMeanBitRate;
    struct CODECAPI_AVEncChromaEncodeMode;
    struct CODECAPI_AVEncChromaUpdateTime;
    struct CODECAPI_AVEncCodecType;
    struct CODECAPI_AVEncCommonAllowFrameDrops;
    struct CODECAPI_AVEncCommonBufferInLevel;
    struct CODECAPI_AVEncCommonBufferOutLevel;
    struct CODECAPI_AVEncCommonBufferSize;
    struct CODECAPI_AVEncCommonFormatConstraint;
    struct CODECAPI_AVEncCommonLowLatency;
    struct CODECAPI_AVEncCommonMaxBitRate;
    struct CODECAPI_AVEncCommonMeanBitRate;
    struct CODECAPI_AVEncCommonMeanBitRateInterval;
    struct CODECAPI_AVEncCommonMinBitRate;
    struct CODECAPI_AVEncCommonMultipassMode;
    struct CODECAPI_AVEncCommonPassEnd;
    struct CODECAPI_AVEncCommonPassStart;
    struct CODECAPI_AVEncCommonQuality;
    struct CODECAPI_AVEncCommonQualityVsSpeed;
    struct CODECAPI_AVEncCommonRateControlMode;
    struct CODECAPI_AVEncCommonRealTime;
    struct CODECAPI_AVEncCommonStreamEndHandling;
    struct CODECAPI_AVEncCommonTranscodeEncodingProfile;
    struct CODECAPI_AVEncDDAtoDConverterType;
    struct CODECAPI_AVEncDDCentreDownMixLevel;
    struct CODECAPI_AVEncDDChannelBWLowPassFilter;
    struct CODECAPI_AVEncDDCopyright;
    struct CODECAPI_AVEncDDDCHighPassFilter;
    struct CODECAPI_AVEncDDDialogNormalization;
    struct CODECAPI_AVEncDDDigitalDeemphasis;
    struct CODECAPI_AVEncDDDynamicRangeCompressionControl;
    struct CODECAPI_AVEncDDHeadphoneMode;
    struct CODECAPI_AVEncDDLFELowPassFilter;
    struct CODECAPI_AVEncDDLoRoCenterMixLvl_x10;
    struct CODECAPI_AVEncDDLoRoSurroundMixLvl_x10;
    struct CODECAPI_AVEncDDLtRtCenterMixLvl_x10;
    struct CODECAPI_AVEncDDLtRtSurroundMixLvl_x10;
    struct CODECAPI_AVEncDDOriginalBitstream;
    struct CODECAPI_AVEncDDPreferredStereoDownMixMode;
    struct CODECAPI_AVEncDDProductionInfoExists;
    struct CODECAPI_AVEncDDProductionMixLevel;
    struct CODECAPI_AVEncDDProductionRoomType;
    struct CODECAPI_AVEncDDRFPreEmphasisFilter;
    struct CODECAPI_AVEncDDService;
    struct CODECAPI_AVEncDDSurround3dBAttenuation;
    struct CODECAPI_AVEncDDSurround90DegreeePhaseShift;
    struct CODECAPI_AVEncDDSurroundDownMixLevel;
    struct CODECAPI_AVEncDDSurroundExMode;
    struct CODECAPI_AVEncEnableVideoProcessing;
    struct CODECAPI_AVEncH264CABACEnable;
    struct CODECAPI_AVEncH264PPSID;
    struct CODECAPI_AVEncH264SPSID;
    struct CODECAPI_AVEncInputVideoSystem;
    struct CODECAPI_AVEncLowPowerEncoder;
    struct CODECAPI_AVEncMP12MuxDVDNavPacks;
    struct CODECAPI_AVEncMP12MuxEarliestPTS;
    struct CODECAPI_AVEncMP12MuxInitialSCR;
    struct CODECAPI_AVEncMP12MuxLargestPacketSize;
    struct CODECAPI_AVEncMP12MuxMuxRate;
    struct CODECAPI_AVEncMP12MuxNumStreams;
    struct CODECAPI_AVEncMP12MuxPackSize;
    struct CODECAPI_AVEncMP12MuxPacketOverhead;
    struct CODECAPI_AVEncMP12MuxSysAudioLock;
    struct CODECAPI_AVEncMP12MuxSysCSPS;
    struct CODECAPI_AVEncMP12MuxSysFixed;
    struct CODECAPI_AVEncMP12MuxSysRateBound;
    struct CODECAPI_AVEncMP12MuxSysSTDBufferBound;
    struct CODECAPI_AVEncMP12MuxSysVideoLock;
    struct CODECAPI_AVEncMP12MuxTargetPacketizer;
    struct CODECAPI_AVEncMP12PktzCopyright;
    struct CODECAPI_AVEncMP12PktzInitialPTS;
    struct CODECAPI_AVEncMP12PktzOriginal;
    struct CODECAPI_AVEncMP12PktzPacketSize;
    struct CODECAPI_AVEncMP12PktzSTDBuffer;
    struct CODECAPI_AVEncMP12PktzStreamID;
    struct CODECAPI_AVEncMPACodingMode;
    struct CODECAPI_AVEncMPACopyright;
    struct CODECAPI_AVEncMPAEmphasisType;
    struct CODECAPI_AVEncMPAEnableRedundancyProtection;
    struct CODECAPI_AVEncMPALayer;
    struct CODECAPI_AVEncMPAOriginalBitstream;
    struct CODECAPI_AVEncMPAPrivateUserBit;
    struct CODECAPI_AVEncMPVAddSeqEndCode;
    struct CODECAPI_AVEncMPVDefaultBPictureCount;
    struct CODECAPI_AVEncMPVFrameFieldMode;
    struct CODECAPI_AVEncMPVGOPOpen;
    struct CODECAPI_AVEncMPVGOPSInSeq;
    struct CODECAPI_AVEncMPVGOPSize;
    struct CODECAPI_AVEncMPVGOPSizeMax;
    struct CODECAPI_AVEncMPVGOPSizeMin;
    struct CODECAPI_AVEncMPVGenerateHeaderPicDispExt;
    struct CODECAPI_AVEncMPVGenerateHeaderPicExt;
    struct CODECAPI_AVEncMPVGenerateHeaderSeqDispExt;
    struct CODECAPI_AVEncMPVGenerateHeaderSeqExt;
    struct CODECAPI_AVEncMPVGenerateHeaderSeqScaleExt;
    struct CODECAPI_AVEncMPVIntraDCPrecision;
    struct CODECAPI_AVEncMPVIntraVLCTable;
    struct CODECAPI_AVEncMPVLevel;
    struct CODECAPI_AVEncMPVProfile;
    struct CODECAPI_AVEncMPVQScaleType;
    struct CODECAPI_AVEncMPVQuantMatrixChromaIntra;
    struct CODECAPI_AVEncMPVQuantMatrixChromaNonIntra;
    struct CODECAPI_AVEncMPVQuantMatrixIntra;
    struct CODECAPI_AVEncMPVQuantMatrixNonIntra;
    struct CODECAPI_AVEncMPVScanPattern;
    struct CODECAPI_AVEncMPVSceneDetection;
    struct CODECAPI_AVEncMPVUseConcealmentMotionVectors;
    struct CODECAPI_AVEncMaxFrameRate;
    struct CODECAPI_AVEncMuxOutputStreamType;
    struct CODECAPI_AVEncNoInputCopy;
    struct CODECAPI_AVEncNumWorkerThreads;
    struct CODECAPI_AVEncProgressiveUpdateTime;
    struct CODECAPI_AVEncSliceControlMode;
    struct CODECAPI_AVEncSliceControlSize;
    struct CODECAPI_AVEncSliceGenerationMode;
    struct CODECAPI_AVEncStatAudioAverageBPS;
    struct CODECAPI_AVEncStatAudioAveragePCMValue;
    struct CODECAPI_AVEncStatAudioPeakPCMValue;
    struct CODECAPI_AVEncStatAverageBPS;
    struct CODECAPI_AVEncStatCommonCompletedPasses;
    struct CODECAPI_AVEncStatHardwareBandwidthUtilitization;
    struct CODECAPI_AVEncStatHardwareProcessorUtilitization;
    struct CODECAPI_AVEncStatMPVSkippedEmptyFrames;
    struct CODECAPI_AVEncStatVideoCodedFrames;
    struct CODECAPI_AVEncStatVideoOutputFrameRate;
    struct CODECAPI_AVEncStatVideoTotalFrames;
    struct CODECAPI_AVEncStatWMVCBAvg;
    struct CODECAPI_AVEncStatWMVCBMax;
    struct CODECAPI_AVEncStatWMVDecoderComplexityProfile;
    struct CODECAPI_AVEncVideoCBRMotionTradeoff;
    struct CODECAPI_AVEncVideoCTBSize;
    struct CODECAPI_AVEncVideoCodedVideoAccessUnitSize;
    struct CODECAPI_AVEncVideoContentType;
    struct CODECAPI_AVEncVideoDefaultUpperFieldDominant;
    struct CODECAPI_AVEncVideoDirtyRectEnabled;
    struct CODECAPI_AVEncVideoDisplayDimension;
    struct CODECAPI_AVEncVideoEncodeDimension;
    struct CODECAPI_AVEncVideoEncodeFrameTypeQP;
    struct CODECAPI_AVEncVideoEncodeOffsetOrigin;
    struct CODECAPI_AVEncVideoEncodeQP;
    struct CODECAPI_AVEncVideoFieldSwap;
    struct CODECAPI_AVEncVideoForceKeyFrame;
    struct CODECAPI_AVEncVideoForceSourceScanType;
    struct CODECAPI_AVEncVideoGradualIntraRefresh;
    struct CODECAPI_AVEncVideoHeaderDropFrame;
    struct CODECAPI_AVEncVideoHeaderFrames;
    struct CODECAPI_AVEncVideoHeaderHours;
    struct CODECAPI_AVEncVideoHeaderMinutes;
    struct CODECAPI_AVEncVideoHeaderSeconds;
    struct CODECAPI_AVEncVideoInputChromaResolution;
    struct CODECAPI_AVEncVideoInputChromaSubsampling;
    struct CODECAPI_AVEncVideoInputColorLighting;
    struct CODECAPI_AVEncVideoInputColorNominalRange;
    struct CODECAPI_AVEncVideoInputColorPrimaries;
    struct CODECAPI_AVEncVideoInputColorTransferFunction;
    struct CODECAPI_AVEncVideoInputColorTransferMatrix;
    struct CODECAPI_AVEncVideoInstantTemporalUpSwitching;
    struct CODECAPI_AVEncVideoIntraLayerPrediction;
    struct CODECAPI_AVEncVideoInverseTelecineEnable;
    struct CODECAPI_AVEncVideoInverseTelecineThreshold;
    struct CODECAPI_AVEncVideoLTRBufferControl;
    struct CODECAPI_AVEncVideoMarkLTRFrame;
    struct CODECAPI_AVEncVideoMaxCTBSize;
    struct CODECAPI_AVEncVideoMaxKeyframeDistance;
    struct CODECAPI_AVEncVideoMaxNumRefFrame;
    struct CODECAPI_AVEncVideoMaxQP;
    struct CODECAPI_AVEncVideoMaxTemporalLayers;
    struct CODECAPI_AVEncVideoMeanAbsoluteDifference;
    struct CODECAPI_AVEncVideoMinQP;
    struct CODECAPI_AVEncVideoNoOfFieldsToEncode;
    struct CODECAPI_AVEncVideoNoOfFieldsToSkip;
    struct CODECAPI_AVEncVideoNumGOPsPerIDR;
    struct CODECAPI_AVEncVideoOutputChromaResolution;
    struct CODECAPI_AVEncVideoOutputChromaSubsampling;
    struct CODECAPI_AVEncVideoOutputColorLighting;
    struct CODECAPI_AVEncVideoOutputColorNominalRange;
    struct CODECAPI_AVEncVideoOutputColorPrimaries;
    struct CODECAPI_AVEncVideoOutputColorTransferFunction;
    struct CODECAPI_AVEncVideoOutputColorTransferMatrix;
    struct CODECAPI_AVEncVideoOutputFrameRate;
    struct CODECAPI_AVEncVideoOutputFrameRateConversion;
    struct CODECAPI_AVEncVideoOutputScanType;
    struct CODECAPI_AVEncVideoPixelAspectRatio;
    struct CODECAPI_AVEncVideoROIEnabled;
    struct CODECAPI_AVEncVideoRateControlParams;
    struct CODECAPI_AVEncVideoSelectLayer;
    struct CODECAPI_AVEncVideoSourceFilmContent;
    struct CODECAPI_AVEncVideoSourceIsBW;
    struct CODECAPI_AVEncVideoSupportedControls;
    struct CODECAPI_AVEncVideoTemporalLayerCount;
    struct CODECAPI_AVEncVideoUsage;
    struct CODECAPI_AVEncVideoUseLTRFrame;
    struct CODECAPI_AVEncWMVDecoderComplexity;
    struct CODECAPI_AVEncWMVInterlacedEncoding;
    struct CODECAPI_AVEncWMVKeyFrameBufferLevelMarker;
    struct CODECAPI_AVEncWMVKeyFrameDistance;
    struct CODECAPI_AVEncWMVProduceDummyFrames;
    struct CODECAPI_AVLowLatencyMode;
    struct CODECAPI_AVPriorityControl;
    struct CODECAPI_AVRealtimeControl;
    struct CODECAPI_AVScenarioInfo;
    struct CODECAPI_GUID_AVDecAudioInputAAC;
    struct CODECAPI_GUID_AVDecAudioInputDTS;
    struct CODECAPI_GUID_AVDecAudioInputDolby;
    struct CODECAPI_GUID_AVDecAudioInputDolbyDigitalPlus;
    struct CODECAPI_GUID_AVDecAudioInputHEAAC;
    struct CODECAPI_GUID_AVDecAudioInputMPEG;
    struct CODECAPI_GUID_AVDecAudioInputPCM;
    struct CODECAPI_GUID_AVDecAudioInputWMA;
    struct CODECAPI_GUID_AVDecAudioInputWMAPro;
    struct CODECAPI_GUID_AVDecAudioOutputFormat_PCM;
    struct CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Headphones;
    struct CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_Auto;
    struct CODECAPI_GUID_AVDecAudioOutputFormat_PCM_Stereo_MatrixEncoded;
    struct CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_Bitstream;
    struct CODECAPI_GUID_AVDecAudioOutputFormat_SPDIF_PCM;
    struct CODECAPI_GUID_AVEncCommonFormatATSC;
    struct CODECAPI_GUID_AVEncCommonFormatDVB;
    struct CODECAPI_GUID_AVEncCommonFormatDVD_DashVR;
    struct CODECAPI_GUID_AVEncCommonFormatDVD_PlusVR;
    struct CODECAPI_GUID_AVEncCommonFormatDVD_V;
    struct CODECAPI_GUID_AVEncCommonFormatHighMAT;
    struct CODECAPI_GUID_AVEncCommonFormatHighMPV;
    struct CODECAPI_GUID_AVEncCommonFormatMP3;
    struct CODECAPI_GUID_AVEncCommonFormatSVCD;
    struct CODECAPI_GUID_AVEncCommonFormatUnSpecified;
    struct CODECAPI_GUID_AVEncCommonFormatVCD;
    struct CODECAPI_GUID_AVEncDTS;
    struct CODECAPI_GUID_AVEncDTSHD;
    struct CODECAPI_GUID_AVEncDV;
    struct CODECAPI_GUID_AVEncDolbyDigitalConsumer;
    struct CODECAPI_GUID_AVEncDolbyDigitalPlus;
    struct CODECAPI_GUID_AVEncDolbyDigitalPro;
    struct CODECAPI_GUID_AVEncH264Video;
    struct CODECAPI_GUID_AVEncMLP;
    struct CODECAPI_GUID_AVEncMPEG1Audio;
    struct CODECAPI_GUID_AVEncMPEG1Video;
    struct CODECAPI_GUID_AVEncMPEG2Audio;
    struct CODECAPI_GUID_AVEncMPEG2Video;
    struct CODECAPI_GUID_AVEncPCM;
    struct CODECAPI_GUID_AVEncSDDS;
    struct CODECAPI_GUID_AVEncWMALossless;
    struct CODECAPI_GUID_AVEncWMAPro;
    struct CODECAPI_GUID_AVEncWMAVoice;
    struct CODECAPI_GUID_AVEncWMV;
    struct CODECAPI_GUID_AVEndMPEG4Video;
    struct CODECAPI_GetOPMContext;
    struct CODECAPI_SetHDCPManagerContext;
    struct CODECAPI_VideoEncoderDisplayContentType;
    struct CPK_DS_AC3Decoder;
    struct CPK_DS_MPEG2Decoder;
    struct CResamplerMediaObject;
    struct CResizerDMO;
    struct CResizerMediaObject;
    struct CShotDetectorDmo;
    struct CSmpteTransformsDmo;
    struct CThumbnailGeneratorDmo;
    struct CTocGeneratorDmo;
    struct CVodafoneAACCCDecMediaObject;
    struct CVodafoneAACDecMediaObject;
    struct CWMADecMediaObject;
    struct CWMAEncMediaObject;
    struct CWMATransMediaObject;
    struct CWMAudioAEC;
    struct CWMAudioCAPXGFXAPO;
    struct CWMAudioCAPXLFXAPO;
    struct CWMAudioGFXAPO;
    struct CWMAudioLFXAPO;
    struct CWMAudioSpdTxDMO;
    struct CWMSPDecMediaObject;
    struct CWMSPEncMediaObject;
    struct CWMSPEncMediaObject2;
    struct CWMTDecMediaObject;
    struct CWMTEncMediaObject;
    struct CWMV9EncMediaObject;
    struct CWMVDecMediaObject;
    struct CWMVEncMediaObject2;
    struct CWMVXEncMediaObject;
    struct CWVC1DecMediaObject;
    struct CWVC1EncMediaObject;
    struct CZuneAACCCDecMediaObject;
    struct CZuneM4S2DecMediaObject;
    struct CodecAPIEventData;
    struct D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE;
    struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE;
    struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES;
    struct D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS;
    struct D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS;
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT;
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS;
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT;
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE;
    struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT;
    struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR;
    struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES;
    struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE;
    struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE;
    struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1;
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS;
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES;
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO;
    struct D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT;
    struct D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS;
    struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT;
    struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT;
    struct D3D12_RESOURCE_COORDINATE;
    struct D3D12_VIDEO_DECODER_DESC;
    struct D3D12_VIDEO_DECODER_HEAP_DESC;
    struct D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM;
    struct D3D12_VIDEO_DECODE_CONFIGURATION;
    struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS;
    struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1;
    struct D3D12_VIDEO_DECODE_FRAME_ARGUMENT;
    struct D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS;
    struct D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM;
    struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS;
    struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1;
    struct D3D12_VIDEO_DECODE_REFERENCE_FRAMES;
    struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION;
    struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264;
    struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC;
    struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT;
    struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264;
    struct D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC;
    struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT;
    struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264;
    struct D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC;
    struct D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM;
    struct D3D12_VIDEO_ENCODER_DESC;
    struct D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS;
    struct D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS;
    struct D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
    struct D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA;
    struct D3D12_VIDEO_ENCODER_HEAP_DESC;
    struct D3D12_VIDEO_ENCODER_INTRA_REFRESH;
    struct D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    struct D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC;
    struct D3D12_VIDEO_ENCODER_OUTPUT_METADATA;
    struct D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA;
    struct D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES;
    struct D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    struct D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC;
    struct D3D12_VIDEO_ENCODER_PROFILE_DESC;
    struct D3D12_VIDEO_ENCODER_RATE_CONTROL;
    struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR;
    struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS;
    struct D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP;
    struct D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR;
    struct D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR;
    struct D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE;
    struct D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264;
    struct D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC;
    struct D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS;
    struct D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS;
    struct D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC;
    struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
    struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264;
    struct D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC;
    struct D3D12_VIDEO_ENCODE_REFERENCE_FRAMES;
    struct D3D12_VIDEO_EXTENSION_COMMAND_DESC;
    struct D3D12_VIDEO_EXTENSION_COMMAND_INFO;
    struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO;
    struct D3D12_VIDEO_FORMAT;
    struct D3D12_VIDEO_MOTION_ESTIMATOR_DESC;
    struct D3D12_VIDEO_MOTION_ESTIMATOR_INPUT;
    struct D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT;
    struct D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC;
    struct D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
    struct D3D12_VIDEO_PROCESS_FILTER_RANGE;
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM;
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS;
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1;
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;
    struct D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    struct D3D12_VIDEO_PROCESS_LUMA_KEY;
    struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM;
    struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS;
    struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
    struct D3D12_VIDEO_PROCESS_REFERENCE_SET;
    struct D3D12_VIDEO_PROCESS_TRANSFORM;
    struct D3D12_VIDEO_SAMPLE;
    struct D3D12_VIDEO_SCALE_SUPPORT;
    struct D3D12_VIDEO_SIZE_RANGE;
    struct D3DCONTENTPROTECTIONCAPS;
    struct D3DOVERLAYCAPS;
    struct DEVICE_INFO;
    struct DIRTYRECT_INFO;
    struct DXVA2_AES_CTR_IV;
    struct DXVA2_AYUVSample16;
    struct DXVA2_AYUVSample8;
    struct DXVA2_ConfigPictureDecode;
    struct DXVA2_DecodeBufferDesc;
    struct DXVA2_DecodeExecuteParams;
    struct DXVA2_DecodeExtensionData;
    struct DXVA2_ExtendedFormat;
    struct DXVA2_FilterValues;
    struct DXVA2_Fixed32;
    struct DXVA2_Frequency;
    struct DXVA2_ProcAmpValues;
    struct DXVA2_ValueRange;
    struct DXVA2_VideoDesc;
    struct DXVA2_VideoProcessBltParams;
    struct DXVA2_VideoProcessorCaps;
    struct DXVA2_VideoSample;
    struct DXVABufferInfo;
    struct DXVACompBufferInfo;
    struct DXVAHDETW_CREATEVIDEOPROCESSOR;
    struct DXVAHDETW_DESTROYVIDEOPROCESSOR;
    struct DXVAHDETW_VIDEOPROCESSBLTHD;
    struct DXVAHDETW_VIDEOPROCESSBLTHD_STREAM;
    struct DXVAHDETW_VIDEOPROCESSBLTSTATE;
    struct DXVAHDETW_VIDEOPROCESSSTREAMSTATE;
    struct DXVAHDSW_CALLBACKS;
    struct DXVAHD_BLT_STATE_ALPHA_FILL_DATA;
    struct DXVAHD_BLT_STATE_BACKGROUND_COLOR_DATA;
    struct DXVAHD_BLT_STATE_CONSTRICTION_DATA;
    struct DXVAHD_BLT_STATE_OUTPUT_COLOR_SPACE_DATA;
    struct DXVAHD_BLT_STATE_PRIVATE_DATA;
    struct DXVAHD_BLT_STATE_TARGET_RECT_DATA;
    union DXVAHD_COLOR;
    struct DXVAHD_COLOR_RGBA;
    struct DXVAHD_COLOR_YCbCrA;
    struct DXVAHD_CONTENT_DESC;
    struct DXVAHD_CUSTOM_RATE_DATA;
    struct DXVAHD_FILTER_RANGE_DATA;
    struct DXVAHD_RATIONAL;
    struct DXVAHD_STREAM_DATA;
    struct DXVAHD_STREAM_STATE_ALPHA_DATA;
    struct DXVAHD_STREAM_STATE_ASPECT_RATIO_DATA;
    struct DXVAHD_STREAM_STATE_D3DFORMAT_DATA;
    struct DXVAHD_STREAM_STATE_DESTINATION_RECT_DATA;
    struct DXVAHD_STREAM_STATE_FILTER_DATA;
    struct DXVAHD_STREAM_STATE_FRAME_FORMAT_DATA;
    struct DXVAHD_STREAM_STATE_INPUT_COLOR_SPACE_DATA;
    struct DXVAHD_STREAM_STATE_LUMA_KEY_DATA;
    struct DXVAHD_STREAM_STATE_OUTPUT_RATE_DATA;
    struct DXVAHD_STREAM_STATE_PALETTE_DATA;
    struct DXVAHD_STREAM_STATE_PRIVATE_DATA;
    struct DXVAHD_STREAM_STATE_PRIVATE_IVTC_DATA;
    struct DXVAHD_STREAM_STATE_SOURCE_RECT_DATA;
    struct DXVAHD_VPCAPS;
    struct DXVAHD_VPDEVCAPS;
    struct DXVAUncompDataInfo;
    struct DXVA_AYUVsample2;
    struct DXVA_BufferDescription;
    struct DXVA_COPPCommand;
    struct DXVA_COPPSignature;
    struct DXVA_COPPStatusInput;
    struct DXVA_COPPStatusOutput;
    struct DXVA_ConfigPictureDecode;
    struct DXVA_DeinterlaceBlt;
    struct DXVA_DeinterlaceBltEx;
    struct DXVA_DeinterlaceBltEx32;
    struct DXVA_DeinterlaceCaps;
    struct DXVA_DeinterlaceQueryAvailableModes;
    struct DXVA_DeinterlaceQueryModeCaps;
    struct DXVA_ExtendedFormat;
    struct DXVA_Frequency;
    struct DXVA_PictureParameters;
    struct DXVA_ProcAmpControlBlt;
    struct DXVA_ProcAmpControlCaps;
    struct DXVA_ProcAmpControlQueryRange;
    struct DXVA_VideoDesc;
    struct DXVA_VideoPropertyRange;
    struct DXVA_VideoSample;
    struct DXVA_VideoSample2;
    struct DXVA_VideoSample32;
    struct DigitalWindowSetting;
    struct KSPROPSETID_OPMVideoOutput;
    struct MACROBLOCK_DATA;
    struct MFAMRNBByteStreamHandler;
    struct MFAMRNBSinkClassFactory;
    struct MFARGB;
    struct MFAYUVSample;
    struct MFAudioDecoderDegradationInfo;
    struct MFBYTESTREAM_BUFFERING_PARAMS;
    struct MFCLOCK_PROPERTIES;
    struct MFCONTENTPROTECTIONDEVICE_INPUT_DATA;
    struct MFCONTENTPROTECTIONDEVICE_OUTPUT_DATA;
    struct MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA;
    struct MFCameraExtrinsic_CalibratedTransform;
    struct MFCameraExtrinsics;
    struct MFCameraIntrinsic_CameraModel;
    struct MFCameraIntrinsic_DistortionModel;
    struct MFCameraIntrinsic_DistortionModel6KT;
    struct MFCameraIntrinsic_DistortionModelArcTan;
    struct MFCameraIntrinsic_PinholeCameraModel;
    struct MFExtendedCameraIntrinsic_IntrinsicModel;
    struct MFFLACBytestreamHandler;
    struct MFFLACSinkClassFactory;
    struct MFFOLDDOWN_MATRIX;
    struct MFINPUTTRUSTAUTHORITY_ACCESS_ACTION;
    struct MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS;
    struct MFMPEG2DLNASINKSTATS;
    struct MFMediaKeyStatus;
    struct MFNetCredentialManagerGetParam;
    struct MFOffset;
    struct MFP_ACQUIRE_USER_CREDENTIAL_EVENT;
    struct MFP_ERROR_EVENT;
    struct MFP_EVENT_HEADER;
    struct MFP_FRAME_STEP_EVENT;
    struct MFP_MEDIAITEM_CLEARED_EVENT;
    struct MFP_MEDIAITEM_CREATED_EVENT;
    struct MFP_MEDIAITEM_SET_EVENT;
    struct MFP_MF_EVENT;
    struct MFP_PAUSE_EVENT;
    struct MFP_PLAYBACK_ENDED_EVENT;
    struct MFP_PLAY_EVENT;
    struct MFP_POSITION_SET_EVENT;
    struct MFP_RATE_SET_EVENT;
    struct MFP_STOP_EVENT;
    union MFPaletteEntry;
    struct MFPinholeCameraIntrinsic_IntrinsicModel;
    struct MFPinholeCameraIntrinsics;
    struct MFRR_COMPONENTS;
    struct MFRR_COMPONENT_HASH_INFO;
    struct MFRatio;
    struct MFTOPONODE_ATTRIBUTE_UPDATE;
    struct MFT_INPUT_STREAM_INFO;
    struct MFT_OUTPUT_DATA_BUFFER;
    struct MFT_OUTPUT_STREAM_INFO;
    struct MFT_REGISTER_TYPE_INFO;
    struct MFT_REGISTRATION_INFO;
    struct MFT_STREAM_STATE_PARAM;
    struct MFVIDEOFORMAT;
    struct MFVideoAlphaBitmap;
    struct MFVideoAlphaBitmapParams;
    struct MFVideoArea;
    struct MFVideoCompressedInfo;
    struct MFVideoInfo;
    struct MFVideoNormalizedRect;
    struct MFVideoSurfaceInfo;
    struct MF_BYTE_STREAM_CACHE_RANGE;
    struct MF_FLOAT2;
    struct MF_FLOAT3;
    struct MF_LEAKY_BUCKET_PAIR;
    struct MF_QUATERNION;
    struct MF_SINK_WRITER_STATISTICS;
    struct MF_TRANSCODE_SINK_INFO;
    struct MF_VIDEO_SPHERICAL_VIEWDIRECTION;
    struct MOVEREGION_INFO;
    struct MOVE_RECT;
    struct MP3ACMCodecWrapper;
    struct MSAMRNBDecoder;
    struct MSAMRNBEncoder;
    struct MT_ARBITRARY_HEADER;
    struct MT_CUSTOM_VIDEO_PRIMARIES;
    struct MULawCodecWrapper;
    struct OPM_ACP_AND_CGMSA_SIGNALING;
    struct OPM_ACTUAL_OUTPUT_FORMAT;
    struct OPM_CONFIGURE_PARAMETERS;
    struct OPM_CONNECTED_HDCP_DEVICE_INFORMATION;
    struct OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS;
    struct OPM_ENCRYPTED_INITIALIZATION_PARAMETERS;
    struct OPM_GET_CODEC_INFO_INFORMATION;
    struct OPM_GET_CODEC_INFO_PARAMETERS;
    struct OPM_GET_INFO_PARAMETERS;
    struct OPM_HDCP_KEY_SELECTION_VECTOR;
    struct OPM_OMAC;
    struct OPM_OUTPUT_ID_DATA;
    struct OPM_RANDOM_NUMBER;
    struct OPM_REQUESTED_INFORMATION;
    struct OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS;
    struct OPM_SET_HDCP_SRM_PARAMETERS;
    struct OPM_SET_PROTECTION_LEVEL_PARAMETERS;
    struct OPM_STANDARD_INFORMATION;
    struct ROI_AREA;
    struct SENSORPROFILEID;
    struct STREAM_MEDIUM;
    struct TOC_DESCRIPTOR;
    struct TOC_ENTRY_DESCRIPTOR;
    struct VorbisDecoderMFT;
    struct IAdvancedMediaCapture;
    struct IAdvancedMediaCaptureInitializationSettings;
    struct IAdvancedMediaCaptureSettings;
    struct IAudioSourceProvider;
    struct IClusterDetector;
    struct ICodecAPI;
    struct ID3D12VideoDecodeCommandList;
    struct ID3D12VideoDecodeCommandList1;
    struct ID3D12VideoDecodeCommandList2;
    struct ID3D12VideoDecoder;
    struct ID3D12VideoDecoder1;
    struct ID3D12VideoDecoderHeap;
    struct ID3D12VideoDecoderHeap1;
    struct ID3D12VideoDevice;
    struct ID3D12VideoDevice1;
    struct ID3D12VideoDevice2;
    struct ID3D12VideoDevice3;
    struct ID3D12VideoEncodeCommandList;
    struct ID3D12VideoEncodeCommandList1;
    struct ID3D12VideoEncodeCommandList2;
    struct ID3D12VideoEncoder;
    struct ID3D12VideoEncoderHeap;
    struct ID3D12VideoExtensionCommand;
    struct ID3D12VideoMotionEstimator;
    struct ID3D12VideoMotionVectorHeap;
    struct ID3D12VideoProcessCommandList;
    struct ID3D12VideoProcessCommandList1;
    struct ID3D12VideoProcessCommandList2;
    struct ID3D12VideoProcessor;
    struct ID3D12VideoProcessor1;
    struct IDXVAHD_Device;
    struct IDXVAHD_VideoProcessor;
    struct IDirect3D9ExOverlayExtension;
    struct IDirect3DAuthenticatedChannel9;
    struct IDirect3DCryptoSession9;
    struct IDirect3DDevice9Video;
    struct IDirect3DDeviceManager9;
    struct IDirectXVideoAccelerationService;
    struct IDirectXVideoDecoder;
    struct IDirectXVideoDecoderService;
    struct IDirectXVideoMemoryConfiguration;
    struct IDirectXVideoProcessor;
    struct IDirectXVideoProcessorService;
    struct IEVRFilterConfig;
    struct IEVRFilterConfigEx;
    struct IEVRTrustedVideoPlugin;
    struct IEVRVideoStreamControl;
    struct IFileClient;
    struct IFileIo;
    struct IMF2DBuffer;
    struct IMF2DBuffer2;
    struct IMFASFContentInfo;
    struct IMFASFIndexer;
    struct IMFASFMultiplexer;
    struct IMFASFMutualExclusion;
    struct IMFASFProfile;
    struct IMFASFSplitter;
    struct IMFASFStreamConfig;
    struct IMFASFStreamPrioritization;
    struct IMFASFStreamSelector;
    struct IMFActivate;
    struct IMFAsyncCallback;
    struct IMFAsyncCallbackLogging;
    struct IMFAsyncResult;
    struct IMFAttributes;
    struct IMFAudioMediaType;
    struct IMFAudioPolicy;
    struct IMFAudioStreamVolume;
    struct IMFBufferListNotify;
    struct IMFByteStream;
    struct IMFByteStreamBuffering;
    struct IMFByteStreamCacheControl;
    struct IMFByteStreamCacheControl2;
    struct IMFByteStreamHandler;
    struct IMFByteStreamProxyClassFactory;
    struct IMFByteStreamTimeSeek;
    struct IMFCameraOcclusionStateMonitor;
    struct IMFCameraOcclusionStateReport;
    struct IMFCameraOcclusionStateReportCallback;
    struct IMFCameraSyncObject;
    struct IMFCaptureEngine;
    struct IMFCaptureEngineClassFactory;
    struct IMFCaptureEngineOnEventCallback;
    struct IMFCaptureEngineOnSampleCallback;
    struct IMFCaptureEngineOnSampleCallback2;
    struct IMFCapturePhotoConfirmation;
    struct IMFCapturePhotoSink;
    struct IMFCapturePreviewSink;
    struct IMFCaptureRecordSink;
    struct IMFCaptureSink;
    struct IMFCaptureSink2;
    struct IMFCaptureSource;
    struct IMFCdmSuspendNotify;
    struct IMFClock;
    struct IMFClockConsumer;
    struct IMFClockStateSink;
    struct IMFCollection;
    struct IMFContentDecryptionModule;
    struct IMFContentDecryptionModuleAccess;
    struct IMFContentDecryptionModuleFactory;
    struct IMFContentDecryptionModuleSession;
    struct IMFContentDecryptionModuleSessionCallbacks;
    struct IMFContentDecryptorContext;
    struct IMFContentEnabler;
    struct IMFContentProtectionDevice;
    struct IMFContentProtectionManager;
    struct IMFDLNASinkInit;
    struct IMFDRMNetHelper;
    struct IMFDXGIBuffer;
    struct IMFDXGIDeviceManager;
    struct IMFDXGIDeviceManagerSource;
    struct IMFDesiredSample;
    struct IMFExtendedCameraControl;
    struct IMFExtendedCameraController;
    struct IMFExtendedCameraIntrinsicModel;
    struct IMFExtendedCameraIntrinsics;
    struct IMFExtendedCameraIntrinsicsDistortionModel6KT;
    struct IMFExtendedCameraIntrinsicsDistortionModelArcTan;
    struct IMFExtendedDRMTypeSupport;
    struct IMFFieldOfUseMFTUnlock;
    struct IMFFinalizableMediaSink;
    struct IMFGetService;
    struct IMFHDCPStatus;
    struct IMFHttpDownloadRequest;
    struct IMFHttpDownloadSession;
    struct IMFHttpDownloadSessionProvider;
    struct IMFImageSharingEngine;
    struct IMFImageSharingEngineClassFactory;
    struct IMFInputTrustAuthority;
    struct IMFLocalMFTRegistration;
    struct IMFMediaBuffer;
    struct IMFMediaEngine;
    struct IMFMediaEngineAudioEndpointId;
    struct IMFMediaEngineClassFactory;
    struct IMFMediaEngineClassFactory2;
    struct IMFMediaEngineClassFactory3;
    struct IMFMediaEngineClassFactory4;
    struct IMFMediaEngineClassFactoryEx;
    struct IMFMediaEngineEME;
    struct IMFMediaEngineEMENotify;
    struct IMFMediaEngineEx;
    struct IMFMediaEngineExtension;
    struct IMFMediaEngineNeedKeyNotify;
    struct IMFMediaEngineNotify;
    struct IMFMediaEngineOPMInfo;
    struct IMFMediaEngineProtectedContent;
    struct IMFMediaEngineSrcElements;
    struct IMFMediaEngineSrcElementsEx;
    struct IMFMediaEngineSupportsSourceTransfer;
    struct IMFMediaEngineTransferSource;
    struct IMFMediaEngineWebSupport;
    struct IMFMediaError;
    struct IMFMediaEvent;
    struct IMFMediaEventGenerator;
    struct IMFMediaEventQueue;
    struct IMFMediaKeySession;
    struct IMFMediaKeySession2;
    struct IMFMediaKeySessionNotify;
    struct IMFMediaKeySessionNotify2;
    struct IMFMediaKeySystemAccess;
    struct IMFMediaKeys;
    struct IMFMediaKeys2;
    struct IMFMediaSession;
    struct IMFMediaSharingEngine;
    struct IMFMediaSharingEngineClassFactory;
    struct IMFMediaSink;
    struct IMFMediaSinkPreroll;
    struct IMFMediaSource;
    struct IMFMediaSource2;
    struct IMFMediaSourceEx;
    struct IMFMediaSourceExtension;
    struct IMFMediaSourceExtensionLiveSeekableRange;
    struct IMFMediaSourceExtensionNotify;
    struct IMFMediaSourcePresentationProvider;
    struct IMFMediaSourceTopologyProvider;
    struct IMFMediaStream;
    struct IMFMediaStream2;
    struct IMFMediaStreamSourceSampleRequest;
    struct IMFMediaTimeRange;
    struct IMFMediaType;
    struct IMFMediaTypeHandler;
    struct IMFMetadata;
    struct IMFMetadataProvider;
    struct IMFMuxStreamAttributesManager;
    struct IMFMuxStreamMediaTypeManager;
    struct IMFMuxStreamSampleManager;
    struct IMFNetCredential;
    struct IMFNetCredentialCache;
    struct IMFNetCredentialManager;
    struct IMFNetCrossOriginSupport;
    struct IMFNetProxyLocator;
    struct IMFNetProxyLocatorFactory;
    struct IMFNetResourceFilter;
    struct IMFNetSchemeHandlerConfig;
    struct IMFObjectReferenceStream;
    struct IMFOutputPolicy;
    struct IMFOutputSchema;
    struct IMFOutputTrustAuthority;
    struct IMFPMPClient;
    struct IMFPMPClientApp;
    struct IMFPMPHost;
    struct IMFPMPHostApp;
    struct IMFPMPServer;
    struct IMFPMediaItem;
    struct IMFPMediaPlayer;
    struct IMFPMediaPlayerCallback;
    struct IMFPluginControl;
    struct IMFPluginControl2;
    struct IMFPresentationClock;
    struct IMFPresentationDescriptor;
    struct IMFPresentationTimeSource;
    struct IMFProtectedEnvironmentAccess;
    struct IMFQualityAdvise;
    struct IMFQualityAdvise2;
    struct IMFQualityAdviseLimits;
    struct IMFQualityManager;
    struct IMFRateControl;
    struct IMFRateSupport;
    struct IMFReadWriteClassFactory;
    struct IMFRealTimeClient;
    struct IMFRealTimeClientEx;
    struct IMFRelativePanelReport;
    struct IMFRelativePanelWatcher;
    struct IMFRemoteAsyncCallback;
    struct IMFRemoteDesktopPlugin;
    struct IMFRemoteProxy;
    struct IMFSAMIStyle;
    struct IMFSSLCertificateManager;
    struct IMFSample;
    struct IMFSampleAllocatorControl;
    struct IMFSampleGrabberSinkCallback;
    struct IMFSampleGrabberSinkCallback2;
    struct IMFSampleOutputStream;
    struct IMFSampleProtection;
    struct IMFSaveJob;
    struct IMFSchemeHandler;
    struct IMFSecureBuffer;
    struct IMFSecureChannel;
    struct IMFSeekInfo;
    struct IMFSensorActivitiesReport;
    struct IMFSensorActivitiesReportCallback;
    struct IMFSensorActivityMonitor;
    struct IMFSensorActivityReport;
    struct IMFSensorDevice;
    struct IMFSensorGroup;
    struct IMFSensorProcessActivity;
    struct IMFSensorProfile;
    struct IMFSensorProfileCollection;
    struct IMFSensorStream;
    struct IMFSensorTransformFactory;
    struct IMFSequencerSource;
    struct IMFSharingEngineClassFactory;
    struct IMFShutdown;
    struct IMFSignedLibrary;
    struct IMFSimpleAudioVolume;
    struct IMFSinkWriter;
    struct IMFSinkWriterCallback;
    struct IMFSinkWriterCallback2;
    struct IMFSinkWriterEncoderConfig;
    struct IMFSinkWriterEx;
    struct IMFSourceBuffer;
    struct IMFSourceBufferAppendMode;
    struct IMFSourceBufferList;
    struct IMFSourceBufferNotify;
    struct IMFSourceOpenMonitor;
    struct IMFSourceReader;
    struct IMFSourceReaderCallback;
    struct IMFSourceReaderCallback2;
    struct IMFSourceReaderEx;
    struct IMFSourceResolver;
    struct IMFSpatialAudioObjectBuffer;
    struct IMFSpatialAudioSample;
    struct IMFStreamDescriptor;
    struct IMFStreamSink;
    struct IMFStreamingSinkConfig;
    struct IMFSystemId;
    struct IMFTimecodeTranslate;
    struct IMFTimedText;
    struct IMFTimedTextBinary;
    struct IMFTimedTextBouten;
    struct IMFTimedTextCue;
    struct IMFTimedTextCueList;
    struct IMFTimedTextFormattedText;
    struct IMFTimedTextNotify;
    struct IMFTimedTextRegion;
    struct IMFTimedTextRuby;
    struct IMFTimedTextStyle;
    struct IMFTimedTextStyle2;
    struct IMFTimedTextTrack;
    struct IMFTimedTextTrackList;
    struct IMFTimer;
    struct IMFTopoLoader;
    struct IMFTopology;
    struct IMFTopologyNode;
    struct IMFTopologyNodeAttributeEditor;
    struct IMFTopologyServiceLookup;
    struct IMFTopologyServiceLookupClient;
    struct IMFTrackedSample;
    struct IMFTranscodeProfile;
    struct IMFTranscodeSinkInfoProvider;
    struct IMFTransform;
    struct IMFTrustedInput;
    struct IMFTrustedOutput;
    struct IMFVideoCaptureSampleAllocator;
    struct IMFVideoDeviceID;
    struct IMFVideoDisplayControl;
    struct IMFVideoMediaType;
    struct IMFVideoMixerBitmap;
    struct IMFVideoMixerControl;
    struct IMFVideoMixerControl2;
    struct IMFVideoPositionMapper;
    struct IMFVideoPresenter;
    struct IMFVideoProcessor;
    struct IMFVideoProcessorControl;
    struct IMFVideoProcessorControl2;
    struct IMFVideoProcessorControl3;
    struct IMFVideoRenderer;
    struct IMFVideoRendererEffectControl;
    struct IMFVideoSampleAllocator;
    struct IMFVideoSampleAllocatorCallback;
    struct IMFVideoSampleAllocatorEx;
    struct IMFVideoSampleAllocatorNotify;
    struct IMFVideoSampleAllocatorNotifyEx;
    struct IMFVirtualCamera;
    struct IMFWorkQueueServices;
    struct IMFWorkQueueServicesEx;
    struct IOPMVideoOutput;
    struct IPlayToControl;
    struct IPlayToControlWithCapabilities;
    struct IPlayToSourceClassFactory;
    struct IToc;
    struct ITocCollection;
    struct ITocEntry;
    struct ITocEntryList;
    struct ITocParser;
    struct IValidateBinding;
    struct IWMCodecLeakyBucket;
    struct IWMCodecOutputTimestamp;
    struct IWMCodecPrivateData;
    struct IWMCodecProps;
    struct IWMCodecStrings;
    struct IWMColorConvProps;
    struct IWMColorLegalizerProps;
    struct IWMFrameInterpProps;
    struct IWMInterlaceProps;
    struct IWMResamplerProps;
    struct IWMResizerProps;
    struct IWMSampleExtensionSupport;
    struct IWMValidate;
    struct IWMVideoDecoderHurryup;
    struct IWMVideoDecoderReconBuffer;
    struct IWMVideoForceKeyFrame;
    struct MFASYNCRESULT;
#pragma endregion forward_declarations

#pragma region delegates
    using PDXVAHDSW_CreateDevice = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9Ex*, Windows::Win32::Foundation::HANDLE*);
    using PDXVAHDSW_ProposeVideoPrivateFormat = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Graphics::Direct3D9::D3DFORMAT*);
    using PDXVAHDSW_GetVideoProcessorDeviceCaps = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Windows::Win32::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, Windows::Win32::Media::MediaFoundation::DXVAHD_VPDEVCAPS*);
    using PDXVAHDSW_GetVideoProcessorOutputFormats = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Windows::Win32::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, uint32_t, Windows::Win32::Graphics::Direct3D9::D3DFORMAT*);
    using PDXVAHDSW_GetVideoProcessorInputFormats = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Windows::Win32::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, uint32_t, Windows::Win32::Graphics::Direct3D9::D3DFORMAT*);
    using PDXVAHDSW_GetVideoProcessorCaps = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Windows::Win32::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, uint32_t, Windows::Win32::Media::MediaFoundation::DXVAHD_VPCAPS*);
    using PDXVAHDSW_GetVideoProcessorCustomRates = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, ::win32::guid*, uint32_t, Windows::Win32::Media::MediaFoundation::DXVAHD_CUSTOM_RATE_DATA*);
    using PDXVAHDSW_GetVideoProcessorFilterRange = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_FILTER, Windows::Win32::Media::MediaFoundation::DXVAHD_FILTER_RANGE_DATA*);
    using PDXVAHDSW_DestroyDevice = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE);
    using PDXVAHDSW_CreateVideoProcessor = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, ::win32::guid*, Windows::Win32::Foundation::HANDLE*);
    using PDXVAHDSW_SetVideoProcessBltState = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_BLT_STATE, uint32_t, void*);
    using PDXVAHDSW_GetVideoProcessBltStatePrivate = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Media::MediaFoundation::DXVAHD_BLT_STATE_PRIVATE_DATA*);
    using PDXVAHDSW_SetVideoProcessStreamState = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, Windows::Win32::Media::MediaFoundation::DXVAHD_STREAM_STATE, uint32_t, void*);
    using PDXVAHDSW_GetVideoProcessStreamStatePrivate = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, Windows::Win32::Media::MediaFoundation::DXVAHD_STREAM_STATE_PRIVATE_DATA*);
    using PDXVAHDSW_VideoProcessBltHD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Graphics::Direct3D9::IDirect3DSurface9*, uint32_t, uint32_t, Windows::Win32::Media::MediaFoundation::DXVAHD_STREAM_DATA*);
    using PDXVAHDSW_DestroyVideoProcessor = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE);
    using PDXVAHDSW_Plugin = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, void*);
    using PDXVAHD_CreateDevice = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9Ex*, Windows::Win32::Media::MediaFoundation::DXVAHD_CONTENT_DESC*, Windows::Win32::Media::MediaFoundation::DXVAHD_DEVICE_USAGE, Windows::Win32::Media::MediaFoundation::PDXVAHDSW_Plugin*, Windows::Win32::Media::MediaFoundation::IDXVAHD_Device**);
    using MFPERIODICCALLBACK = void __stdcall(Windows::Win32::System::Com::IUnknown*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
