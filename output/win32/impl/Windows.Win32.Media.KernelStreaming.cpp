// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Media_KernelStreaming_2_H
#define WIN32_Windows_Win32_Media_KernelStreaming_2_H
#include "win32/Windows.Win32.Media.KernelStreaming.h"
#include "win32/impl/Windows.Win32.Media.KernelStreaming.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Media::KernelStreaming
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_KsCreateAllocator(win32::Windows::Win32::Foundation::HANDLE ConnectionHandle, win32::Windows::Win32::Media::KernelStreaming::KSALLOCATOR_FRAMING* AllocatorFraming, win32::Windows::Win32::Foundation::HANDLE* AllocatorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConnectionHandle);
        ORBIT_TRACK_PARAM(AllocatorFraming);
        ORBIT_TRACK_PARAM(AllocatorHandle);

        auto win32_impl_result = g_api_table.KsCreateAllocator(ConnectionHandle, AllocatorFraming, AllocatorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_KsCreateClock(win32::Windows::Win32::Foundation::HANDLE ConnectionHandle, win32::Windows::Win32::Media::KernelStreaming::KSCLOCK_CREATE* ClockCreate, win32::Windows::Win32::Foundation::HANDLE* ClockHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConnectionHandle);
        ORBIT_TRACK_PARAM(ClockCreate);
        ORBIT_TRACK_PARAM(ClockHandle);

        auto win32_impl_result = g_api_table.KsCreateClock(ConnectionHandle, ClockCreate, ClockHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_KsCreatePin(win32::Windows::Win32::Foundation::HANDLE FilterHandle, win32::Windows::Win32::Media::KernelStreaming::KSPIN_CONNECT* Connect, uint32_t DesiredAccess, win32::Windows::Win32::Foundation::HANDLE* ConnectionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FilterHandle);
        ORBIT_TRACK_PARAM(Connect);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(ConnectionHandle);

        auto win32_impl_result = g_api_table.KsCreatePin(FilterHandle, Connect, DesiredAccess, ConnectionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_KsCreateTopologyNode(win32::Windows::Win32::Foundation::HANDLE ParentHandle, win32::Windows::Win32::Media::KernelStreaming::KSNODE_CREATE* NodeCreate, uint32_t DesiredAccess, win32::Windows::Win32::Foundation::HANDLE* NodeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ParentHandle);
        ORBIT_TRACK_PARAM(NodeCreate);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(NodeHandle);

        auto win32_impl_result = g_api_table.KsCreateTopologyNode(ParentHandle, NodeCreate, DesiredAccess, NodeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_KsCreateAllocator2(win32::Windows::Win32::Foundation::HANDLE ConnectionHandle, win32::Windows::Win32::Media::KernelStreaming::KSALLOCATOR_FRAMING* AllocatorFraming, win32::Windows::Win32::Foundation::HANDLE* AllocatorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConnectionHandle);
        ORBIT_TRACK_PARAM(AllocatorFraming);
        ORBIT_TRACK_PARAM(AllocatorHandle);

        auto win32_impl_result = g_api_table.KsCreateAllocator2(ConnectionHandle, AllocatorFraming, AllocatorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_KsCreateClock2(win32::Windows::Win32::Foundation::HANDLE ConnectionHandle, win32::Windows::Win32::Media::KernelStreaming::KSCLOCK_CREATE* ClockCreate, win32::Windows::Win32::Foundation::HANDLE* ClockHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConnectionHandle);
        ORBIT_TRACK_PARAM(ClockCreate);
        ORBIT_TRACK_PARAM(ClockHandle);

        auto win32_impl_result = g_api_table.KsCreateClock2(ConnectionHandle, ClockCreate, ClockHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_KsCreatePin2(win32::Windows::Win32::Foundation::HANDLE FilterHandle, win32::Windows::Win32::Media::KernelStreaming::KSPIN_CONNECT* Connect, uint32_t DesiredAccess, win32::Windows::Win32::Foundation::HANDLE* ConnectionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FilterHandle);
        ORBIT_TRACK_PARAM(Connect);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(ConnectionHandle);

        auto win32_impl_result = g_api_table.KsCreatePin2(FilterHandle, Connect, DesiredAccess, ConnectionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_KsCreateTopologyNode2(win32::Windows::Win32::Foundation::HANDLE ParentHandle, win32::Windows::Win32::Media::KernelStreaming::KSNODE_CREATE* NodeCreate, uint32_t DesiredAccess, win32::Windows::Win32::Foundation::HANDLE* NodeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ParentHandle);
        ORBIT_TRACK_PARAM(NodeCreate);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(NodeHandle);

        auto win32_impl_result = g_api_table.KsCreateTopologyNode2(ParentHandle, NodeCreate, DesiredAccess, NodeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
