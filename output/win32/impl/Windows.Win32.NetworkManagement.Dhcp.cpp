// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_Dhcp_2_H
#define WIN32_Windows_Win32_NetworkManagement_Dhcp_2_H
#include "win32/Windows.Win32.NetworkManagement.Dhcp.h"
#include "win32/impl/Windows.Win32.NetworkManagement.Dhcp.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::Dhcp
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    void __stdcall ORBIT_IMPL_Dhcpv6CApiInitialize(uint32_t* Version) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);

        g_api_table.Dhcpv6CApiInitialize(Version);
        
    }

    void __stdcall ORBIT_IMPL_Dhcpv6CApiCleanup() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.Dhcpv6CApiCleanup();
        
    }

    uint32_t __stdcall ORBIT_IMPL_Dhcpv6RequestParams(win32::Windows::Win32::Foundation::BOOL forceNewInform, void* reserved, win32::Windows::Win32::Foundation::PWSTR adapterName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6CAPI_CLASSID* classId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6CAPI_PARAMS_ARRAY recdParams, uint8_t* buffer, uint32_t* pSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(forceNewInform);
        ORBIT_TRACK_PARAM(reserved);
        ORBIT_TRACK_PARAM(adapterName);
        ORBIT_TRACK_PARAM(classId);
        ORBIT_TRACK_PARAM(recdParams);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(pSize);

        auto win32_impl_result = g_api_table.Dhcpv6RequestParams(forceNewInform, reserved, adapterName, classId, recdParams, buffer, pSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_Dhcpv6RequestPrefix(win32::Windows::Win32::Foundation::PWSTR adapterName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6CAPI_CLASSID* pclassId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6PrefixLeaseInformation* prefixleaseInfo, uint32_t* pdwTimeToWait) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(adapterName);
        ORBIT_TRACK_PARAM(pclassId);
        ORBIT_TRACK_PARAM(prefixleaseInfo);
        ORBIT_TRACK_PARAM(pdwTimeToWait);

        auto win32_impl_result = g_api_table.Dhcpv6RequestPrefix(adapterName, pclassId, prefixleaseInfo, pdwTimeToWait);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_Dhcpv6RenewPrefix(win32::Windows::Win32::Foundation::PWSTR adapterName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6CAPI_CLASSID* pclassId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6PrefixLeaseInformation* prefixleaseInfo, uint32_t* pdwTimeToWait, uint32_t bValidatePrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(adapterName);
        ORBIT_TRACK_PARAM(pclassId);
        ORBIT_TRACK_PARAM(prefixleaseInfo);
        ORBIT_TRACK_PARAM(pdwTimeToWait);
        ORBIT_TRACK_PARAM(bValidatePrefix);

        auto win32_impl_result = g_api_table.Dhcpv6RenewPrefix(adapterName, pclassId, prefixleaseInfo, pdwTimeToWait, bValidatePrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_Dhcpv6ReleasePrefix(win32::Windows::Win32::Foundation::PWSTR adapterName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6CAPI_CLASSID* classId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6PrefixLeaseInformation* leaseInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(adapterName);
        ORBIT_TRACK_PARAM(classId);
        ORBIT_TRACK_PARAM(leaseInfo);

        auto win32_impl_result = g_api_table.Dhcpv6ReleasePrefix(adapterName, classId, leaseInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCApiInitialize(uint32_t* Version) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);

        auto win32_impl_result = g_api_table.DhcpCApiInitialize(Version);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DhcpCApiCleanup() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.DhcpCApiCleanup();
        
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRequestParams(uint32_t Flags, void* Reserved, win32::Windows::Win32::Foundation::PWSTR AdapterName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPCAPI_CLASSID* ClassId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPCAPI_PARAMS_ARRAY SendParams, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPCAPI_PARAMS_ARRAY RecdParams, uint8_t* Buffer, uint32_t* pSize, win32::Windows::Win32::Foundation::PWSTR RequestIdStr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(AdapterName);
        ORBIT_TRACK_PARAM(ClassId);
        ORBIT_TRACK_PARAM(SendParams);
        ORBIT_TRACK_PARAM(RecdParams);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(pSize);
        ORBIT_TRACK_PARAM(RequestIdStr);

        auto win32_impl_result = g_api_table.DhcpRequestParams(Flags, Reserved, AdapterName, ClassId, SendParams, RecdParams, Buffer, pSize, RequestIdStr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpUndoRequestParams(uint32_t Flags, void* Reserved, win32::Windows::Win32::Foundation::PWSTR AdapterName, win32::Windows::Win32::Foundation::PWSTR RequestIdStr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(AdapterName);
        ORBIT_TRACK_PARAM(RequestIdStr);

        auto win32_impl_result = g_api_table.DhcpUndoRequestParams(Flags, Reserved, AdapterName, RequestIdStr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRegisterParamChange(uint32_t Flags, void* Reserved, win32::Windows::Win32::Foundation::PWSTR AdapterName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPCAPI_CLASSID* ClassId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPCAPI_PARAMS_ARRAY Params, void* Handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(AdapterName);
        ORBIT_TRACK_PARAM(ClassId);
        ORBIT_TRACK_PARAM(Params);
        ORBIT_TRACK_PARAM(Handle);

        auto win32_impl_result = g_api_table.DhcpRegisterParamChange(Flags, Reserved, AdapterName, ClassId, Params, Handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeRegisterParamChange(uint32_t Flags, void* Reserved, void* Event) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(Event);

        auto win32_impl_result = g_api_table.DhcpDeRegisterParamChange(Flags, Reserved, Event);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveDNSRegistrations() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.DhcpRemoveDNSRegistrations();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOriginalSubnetMask(win32::Windows::Win32::Foundation::PWSTR sAdapterName, uint32_t* dwSubnetMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sAdapterName);
        ORBIT_TRACK_PARAM(dwSubnetMask);

        auto win32_impl_result = g_api_table.DhcpGetOriginalSubnetMask(sAdapterName, dwSubnetMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddFilterV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FILTER_ADD_INFO* AddFilterInfo, win32::Windows::Win32::Foundation::BOOL ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(AddFilterInfo);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpAddFilterV4(ServerIpAddress, AddFilterInfo, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteFilterV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ADDR_PATTERN* DeleteFilterInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(DeleteFilterInfo);

        auto win32_impl_result = g_api_table.DhcpDeleteFilterV4(ServerIpAddress, DeleteFilterInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetFilterV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FILTER_GLOBAL_INFO* GlobalFilterInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(GlobalFilterInfo);

        auto win32_impl_result = g_api_table.DhcpSetFilterV4(ServerIpAddress, GlobalFilterInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetFilterV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FILTER_GLOBAL_INFO* GlobalFilterInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(GlobalFilterInfo);

        auto win32_impl_result = g_api_table.DhcpGetFilterV4(ServerIpAddress, GlobalFilterInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumFilterV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ADDR_PATTERN* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FILTER_LIST_TYPE ListType, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FILTER_ENUM_INFO** EnumFilterInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ListType);
        ORBIT_TRACK_PARAM(EnumFilterInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumFilterV4(ServerIpAddress, ResumeHandle, PreferredMaximum, ListType, EnumFilterInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateSubnet(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO* SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpCreateSubnet(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetSubnetInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO* SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpSetSubnetInfo(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetSubnetInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO** SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpGetSubnetInfo(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnets(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IP_ARRAY** EnumInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnets(ServerIpAddress, ResumeHandle, PreferredMaximum, EnumInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddSubnetElement(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA* AddElementInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(AddElementInfo);

        auto win32_impl_result = g_api_table.DhcpAddSubnetElement(ServerIpAddress, SubnetAddress, AddElementInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetElements(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_TYPE EnumElementType, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_INFO_ARRAY** EnumElementInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(EnumElementType);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumElementInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetElements(ServerIpAddress, SubnetAddress, EnumElementType, ResumeHandle, PreferredMaximum, EnumElementInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveSubnetElement(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA* RemoveElementInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FORCE_FLAG ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(RemoveElementInfo);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpRemoveSubnetElement(ServerIpAddress, SubnetAddress, RemoveElementInfo, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteSubnet(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FORCE_FLAG ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpDeleteSubnet(ServerIpAddress, SubnetAddress, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateOption(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION* OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpCreateOption(ServerIpAddress, OptionID, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION* OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpSetOptionInfo(ServerIpAddress, OptionID, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOptionInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION** OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpGetOptionInfo(ServerIpAddress, OptionID, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumOptions(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_ARRAY** Options, uint32_t* OptionsRead, uint32_t* OptionsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(Options);
        ORBIT_TRACK_PARAM(OptionsRead);
        ORBIT_TRACK_PARAM(OptionsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumOptions(ServerIpAddress, ResumeHandle, PreferredMaximum, Options, OptionsRead, OptionsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveOption(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);

        auto win32_impl_result = g_api_table.DhcpRemoveOption(ServerIpAddress, OptionID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionValue(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_DATA* OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpSetOptionValue(ServerIpAddress, OptionID, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionValues(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE_ARRAY* OptionValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValues);

        auto win32_impl_result = g_api_table.DhcpSetOptionValues(ServerIpAddress, ScopeInfo, OptionValues);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOptionValue(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE** OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpGetOptionValue(ServerIpAddress, OptionID, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumOptionValues(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE_ARRAY** OptionValues, uint32_t* OptionsRead, uint32_t* OptionsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(OptionValues);
        ORBIT_TRACK_PARAM(OptionsRead);
        ORBIT_TRACK_PARAM(OptionsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumOptionValues(ServerIpAddress, ScopeInfo, ResumeHandle, PreferredMaximum, OptionValues, OptionsRead, OptionsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveOptionValue(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t OptionID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ScopeInfo);

        auto win32_impl_result = g_api_table.DhcpRemoveOptionValue(ServerIpAddress, OptionID, ScopeInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateClientInfoVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_VQ* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpCreateClientInfoVQ(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetClientInfoVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_VQ* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpSetClientInfoVQ(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetClientInfoVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_VQ** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpGetClientInfoVQ(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetClientsVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_ARRAY_VQ** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetClientsVQ(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetClientsFilterStatusInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_FILTER_STATUS_INFO_ARRAY** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetClientsFilterStatusInfo(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpCreateClientInfo(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpSetClientInfo(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpGetClientInfo(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpDeleteClientInfo(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetClients(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_ARRAY** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetClients(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetClientOptions(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ClientIpAddress, uint32_t ClientSubnetMask, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_LIST** ClientOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientIpAddress);
        ORBIT_TRACK_PARAM(ClientSubnetMask);
        ORBIT_TRACK_PARAM(ClientOptions);

        auto win32_impl_result = g_api_table.DhcpGetClientOptions(ServerIpAddress, ClientIpAddress, ClientSubnetMask, ClientOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetMibInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_MIB_INFO** MibInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(MibInfo);

        auto win32_impl_result = g_api_table.DhcpGetMibInfo(ServerIpAddress, MibInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerSetConfig(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t FieldsToSet, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO* ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(FieldsToSet);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerSetConfig(ServerIpAddress, FieldsToSet, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerGetConfig(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO** ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerGetConfig(ServerIpAddress, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpScanDatabase(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t FixFlag, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SCAN_LIST** ScanList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(FixFlag);
        ORBIT_TRACK_PARAM(ScanList);

        auto win32_impl_result = g_api_table.DhcpScanDatabase(ServerIpAddress, SubnetAddress, FixFlag, ScanList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DhcpRpcFreeMemory(void* BufferPointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferPointer);

        g_api_table.DhcpRpcFreeMemory(BufferPointer);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetVersion(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* MajorVersion, uint32_t* MinorVersion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(MajorVersion);
        ORBIT_TRACK_PARAM(MinorVersion);

        auto win32_impl_result = g_api_table.DhcpGetVersion(ServerIpAddress, MajorVersion, MinorVersion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddSubnetElementV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V4* AddElementInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(AddElementInfo);

        auto win32_impl_result = g_api_table.DhcpAddSubnetElementV4(ServerIpAddress, SubnetAddress, AddElementInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetElementsV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_TYPE EnumElementType, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_INFO_ARRAY_V4** EnumElementInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(EnumElementType);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumElementInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetElementsV4(ServerIpAddress, SubnetAddress, EnumElementType, ResumeHandle, PreferredMaximum, EnumElementInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveSubnetElementV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V4* RemoveElementInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FORCE_FLAG ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(RemoveElementInfo);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpRemoveSubnetElementV4(ServerIpAddress, SubnetAddress, RemoveElementInfo, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateClientInfoV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_V4* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpCreateClientInfoV4(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetClientInfoV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_V4* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpSetClientInfoV4(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetClientInfoV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_V4** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpGetClientInfoV4(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetClientsV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_ARRAY_V4** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetClientsV4(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerSetConfigV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t FieldsToSet, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_V4* ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(FieldsToSet);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerSetConfigV4(ServerIpAddress, FieldsToSet, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerGetConfigV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_V4** ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerGetConfigV4(ServerIpAddress, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetSuperScopeV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR SuperScopeName, win32::Windows::Win32::Foundation::BOOL ChangeExisting) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SuperScopeName);
        ORBIT_TRACK_PARAM(ChangeExisting);

        auto win32_impl_result = g_api_table.DhcpSetSuperScopeV4(ServerIpAddress, SubnetAddress, SuperScopeName, ChangeExisting);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteSuperScopeV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR SuperScopeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SuperScopeName);

        auto win32_impl_result = g_api_table.DhcpDeleteSuperScopeV4(ServerIpAddress, SuperScopeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetSuperScopeInfoV4(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUPER_SCOPE_TABLE** SuperScopeTable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SuperScopeTable);

        auto win32_impl_result = g_api_table.DhcpGetSuperScopeInfoV4(ServerIpAddress, SuperScopeTable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetClientsV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_ARRAY_V5** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetClientsV5(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateOptionV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionId, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION* OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionId);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpCreateOptionV5(ServerIpAddress, Flags, OptionId, ClassName, VendorName, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionInfoV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION* OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpSetOptionInfoV5(ServerIpAddress, Flags, OptionID, ClassName, VendorName, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOptionInfoV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION** OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpGetOptionInfoV5(ServerIpAddress, Flags, OptionID, ClassName, VendorName, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumOptionsV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_ARRAY** Options, uint32_t* OptionsRead, uint32_t* OptionsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(Options);
        ORBIT_TRACK_PARAM(OptionsRead);
        ORBIT_TRACK_PARAM(OptionsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumOptionsV5(ServerIpAddress, Flags, ClassName, VendorName, ResumeHandle, PreferredMaximum, Options, OptionsRead, OptionsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveOptionV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);

        auto win32_impl_result = g_api_table.DhcpRemoveOptionV5(ServerIpAddress, Flags, OptionID, ClassName, VendorName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionValueV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionId, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_DATA* OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionId);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpSetOptionValueV5(ServerIpAddress, Flags, OptionId, ClassName, VendorName, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionValuesV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE_ARRAY* OptionValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValues);

        auto win32_impl_result = g_api_table.DhcpSetOptionValuesV5(ServerIpAddress, Flags, ClassName, VendorName, ScopeInfo, OptionValues);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOptionValueV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE** OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpGetOptionValueV5(ServerIpAddress, Flags, OptionID, ClassName, VendorName, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOptionValueV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE** OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpGetOptionValueV6(ServerIpAddress, Flags, OptionID, ClassName, VendorName, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumOptionValuesV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE_ARRAY** OptionValues, uint32_t* OptionsRead, uint32_t* OptionsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(OptionValues);
        ORBIT_TRACK_PARAM(OptionsRead);
        ORBIT_TRACK_PARAM(OptionsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumOptionValuesV5(ServerIpAddress, Flags, ClassName, VendorName, ScopeInfo, ResumeHandle, PreferredMaximum, OptionValues, OptionsRead, OptionsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveOptionValueV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);

        auto win32_impl_result = g_api_table.DhcpRemoveOptionValueV5(ServerIpAddress, Flags, OptionID, ClassName, VendorName, ScopeInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateClass(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO* ClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ClassInfo);

        auto win32_impl_result = g_api_table.DhcpCreateClass(ServerIpAddress, ReservedMustBeZero, ClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpModifyClass(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO* ClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ClassInfo);

        auto win32_impl_result = g_api_table.DhcpModifyClass(ServerIpAddress, ReservedMustBeZero, ClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteClass(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::Foundation::PWSTR ClassName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ClassName);

        auto win32_impl_result = g_api_table.DhcpDeleteClass(ServerIpAddress, ReservedMustBeZero, ClassName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetClassInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO* PartialClassInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO** FilledClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(PartialClassInfo);
        ORBIT_TRACK_PARAM(FilledClassInfo);

        auto win32_impl_result = g_api_table.DhcpGetClassInfo(ServerIpAddress, ReservedMustBeZero, PartialClassInfo, FilledClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumClasses(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO_ARRAY** ClassInfoArray, uint32_t* nRead, uint32_t* nTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClassInfoArray);
        ORBIT_TRACK_PARAM(nRead);
        ORBIT_TRACK_PARAM(nTotal);

        auto win32_impl_result = g_api_table.DhcpEnumClasses(ServerIpAddress, ReservedMustBeZero, ResumeHandle, PreferredMaximum, ClassInfoArray, nRead, nTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetAllOptions(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ALL_OPTIONS** OptionStruct) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionStruct);

        auto win32_impl_result = g_api_table.DhcpGetAllOptions(ServerIpAddress, Flags, OptionStruct);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetAllOptionsV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ALL_OPTIONS** OptionStruct) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionStruct);

        auto win32_impl_result = g_api_table.DhcpGetAllOptionsV6(ServerIpAddress, Flags, OptionStruct);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetAllOptionValues(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ALL_OPTION_VALUES** Values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(Values);

        auto win32_impl_result = g_api_table.DhcpGetAllOptionValues(ServerIpAddress, Flags, ScopeInfo, Values);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetAllOptionValuesV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ALL_OPTION_VALUES** Values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(Values);

        auto win32_impl_result = g_api_table.DhcpGetAllOptionValuesV6(ServerIpAddress, Flags, ScopeInfo, Values);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumServers(uint32_t Flags, void* IdInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPDS_SERVERS** Servers, void* CallbackFn, void* CallbackData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(IdInfo);
        ORBIT_TRACK_PARAM(Servers);
        ORBIT_TRACK_PARAM(CallbackFn);
        ORBIT_TRACK_PARAM(CallbackData);

        auto win32_impl_result = g_api_table.DhcpEnumServers(Flags, IdInfo, Servers, CallbackFn, CallbackData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddServer(uint32_t Flags, void* IdInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPDS_SERVER* NewServer, void* CallbackFn, void* CallbackData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(IdInfo);
        ORBIT_TRACK_PARAM(NewServer);
        ORBIT_TRACK_PARAM(CallbackFn);
        ORBIT_TRACK_PARAM(CallbackData);

        auto win32_impl_result = g_api_table.DhcpAddServer(Flags, IdInfo, NewServer, CallbackFn, CallbackData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteServer(uint32_t Flags, void* IdInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPDS_SERVER* NewServer, void* CallbackFn, void* CallbackData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(IdInfo);
        ORBIT_TRACK_PARAM(NewServer);
        ORBIT_TRACK_PARAM(CallbackFn);
        ORBIT_TRACK_PARAM(CallbackData);

        auto win32_impl_result = g_api_table.DhcpDeleteServer(Flags, IdInfo, NewServer, CallbackFn, CallbackData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetServerBindingInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_BIND_ELEMENT_ARRAY** BindElementsInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(BindElementsInfo);

        auto win32_impl_result = g_api_table.DhcpGetServerBindingInfo(ServerIpAddress, Flags, BindElementsInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetServerBindingInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_BIND_ELEMENT_ARRAY* BindElementInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(BindElementInfo);

        auto win32_impl_result = g_api_table.DhcpSetServerBindingInfo(ServerIpAddress, Flags, BindElementInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddSubnetElementV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V5* AddElementInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(AddElementInfo);

        auto win32_impl_result = g_api_table.DhcpAddSubnetElementV5(ServerIpAddress, SubnetAddress, AddElementInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetElementsV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_TYPE EnumElementType, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_INFO_ARRAY_V5** EnumElementInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(EnumElementType);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumElementInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetElementsV5(ServerIpAddress, SubnetAddress, EnumElementType, ResumeHandle, PreferredMaximum, EnumElementInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveSubnetElementV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V5* RemoveElementInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FORCE_FLAG ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(RemoveElementInfo);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpRemoveSubnetElementV5(ServerIpAddress, SubnetAddress, RemoveElementInfo, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4EnumSubnetReservations(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_RESERVATION_INFO_ARRAY** EnumElementInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumElementInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpV4EnumSubnetReservations(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, EnumElementInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateOptionV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionId, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION* OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionId);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpCreateOptionV6(ServerIpAddress, Flags, OptionId, ClassName, VendorName, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveOptionV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);

        auto win32_impl_result = g_api_table.DhcpRemoveOptionV6(ServerIpAddress, Flags, OptionID, ClassName, VendorName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumOptionsV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_ARRAY** Options, uint32_t* OptionsRead, uint32_t* OptionsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(Options);
        ORBIT_TRACK_PARAM(OptionsRead);
        ORBIT_TRACK_PARAM(OptionsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumOptionsV6(ServerIpAddress, Flags, ClassName, VendorName, ResumeHandle, PreferredMaximum, Options, OptionsRead, OptionsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveOptionValueV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);

        auto win32_impl_result = g_api_table.DhcpRemoveOptionValueV6(ServerIpAddress, Flags, OptionID, ClassName, VendorName, ScopeInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetOptionInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION** OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpGetOptionInfoV6(ServerIpAddress, Flags, OptionID, ClassName, VendorName, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION* OptionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(OptionInfo);

        auto win32_impl_result = g_api_table.DhcpSetOptionInfoV6(ServerIpAddress, Flags, OptionID, ClassName, VendorName, OptionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetOptionValueV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionId, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_DATA* OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionId);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpSetOptionValueV6(ServerIpAddress, Flags, OptionId, ClassName, VendorName, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetSubnetInfoVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO_VQ** SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpGetSubnetInfoVQ(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateSubnetVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO_VQ* SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpCreateSubnetVQ(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetSubnetInfoVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO_VQ* SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpSetSubnetInfoVQ(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumOptionValuesV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR ClassName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE_ARRAY** OptionValues, uint32_t* OptionsRead, uint32_t* OptionsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ClassName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(OptionValues);
        ORBIT_TRACK_PARAM(OptionsRead);
        ORBIT_TRACK_PARAM(OptionsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumOptionValuesV6(ServerIpAddress, Flags, ClassName, VendorName, ScopeInfo, ResumeHandle, PreferredMaximum, OptionValues, OptionsRead, OptionsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDsInit() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.DhcpDsInit();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DhcpDsCleanup() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.DhcpDsCleanup();
        
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetThreadOptions(uint32_t Flags, void* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.DhcpSetThreadOptions(Flags, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetThreadOptions(uint32_t* pFlags, void* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pFlags);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.DhcpGetThreadOptions(pFlags, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerQueryAttribute(win32::Windows::Win32::Foundation::PWSTR ServerIpAddr, uint32_t dwReserved, uint32_t DhcpAttribId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ATTRIB** pDhcpAttrib) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddr);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(DhcpAttribId);
        ORBIT_TRACK_PARAM(pDhcpAttrib);

        auto win32_impl_result = g_api_table.DhcpServerQueryAttribute(ServerIpAddr, dwReserved, DhcpAttribId, pDhcpAttrib);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerQueryAttributes(win32::Windows::Win32::Foundation::PWSTR ServerIpAddr, uint32_t dwReserved, uint32_t dwAttribCount, uint32_t* pDhcpAttribs, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ATTRIB_ARRAY** pDhcpAttribArr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddr);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(dwAttribCount);
        ORBIT_TRACK_PARAM(pDhcpAttribs);
        ORBIT_TRACK_PARAM(pDhcpAttribArr);

        auto win32_impl_result = g_api_table.DhcpServerQueryAttributes(ServerIpAddr, dwReserved, dwAttribCount, pDhcpAttribs, pDhcpAttribArr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerRedoAuthorization(win32::Windows::Win32::Foundation::PWSTR ServerIpAddr, uint32_t dwReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddr);
        ORBIT_TRACK_PARAM(dwReserved);

        auto win32_impl_result = g_api_table.DhcpServerRedoAuthorization(ServerIpAddr, dwReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAuditLogSetParams(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR AuditLogDir, uint32_t DiskCheckInterval, uint32_t MaxLogFilesSize, uint32_t MinSpaceOnDisk) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(AuditLogDir);
        ORBIT_TRACK_PARAM(DiskCheckInterval);
        ORBIT_TRACK_PARAM(MaxLogFilesSize);
        ORBIT_TRACK_PARAM(MinSpaceOnDisk);

        auto win32_impl_result = g_api_table.DhcpAuditLogSetParams(ServerIpAddress, Flags, AuditLogDir, DiskCheckInterval, MaxLogFilesSize, MinSpaceOnDisk);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAuditLogGetParams(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR* AuditLogDir, uint32_t* DiskCheckInterval, uint32_t* MaxLogFilesSize, uint32_t* MinSpaceOnDisk) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(AuditLogDir);
        ORBIT_TRACK_PARAM(DiskCheckInterval);
        ORBIT_TRACK_PARAM(MaxLogFilesSize);
        ORBIT_TRACK_PARAM(MinSpaceOnDisk);

        auto win32_impl_result = g_api_table.DhcpAuditLogGetParams(ServerIpAddress, Flags, AuditLogDir, DiskCheckInterval, MaxLogFilesSize, MinSpaceOnDisk);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerQueryDnsRegCredentials(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t UnameSize, win32::Windows::Win32::Foundation::PWSTR Uname, uint32_t DomainSize, win32::Windows::Win32::Foundation::PWSTR Domain) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(UnameSize);
        ORBIT_TRACK_PARAM(Uname);
        ORBIT_TRACK_PARAM(DomainSize);
        ORBIT_TRACK_PARAM(Domain);

        auto win32_impl_result = g_api_table.DhcpServerQueryDnsRegCredentials(ServerIpAddress, UnameSize, Uname, DomainSize, Domain);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerSetDnsRegCredentials(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR Uname, win32::Windows::Win32::Foundation::PWSTR Domain, win32::Windows::Win32::Foundation::PWSTR Passwd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Uname);
        ORBIT_TRACK_PARAM(Domain);
        ORBIT_TRACK_PARAM(Passwd);

        auto win32_impl_result = g_api_table.DhcpServerSetDnsRegCredentials(ServerIpAddress, Uname, Domain, Passwd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerSetDnsRegCredentialsV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR Uname, win32::Windows::Win32::Foundation::PWSTR Domain, win32::Windows::Win32::Foundation::PWSTR Passwd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Uname);
        ORBIT_TRACK_PARAM(Domain);
        ORBIT_TRACK_PARAM(Passwd);

        auto win32_impl_result = g_api_table.DhcpServerSetDnsRegCredentialsV5(ServerIpAddress, Uname, Domain, Passwd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerBackupDatabase(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR Path) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Path);

        auto win32_impl_result = g_api_table.DhcpServerBackupDatabase(ServerIpAddress, Path);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerRestoreDatabase(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR Path) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Path);

        auto win32_impl_result = g_api_table.DhcpServerRestoreDatabase(ServerIpAddress, Path);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerSetConfigVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t FieldsToSet, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_VQ* ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(FieldsToSet);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerSetConfigVQ(ServerIpAddress, FieldsToSet, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerGetConfigVQ(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_VQ** ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerGetConfigVQ(ServerIpAddress, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetServerSpecificStrings(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_SPECIFIC_STRINGS** ServerSpecificStrings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ServerSpecificStrings);

        auto win32_impl_result = g_api_table.DhcpGetServerSpecificStrings(ServerIpAddress, ServerSpecificStrings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DhcpServerAuditlogParamsFree(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_VQ* ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConfigInfo);

        g_api_table.DhcpServerAuditlogParamsFree(ConfigInfo);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateSubnetV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO_V6* SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpCreateSubnetV6(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteSubnetV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FORCE_FLAG ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpDeleteSubnetV6(ServerIpAddress, SubnetAddress, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetsV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_IP_ARRAY** EnumInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetsV6(ServerIpAddress, ResumeHandle, PreferredMaximum, EnumInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddSubnetElementV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V6* AddElementInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(AddElementInfo);

        auto win32_impl_result = g_api_table.DhcpAddSubnetElementV6(ServerIpAddress, SubnetAddress, AddElementInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpRemoveSubnetElementV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_DATA_V6* RemoveElementInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FORCE_FLAG ForceFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(RemoveElementInfo);
        ORBIT_TRACK_PARAM(ForceFlag);

        auto win32_impl_result = g_api_table.DhcpRemoveSubnetElementV6(ServerIpAddress, SubnetAddress, RemoveElementInfo, ForceFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetElementsV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_TYPE_V6 EnumElementType, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_ELEMENT_INFO_ARRAY_V6** EnumElementInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(EnumElementType);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(EnumElementInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetElementsV6(ServerIpAddress, SubnetAddress, EnumElementType, ResumeHandle, PreferredMaximum, EnumElementInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetSubnetInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO_V6** SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpGetSubnetInfoV6(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumSubnetClientsV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_ARRAY_V6** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpEnumSubnetClientsV6(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerGetConfigV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_V6** ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerGetConfigV6(ServerIpAddress, ScopeInfo, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpServerSetConfigV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO6* ScopeInfo, uint32_t FieldsToSet, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SERVER_CONFIG_INFO_V6* ConfigInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(FieldsToSet);
        ORBIT_TRACK_PARAM(ConfigInfo);

        auto win32_impl_result = g_api_table.DhcpServerSetConfigV6(ServerIpAddress, ScopeInfo, FieldsToSet, ConfigInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetSubnetInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SUBNET_INFO_V6* SubnetInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(SubnetInfo);

        auto win32_impl_result = g_api_table.DhcpSetSubnetInfoV6(ServerIpAddress, SubnetAddress, SubnetInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetMibInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_MIB_INFO_V6** MibInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(MibInfo);

        auto win32_impl_result = g_api_table.DhcpGetMibInfoV6(ServerIpAddress, MibInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetServerBindingInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_BIND_ELEMENT_ARRAY** BindElementsInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(BindElementsInfo);

        auto win32_impl_result = g_api_table.DhcpGetServerBindingInfoV6(ServerIpAddress, Flags, BindElementsInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetServerBindingInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_BIND_ELEMENT_ARRAY* BindElementInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(BindElementInfo);

        auto win32_impl_result = g_api_table.DhcpSetServerBindingInfoV6(ServerIpAddress, Flags, BindElementInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetClientInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_V6* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpSetClientInfoV6(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetClientInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO_V6* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_V6** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpGetClientInfoV6(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteClientInfoV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO_V6* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpDeleteClientInfoV6(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpCreateClassV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO_V6* ClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ClassInfo);

        auto win32_impl_result = g_api_table.DhcpCreateClassV6(ServerIpAddress, ReservedMustBeZero, ClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpModifyClassV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO_V6* ClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ClassInfo);

        auto win32_impl_result = g_api_table.DhcpModifyClassV6(ServerIpAddress, ReservedMustBeZero, ClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpDeleteClassV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, win32::Windows::Win32::Foundation::PWSTR ClassName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ClassName);

        auto win32_impl_result = g_api_table.DhcpDeleteClassV6(ServerIpAddress, ReservedMustBeZero, ClassName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpEnumClassesV6(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ReservedMustBeZero, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLASS_INFO_ARRAY_V6** ClassInfoArray, uint32_t* nRead, uint32_t* nTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ReservedMustBeZero);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClassInfoArray);
        ORBIT_TRACK_PARAM(nRead);
        ORBIT_TRACK_PARAM(nTotal);

        auto win32_impl_result = g_api_table.DhcpEnumClassesV6(ServerIpAddress, ReservedMustBeZero, ResumeHandle, PreferredMaximum, ClassInfoArray, nRead, nTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpSetSubnetDelayOffer(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint16_t TimeDelayInMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(TimeDelayInMilliseconds);

        auto win32_impl_result = g_api_table.DhcpSetSubnetDelayOffer(ServerIpAddress, SubnetAddress, TimeDelayInMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetSubnetDelayOffer(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint16_t* TimeDelayInMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(TimeDelayInMilliseconds);

        auto win32_impl_result = g_api_table.DhcpGetSubnetDelayOffer(ServerIpAddress, SubnetAddress, TimeDelayInMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpGetMibInfoV5(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_MIB_INFO_V5** MibInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(MibInfo);

        auto win32_impl_result = g_api_table.DhcpGetMibInfoV5(ServerIpAddress, MibInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpAddSecurityGroup(win32::Windows::Win32::Foundation::PWSTR pServer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pServer);

        auto win32_impl_result = g_api_table.DhcpAddSecurityGroup(pServer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetOptionValue(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE** OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpV4GetOptionValue(ServerIpAddress, Flags, OptionID, PolicyName, VendorName, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4SetOptionValue(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionId, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_DATA* OptionValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionId);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValue);

        auto win32_impl_result = g_api_table.DhcpV4SetOptionValue(ServerIpAddress, Flags, OptionId, PolicyName, VendorName, ScopeInfo, OptionValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4SetOptionValues(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_VALUE_ARRAY* OptionValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(OptionValues);

        auto win32_impl_result = g_api_table.DhcpV4SetOptionValues(ServerIpAddress, Flags, PolicyName, VendorName, ScopeInfo, OptionValues);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4RemoveOptionValue(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, uint32_t OptionID, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(ScopeInfo);

        auto win32_impl_result = g_api_table.DhcpV4RemoveOptionValue(ServerIpAddress, Flags, OptionID, PolicyName, VendorName, ScopeInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetAllOptionValues(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_OPTION_SCOPE_INFO* ScopeInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_ALL_OPTION_VALUES_PB** Values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ScopeInfo);
        ORBIT_TRACK_PARAM(Values);

        auto win32_impl_result = g_api_table.DhcpV4GetAllOptionValues(ServerIpAddress, Flags, ScopeInfo, Values);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverCreateRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP* pRelationship) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pRelationship);

        auto win32_impl_result = g_api_table.DhcpV4FailoverCreateRelationship(ServerIpAddress, pRelationship);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverSetRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t Flags, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP* pRelationship) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pRelationship);

        auto win32_impl_result = g_api_table.DhcpV4FailoverSetRelationship(ServerIpAddress, Flags, pRelationship);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverDeleteRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR pRelationshipName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pRelationshipName);

        auto win32_impl_result = g_api_table.DhcpV4FailoverDeleteRelationship(ServerIpAddress, pRelationshipName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverGetRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR pRelationshipName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP** pRelationship) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pRelationshipName);
        ORBIT_TRACK_PARAM(pRelationship);

        auto win32_impl_result = g_api_table.DhcpV4FailoverGetRelationship(ServerIpAddress, pRelationshipName, pRelationship);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverEnumRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP_ARRAY** pRelationship, uint32_t* RelationshipRead, uint32_t* RelationshipTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(pRelationship);
        ORBIT_TRACK_PARAM(RelationshipRead);
        ORBIT_TRACK_PARAM(RelationshipTotal);

        auto win32_impl_result = g_api_table.DhcpV4FailoverEnumRelationship(ServerIpAddress, ResumeHandle, PreferredMaximum, pRelationship, RelationshipRead, RelationshipTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverAddScopeToRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP* pRelationship) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pRelationship);

        auto win32_impl_result = g_api_table.DhcpV4FailoverAddScopeToRelationship(ServerIpAddress, pRelationship);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverDeleteScopeFromRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP* pRelationship) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pRelationship);

        auto win32_impl_result = g_api_table.DhcpV4FailoverDeleteScopeFromRelationship(ServerIpAddress, pRelationship);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverGetScopeRelationship(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ScopeId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_RELATIONSHIP** pRelationship) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(pRelationship);

        auto win32_impl_result = g_api_table.DhcpV4FailoverGetScopeRelationship(ServerIpAddress, ScopeId, pRelationship);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverGetScopeStatistics(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ScopeId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_FAILOVER_STATISTICS** pStats) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(pStats);

        auto win32_impl_result = g_api_table.DhcpV4FailoverGetScopeStatistics(ServerIpAddress, ScopeId, pStats);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverGetClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV4_FAILOVER_CLIENT_INFO** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpV4FailoverGetClientInfo(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverGetSystemTime(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* pTime, uint32_t* pMaxAllowedDeltaTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pTime);
        ORBIT_TRACK_PARAM(pMaxAllowedDeltaTime);

        auto win32_impl_result = g_api_table.DhcpV4FailoverGetSystemTime(ServerIpAddress, pTime, pMaxAllowedDeltaTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverGetAddressStatus(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* pStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(pStatus);

        auto win32_impl_result = g_api_table.DhcpV4FailoverGetAddressStatus(ServerIpAddress, SubnetAddress, pStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4FailoverTriggerAddrAllocation(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::PWSTR pFailRelName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pFailRelName);

        auto win32_impl_result = g_api_table.DhcpV4FailoverTriggerAddrAllocation(ServerIpAddress, pFailRelName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprCreateV4Policy(win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t Subnet, uint32_t ProcessingOrder, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POL_LOGIC_OPER RootOperator, win32::Windows::Win32::Foundation::PWSTR Description, win32::Windows::Win32::Foundation::BOOL Enabled, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY** Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(Subnet);
        ORBIT_TRACK_PARAM(ProcessingOrder);
        ORBIT_TRACK_PARAM(RootOperator);
        ORBIT_TRACK_PARAM(Description);
        ORBIT_TRACK_PARAM(Enabled);
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpHlprCreateV4Policy(PolicyName, fGlobalPolicy, Subnet, ProcessingOrder, RootOperator, Description, Enabled, Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprCreateV4PolicyEx(win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t Subnet, uint32_t ProcessingOrder, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POL_LOGIC_OPER RootOperator, win32::Windows::Win32::Foundation::PWSTR Description, win32::Windows::Win32::Foundation::BOOL Enabled, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX** Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(Subnet);
        ORBIT_TRACK_PARAM(ProcessingOrder);
        ORBIT_TRACK_PARAM(RootOperator);
        ORBIT_TRACK_PARAM(Description);
        ORBIT_TRACK_PARAM(Enabled);
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpHlprCreateV4PolicyEx(PolicyName, fGlobalPolicy, Subnet, ProcessingOrder, RootOperator, Description, Enabled, Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprAddV4PolicyExpr(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy, uint32_t ParentExpr, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POL_LOGIC_OPER Operator, uint32_t* ExprIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);
        ORBIT_TRACK_PARAM(ParentExpr);
        ORBIT_TRACK_PARAM(Operator);
        ORBIT_TRACK_PARAM(ExprIndex);

        auto win32_impl_result = g_api_table.DhcpHlprAddV4PolicyExpr(Policy, ParentExpr, Operator, ExprIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprAddV4PolicyCondition(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy, uint32_t ParentExpr, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POL_ATTR_TYPE Type, uint32_t OptionID, uint32_t SubOptionID, win32::Windows::Win32::Foundation::PWSTR VendorName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POL_COMPARATOR Operator, uint8_t* Value, uint32_t ValueLength, uint32_t* ConditionIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);
        ORBIT_TRACK_PARAM(ParentExpr);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(OptionID);
        ORBIT_TRACK_PARAM(SubOptionID);
        ORBIT_TRACK_PARAM(VendorName);
        ORBIT_TRACK_PARAM(Operator);
        ORBIT_TRACK_PARAM(Value);
        ORBIT_TRACK_PARAM(ValueLength);
        ORBIT_TRACK_PARAM(ConditionIndex);

        auto win32_impl_result = g_api_table.DhcpHlprAddV4PolicyCondition(Policy, ParentExpr, Type, OptionID, SubOptionID, VendorName, Operator, Value, ValueLength, ConditionIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprAddV4PolicyRange(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IP_RANGE* Range) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);
        ORBIT_TRACK_PARAM(Range);

        auto win32_impl_result = g_api_table.DhcpHlprAddV4PolicyRange(Policy, Range);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprResetV4PolicyExpr(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpHlprResetV4PolicyExpr(Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprModifyV4PolicyExpr(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POL_LOGIC_OPER Operator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);
        ORBIT_TRACK_PARAM(Operator);

        auto win32_impl_result = g_api_table.DhcpHlprModifyV4PolicyExpr(Policy, Operator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DhcpHlprFreeV4Policy(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);

        g_api_table.DhcpHlprFreeV4Policy(Policy);
        
    }

    void __stdcall ORBIT_IMPL_DhcpHlprFreeV4PolicyArray(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_ARRAY* PolicyArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyArray);

        g_api_table.DhcpHlprFreeV4PolicyArray(PolicyArray);
        
    }

    void __stdcall ORBIT_IMPL_DhcpHlprFreeV4PolicyEx(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX* PolicyEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyEx);

        g_api_table.DhcpHlprFreeV4PolicyEx(PolicyEx);
        
    }

    void __stdcall ORBIT_IMPL_DhcpHlprFreeV4PolicyExArray(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX_ARRAY* PolicyExArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyExArray);

        g_api_table.DhcpHlprFreeV4PolicyExArray(PolicyExArray);
        
    }

    void __stdcall ORBIT_IMPL_DhcpHlprFreeV4DhcpProperty(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_PROPERTY* Property) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Property);

        g_api_table.DhcpHlprFreeV4DhcpProperty(Property);
        
    }

    void __stdcall ORBIT_IMPL_DhcpHlprFreeV4DhcpPropertyArray(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_PROPERTY_ARRAY* PropertyArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PropertyArray);

        g_api_table.DhcpHlprFreeV4DhcpPropertyArray(PropertyArray);
        
    }

    win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_PROPERTY* __stdcall ORBIT_IMPL_DhcpHlprFindV4DhcpProperty(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_PROPERTY_ARRAY* PropertyArray, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_PROPERTY_ID ID, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_PROPERTY_TYPE Type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PropertyArray);
        ORBIT_TRACK_PARAM(ID);
        ORBIT_TRACK_PARAM(Type);

        auto win32_impl_result = g_api_table.DhcpHlprFindV4DhcpProperty(PropertyArray, ID, Type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DhcpHlprIsV4PolicySingleUC(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpHlprIsV4PolicySingleUC(Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4QueryPolicyEnforcement(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::BOOL* Enabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(Enabled);

        auto win32_impl_result = g_api_table.DhcpV4QueryPolicyEnforcement(ServerIpAddress, fGlobalPolicy, SubnetAddress, Enabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4SetPolicyEnforcement(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::BOOL Enable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(Enable);

        auto win32_impl_result = g_api_table.DhcpV4SetPolicyEnforcement(ServerIpAddress, fGlobalPolicy, SubnetAddress, Enable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DhcpHlprIsV4PolicyWellFormed(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* pPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPolicy);

        auto win32_impl_result = g_api_table.DhcpHlprIsV4PolicyWellFormed(pPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpHlprIsV4PolicyValid(win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* pPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPolicy);

        auto win32_impl_result = g_api_table.DhcpHlprIsV4PolicyValid(pPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4CreatePolicy(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* pPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(pPolicy);

        auto win32_impl_result = g_api_table.DhcpV4CreatePolicy(ServerIpAddress, pPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetPolicy(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY** Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpV4GetPolicy(ServerIpAddress, fGlobalPolicy, SubnetAddress, PolicyName, Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4SetPolicy(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t FieldsModified, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY* Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(FieldsModified);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpV4SetPolicy(ServerIpAddress, FieldsModified, fGlobalPolicy, SubnetAddress, PolicyName, Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4DeletePolicy(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);

        auto win32_impl_result = g_api_table.DhcpV4DeletePolicy(ServerIpAddress, fGlobalPolicy, SubnetAddress, PolicyName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4EnumPolicies(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::Foundation::BOOL fGlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_ARRAY** EnumInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(fGlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(EnumInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpV4EnumPolicies(ServerIpAddress, ResumeHandle, PreferredMaximum, fGlobalPolicy, SubnetAddress, EnumInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4AddPolicyRange(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IP_RANGE* Range) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(Range);

        auto win32_impl_result = g_api_table.DhcpV4AddPolicyRange(ServerIpAddress, SubnetAddress, PolicyName, Range);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4RemovePolicyRange(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IP_RANGE* Range) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(Range);

        auto win32_impl_result = g_api_table.DhcpV4RemovePolicyRange(ServerIpAddress, SubnetAddress, PolicyName, Range);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV6SetStatelessStoreParams(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL fServerLevel, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, uint32_t FieldModified, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_STATELESS_PARAMS* Params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(fServerLevel);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(FieldModified);
        ORBIT_TRACK_PARAM(Params);

        auto win32_impl_result = g_api_table.DhcpV6SetStatelessStoreParams(ServerIpAddress, fServerLevel, SubnetAddress, FieldModified, Params);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV6GetStatelessStoreParams(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL fServerLevel, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_STATELESS_PARAMS** Params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(fServerLevel);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(Params);

        auto win32_impl_result = g_api_table.DhcpV6GetStatelessStoreParams(ServerIpAddress, fServerLevel, SubnetAddress, Params);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV6GetStatelessStatistics(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_STATELESS_STATS** StatelessStats) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(StatelessStats);

        auto win32_impl_result = g_api_table.DhcpV6GetStatelessStatistics(ServerIpAddress, StatelessStats);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4CreateClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_PB* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpV4CreateClientInfo(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4EnumSubnetClients(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_PB_ARRAY** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpV4EnumSubnetClients(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_PB** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpV4GetClientInfo(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV6CreateClientInfo(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_V6* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpV6CreateClientInfo(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetFreeIPAddress(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t ScopeId, uint32_t StartIP, uint32_t EndIP, uint32_t NumFreeAddrReq, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IP_ARRAY** IPAddrList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(StartIP);
        ORBIT_TRACK_PARAM(EndIP);
        ORBIT_TRACK_PARAM(NumFreeAddrReq);
        ORBIT_TRACK_PARAM(IPAddrList);

        auto win32_impl_result = g_api_table.DhcpV4GetFreeIPAddress(ServerIpAddress, ScopeId, StartIP, EndIP, NumFreeAddrReq, IPAddrList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV6GetFreeIPAddress(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS ScopeId, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS StartIP, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_IPV6_ADDRESS EndIP, uint32_t NumFreeAddrReq, win32::Windows::Win32::NetworkManagement::Dhcp::DHCPV6_IP_ARRAY** IPAddrList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(StartIP);
        ORBIT_TRACK_PARAM(EndIP);
        ORBIT_TRACK_PARAM(NumFreeAddrReq);
        ORBIT_TRACK_PARAM(IPAddrList);

        auto win32_impl_result = g_api_table.DhcpV6GetFreeIPAddress(ServerIpAddress, ScopeId, StartIP, EndIP, NumFreeAddrReq, IPAddrList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4CreateClientInfoEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_EX* ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpV4CreateClientInfoEx(ServerIpAddress, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4EnumSubnetClientsEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t SubnetAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_EX_ARRAY** ClientInfo, uint32_t* ClientsRead, uint32_t* ClientsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(ClientInfo);
        ORBIT_TRACK_PARAM(ClientsRead);
        ORBIT_TRACK_PARAM(ClientsTotal);

        auto win32_impl_result = g_api_table.DhcpV4EnumSubnetClientsEx(ServerIpAddress, SubnetAddress, ResumeHandle, PreferredMaximum, ClientInfo, ClientsRead, ClientsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetClientInfoEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_SEARCH_INFO* SearchInfo, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_CLIENT_INFO_EX** ClientInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(SearchInfo);
        ORBIT_TRACK_PARAM(ClientInfo);

        auto win32_impl_result = g_api_table.DhcpV4GetClientInfoEx(ServerIpAddress, SearchInfo, ClientInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4CreatePolicyEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX* PolicyEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(PolicyEx);

        auto win32_impl_result = g_api_table.DhcpV4CreatePolicyEx(ServerIpAddress, PolicyEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4GetPolicyEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, win32::Windows::Win32::Foundation::BOOL GlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX** Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(GlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpV4GetPolicyEx(ServerIpAddress, GlobalPolicy, SubnetAddress, PolicyName, Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4SetPolicyEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t FieldsModified, win32::Windows::Win32::Foundation::BOOL GlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::Foundation::PWSTR PolicyName, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX* Policy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(FieldsModified);
        ORBIT_TRACK_PARAM(GlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(PolicyName);
        ORBIT_TRACK_PARAM(Policy);

        auto win32_impl_result = g_api_table.DhcpV4SetPolicyEx(ServerIpAddress, FieldsModified, GlobalPolicy, SubnetAddress, PolicyName, Policy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DhcpV4EnumPoliciesEx(win32::Windows::Win32::Foundation::PWSTR ServerIpAddress, uint32_t* ResumeHandle, uint32_t PreferredMaximum, win32::Windows::Win32::Foundation::BOOL GlobalPolicy, uint32_t SubnetAddress, win32::Windows::Win32::NetworkManagement::Dhcp::DHCP_POLICY_EX_ARRAY** EnumInfo, uint32_t* ElementsRead, uint32_t* ElementsTotal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerIpAddress);
        ORBIT_TRACK_PARAM(ResumeHandle);
        ORBIT_TRACK_PARAM(PreferredMaximum);
        ORBIT_TRACK_PARAM(GlobalPolicy);
        ORBIT_TRACK_PARAM(SubnetAddress);
        ORBIT_TRACK_PARAM(EnumInfo);
        ORBIT_TRACK_PARAM(ElementsRead);
        ORBIT_TRACK_PARAM(ElementsTotal);

        auto win32_impl_result = g_api_table.DhcpV4EnumPoliciesEx(ServerIpAddress, ResumeHandle, PreferredMaximum, GlobalPolicy, SubnetAddress, EnumInfo, ElementsRead, ElementsTotal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
