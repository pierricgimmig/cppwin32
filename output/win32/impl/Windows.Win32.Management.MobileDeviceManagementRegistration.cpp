// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Management_MobileDeviceManagementRegistration_2_H
#define WIN32_Windows_Win32_Management_MobileDeviceManagementRegistration_2_H
#include "win32/Windows.Win32.Management.MobileDeviceManagementRegistration.h"
#include "win32/impl/Windows.Win32.Management.MobileDeviceManagementRegistration.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Management::MobileDeviceManagementRegistration
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetDeviceRegistrationInfo(win32::Windows::Win32::Management::MobileDeviceManagementRegistration::REGISTRATION_INFORMATION_CLASS DeviceInformationClass, void** ppDeviceRegistrationInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DeviceInformationClass);
        ORBIT_TRACK_PARAM(ppDeviceRegistrationInfo);

        auto win32_impl_result = g_api_table.GetDeviceRegistrationInfo(DeviceInformationClass, ppDeviceRegistrationInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_IsDeviceRegisteredWithManagement(win32::Windows::Win32::Foundation::BOOL* pfIsDeviceRegisteredWithManagement, uint32_t cchUPN, win32::Windows::Win32::Foundation::PWSTR pszUPN) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfIsDeviceRegisteredWithManagement);
        ORBIT_TRACK_PARAM(cchUPN);
        ORBIT_TRACK_PARAM(pszUPN);

        auto win32_impl_result = g_api_table.IsDeviceRegisteredWithManagement(pfIsDeviceRegisteredWithManagement, cchUPN, pszUPN);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_IsManagementRegistrationAllowed(win32::Windows::Win32::Foundation::BOOL* pfIsManagementRegistrationAllowed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfIsManagementRegistrationAllowed);

        auto win32_impl_result = g_api_table.IsManagementRegistrationAllowed(pfIsManagementRegistrationAllowed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_IsMdmUxWithoutAadAllowed(win32::Windows::Win32::Foundation::BOOL* isEnrollmentAllowed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(isEnrollmentAllowed);

        auto win32_impl_result = g_api_table.IsMdmUxWithoutAadAllowed(isEnrollmentAllowed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetManagedExternally(win32::Windows::Win32::Foundation::BOOL IsManagedExternally) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IsManagedExternally);

        auto win32_impl_result = g_api_table.SetManagedExternally(IsManagedExternally);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DiscoverManagementService(win32::Windows::Win32::Foundation::PWSTR pszUPN, win32::Windows::Win32::Management::MobileDeviceManagementRegistration::MANAGEMENT_SERVICE_INFO** ppMgmtInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszUPN);
        ORBIT_TRACK_PARAM(ppMgmtInfo);

        auto win32_impl_result = g_api_table.DiscoverManagementService(pszUPN, ppMgmtInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterDeviceWithManagementUsingAADCredentials(win32::Windows::Win32::Foundation::HANDLE UserToken) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UserToken);

        auto win32_impl_result = g_api_table.RegisterDeviceWithManagementUsingAADCredentials(UserToken);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterDeviceWithManagementUsingAADDeviceCredentials() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.RegisterDeviceWithManagementUsingAADDeviceCredentials();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterDeviceWithManagementUsingAADDeviceCredentials2(win32::Windows::Win32::Foundation::PWSTR MDMApplicationID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MDMApplicationID);

        auto win32_impl_result = g_api_table.RegisterDeviceWithManagementUsingAADDeviceCredentials2(MDMApplicationID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterDeviceWithManagement(win32::Windows::Win32::Foundation::PWSTR pszUPN, win32::Windows::Win32::Foundation::PWSTR ppszMDMServiceUri, win32::Windows::Win32::Foundation::PWSTR ppzsAccessToken) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszUPN);
        ORBIT_TRACK_PARAM(ppszMDMServiceUri);
        ORBIT_TRACK_PARAM(ppzsAccessToken);

        auto win32_impl_result = g_api_table.RegisterDeviceWithManagement(pszUPN, ppszMDMServiceUri, ppzsAccessToken);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_UnregisterDeviceWithManagement(win32::Windows::Win32::Foundation::PWSTR enrollmentID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(enrollmentID);

        auto win32_impl_result = g_api_table.UnregisterDeviceWithManagement(enrollmentID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetDeviceManagementConfigInfo(win32::Windows::Win32::Foundation::PWSTR providerID, uint32_t* configStringBufferLength, win32::Windows::Win32::Foundation::PWSTR configString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(providerID);
        ORBIT_TRACK_PARAM(configStringBufferLength);
        ORBIT_TRACK_PARAM(configString);

        auto win32_impl_result = g_api_table.GetDeviceManagementConfigInfo(providerID, configStringBufferLength, configString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetDeviceManagementConfigInfo(win32::Windows::Win32::Foundation::PWSTR providerID, win32::Windows::Win32::Foundation::PWSTR configString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(providerID);
        ORBIT_TRACK_PARAM(configString);

        auto win32_impl_result = g_api_table.SetDeviceManagementConfigInfo(providerID, configString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetManagementAppHyperlink(uint32_t cchHyperlink, win32::Windows::Win32::Foundation::PWSTR pszHyperlink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cchHyperlink);
        ORBIT_TRACK_PARAM(pszHyperlink);

        auto win32_impl_result = g_api_table.GetManagementAppHyperlink(cchHyperlink, pszHyperlink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DiscoverManagementServiceEx(win32::Windows::Win32::Foundation::PWSTR pszUPN, win32::Windows::Win32::Foundation::PWSTR pszDiscoveryServiceCandidate, win32::Windows::Win32::Management::MobileDeviceManagementRegistration::MANAGEMENT_SERVICE_INFO** ppMgmtInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszUPN);
        ORBIT_TRACK_PARAM(pszDiscoveryServiceCandidate);
        ORBIT_TRACK_PARAM(ppMgmtInfo);

        auto win32_impl_result = g_api_table.DiscoverManagementServiceEx(pszUPN, pszDiscoveryServiceCandidate, ppMgmtInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_RegisterDeviceWithLocalManagement(win32::Windows::Win32::Foundation::BOOL* alreadyRegistered) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(alreadyRegistered);

        auto win32_impl_result = g_api_table.RegisterDeviceWithLocalManagement(alreadyRegistered);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ApplyLocalManagementSyncML(win32::Windows::Win32::Foundation::PWSTR syncMLRequest, win32::Windows::Win32::Foundation::PWSTR* syncMLResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(syncMLRequest);
        ORBIT_TRACK_PARAM(syncMLResult);

        auto win32_impl_result = g_api_table.ApplyLocalManagementSyncML(syncMLRequest, syncMLResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_UnregisterDeviceWithLocalManagement() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.UnregisterDeviceWithLocalManagement();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
