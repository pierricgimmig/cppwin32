// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Memory_0_H
#define WIN32_Windows_Win32_System_Memory_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOLEAN;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Memory
{
#pragma region enums
    enum class FILE_MAP : uint32_t
    {
        FILE_MAP_WRITE = 0x2,
        FILE_MAP_READ = 0x4,
        FILE_MAP_ALL_ACCESS = 0xf001f,
        FILE_MAP_EXECUTE = 0x20,
        FILE_MAP_COPY = 0x1,
        FILE_MAP_RESERVE = 0x80000000,
        FILE_MAP_TARGETS_INVALID = 0x40000000,
        FILE_MAP_LARGE_PAGES = 0x20000000,
    };
    enum class GLOBAL_ALLOC_FLAGS : uint32_t
    {
        GHND = 0x42,
        GMEM_FIXED = 0x0,
        GMEM_MOVEABLE = 0x2,
        GMEM_ZEROINIT = 0x40,
        GPTR = 0x40,
    };
    enum class HEAP_FLAGS : uint32_t
    {
        HEAP_NONE = 0x0,
        HEAP_NO_SERIALIZE = 0x1,
        HEAP_GROWABLE = 0x2,
        HEAP_GENERATE_EXCEPTIONS = 0x4,
        HEAP_ZERO_MEMORY = 0x8,
        HEAP_REALLOC_IN_PLACE_ONLY = 0x10,
        HEAP_TAIL_CHECKING_ENABLED = 0x20,
        HEAP_FREE_CHECKING_ENABLED = 0x40,
        HEAP_DISABLE_COALESCE_ON_FREE = 0x80,
        HEAP_CREATE_ALIGN_16 = 0x10000,
        HEAP_CREATE_ENABLE_TRACING = 0x20000,
        HEAP_CREATE_ENABLE_EXECUTE = 0x40000,
        HEAP_MAXIMUM_TAG = 0xfff,
        HEAP_PSEUDO_TAG_FLAG = 0x8000,
        HEAP_TAG_SHIFT = 0x12,
        HEAP_CREATE_SEGMENT_HEAP = 0x100,
        HEAP_CREATE_HARDENED = 0x200,
    };
    enum class LOCAL_ALLOC_FLAGS : uint32_t
    {
        LHND = 0x42,
        LMEM_FIXED = 0x0,
        LMEM_MOVEABLE = 0x2,
        LMEM_ZEROINIT = 0x40,
        LPTR = 0x40,
        NONZEROLHND = 0x2,
        NONZEROLPTR = 0x0,
    };
    enum class MEMORY_RESOURCE_NOTIFICATION_TYPE : int32_t
    {
        LowMemoryResourceNotification = 0,
        HighMemoryResourceNotification = 1,
    };
    enum class OFFER_PRIORITY : int32_t
    {
        VmOfferPriorityVeryLow = 1,
        VmOfferPriorityLow = 2,
        VmOfferPriorityBelowNormal = 3,
        VmOfferPriorityNormal = 4,
    };
    enum class PAGE_PROTECTION_FLAGS : uint32_t
    {
        PAGE_NOACCESS = 0x1,
        PAGE_READONLY = 0x2,
        PAGE_READWRITE = 0x4,
        PAGE_WRITECOPY = 0x8,
        PAGE_EXECUTE = 0x10,
        PAGE_EXECUTE_READ = 0x20,
        PAGE_EXECUTE_READWRITE = 0x40,
        PAGE_EXECUTE_WRITECOPY = 0x80,
        PAGE_GUARD = 0x100,
        PAGE_NOCACHE = 0x200,
        PAGE_WRITECOMBINE = 0x400,
        PAGE_GRAPHICS_NOACCESS = 0x800,
        PAGE_GRAPHICS_READONLY = 0x1000,
        PAGE_GRAPHICS_READWRITE = 0x2000,
        PAGE_GRAPHICS_EXECUTE = 0x4000,
        PAGE_GRAPHICS_EXECUTE_READ = 0x8000,
        PAGE_GRAPHICS_EXECUTE_READWRITE = 0x10000,
        PAGE_GRAPHICS_COHERENT = 0x20000,
        PAGE_GRAPHICS_NOCACHE = 0x40000,
        PAGE_ENCLAVE_THREAD_CONTROL = 0x80000000,
        PAGE_REVERT_TO_FILE_MAP = 0x80000000,
        PAGE_TARGETS_NO_UPDATE = 0x40000000,
        PAGE_TARGETS_INVALID = 0x40000000,
        PAGE_ENCLAVE_UNVALIDATED = 0x20000000,
        PAGE_ENCLAVE_MASK = 0x10000000,
        PAGE_ENCLAVE_DECOMMIT = 0x10000000,
        PAGE_ENCLAVE_SS_FIRST = 0x10000001,
        PAGE_ENCLAVE_SS_REST = 0x10000002,
        SEC_PARTITION_OWNER_HANDLE = 0x40000,
        SEC_64K_PAGES = 0x80000,
        SEC_FILE = 0x800000,
        SEC_IMAGE = 0x1000000,
        SEC_PROTECTED_IMAGE = 0x2000000,
        SEC_RESERVE = 0x4000000,
        SEC_COMMIT = 0x8000000,
        SEC_NOCACHE = 0x10000000,
        SEC_WRITECOMBINE = 0x40000000,
        SEC_LARGE_PAGES = 0x80000000,
        SEC_IMAGE_NO_EXECUTE = 0x11000000,
    };
    enum class PAGE_TYPE : uint32_t
    {
        MEM_PRIVATE = 0x20000,
        MEM_MAPPED = 0x40000,
        MEM_IMAGE = 0x1000000,
    };
    enum class UNMAP_VIEW_OF_FILE_FLAGS : uint32_t
    {
        MEM_UNMAP_NONE = 0x0,
        MEM_UNMAP_WITH_TRANSIENT_BOOST = 0x1,
        MEM_PRESERVE_PLACEHOLDER = 0x2,
    };
    enum class VIRTUAL_ALLOCATION_TYPE : uint32_t
    {
        MEM_COMMIT = 0x1000,
        MEM_RESERVE = 0x2000,
        MEM_RESET = 0x80000,
        MEM_RESET_UNDO = 0x1000000,
        MEM_REPLACE_PLACEHOLDER = 0x4000,
        MEM_LARGE_PAGES = 0x20000000,
        MEM_RESERVE_PLACEHOLDER = 0x40000,
        MEM_FREE = 0x10000,
    };
    enum class VIRTUAL_FREE_TYPE : uint32_t
    {
        MEM_DECOMMIT = 0x4000,
        MEM_RELEASE = 0x8000,
    };
    enum class WIN32_MEMORY_INFORMATION_CLASS : int32_t
    {
        MemoryRegionInfo = 0,
    };
    enum class WIN32_MEMORY_PARTITION_INFORMATION_CLASS : int32_t
    {
        MemoryPartitionInfo = 0,
        MemoryPartitionDedicatedMemoryInfo = 1,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct HEAP_SUMMARY;
    struct HeapHandle;
    struct MEMORY_BASIC_INFORMATION;
    struct MEMORY_BASIC_INFORMATION32;
    struct MEMORY_BASIC_INFORMATION64;
    struct WIN32_MEMORY_PARTITION_INFORMATION;
    struct WIN32_MEMORY_RANGE_ENTRY;
    struct WIN32_MEMORY_REGION_INFORMATION;
#pragma endregion forward_declarations

#pragma region delegates
    using PBAD_MEMORY_CALLBACK_ROUTINE = void __stdcall();
    using PSECURE_MEMORY_CACHE_CALLBACK = Windows::Win32::Foundation::BOOLEAN __stdcall(void*, size_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
