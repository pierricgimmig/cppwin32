// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Performance_HardwareCounterProfiling_2_H
#define WIN32_Windows_Win32_System_Performance_HardwareCounterProfiling_2_H
#include "win32/Windows.Win32.System.Performance.HardwareCounterProfiling.h"
#include "win32/impl/Windows.Win32.System.Performance.HardwareCounterProfiling.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Performance::HardwareCounterProfiling
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_EnableThreadProfiling(win32::Windows::Win32::Foundation::HANDLE ThreadHandle, uint32_t Flags, uint64_t HardwareCounters, win32::Windows::Win32::Foundation::HANDLE* PerformanceDataHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ThreadHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(HardwareCounters);
        ORBIT_TRACK_PARAM(PerformanceDataHandle);

        auto win32_impl_result = g_api_table.EnableThreadProfiling(ThreadHandle, Flags, HardwareCounters, PerformanceDataHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DisableThreadProfiling(win32::Windows::Win32::Foundation::HANDLE PerformanceDataHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PerformanceDataHandle);

        auto win32_impl_result = g_api_table.DisableThreadProfiling(PerformanceDataHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryThreadProfiling(win32::Windows::Win32::Foundation::HANDLE ThreadHandle, win32::Windows::Win32::Foundation::BOOLEAN* Enabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ThreadHandle);
        ORBIT_TRACK_PARAM(Enabled);

        auto win32_impl_result = g_api_table.QueryThreadProfiling(ThreadHandle, Enabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReadThreadProfilingData(win32::Windows::Win32::Foundation::HANDLE PerformanceDataHandle, uint32_t Flags, win32::Windows::Win32::System::Performance::HardwareCounterProfiling::PERFORMANCE_DATA* PerformanceData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PerformanceDataHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(PerformanceData);

        auto win32_impl_result = g_api_table.ReadThreadProfilingData(PerformanceDataHandle, Flags, PerformanceData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
