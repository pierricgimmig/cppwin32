// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_AddressBook_0_H
#define WIN32_Windows_Win32_System_AddressBook_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HRESULT;
    struct HWND;
    struct PSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Com
{
    struct IStream;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::AddressBook
{
#pragma region enums
    enum class Gender : int32_t
    {
        genderUnspecified = 0,
        genderFemale = 1,
        genderMale = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ADRENTRY;
    struct ADRLIST;
    struct ADRPARM;
    struct DTBLBUTTON;
    struct DTBLCHECKBOX;
    struct DTBLCOMBOBOX;
    struct DTBLDDLBX;
    struct DTBLEDIT;
    struct DTBLGROUPBOX;
    struct DTBLLABEL;
    struct DTBLLBX;
    struct DTBLMVDDLBX;
    struct DTBLMVLISTBOX;
    struct DTBLPAGE;
    struct DTBLRADIOBUTTON;
    struct DTCTL;
    struct DTPAGE;
    struct ENTRYID;
    struct ERROR_NOTIFICATION;
    struct EXTENDED_NOTIFICATION;
    struct FLATENTRY;
    struct FLATENTRYLIST;
    struct FLATMTSIDLIST;
    struct MAPIERROR;
    struct MAPINAMEID;
    struct MAPIUID;
    struct MTSID;
    struct NEWMAIL_NOTIFICATION;
    struct NOTIFICATION;
    struct NOTIFKEY;
    struct OBJECT_NOTIFICATION;
    struct SAndRestriction;
    struct SAppTimeArray;
    struct SBinary;
    struct SBinaryArray;
    struct SBitMaskRestriction;
    struct SCommentRestriction;
    struct SComparePropsRestriction;
    struct SContentRestriction;
    struct SCurrencyArray;
    struct SDateTimeArray;
    struct SDoubleArray;
    struct SExistRestriction;
    struct SGuidArray;
    struct SLPSTRArray;
    struct SLargeIntegerArray;
    struct SLongArray;
    struct SNotRestriction;
    struct SOrRestriction;
    struct SPropProblem;
    struct SPropProblemArray;
    struct SPropTagArray;
    struct SPropValue;
    struct SPropertyRestriction;
    struct SRealArray;
    struct SRestriction;
    struct SRow;
    struct SRowSet;
    struct SShortArray;
    struct SSizeRestriction;
    struct SSortOrder;
    struct SSortOrderSet;
    struct SSubRestriction;
    struct STATUS_OBJECT_NOTIFICATION;
    struct SWStringArray;
    struct TABLE_NOTIFICATION;
    struct WABEXTDISPLAY;
    struct WABIMPORTPARAM;
    struct WAB_PARAM;
    union _PV;
    struct _WABACTIONITEM;
    struct _flaglist;
    struct IABContainer;
    struct IAddrBook;
    struct IAttach;
    struct IDistList;
    struct IMAPIAdviseSink;
    struct IMAPIContainer;
    struct IMAPIControl;
    struct IMAPIFolder;
    struct IMAPIProgress;
    struct IMAPIProp;
    struct IMAPIStatus;
    struct IMAPITable;
    struct IMailUser;
    struct IMessage;
    struct IMsgStore;
    struct IProfSect;
    struct IPropData;
    struct IProviderAdmin;
    struct ITableData;
    struct IWABExtInit;
    struct IWABOBJECT_;
    struct IWABObject;
#pragma endregion forward_declarations

#pragma region delegates
    using LPALLOCATEBUFFER = int32_t __stdcall(uint32_t, void**);
    using LPALLOCATEMORE = int32_t __stdcall(uint32_t, void*, void**);
    using LPFREEBUFFER = uint32_t __stdcall(void*);
    using LPNOTIFCALLBACK = int32_t __stdcall(void*, uint32_t, Windows::Win32::System::AddressBook::NOTIFICATION*);
    using LPFNABSDI = Windows::Win32::Foundation::BOOL __stdcall(size_t, void*);
    using LPFNDISMISS = void __stdcall(size_t, void*);
    using LPFNBUTTON = int32_t __stdcall(size_t, void*, uint32_t, Windows::Win32::System::AddressBook::ENTRYID*, uint32_t);
    using CALLERRELEASE = void __stdcall(uint32_t, Windows::Win32::System::AddressBook::ITableData*, Windows::Win32::System::AddressBook::IMAPITable*);
    using FNIDLE = Windows::Win32::Foundation::BOOL __stdcall(void*);
    using PFNIDLE = Windows::Win32::Foundation::BOOL __stdcall();
    using LPOPENSTREAMONFILE = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::LPALLOCATEBUFFER*, Windows::Win32::System::AddressBook::LPFREEBUFFER*, uint32_t, int8_t*, int8_t*, Windows::Win32::System::Com::IStream**);
    using LPDISPATCHNOTIFICATIONS = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t);
    using LPCREATECONVERSATIONINDEX = int32_t __stdcall(uint32_t, uint8_t*, uint32_t*, uint8_t**);
    using IWABOBJECT_QueryInterface_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(::win32::guid*, void**);
    using IWABOBJECT_AddRef_METHOD = uint32_t __stdcall();
    using IWABOBJECT_Release_METHOD = uint32_t __stdcall();
    using IWABOBJECT_GetLastError_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HRESULT, uint32_t, Windows::Win32::System::AddressBook::MAPIERROR**);
    using IWABOBJECT_AllocateBuffer_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, void**);
    using IWABOBJECT_AllocateMore_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, void*, void**);
    using IWABOBJECT_FreeBuffer_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(void*);
    using IWABOBJECT_Backup_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::PSTR);
    using IWABOBJECT_Import_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::PSTR);
    using IWABOBJECT_Find_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, Windows::Win32::Foundation::HWND);
    using IWABOBJECT_VCardDisplay_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, Windows::Win32::Foundation::HWND, Windows::Win32::Foundation::PSTR);
    using IWABOBJECT_LDAPUrl_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::PSTR, Windows::Win32::System::AddressBook::IMailUser**);
    using IWABOBJECT_VCardCreate_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, uint32_t, Windows::Win32::Foundation::PSTR, Windows::Win32::System::AddressBook::IMailUser*);
    using IWABOBJECT_VCardRetrieve_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, uint32_t, Windows::Win32::Foundation::PSTR, Windows::Win32::System::AddressBook::IMailUser**);
    using IWABOBJECT_GetMe_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, uint32_t, uint32_t*, Windows::Win32::System::AddressBook::SBinary*, Windows::Win32::Foundation::HWND);
    using IWABOBJECT_SetMe_METHOD = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook*, uint32_t, Windows::Win32::System::AddressBook::SBinary, Windows::Win32::Foundation::HWND);
    using LPWABOPEN = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook**, Windows::Win32::System::AddressBook::IWABObject**, Windows::Win32::System::AddressBook::WAB_PARAM*, uint32_t);
    using LPWABOPENEX = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::AddressBook::IAddrBook**, Windows::Win32::System::AddressBook::IWABObject**, Windows::Win32::System::AddressBook::WAB_PARAM*, uint32_t, Windows::Win32::System::AddressBook::LPALLOCATEBUFFER*, Windows::Win32::System::AddressBook::LPALLOCATEMORE*, Windows::Win32::System::AddressBook::LPFREEBUFFER*);
    using LPWABALLOCATEBUFFER = int32_t __stdcall(Windows::Win32::System::AddressBook::IWABObject*, uint32_t, void**);
    using LPWABALLOCATEMORE = int32_t __stdcall(Windows::Win32::System::AddressBook::IWABObject*, uint32_t, void*, void**);
    using LPWABFREEBUFFER = uint32_t __stdcall(Windows::Win32::System::AddressBook::IWABObject*, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
