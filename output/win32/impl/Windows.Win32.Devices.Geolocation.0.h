// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Geolocation_0_H
#define WIN32_Windows_Win32_Devices_Geolocation_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Geolocation
{
#pragma region enums
    enum class GNSS_AGNSS_REQUEST_TYPE : int32_t
    {
        GNSS_AGNSS_TimeInjection = 1,
        GNSS_AGNSS_PositionInjection = 2,
        GNSS_AGNSS_BlobInjection = 3,
    };
    enum class GNSS_DRIVERCOMMAND_TYPE : int32_t
    {
        GNSS_SetLocationServiceEnabled = 1,
        GNSS_SetLocationNIRequestAllowed = 2,
        GNSS_ForceSatelliteSystem = 3,
        GNSS_ForceOperationMode = 4,
        GNSS_ResetEngine = 9,
        GNSS_ClearAgnssData = 10,
        GNSS_SetSuplVersion = 12,
        GNSS_SetNMEALogging = 13,
        GNSS_SetUplServerAccessInterval = 14,
        GNSS_SetNiTimeoutInterval = 15,
        GNSS_ResetGeofencesTracking = 16,
        GNSS_SetSuplVersion2 = 17,
        GNSS_CustomCommand = 256,
    };
    enum class GNSS_DRIVER_REQUEST : int32_t
    {
        SUPL_CONFIG_DATA = 1,
    };
    enum class GNSS_EVENT_TYPE : int32_t
    {
        GNSS_Event_FixAvailable = 1,
        GNSS_Event_RequireAgnss = 2,
        GNSS_Event_Error = 3,
        GNSS_Event_NiRequest = 12,
        GNSS_Event_NmeaData = 13,
        GNSS_Event_GeofenceAlertData = 14,
        GNSS_Event_GeofencesTrackingStatus = 15,
        GNSS_Event_DriverRequest = 16,
        GNSS_Event_BreadcrumbAlertEvent = 17,
        GNSS_Event_FixAvailable_2 = 18,
        GNSS_Event_Custom = 32768,
    };
    enum class GNSS_FIXSESSIONTYPE : int32_t
    {
        GNSS_FixSession_SingleShot = 1,
        GNSS_FixSession_DistanceTracking = 2,
        GNSS_FixSession_ContinuousTracking = 3,
        GNSS_FixSession_LKG = 4,
    };
    enum class GNSS_GEOFENCE_STATE : int32_t
    {
        GNSS_GeofenceState_Unknown = 0,
        GNSS_GeofenceState_Entered = 1,
        GNSS_GeofenceState_Exited = 2,
    };
    enum class GNSS_GEOREGIONTYPE : int32_t
    {
        GNSS_GeoRegion_Circle = 1,
    };
    enum class GNSS_NI_NOTIFICATION_TYPE : int32_t
    {
        GNSS_NI_NoNotifyNoVerify = 1,
        GNSS_NI_NotifyOnly = 2,
        GNSS_NI_NotifyVerifyDefaultAllow = 3,
        GNSS_NI_NotifyVerifyDefaultNotAllow = 4,
        GNSS_NI_PrivacyOverride = 5,
    };
    enum class GNSS_NI_PLANE_TYPE : int32_t
    {
        GNSS_NI_SUPL = 1,
        GNSS_NI_CP = 2,
        GNSS_NI_V2UPL = 3,
    };
    enum class GNSS_NI_REQUEST_TYPE : int32_t
    {
        GNSS_NI_Request_SingleShot = 1,
        GNSS_NI_Request_AreaTrigger = 2,
    };
    enum class GNSS_NI_USER_RESPONSE : int32_t
    {
        GNSS_Ni_UserResponseAccept = 1,
        GNSS_Ni_UserResponseDeny = 2,
        GNSS_Ni_UserResponseTimeout = 3,
    };
    enum class GNSS_SUPL_CERT_ACTION : int32_t
    {
        GNSS_Supl_Cert_Inject = 1,
        GNSS_Supl_Cert_Delete = 2,
        GNSS_Supl_Cert_Purge = 3,
    };
    enum class LOCATION_REPORT_STATUS : int32_t
    {
        REPORT_NOT_SUPPORTED = 0,
        REPORT_ERROR = 1,
        REPORT_ACCESS_DENIED = 2,
        REPORT_INITIALIZING = 3,
        REPORT_RUNNING = 4,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct CivicAddressReport;
    struct CivicAddressReportFactory;
    struct DefaultLocation;
    struct DispCivicAddressReport;
    struct DispLatLongReport;
    struct GNSS_AGNSS_INJECT;
    struct GNSS_AGNSS_INJECTBLOB;
    struct GNSS_AGNSS_INJECTPOSITION;
    struct GNSS_AGNSS_INJECTTIME;
    struct GNSS_AGNSS_REQUEST_PARAM;
    struct GNSS_BREADCRUMBING_ALERT_DATA;
    struct GNSS_BREADCRUMBING_PARAM;
    struct GNSS_BREADCRUMB_LIST;
    struct GNSS_BREADCRUMB_V1;
    struct GNSS_CHIPSETINFO;
    struct GNSS_CONTINUOUSTRACKING_PARAM;
    struct GNSS_CP_NI_INFO;
    struct GNSS_CWTESTDATA;
    struct GNSS_DEVICE_CAPABILITY;
    struct GNSS_DISTANCETRACKING_PARAM;
    struct GNSS_DRIVERCOMMAND_PARAM;
    struct GNSS_DRIVER_REQUEST_DATA;
    struct GNSS_ERRORINFO;
    struct GNSS_EVENT;
    struct GNSS_EVENT_2;
    struct GNSS_FIXDATA;
    struct GNSS_FIXDATA_2;
    struct GNSS_FIXDATA_ACCURACY;
    struct GNSS_FIXDATA_ACCURACY_2;
    struct GNSS_FIXDATA_BASIC;
    struct GNSS_FIXDATA_BASIC_2;
    struct GNSS_FIXDATA_SATELLITE;
    struct GNSS_FIXSESSION_PARAM;
    struct GNSS_GEOFENCES_TRACKINGSTATUS_DATA;
    struct GNSS_GEOFENCE_ALERT_DATA;
    struct GNSS_GEOFENCE_CREATE_PARAM;
    struct GNSS_GEOFENCE_CREATE_RESPONSE;
    struct GNSS_GEOFENCE_DELETE_PARAM;
    struct GNSS_GEOREGION;
    struct GNSS_GEOREGION_CIRCLE;
    struct GNSS_LKGFIX_PARAM;
    struct GNSS_NI_REQUEST_PARAM;
    struct GNSS_NI_RESPONSE;
    struct GNSS_NMEA_DATA;
    struct GNSS_PLATFORM_CAPABILITY;
    struct GNSS_SATELLITEINFO;
    struct GNSS_SELFTESTCONFIG;
    struct GNSS_SELFTESTRESULT;
    struct GNSS_SINGLESHOT_PARAM;
    struct GNSS_STOPFIXSESSION_PARAM;
    struct GNSS_SUPL_CERT_CONFIG;
    struct GNSS_SUPL_HSLP_CONFIG;
    struct GNSS_SUPL_NI_INFO;
    struct GNSS_SUPL_VERSION;
    struct GNSS_SUPL_VERSION_2;
    struct GNSS_V2UPL_CONFIG;
    struct GNSS_V2UPL_NI_INFO;
    struct LatLongReport;
    struct LatLongReportFactory;
    struct Location;
    struct ICivicAddressReport;
    struct ICivicAddressReportFactory;
    struct IDefaultLocation;
    struct IDispCivicAddressReport;
    struct IDispLatLongReport;
    struct ILatLongReport;
    struct ILatLongReportFactory;
    struct ILocation;
    struct ILocationEvents;
    struct ILocationPower;
    struct ILocationReport;
    struct ILocationReportFactory;
    struct _ICivicAddressReportFactoryEvents;
    struct _ILatLongReportFactoryEvents;
#pragma endregion forward_declarations

#pragma region delegates
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
