// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Hypervisor_2_H
#define WIN32_Windows_Win32_System_Hypervisor_2_H
#include "win32/Windows.Win32.System.Hypervisor.h"
#include "win32/impl/Windows.Win32.System.Hypervisor.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Hypervisor
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetCapability(win32::Windows::Win32::System::Hypervisor::WHV_CAPABILITY_CODE CapabilityCode, void* CapabilityBuffer, uint32_t CapabilityBufferSizeInBytes, uint32_t* WrittenSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CapabilityCode);
        ORBIT_TRACK_PARAM(CapabilityBuffer);
        ORBIT_TRACK_PARAM(CapabilityBufferSizeInBytes);
        ORBIT_TRACK_PARAM(WrittenSizeInBytes);

        auto win32_impl_result = g_api_table.WHvGetCapability(CapabilityCode, CapabilityBuffer, CapabilityBufferSizeInBytes, WrittenSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCreatePartition(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE* Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvCreatePartition(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetupPartition(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvSetupPartition(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvResetPartition(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvResetPartition(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvDeletePartition(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvDeletePartition(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetPartitionProperty(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_PROPERTY_CODE PropertyCode, void* PropertyBuffer, uint32_t PropertyBufferSizeInBytes, uint32_t* WrittenSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(PropertyCode);
        ORBIT_TRACK_PARAM(PropertyBuffer);
        ORBIT_TRACK_PARAM(PropertyBufferSizeInBytes);
        ORBIT_TRACK_PARAM(WrittenSizeInBytes);

        auto win32_impl_result = g_api_table.WHvGetPartitionProperty(Partition, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes, WrittenSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetPartitionProperty(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_PROPERTY_CODE PropertyCode, void* PropertyBuffer, uint32_t PropertyBufferSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(PropertyCode);
        ORBIT_TRACK_PARAM(PropertyBuffer);
        ORBIT_TRACK_PARAM(PropertyBufferSizeInBytes);

        auto win32_impl_result = g_api_table.WHvSetPartitionProperty(Partition, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSuspendPartitionTime(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvSuspendPartitionTime(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvResumePartitionTime(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvResumePartitionTime(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvMapGpaRange(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, void* SourceAddress, uint64_t GuestAddress, uint64_t SizeInBytes, win32::Windows::Win32::System::Hypervisor::WHV_MAP_GPA_RANGE_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(SourceAddress);
        ORBIT_TRACK_PARAM(GuestAddress);
        ORBIT_TRACK_PARAM(SizeInBytes);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.WHvMapGpaRange(Partition, SourceAddress, GuestAddress, SizeInBytes, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvMapGpaRange2(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::Foundation::HANDLE Process, void* SourceAddress, uint64_t GuestAddress, uint64_t SizeInBytes, win32::Windows::Win32::System::Hypervisor::WHV_MAP_GPA_RANGE_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(SourceAddress);
        ORBIT_TRACK_PARAM(GuestAddress);
        ORBIT_TRACK_PARAM(SizeInBytes);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.WHvMapGpaRange2(Partition, Process, SourceAddress, GuestAddress, SizeInBytes, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvUnmapGpaRange(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t GuestAddress, uint64_t SizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(GuestAddress);
        ORBIT_TRACK_PARAM(SizeInBytes);

        auto win32_impl_result = g_api_table.WHvUnmapGpaRange(Partition, GuestAddress, SizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvTranslateGva(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint64_t Gva, win32::Windows::Win32::System::Hypervisor::WHV_TRANSLATE_GVA_FLAGS TranslateFlags, win32::Windows::Win32::System::Hypervisor::WHV_TRANSLATE_GVA_RESULT* TranslationResult, uint64_t* Gpa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Gva);
        ORBIT_TRACK_PARAM(TranslateFlags);
        ORBIT_TRACK_PARAM(TranslationResult);
        ORBIT_TRACK_PARAM(Gpa);

        auto win32_impl_result = g_api_table.WHvTranslateGva(Partition, VpIndex, Gva, TranslateFlags, TranslationResult, Gpa);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCreateVirtualProcessor(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.WHvCreateVirtualProcessor(Partition, VpIndex, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCreateVirtualProcessor2(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, win32::Windows::Win32::System::Hypervisor::WHV_VIRTUAL_PROCESSOR_PROPERTY* Properties, uint32_t PropertyCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Properties);
        ORBIT_TRACK_PARAM(PropertyCount);

        auto win32_impl_result = g_api_table.WHvCreateVirtualProcessor2(Partition, VpIndex, Properties, PropertyCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvDeleteVirtualProcessor(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);

        auto win32_impl_result = g_api_table.WHvDeleteVirtualProcessor(Partition, VpIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvRunVirtualProcessor(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* ExitContext, uint32_t ExitContextSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(ExitContext);
        ORBIT_TRACK_PARAM(ExitContextSizeInBytes);

        auto win32_impl_result = g_api_table.WHvRunVirtualProcessor(Partition, VpIndex, ExitContext, ExitContextSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCancelRunVirtualProcessor(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.WHvCancelRunVirtualProcessor(Partition, VpIndex, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorRegisters(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, win32::Windows::Win32::System::Hypervisor::WHV_REGISTER_NAME* RegisterNames, uint32_t RegisterCount, win32::Windows::Win32::System::Hypervisor::WHV_REGISTER_VALUE* RegisterValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(RegisterNames);
        ORBIT_TRACK_PARAM(RegisterCount);
        ORBIT_TRACK_PARAM(RegisterValues);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorRegisters(Partition, VpIndex, RegisterNames, RegisterCount, RegisterValues);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetVirtualProcessorRegisters(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, win32::Windows::Win32::System::Hypervisor::WHV_REGISTER_NAME* RegisterNames, uint32_t RegisterCount, win32::Windows::Win32::System::Hypervisor::WHV_REGISTER_VALUE* RegisterValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(RegisterNames);
        ORBIT_TRACK_PARAM(RegisterCount);
        ORBIT_TRACK_PARAM(RegisterValues);

        auto win32_impl_result = g_api_table.WHvSetVirtualProcessorRegisters(Partition, VpIndex, RegisterNames, RegisterCount, RegisterValues);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorInterruptControllerState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* State, uint32_t StateSize, uint32_t* WrittenSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(State);
        ORBIT_TRACK_PARAM(StateSize);
        ORBIT_TRACK_PARAM(WrittenSize);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorInterruptControllerState(Partition, VpIndex, State, StateSize, WrittenSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetVirtualProcessorInterruptControllerState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* State, uint32_t StateSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(State);
        ORBIT_TRACK_PARAM(StateSize);

        auto win32_impl_result = g_api_table.WHvSetVirtualProcessorInterruptControllerState(Partition, VpIndex, State, StateSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvRequestInterrupt(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_INTERRUPT_CONTROL* Interrupt, uint32_t InterruptControlSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(Interrupt);
        ORBIT_TRACK_PARAM(InterruptControlSize);

        auto win32_impl_result = g_api_table.WHvRequestInterrupt(Partition, Interrupt, InterruptControlSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorXsaveState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* Buffer, uint32_t BufferSizeInBytes, uint32_t* BytesWritten) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);
        ORBIT_TRACK_PARAM(BytesWritten);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorXsaveState(Partition, VpIndex, Buffer, BufferSizeInBytes, BytesWritten);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetVirtualProcessorXsaveState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* Buffer, uint32_t BufferSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);

        auto win32_impl_result = g_api_table.WHvSetVirtualProcessorXsaveState(Partition, VpIndex, Buffer, BufferSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvQueryGpaRangeDirtyBitmap(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t GuestAddress, uint64_t RangeSizeInBytes, uint64_t* Bitmap, uint32_t BitmapSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(GuestAddress);
        ORBIT_TRACK_PARAM(RangeSizeInBytes);
        ORBIT_TRACK_PARAM(Bitmap);
        ORBIT_TRACK_PARAM(BitmapSizeInBytes);

        auto win32_impl_result = g_api_table.WHvQueryGpaRangeDirtyBitmap(Partition, GuestAddress, RangeSizeInBytes, Bitmap, BitmapSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetPartitionCounters(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_COUNTER_SET CounterSet, void* Buffer, uint32_t BufferSizeInBytes, uint32_t* BytesWritten) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(CounterSet);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);
        ORBIT_TRACK_PARAM(BytesWritten);

        auto win32_impl_result = g_api_table.WHvGetPartitionCounters(Partition, CounterSet, Buffer, BufferSizeInBytes, BytesWritten);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorCounters(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, win32::Windows::Win32::System::Hypervisor::WHV_PROCESSOR_COUNTER_SET CounterSet, void* Buffer, uint32_t BufferSizeInBytes, uint32_t* BytesWritten) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(CounterSet);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);
        ORBIT_TRACK_PARAM(BytesWritten);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorCounters(Partition, VpIndex, CounterSet, Buffer, BufferSizeInBytes, BytesWritten);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorInterruptControllerState2(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* State, uint32_t StateSize, uint32_t* WrittenSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(State);
        ORBIT_TRACK_PARAM(StateSize);
        ORBIT_TRACK_PARAM(WrittenSize);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorInterruptControllerState2(Partition, VpIndex, State, StateSize, WrittenSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetVirtualProcessorInterruptControllerState2(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, void* State, uint32_t StateSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(State);
        ORBIT_TRACK_PARAM(StateSize);

        auto win32_impl_result = g_api_table.WHvSetVirtualProcessorInterruptControllerState2(Partition, VpIndex, State, StateSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvRegisterPartitionDoorbellEvent(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_DOORBELL_MATCH_DATA* MatchData, win32::Windows::Win32::Foundation::HANDLE EventHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(MatchData);
        ORBIT_TRACK_PARAM(EventHandle);

        auto win32_impl_result = g_api_table.WHvRegisterPartitionDoorbellEvent(Partition, MatchData, EventHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvUnregisterPartitionDoorbellEvent(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_DOORBELL_MATCH_DATA* MatchData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(MatchData);

        auto win32_impl_result = g_api_table.WHvUnregisterPartitionDoorbellEvent(Partition, MatchData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvAdviseGpaRange(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_MEMORY_RANGE_ENTRY* GpaRanges, uint32_t GpaRangesCount, win32::Windows::Win32::System::Hypervisor::WHV_ADVISE_GPA_RANGE_CODE Advice, void* AdviceBuffer, uint32_t AdviceBufferSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(GpaRanges);
        ORBIT_TRACK_PARAM(GpaRangesCount);
        ORBIT_TRACK_PARAM(Advice);
        ORBIT_TRACK_PARAM(AdviceBuffer);
        ORBIT_TRACK_PARAM(AdviceBufferSizeInBytes);

        auto win32_impl_result = g_api_table.WHvAdviseGpaRange(Partition, GpaRanges, GpaRangesCount, Advice, AdviceBuffer, AdviceBufferSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvReadGpaRange(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint64_t GuestAddress, win32::Windows::Win32::System::Hypervisor::WHV_ACCESS_GPA_CONTROLS Controls, void* Data, uint32_t DataSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(GuestAddress);
        ORBIT_TRACK_PARAM(Controls);
        ORBIT_TRACK_PARAM(Data);
        ORBIT_TRACK_PARAM(DataSizeInBytes);

        auto win32_impl_result = g_api_table.WHvReadGpaRange(Partition, VpIndex, GuestAddress, Controls, Data, DataSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvWriteGpaRange(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint64_t GuestAddress, win32::Windows::Win32::System::Hypervisor::WHV_ACCESS_GPA_CONTROLS Controls, void* Data, uint32_t DataSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(GuestAddress);
        ORBIT_TRACK_PARAM(Controls);
        ORBIT_TRACK_PARAM(Data);
        ORBIT_TRACK_PARAM(DataSizeInBytes);

        auto win32_impl_result = g_api_table.WHvWriteGpaRange(Partition, VpIndex, GuestAddress, Controls, Data, DataSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSignalVirtualProcessorSynicEvent(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_SYNIC_EVENT_PARAMETERS SynicEvent, win32::Windows::Win32::Foundation::BOOL* NewlySignaled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(SynicEvent);
        ORBIT_TRACK_PARAM(NewlySignaled);

        auto win32_impl_result = g_api_table.WHvSignalVirtualProcessorSynicEvent(Partition, SynicEvent, NewlySignaled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, win32::Windows::Win32::System::Hypervisor::WHV_VIRTUAL_PROCESSOR_STATE_TYPE StateType, void* Buffer, uint32_t BufferSizeInBytes, uint32_t* BytesWritten) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(StateType);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);
        ORBIT_TRACK_PARAM(BytesWritten);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorState(Partition, VpIndex, StateType, Buffer, BufferSizeInBytes, BytesWritten);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetVirtualProcessorState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, win32::Windows::Win32::System::Hypervisor::WHV_VIRTUAL_PROCESSOR_STATE_TYPE StateType, void* Buffer, uint32_t BufferSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(StateType);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);

        auto win32_impl_result = g_api_table.WHvSetVirtualProcessorState(Partition, VpIndex, StateType, Buffer, BufferSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvAllocateVpciResource(::win32::guid* ProviderId, win32::Windows::Win32::System::Hypervisor::WHV_ALLOCATE_VPCI_RESOURCE_FLAGS Flags, void* ResourceDescriptor, uint32_t ResourceDescriptorSizeInBytes, win32::Windows::Win32::Foundation::HANDLE* VpciResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProviderId);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ResourceDescriptor);
        ORBIT_TRACK_PARAM(ResourceDescriptorSizeInBytes);
        ORBIT_TRACK_PARAM(VpciResource);

        auto win32_impl_result = g_api_table.WHvAllocateVpciResource(ProviderId, Flags, ResourceDescriptor, ResourceDescriptorSizeInBytes, VpciResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCreateVpciDevice(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, win32::Windows::Win32::Foundation::HANDLE VpciResource, win32::Windows::Win32::System::Hypervisor::WHV_CREATE_VPCI_DEVICE_FLAGS Flags, win32::Windows::Win32::Foundation::HANDLE NotificationEventHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(VpciResource);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(NotificationEventHandle);

        auto win32_impl_result = g_api_table.WHvCreateVpciDevice(Partition, LogicalDeviceId, VpciResource, Flags, NotificationEventHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvDeleteVpciDevice(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);

        auto win32_impl_result = g_api_table.WHvDeleteVpciDevice(Partition, LogicalDeviceId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVpciDeviceProperty(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_DEVICE_PROPERTY_CODE PropertyCode, void* PropertyBuffer, uint32_t PropertyBufferSizeInBytes, uint32_t* WrittenSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(PropertyCode);
        ORBIT_TRACK_PARAM(PropertyBuffer);
        ORBIT_TRACK_PARAM(PropertyBufferSizeInBytes);
        ORBIT_TRACK_PARAM(WrittenSizeInBytes);

        auto win32_impl_result = g_api_table.WHvGetVpciDeviceProperty(Partition, LogicalDeviceId, PropertyCode, PropertyBuffer, PropertyBufferSizeInBytes, WrittenSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVpciDeviceNotification(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_DEVICE_NOTIFICATION* Notification, uint32_t NotificationSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(Notification);
        ORBIT_TRACK_PARAM(NotificationSizeInBytes);

        auto win32_impl_result = g_api_table.WHvGetVpciDeviceNotification(Partition, LogicalDeviceId, Notification, NotificationSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvMapVpciDeviceMmioRanges(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, uint32_t* MappingCount, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_MMIO_MAPPING** Mappings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(MappingCount);
        ORBIT_TRACK_PARAM(Mappings);

        auto win32_impl_result = g_api_table.WHvMapVpciDeviceMmioRanges(Partition, LogicalDeviceId, MappingCount, Mappings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvUnmapVpciDeviceMmioRanges(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);

        auto win32_impl_result = g_api_table.WHvUnmapVpciDeviceMmioRanges(Partition, LogicalDeviceId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetVpciDevicePowerState(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, win32::Windows::Win32::System::SystemServices::DEVICE_POWER_STATE PowerState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(PowerState);

        auto win32_impl_result = g_api_table.WHvSetVpciDevicePowerState(Partition, LogicalDeviceId, PowerState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvReadVpciDeviceRegister(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_DEVICE_REGISTER* Register, void* Data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(Register);
        ORBIT_TRACK_PARAM(Data);

        auto win32_impl_result = g_api_table.WHvReadVpciDeviceRegister(Partition, LogicalDeviceId, Register, Data);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvWriteVpciDeviceRegister(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_DEVICE_REGISTER* Register, void* Data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(Register);
        ORBIT_TRACK_PARAM(Data);

        auto win32_impl_result = g_api_table.WHvWriteVpciDeviceRegister(Partition, LogicalDeviceId, Register, Data);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvMapVpciDeviceInterrupt(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, uint32_t Index, uint32_t MessageCount, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_INTERRUPT_TARGET* Target, uint64_t* MsiAddress, uint32_t* MsiData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(Index);
        ORBIT_TRACK_PARAM(MessageCount);
        ORBIT_TRACK_PARAM(Target);
        ORBIT_TRACK_PARAM(MsiAddress);
        ORBIT_TRACK_PARAM(MsiData);

        auto win32_impl_result = g_api_table.WHvMapVpciDeviceInterrupt(Partition, LogicalDeviceId, Index, MessageCount, Target, MsiAddress, MsiData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvUnmapVpciDeviceInterrupt(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, uint32_t Index) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(Index);

        auto win32_impl_result = g_api_table.WHvUnmapVpciDeviceInterrupt(Partition, LogicalDeviceId, Index);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvRetargetVpciDeviceInterrupt(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, uint64_t MsiAddress, uint32_t MsiData, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_INTERRUPT_TARGET* Target) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(MsiAddress);
        ORBIT_TRACK_PARAM(MsiData);
        ORBIT_TRACK_PARAM(Target);

        auto win32_impl_result = g_api_table.WHvRetargetVpciDeviceInterrupt(Partition, LogicalDeviceId, MsiAddress, MsiData, Target);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvRequestVpciDeviceInterrupt(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, uint64_t MsiAddress, uint32_t MsiData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(MsiAddress);
        ORBIT_TRACK_PARAM(MsiData);

        auto win32_impl_result = g_api_table.WHvRequestVpciDeviceInterrupt(Partition, LogicalDeviceId, MsiAddress, MsiData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVpciDeviceInterruptTarget(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t LogicalDeviceId, uint32_t Index, uint32_t MultiMessageNumber, win32::Windows::Win32::System::Hypervisor::WHV_VPCI_INTERRUPT_TARGET* Target, uint32_t TargetSizeInBytes, uint32_t* BytesWritten) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(LogicalDeviceId);
        ORBIT_TRACK_PARAM(Index);
        ORBIT_TRACK_PARAM(MultiMessageNumber);
        ORBIT_TRACK_PARAM(Target);
        ORBIT_TRACK_PARAM(TargetSizeInBytes);
        ORBIT_TRACK_PARAM(BytesWritten);

        auto win32_impl_result = g_api_table.WHvGetVpciDeviceInterruptTarget(Partition, LogicalDeviceId, Index, MultiMessageNumber, Target, TargetSizeInBytes, BytesWritten);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCreateTrigger(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_TRIGGER_PARAMETERS* Parameters, void** TriggerHandle, win32::Windows::Win32::Foundation::HANDLE* EventHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(TriggerHandle);
        ORBIT_TRACK_PARAM(EventHandle);

        auto win32_impl_result = g_api_table.WHvCreateTrigger(Partition, Parameters, TriggerHandle, EventHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvUpdateTriggerParameters(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_TRIGGER_PARAMETERS* Parameters, void* TriggerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(TriggerHandle);

        auto win32_impl_result = g_api_table.WHvUpdateTriggerParameters(Partition, Parameters, TriggerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvDeleteTrigger(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, void* TriggerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(TriggerHandle);

        auto win32_impl_result = g_api_table.WHvDeleteTrigger(Partition, TriggerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCreateNotificationPort(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::System::Hypervisor::WHV_NOTIFICATION_PORT_PARAMETERS* Parameters, win32::Windows::Win32::Foundation::HANDLE EventHandle, void** PortHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(EventHandle);
        ORBIT_TRACK_PARAM(PortHandle);

        auto win32_impl_result = g_api_table.WHvCreateNotificationPort(Partition, Parameters, EventHandle, PortHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvSetNotificationPortProperty(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, void* PortHandle, win32::Windows::Win32::System::Hypervisor::WHV_NOTIFICATION_PORT_PROPERTY_CODE PropertyCode, uint64_t PropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(PortHandle);
        ORBIT_TRACK_PARAM(PropertyCode);
        ORBIT_TRACK_PARAM(PropertyValue);

        auto win32_impl_result = g_api_table.WHvSetNotificationPortProperty(Partition, PortHandle, PropertyCode, PropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvDeleteNotificationPort(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, void* PortHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(PortHandle);

        auto win32_impl_result = g_api_table.WHvDeleteNotificationPort(Partition, PortHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvPostVirtualProcessorSynicMessage(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint32_t SintIndex, void* Message, uint32_t MessageSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(SintIndex);
        ORBIT_TRACK_PARAM(Message);
        ORBIT_TRACK_PARAM(MessageSizeInBytes);

        auto win32_impl_result = g_api_table.WHvPostVirtualProcessorSynicMessage(Partition, VpIndex, SintIndex, Message, MessageSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetVirtualProcessorCpuidOutput(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint32_t VpIndex, uint32_t Eax, uint32_t Ecx, win32::Windows::Win32::System::Hypervisor::WHV_CPUID_OUTPUT* CpuidOutput) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(VpIndex);
        ORBIT_TRACK_PARAM(Eax);
        ORBIT_TRACK_PARAM(Ecx);
        ORBIT_TRACK_PARAM(CpuidOutput);

        auto win32_impl_result = g_api_table.WHvGetVirtualProcessorCpuidOutput(Partition, VpIndex, Eax, Ecx, CpuidOutput);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvGetInterruptTargetVpSet(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, uint64_t Destination, win32::Windows::Win32::System::Hypervisor::WHV_INTERRUPT_DESTINATION_MODE DestinationMode, uint32_t* TargetVps, uint32_t VpCount, uint32_t* TargetVpCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(Destination);
        ORBIT_TRACK_PARAM(DestinationMode);
        ORBIT_TRACK_PARAM(TargetVps);
        ORBIT_TRACK_PARAM(VpCount);
        ORBIT_TRACK_PARAM(TargetVpCount);

        auto win32_impl_result = g_api_table.WHvGetInterruptTargetVpSet(Partition, Destination, DestinationMode, TargetVps, VpCount, TargetVpCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvStartPartitionMigration(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition, win32::Windows::Win32::Foundation::HANDLE* MigrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(MigrationHandle);

        auto win32_impl_result = g_api_table.WHvStartPartitionMigration(Partition, MigrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCancelPartitionMigration(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvCancelPartitionMigration(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvCompletePartitionMigration(win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvCompletePartitionMigration(Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvAcceptPartitionMigration(win32::Windows::Win32::Foundation::HANDLE MigrationHandle, win32::Windows::Win32::System::Hypervisor::WHV_PARTITION_HANDLE* Partition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MigrationHandle);
        ORBIT_TRACK_PARAM(Partition);

        auto win32_impl_result = g_api_table.WHvAcceptPartitionMigration(MigrationHandle, Partition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvEmulatorCreateEmulator(win32::Windows::Win32::System::Hypervisor::WHV_EMULATOR_CALLBACKS* Callbacks, void** Emulator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Callbacks);
        ORBIT_TRACK_PARAM(Emulator);

        auto win32_impl_result = g_api_table.WHvEmulatorCreateEmulator(Callbacks, Emulator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvEmulatorDestroyEmulator(void* Emulator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Emulator);

        auto win32_impl_result = g_api_table.WHvEmulatorDestroyEmulator(Emulator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvEmulatorTryIoEmulation(void* Emulator, void* Context, win32::Windows::Win32::System::Hypervisor::WHV_VP_EXIT_CONTEXT* VpContext, win32::Windows::Win32::System::Hypervisor::WHV_X64_IO_PORT_ACCESS_CONTEXT* IoInstructionContext, win32::Windows::Win32::System::Hypervisor::WHV_EMULATOR_STATUS* EmulatorReturnStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Emulator);
        ORBIT_TRACK_PARAM(Context);
        ORBIT_TRACK_PARAM(VpContext);
        ORBIT_TRACK_PARAM(IoInstructionContext);
        ORBIT_TRACK_PARAM(EmulatorReturnStatus);

        auto win32_impl_result = g_api_table.WHvEmulatorTryIoEmulation(Emulator, Context, VpContext, IoInstructionContext, EmulatorReturnStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WHvEmulatorTryMmioEmulation(void* Emulator, void* Context, win32::Windows::Win32::System::Hypervisor::WHV_VP_EXIT_CONTEXT* VpContext, win32::Windows::Win32::System::Hypervisor::WHV_MEMORY_ACCESS_CONTEXT* MmioInstructionContext, win32::Windows::Win32::System::Hypervisor::WHV_EMULATOR_STATUS* EmulatorReturnStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Emulator);
        ORBIT_TRACK_PARAM(Context);
        ORBIT_TRACK_PARAM(VpContext);
        ORBIT_TRACK_PARAM(MmioInstructionContext);
        ORBIT_TRACK_PARAM(EmulatorReturnStatus);

        auto win32_impl_result = g_api_table.WHvEmulatorTryMmioEmulation(Emulator, Context, VpContext, MmioInstructionContext, EmulatorReturnStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvInitializeDeviceHost(win32::Windows::Win32::System::HostComputeSystem::HCS_SYSTEM computeSystem, void** deviceHostHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(computeSystem);
        ORBIT_TRACK_PARAM(deviceHostHandle);

        auto win32_impl_result = g_api_table.HdvInitializeDeviceHost(computeSystem, deviceHostHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvTeardownDeviceHost(void* deviceHostHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(deviceHostHandle);

        auto win32_impl_result = g_api_table.HdvTeardownDeviceHost(deviceHostHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvCreateDeviceInstance(void* deviceHostHandle, win32::Windows::Win32::System::Hypervisor::HDV_DEVICE_TYPE deviceType, ::win32::guid* deviceClassId, ::win32::guid* deviceInstanceId, void* deviceInterface, void* deviceContext, void** deviceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(deviceHostHandle);
        ORBIT_TRACK_PARAM(deviceType);
        ORBIT_TRACK_PARAM(deviceClassId);
        ORBIT_TRACK_PARAM(deviceInstanceId);
        ORBIT_TRACK_PARAM(deviceInterface);
        ORBIT_TRACK_PARAM(deviceContext);
        ORBIT_TRACK_PARAM(deviceHandle);

        auto win32_impl_result = g_api_table.HdvCreateDeviceInstance(deviceHostHandle, deviceType, deviceClassId, deviceInstanceId, deviceInterface, deviceContext, deviceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvReadGuestMemory(void* requestor, uint64_t guestPhysicalAddress, uint32_t byteCount, uint8_t* buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(guestPhysicalAddress);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(buffer);

        auto win32_impl_result = g_api_table.HdvReadGuestMemory(requestor, guestPhysicalAddress, byteCount, buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvWriteGuestMemory(void* requestor, uint64_t guestPhysicalAddress, uint32_t byteCount, uint8_t* buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(guestPhysicalAddress);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(buffer);

        auto win32_impl_result = g_api_table.HdvWriteGuestMemory(requestor, guestPhysicalAddress, byteCount, buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvCreateGuestMemoryAperture(void* requestor, uint64_t guestPhysicalAddress, uint32_t byteCount, win32::Windows::Win32::Foundation::BOOL writeProtected, void** mappedAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(guestPhysicalAddress);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(writeProtected);
        ORBIT_TRACK_PARAM(mappedAddress);

        auto win32_impl_result = g_api_table.HdvCreateGuestMemoryAperture(requestor, guestPhysicalAddress, byteCount, writeProtected, mappedAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvDestroyGuestMemoryAperture(void* requestor, void* mappedAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(mappedAddress);

        auto win32_impl_result = g_api_table.HdvDestroyGuestMemoryAperture(requestor, mappedAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvDeliverGuestInterrupt(void* requestor, uint64_t msiAddress, uint32_t msiData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(msiAddress);
        ORBIT_TRACK_PARAM(msiData);

        auto win32_impl_result = g_api_table.HdvDeliverGuestInterrupt(requestor, msiAddress, msiData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvRegisterDoorbell(void* requestor, win32::Windows::Win32::System::Hypervisor::HDV_PCI_BAR_SELECTOR BarIndex, uint64_t BarOffset, uint64_t TriggerValue, uint64_t Flags, win32::Windows::Win32::Foundation::HANDLE DoorbellEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(BarIndex);
        ORBIT_TRACK_PARAM(BarOffset);
        ORBIT_TRACK_PARAM(TriggerValue);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(DoorbellEvent);

        auto win32_impl_result = g_api_table.HdvRegisterDoorbell(requestor, BarIndex, BarOffset, TriggerValue, Flags, DoorbellEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvUnregisterDoorbell(void* requestor, win32::Windows::Win32::System::Hypervisor::HDV_PCI_BAR_SELECTOR BarIndex, uint64_t BarOffset, uint64_t TriggerValue, uint64_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(BarIndex);
        ORBIT_TRACK_PARAM(BarOffset);
        ORBIT_TRACK_PARAM(TriggerValue);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.HdvUnregisterDoorbell(requestor, BarIndex, BarOffset, TriggerValue, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvCreateSectionBackedMmioRange(void* requestor, win32::Windows::Win32::System::Hypervisor::HDV_PCI_BAR_SELECTOR barIndex, uint64_t offsetInPages, uint64_t lengthInPages, win32::Windows::Win32::System::Hypervisor::HDV_MMIO_MAPPING_FLAGS MappingFlags, win32::Windows::Win32::Foundation::HANDLE sectionHandle, uint64_t sectionOffsetInPages) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(barIndex);
        ORBIT_TRACK_PARAM(offsetInPages);
        ORBIT_TRACK_PARAM(lengthInPages);
        ORBIT_TRACK_PARAM(MappingFlags);
        ORBIT_TRACK_PARAM(sectionHandle);
        ORBIT_TRACK_PARAM(sectionOffsetInPages);

        auto win32_impl_result = g_api_table.HdvCreateSectionBackedMmioRange(requestor, barIndex, offsetInPages, lengthInPages, MappingFlags, sectionHandle, sectionOffsetInPages);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HdvDestroySectionBackedMmioRange(void* requestor, win32::Windows::Win32::System::Hypervisor::HDV_PCI_BAR_SELECTOR barIndex, uint64_t offsetInPages) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(requestor);
        ORBIT_TRACK_PARAM(barIndex);
        ORBIT_TRACK_PARAM(offsetInPages);

        auto win32_impl_result = g_api_table.HdvDestroySectionBackedMmioRange(requestor, barIndex, offsetInPages);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_LocateSavedStateFiles(win32::Windows::Win32::Foundation::PWSTR vmName, win32::Windows::Win32::Foundation::PWSTR snapshotName, win32::Windows::Win32::Foundation::PWSTR* binPath, win32::Windows::Win32::Foundation::PWSTR* vsvPath, win32::Windows::Win32::Foundation::PWSTR* vmrsPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmName);
        ORBIT_TRACK_PARAM(snapshotName);
        ORBIT_TRACK_PARAM(binPath);
        ORBIT_TRACK_PARAM(vsvPath);
        ORBIT_TRACK_PARAM(vmrsPath);

        auto win32_impl_result = g_api_table.LocateSavedStateFiles(vmName, snapshotName, binPath, vsvPath, vmrsPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_LoadSavedStateFile(win32::Windows::Win32::Foundation::PWSTR vmrsFile, void** vmSavedStateDumpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmrsFile);
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);

        auto win32_impl_result = g_api_table.LoadSavedStateFile(vmrsFile, vmSavedStateDumpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ApplyPendingSavedStateFileReplayLog(win32::Windows::Win32::Foundation::PWSTR vmrsFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmrsFile);

        auto win32_impl_result = g_api_table.ApplyPendingSavedStateFileReplayLog(vmrsFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_LoadSavedStateFiles(win32::Windows::Win32::Foundation::PWSTR binFile, win32::Windows::Win32::Foundation::PWSTR vsvFile, void** vmSavedStateDumpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(binFile);
        ORBIT_TRACK_PARAM(vsvFile);
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);

        auto win32_impl_result = g_api_table.LoadSavedStateFiles(binFile, vsvFile, vmSavedStateDumpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ReleaseSavedStateFiles(void* vmSavedStateDumpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);

        auto win32_impl_result = g_api_table.ReleaseSavedStateFiles(vmSavedStateDumpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetGuestEnabledVirtualTrustLevels(void* vmSavedStateDumpHandle, uint32_t* virtualTrustLevels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(virtualTrustLevels);

        auto win32_impl_result = g_api_table.GetGuestEnabledVirtualTrustLevels(vmSavedStateDumpHandle, virtualTrustLevels);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetGuestOsInfo(void* vmSavedStateDumpHandle, uint8_t virtualTrustLevel, win32::Windows::Win32::System::Hypervisor::GUEST_OS_INFO* guestOsInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(virtualTrustLevel);
        ORBIT_TRACK_PARAM(guestOsInfo);

        auto win32_impl_result = g_api_table.GetGuestOsInfo(vmSavedStateDumpHandle, virtualTrustLevel, guestOsInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetVpCount(void* vmSavedStateDumpHandle, uint32_t* vpCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpCount);

        auto win32_impl_result = g_api_table.GetVpCount(vmSavedStateDumpHandle, vpCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetArchitecture(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::System::Hypervisor::VIRTUAL_PROCESSOR_ARCH* architecture) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(architecture);

        auto win32_impl_result = g_api_table.GetArchitecture(vmSavedStateDumpHandle, vpId, architecture);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ForceArchitecture(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::System::Hypervisor::VIRTUAL_PROCESSOR_ARCH architecture) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(architecture);

        auto win32_impl_result = g_api_table.ForceArchitecture(vmSavedStateDumpHandle, vpId, architecture);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetActiveVirtualTrustLevel(void* vmSavedStateDumpHandle, uint32_t vpId, uint8_t* virtualTrustLevel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(virtualTrustLevel);

        auto win32_impl_result = g_api_table.GetActiveVirtualTrustLevel(vmSavedStateDumpHandle, vpId, virtualTrustLevel);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetEnabledVirtualTrustLevels(void* vmSavedStateDumpHandle, uint32_t vpId, uint32_t* virtualTrustLevels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(virtualTrustLevels);

        auto win32_impl_result = g_api_table.GetEnabledVirtualTrustLevels(vmSavedStateDumpHandle, vpId, virtualTrustLevels);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ForceActiveVirtualTrustLevel(void* vmSavedStateDumpHandle, uint32_t vpId, uint8_t virtualTrustLevel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(virtualTrustLevel);

        auto win32_impl_result = g_api_table.ForceActiveVirtualTrustLevel(vmSavedStateDumpHandle, vpId, virtualTrustLevel);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_IsActiveVirtualTrustLevelEnabled(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::BOOL* activeVirtualTrustLevelEnabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(activeVirtualTrustLevelEnabled);

        auto win32_impl_result = g_api_table.IsActiveVirtualTrustLevelEnabled(vmSavedStateDumpHandle, vpId, activeVirtualTrustLevelEnabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_IsNestedVirtualizationEnabled(void* vmSavedStateDumpHandle, win32::Windows::Win32::Foundation::BOOL* enabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(enabled);

        auto win32_impl_result = g_api_table.IsNestedVirtualizationEnabled(vmSavedStateDumpHandle, enabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetNestedVirtualizationMode(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::BOOL* enabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(enabled);

        auto win32_impl_result = g_api_table.GetNestedVirtualizationMode(vmSavedStateDumpHandle, vpId, enabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ForceNestedHostMode(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::BOOL hostMode, win32::Windows::Win32::Foundation::BOOL* oldMode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(hostMode);
        ORBIT_TRACK_PARAM(oldMode);

        auto win32_impl_result = g_api_table.ForceNestedHostMode(vmSavedStateDumpHandle, vpId, hostMode, oldMode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_InKernelSpace(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::BOOL* inKernelSpace) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(inKernelSpace);

        auto win32_impl_result = g_api_table.InKernelSpace(vmSavedStateDumpHandle, vpId, inKernelSpace);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetRegisterValue(void* vmSavedStateDumpHandle, uint32_t vpId, uint32_t registerId, win32::Windows::Win32::System::Hypervisor::VIRTUAL_PROCESSOR_REGISTER* registerValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(registerId);
        ORBIT_TRACK_PARAM(registerValue);

        auto win32_impl_result = g_api_table.GetRegisterValue(vmSavedStateDumpHandle, vpId, registerId, registerValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetPagingMode(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::System::Hypervisor::PAGING_MODE* pagingMode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(pagingMode);

        auto win32_impl_result = g_api_table.GetPagingMode(vmSavedStateDumpHandle, vpId, pagingMode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ForcePagingMode(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::System::Hypervisor::PAGING_MODE pagingMode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(pagingMode);

        auto win32_impl_result = g_api_table.ForcePagingMode(vmSavedStateDumpHandle, vpId, pagingMode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ReadGuestPhysicalAddress(void* vmSavedStateDumpHandle, uint64_t physicalAddress, void* buffer, uint32_t bufferSize, uint32_t* bytesRead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(physicalAddress);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferSize);
        ORBIT_TRACK_PARAM(bytesRead);

        auto win32_impl_result = g_api_table.ReadGuestPhysicalAddress(vmSavedStateDumpHandle, physicalAddress, buffer, bufferSize, bytesRead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GuestVirtualAddressToPhysicalAddress(void* vmSavedStateDumpHandle, uint32_t vpId, uint64_t virtualAddress, uint64_t* physicalAddress, uint64_t* unmappedRegionSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(virtualAddress);
        ORBIT_TRACK_PARAM(physicalAddress);
        ORBIT_TRACK_PARAM(unmappedRegionSize);

        auto win32_impl_result = g_api_table.GuestVirtualAddressToPhysicalAddress(vmSavedStateDumpHandle, vpId, virtualAddress, physicalAddress, unmappedRegionSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetGuestPhysicalMemoryChunks(void* vmSavedStateDumpHandle, uint64_t* memoryChunkPageSize, win32::Windows::Win32::System::Hypervisor::GPA_MEMORY_CHUNK* memoryChunks, uint64_t* memoryChunkCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(memoryChunkPageSize);
        ORBIT_TRACK_PARAM(memoryChunks);
        ORBIT_TRACK_PARAM(memoryChunkCount);

        auto win32_impl_result = g_api_table.GetGuestPhysicalMemoryChunks(vmSavedStateDumpHandle, memoryChunkPageSize, memoryChunks, memoryChunkCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GuestPhysicalAddressToRawSavedMemoryOffset(void* vmSavedStateDumpHandle, uint64_t physicalAddress, uint64_t* rawSavedMemoryOffset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(physicalAddress);
        ORBIT_TRACK_PARAM(rawSavedMemoryOffset);

        auto win32_impl_result = g_api_table.GuestPhysicalAddressToRawSavedMemoryOffset(vmSavedStateDumpHandle, physicalAddress, rawSavedMemoryOffset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ReadGuestRawSavedMemory(void* vmSavedStateDumpHandle, uint64_t rawSavedMemoryOffset, void* buffer, uint32_t bufferSize, uint32_t* bytesRead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(rawSavedMemoryOffset);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferSize);
        ORBIT_TRACK_PARAM(bytesRead);

        auto win32_impl_result = g_api_table.ReadGuestRawSavedMemory(vmSavedStateDumpHandle, rawSavedMemoryOffset, buffer, bufferSize, bytesRead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetGuestRawSavedMemorySize(void* vmSavedStateDumpHandle, uint64_t* guestRawSavedMemorySize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(guestRawSavedMemorySize);

        auto win32_impl_result = g_api_table.GetGuestRawSavedMemorySize(vmSavedStateDumpHandle, guestRawSavedMemorySize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetMemoryBlockCacheLimit(void* vmSavedStateDumpHandle, uint64_t memoryBlockCacheLimit) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(memoryBlockCacheLimit);

        auto win32_impl_result = g_api_table.SetMemoryBlockCacheLimit(vmSavedStateDumpHandle, memoryBlockCacheLimit);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetMemoryBlockCacheLimit(void* vmSavedStateDumpHandle, uint64_t* memoryBlockCacheLimit) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(memoryBlockCacheLimit);

        auto win32_impl_result = g_api_table.GetMemoryBlockCacheLimit(vmSavedStateDumpHandle, memoryBlockCacheLimit);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ApplyGuestMemoryFix(void* vmSavedStateDumpHandle, uint32_t vpId, uint64_t virtualAddress, void* fixBuffer, uint32_t fixBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(virtualAddress);
        ORBIT_TRACK_PARAM(fixBuffer);
        ORBIT_TRACK_PARAM(fixBufferSize);

        auto win32_impl_result = g_api_table.ApplyGuestMemoryFix(vmSavedStateDumpHandle, vpId, virtualAddress, fixBuffer, fixBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_LoadSavedStateSymbolProvider(void* vmSavedStateDumpHandle, win32::Windows::Win32::Foundation::PWSTR userSymbols, win32::Windows::Win32::Foundation::BOOL force) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(userSymbols);
        ORBIT_TRACK_PARAM(force);

        auto win32_impl_result = g_api_table.LoadSavedStateSymbolProvider(vmSavedStateDumpHandle, userSymbols, force);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ReleaseSavedStateSymbolProvider(void* vmSavedStateDumpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);

        auto win32_impl_result = g_api_table.ReleaseSavedStateSymbolProvider(vmSavedStateDumpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_GetSavedStateSymbolProviderHandle(void* vmSavedStateDumpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);

        auto win32_impl_result = g_api_table.GetSavedStateSymbolProviderHandle(vmSavedStateDumpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetSavedStateSymbolProviderDebugInfoCallback(void* vmSavedStateDumpHandle, win32::Windows::Win32::System::Hypervisor::GUEST_SYMBOLS_PROVIDER_DEBUG_INFO_CALLBACK* Callback) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(Callback);

        auto win32_impl_result = g_api_table.SetSavedStateSymbolProviderDebugInfoCallback(vmSavedStateDumpHandle, Callback);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_LoadSavedStateModuleSymbols(void* vmSavedStateDumpHandle, win32::Windows::Win32::Foundation::PSTR imageName, win32::Windows::Win32::Foundation::PSTR moduleName, uint64_t baseAddress, uint32_t sizeOfBase) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(imageName);
        ORBIT_TRACK_PARAM(moduleName);
        ORBIT_TRACK_PARAM(baseAddress);
        ORBIT_TRACK_PARAM(sizeOfBase);

        auto win32_impl_result = g_api_table.LoadSavedStateModuleSymbols(vmSavedStateDumpHandle, imageName, moduleName, baseAddress, sizeOfBase);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_LoadSavedStateModuleSymbolsEx(void* vmSavedStateDumpHandle, win32::Windows::Win32::Foundation::PSTR imageName, uint32_t imageTimestamp, win32::Windows::Win32::Foundation::PSTR moduleName, uint64_t baseAddress, uint32_t sizeOfBase) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(imageName);
        ORBIT_TRACK_PARAM(imageTimestamp);
        ORBIT_TRACK_PARAM(moduleName);
        ORBIT_TRACK_PARAM(baseAddress);
        ORBIT_TRACK_PARAM(sizeOfBase);

        auto win32_impl_result = g_api_table.LoadSavedStateModuleSymbolsEx(vmSavedStateDumpHandle, imageName, imageTimestamp, moduleName, baseAddress, sizeOfBase);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ResolveSavedStateGlobalVariableAddress(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::PSTR globalName, uint64_t* virtualAddress, uint32_t* size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(globalName);
        ORBIT_TRACK_PARAM(virtualAddress);
        ORBIT_TRACK_PARAM(size);

        auto win32_impl_result = g_api_table.ResolveSavedStateGlobalVariableAddress(vmSavedStateDumpHandle, vpId, globalName, virtualAddress, size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ReadSavedStateGlobalVariable(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::PSTR globalName, void* buffer, uint32_t bufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(globalName);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferSize);

        auto win32_impl_result = g_api_table.ReadSavedStateGlobalVariable(vmSavedStateDumpHandle, vpId, globalName, buffer, bufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetSavedStateSymbolTypeSize(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::PSTR typeName, uint32_t* size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(typeName);
        ORBIT_TRACK_PARAM(size);

        auto win32_impl_result = g_api_table.GetSavedStateSymbolTypeSize(vmSavedStateDumpHandle, vpId, typeName, size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FindSavedStateSymbolFieldInType(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::PSTR typeName, win32::Windows::Win32::Foundation::PWSTR fieldName, uint32_t* offset, win32::Windows::Win32::Foundation::BOOL* found) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(typeName);
        ORBIT_TRACK_PARAM(fieldName);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(found);

        auto win32_impl_result = g_api_table.FindSavedStateSymbolFieldInType(vmSavedStateDumpHandle, vpId, typeName, fieldName, offset, found);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetSavedStateSymbolFieldInfo(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::Foundation::PSTR typeName, win32::Windows::Win32::Foundation::PWSTR* typeFieldInfoMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(typeName);
        ORBIT_TRACK_PARAM(typeFieldInfoMap);

        auto win32_impl_result = g_api_table.GetSavedStateSymbolFieldInfo(vmSavedStateDumpHandle, vpId, typeName, typeFieldInfoMap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ScanMemoryForDosImages(void* vmSavedStateDumpHandle, uint32_t vpId, uint64_t startAddress, uint64_t endAddress, void* callbackContext, win32::Windows::Win32::System::Hypervisor::FOUND_IMAGE_CALLBACK* foundImageCallback, uint64_t* standaloneAddress, uint32_t standaloneAddressCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(startAddress);
        ORBIT_TRACK_PARAM(endAddress);
        ORBIT_TRACK_PARAM(callbackContext);
        ORBIT_TRACK_PARAM(foundImageCallback);
        ORBIT_TRACK_PARAM(standaloneAddress);
        ORBIT_TRACK_PARAM(standaloneAddressCount);

        auto win32_impl_result = g_api_table.ScanMemoryForDosImages(vmSavedStateDumpHandle, vpId, startAddress, endAddress, callbackContext, foundImageCallback, standaloneAddress, standaloneAddressCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CallStackUnwind(void* vmSavedStateDumpHandle, uint32_t vpId, win32::Windows::Win32::System::Hypervisor::MODULE_INFO* imageInfo, uint32_t imageInfoCount, uint32_t frameCount, win32::Windows::Win32::Foundation::PWSTR* callStack) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vmSavedStateDumpHandle);
        ORBIT_TRACK_PARAM(vpId);
        ORBIT_TRACK_PARAM(imageInfo);
        ORBIT_TRACK_PARAM(imageInfoCount);
        ORBIT_TRACK_PARAM(frameCount);
        ORBIT_TRACK_PARAM(callStack);

        auto win32_impl_result = g_api_table.CallStackUnwind(vmSavedStateDumpHandle, vpId, imageInfo, imageInfoCount, frameCount, callStack);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
