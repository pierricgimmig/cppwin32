// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Gaming_2_H
#define WIN32_Windows_Win32_Gaming_2_H
#include "win32/Windows.Win32.Gaming.h"
#include "win32/impl/Windows.Win32.Gaming.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Gaming
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HasExpandedResources(win32::Windows::Win32::Foundation::BOOL* hasExpandedResources) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hasExpandedResources);

        auto win32_impl_result = g_api_table.HasExpandedResources(hasExpandedResources);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetExpandedResourceExclusiveCpuCount(uint32_t* exclusiveCpuCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(exclusiveCpuCount);

        auto win32_impl_result = g_api_table.GetExpandedResourceExclusiveCpuCount(exclusiveCpuCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ReleaseExclusiveCpuSets() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ReleaseExclusiveCpuSets();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetGamingDeviceModelInformation(win32::Windows::Win32::Gaming::GAMING_DEVICE_MODEL_INFORMATION* information) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(information);

        auto win32_impl_result = g_api_table.GetGamingDeviceModelInformation(information);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowGameInviteUI(win32::Windows::Win32::System::WinRT::HSTRING serviceConfigurationId, win32::Windows::Win32::System::WinRT::HSTRING sessionTemplateName, win32::Windows::Win32::System::WinRT::HSTRING sessionId, win32::Windows::Win32::System::WinRT::HSTRING invitationDisplayText, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceConfigurationId);
        ORBIT_TRACK_PARAM(sessionTemplateName);
        ORBIT_TRACK_PARAM(sessionId);
        ORBIT_TRACK_PARAM(invitationDisplayText);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowGameInviteUI(serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowPlayerPickerUI(win32::Windows::Win32::System::WinRT::HSTRING promptDisplayText, win32::Windows::Win32::System::WinRT::HSTRING* xuids, size_t xuidsCount, win32::Windows::Win32::System::WinRT::HSTRING* preSelectedXuids, size_t preSelectedXuidsCount, size_t minSelectionCount, size_t maxSelectionCount, win32::Windows::Win32::Gaming::PlayerPickerUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(promptDisplayText);
        ORBIT_TRACK_PARAM(xuids);
        ORBIT_TRACK_PARAM(xuidsCount);
        ORBIT_TRACK_PARAM(preSelectedXuids);
        ORBIT_TRACK_PARAM(preSelectedXuidsCount);
        ORBIT_TRACK_PARAM(minSelectionCount);
        ORBIT_TRACK_PARAM(maxSelectionCount);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowPlayerPickerUI(promptDisplayText, xuids, xuidsCount, preSelectedXuids, preSelectedXuidsCount, minSelectionCount, maxSelectionCount, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowProfileCardUI(win32::Windows::Win32::System::WinRT::HSTRING targetUserXuid, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(targetUserXuid);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowProfileCardUI(targetUserXuid, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowChangeFriendRelationshipUI(win32::Windows::Win32::System::WinRT::HSTRING targetUserXuid, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(targetUserXuid);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowChangeFriendRelationshipUI(targetUserXuid, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowTitleAchievementsUI(uint32_t titleId, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(titleId);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowTitleAchievementsUI(titleId, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ProcessPendingGameUI(win32::Windows::Win32::Foundation::BOOL waitForCompletion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(waitForCompletion);

        auto win32_impl_result = g_api_table.ProcessPendingGameUI(waitForCompletion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TryCancelPendingGameUI() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.TryCancelPendingGameUI();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CheckGamingPrivilegeWithUI(uint32_t privilegeId, win32::Windows::Win32::System::WinRT::HSTRING scope, win32::Windows::Win32::System::WinRT::HSTRING policy, win32::Windows::Win32::System::WinRT::HSTRING friendlyMessage, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(privilegeId);
        ORBIT_TRACK_PARAM(scope);
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(friendlyMessage);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.CheckGamingPrivilegeWithUI(privilegeId, scope, policy, friendlyMessage, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CheckGamingPrivilegeSilently(uint32_t privilegeId, win32::Windows::Win32::System::WinRT::HSTRING scope, win32::Windows::Win32::System::WinRT::HSTRING policy, win32::Windows::Win32::Foundation::BOOL* hasPrivilege) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(privilegeId);
        ORBIT_TRACK_PARAM(scope);
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(hasPrivilege);

        auto win32_impl_result = g_api_table.CheckGamingPrivilegeSilently(privilegeId, scope, policy, hasPrivilege);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowGameInviteUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::System::WinRT::HSTRING serviceConfigurationId, win32::Windows::Win32::System::WinRT::HSTRING sessionTemplateName, win32::Windows::Win32::System::WinRT::HSTRING sessionId, win32::Windows::Win32::System::WinRT::HSTRING invitationDisplayText, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(serviceConfigurationId);
        ORBIT_TRACK_PARAM(sessionTemplateName);
        ORBIT_TRACK_PARAM(sessionId);
        ORBIT_TRACK_PARAM(invitationDisplayText);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowGameInviteUIForUser(user, serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowPlayerPickerUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::System::WinRT::HSTRING promptDisplayText, win32::Windows::Win32::System::WinRT::HSTRING* xuids, size_t xuidsCount, win32::Windows::Win32::System::WinRT::HSTRING* preSelectedXuids, size_t preSelectedXuidsCount, size_t minSelectionCount, size_t maxSelectionCount, win32::Windows::Win32::Gaming::PlayerPickerUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(promptDisplayText);
        ORBIT_TRACK_PARAM(xuids);
        ORBIT_TRACK_PARAM(xuidsCount);
        ORBIT_TRACK_PARAM(preSelectedXuids);
        ORBIT_TRACK_PARAM(preSelectedXuidsCount);
        ORBIT_TRACK_PARAM(minSelectionCount);
        ORBIT_TRACK_PARAM(maxSelectionCount);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowPlayerPickerUIForUser(user, promptDisplayText, xuids, xuidsCount, preSelectedXuids, preSelectedXuidsCount, minSelectionCount, maxSelectionCount, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowProfileCardUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::System::WinRT::HSTRING targetUserXuid, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(targetUserXuid);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowProfileCardUIForUser(user, targetUserXuid, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowChangeFriendRelationshipUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::System::WinRT::HSTRING targetUserXuid, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(targetUserXuid);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowChangeFriendRelationshipUIForUser(user, targetUserXuid, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowTitleAchievementsUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, uint32_t titleId, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(titleId);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowTitleAchievementsUIForUser(user, titleId, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CheckGamingPrivilegeWithUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, uint32_t privilegeId, win32::Windows::Win32::System::WinRT::HSTRING scope, win32::Windows::Win32::System::WinRT::HSTRING policy, win32::Windows::Win32::System::WinRT::HSTRING friendlyMessage, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(privilegeId);
        ORBIT_TRACK_PARAM(scope);
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(friendlyMessage);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.CheckGamingPrivilegeWithUIForUser(user, privilegeId, scope, policy, friendlyMessage, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CheckGamingPrivilegeSilentlyForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, uint32_t privilegeId, win32::Windows::Win32::System::WinRT::HSTRING scope, win32::Windows::Win32::System::WinRT::HSTRING policy, win32::Windows::Win32::Foundation::BOOL* hasPrivilege) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(privilegeId);
        ORBIT_TRACK_PARAM(scope);
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(hasPrivilege);

        auto win32_impl_result = g_api_table.CheckGamingPrivilegeSilentlyForUser(user, privilegeId, scope, policy, hasPrivilege);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowGameInviteUIWithContext(win32::Windows::Win32::System::WinRT::HSTRING serviceConfigurationId, win32::Windows::Win32::System::WinRT::HSTRING sessionTemplateName, win32::Windows::Win32::System::WinRT::HSTRING sessionId, win32::Windows::Win32::System::WinRT::HSTRING invitationDisplayText, win32::Windows::Win32::System::WinRT::HSTRING customActivationContext, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceConfigurationId);
        ORBIT_TRACK_PARAM(sessionTemplateName);
        ORBIT_TRACK_PARAM(sessionId);
        ORBIT_TRACK_PARAM(invitationDisplayText);
        ORBIT_TRACK_PARAM(customActivationContext);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowGameInviteUIWithContext(serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, customActivationContext, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowGameInviteUIWithContextForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::System::WinRT::HSTRING serviceConfigurationId, win32::Windows::Win32::System::WinRT::HSTRING sessionTemplateName, win32::Windows::Win32::System::WinRT::HSTRING sessionId, win32::Windows::Win32::System::WinRT::HSTRING invitationDisplayText, win32::Windows::Win32::System::WinRT::HSTRING customActivationContext, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(serviceConfigurationId);
        ORBIT_TRACK_PARAM(sessionTemplateName);
        ORBIT_TRACK_PARAM(sessionId);
        ORBIT_TRACK_PARAM(invitationDisplayText);
        ORBIT_TRACK_PARAM(customActivationContext);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowGameInviteUIWithContextForUser(user, serviceConfigurationId, sessionTemplateName, sessionId, invitationDisplayText, customActivationContext, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowGameInfoUI(uint32_t titleId, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(titleId);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowGameInfoUI(titleId, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowGameInfoUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, uint32_t titleId, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(titleId);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowGameInfoUIForUser(user, titleId, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowFindFriendsUI(win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowFindFriendsUI(completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowFindFriendsUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowFindFriendsUIForUser(user, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowCustomizeUserProfileUI(win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowCustomizeUserProfileUI(completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowCustomizeUserProfileUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowCustomizeUserProfileUIForUser(user, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowUserSettingsUI(win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowUserSettingsUI(completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ShowUserSettingsUIForUser(win32::Windows::Win32::System::WinRT::IInspectable* user, win32::Windows::Win32::Gaming::GameUICompletionRoutine* completionRoutine, void* context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(user);
        ORBIT_TRACK_PARAM(completionRoutine);
        ORBIT_TRACK_PARAM(context);

        auto win32_impl_result = g_api_table.ShowUserSettingsUIForUser(user, completionRoutine, context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
