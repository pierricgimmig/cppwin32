// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Power_2_H
#define WIN32_Windows_Win32_System_Power_2_H
#include "win32/Windows.Win32.System.Power.h"
#include "win32/impl/Windows.Win32.System.Power.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Power
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL_CallNtPowerInformation(win32::Windows::Win32::System::SystemServices::POWER_INFORMATION_LEVEL InformationLevel, void* InputBuffer, uint32_t InputBufferLength, void* OutputBuffer, uint32_t OutputBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InformationLevel);
        ORBIT_TRACK_PARAM(InputBuffer);
        ORBIT_TRACK_PARAM(InputBufferLength);
        ORBIT_TRACK_PARAM(OutputBuffer);
        ORBIT_TRACK_PARAM(OutputBufferLength);

        auto win32_impl_result = g_api_table.CallNtPowerInformation(InformationLevel, InputBuffer, InputBufferLength, OutputBuffer, OutputBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_GetPwrCapabilities(win32::Windows::Win32::System::Power::SYSTEM_POWER_CAPABILITIES* lpspc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpspc);

        auto win32_impl_result = g_api_table.GetPwrCapabilities(lpspc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Power::POWER_PLATFORM_ROLE __stdcall ORBIT_IMPL_PowerDeterminePlatformRoleEx(win32::Windows::Win32::System::Power::POWER_PLATFORM_ROLE_VERSION Version) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);

        auto win32_impl_result = g_api_table.PowerDeterminePlatformRoleEx(Version);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerRegisterSuspendResumeNotification(uint32_t Flags, win32::Windows::Win32::Foundation::HANDLE Recipient, void** RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Recipient);
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.PowerRegisterSuspendResumeNotification(Flags, Recipient, RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerUnregisterSuspendResumeNotification(win32::Windows::Win32::System::Power::HPOWERNOTIFY RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.PowerUnregisterSuspendResumeNotification(RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadACValue(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* Type, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadACValue(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Type, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadDCValue(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* Type, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadDCValue(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Type, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteACValueIndex(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t AcValueIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(AcValueIndex);

        auto win32_impl_result = g_api_table.PowerWriteACValueIndex(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, AcValueIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteDCValueIndex(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t DcValueIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(DcValueIndex);

        auto win32_impl_result = g_api_table.PowerWriteDCValueIndex(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DcValueIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerGetActiveScheme(win32::Windows::Win32::System::Registry::HKEY UserRootPowerKey, ::win32::guid** ActivePolicyGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UserRootPowerKey);
        ORBIT_TRACK_PARAM(ActivePolicyGuid);

        auto win32_impl_result = g_api_table.PowerGetActiveScheme(UserRootPowerKey, ActivePolicyGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerSetActiveScheme(win32::Windows::Win32::System::Registry::HKEY UserRootPowerKey, ::win32::guid* SchemeGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UserRootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);

        auto win32_impl_result = g_api_table.PowerSetActiveScheme(UserRootPowerKey, SchemeGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerSettingRegisterNotification(::win32::guid* SettingGuid, win32::Windows::Win32::System::Power::POWER_SETTING_REGISTER_NOTIFICATION_FLAGS Flags, win32::Windows::Win32::Foundation::HANDLE Recipient, void** RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SettingGuid);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Recipient);
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.PowerSettingRegisterNotification(SettingGuid, Flags, Recipient, RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerSettingUnregisterNotification(win32::Windows::Win32::System::Power::HPOWERNOTIFY RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.PowerSettingUnregisterNotification(RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PowerRegisterForEffectivePowerModeNotifications(uint32_t Version, win32::Windows::Win32::System::Power::EFFECTIVE_POWER_MODE_CALLBACK* Callback, void* Context, void** RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(Context);
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.PowerRegisterForEffectivePowerModeNotifications(Version, Callback, Context, RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PowerUnregisterFromEffectivePowerModeNotifications(void* RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.PowerUnregisterFromEffectivePowerModeNotifications(RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_GetPwrDiskSpindownRange(uint32_t* puiMax, uint32_t* puiMin) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(puiMax);
        ORBIT_TRACK_PARAM(puiMin);

        auto win32_impl_result = g_api_table.GetPwrDiskSpindownRange(puiMax, puiMin);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_EnumPwrSchemes(win32::Windows::Win32::System::Power::PWRSCHEMESENUMPROC* lpfn, win32::Windows::Win32::Foundation::LPARAM lParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpfn);
        ORBIT_TRACK_PARAM(lParam);

        auto win32_impl_result = g_api_table.EnumPwrSchemes(lpfn, lParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_ReadGlobalPwrPolicy(win32::Windows::Win32::System::Power::GLOBAL_POWER_POLICY* pGlobalPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGlobalPowerPolicy);

        auto win32_impl_result = g_api_table.ReadGlobalPwrPolicy(pGlobalPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_ReadPwrScheme(uint32_t uiID, win32::Windows::Win32::System::Power::POWER_POLICY* pPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uiID);
        ORBIT_TRACK_PARAM(pPowerPolicy);

        auto win32_impl_result = g_api_table.ReadPwrScheme(uiID, pPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_WritePwrScheme(uint32_t* puiID, win32::Windows::Win32::Foundation::PWSTR lpszSchemeName, win32::Windows::Win32::Foundation::PWSTR lpszDescription, win32::Windows::Win32::System::Power::POWER_POLICY* lpScheme) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(puiID);
        ORBIT_TRACK_PARAM(lpszSchemeName);
        ORBIT_TRACK_PARAM(lpszDescription);
        ORBIT_TRACK_PARAM(lpScheme);

        auto win32_impl_result = g_api_table.WritePwrScheme(puiID, lpszSchemeName, lpszDescription, lpScheme);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_WriteGlobalPwrPolicy(win32::Windows::Win32::System::Power::GLOBAL_POWER_POLICY* pGlobalPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGlobalPowerPolicy);

        auto win32_impl_result = g_api_table.WriteGlobalPwrPolicy(pGlobalPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_DeletePwrScheme(uint32_t uiID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uiID);

        auto win32_impl_result = g_api_table.DeletePwrScheme(uiID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_GetActivePwrScheme(uint32_t* puiID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(puiID);

        auto win32_impl_result = g_api_table.GetActivePwrScheme(puiID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_SetActivePwrScheme(uint32_t uiID, win32::Windows::Win32::System::Power::GLOBAL_POWER_POLICY* pGlobalPowerPolicy, win32::Windows::Win32::System::Power::POWER_POLICY* pPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uiID);
        ORBIT_TRACK_PARAM(pGlobalPowerPolicy);
        ORBIT_TRACK_PARAM(pPowerPolicy);

        auto win32_impl_result = g_api_table.SetActivePwrScheme(uiID, pGlobalPowerPolicy, pPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsPwrSuspendAllowed() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.IsPwrSuspendAllowed();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsPwrHibernateAllowed() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.IsPwrHibernateAllowed();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsPwrShutdownAllowed() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.IsPwrShutdownAllowed();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsAdminOverrideActive(win32::Windows::Win32::System::Power::ADMINISTRATOR_POWER_POLICY* papp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(papp);

        auto win32_impl_result = g_api_table.IsAdminOverrideActive(papp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_SetSuspendState(win32::Windows::Win32::Foundation::BOOLEAN bHibernate, win32::Windows::Win32::Foundation::BOOLEAN bForce, win32::Windows::Win32::Foundation::BOOLEAN bWakeupEventsDisabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bHibernate);
        ORBIT_TRACK_PARAM(bForce);
        ORBIT_TRACK_PARAM(bWakeupEventsDisabled);

        auto win32_impl_result = g_api_table.SetSuspendState(bHibernate, bForce, bWakeupEventsDisabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_GetCurrentPowerPolicies(win32::Windows::Win32::System::Power::GLOBAL_POWER_POLICY* pGlobalPowerPolicy, win32::Windows::Win32::System::Power::POWER_POLICY* pPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGlobalPowerPolicy);
        ORBIT_TRACK_PARAM(pPowerPolicy);

        auto win32_impl_result = g_api_table.GetCurrentPowerPolicies(pGlobalPowerPolicy, pPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_CanUserWritePwrScheme() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.CanUserWritePwrScheme();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_ReadProcessorPwrScheme(uint32_t uiID, win32::Windows::Win32::System::Power::MACHINE_PROCESSOR_POWER_POLICY* pMachineProcessorPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uiID);
        ORBIT_TRACK_PARAM(pMachineProcessorPowerPolicy);

        auto win32_impl_result = g_api_table.ReadProcessorPwrScheme(uiID, pMachineProcessorPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_WriteProcessorPwrScheme(uint32_t uiID, win32::Windows::Win32::System::Power::MACHINE_PROCESSOR_POWER_POLICY* pMachineProcessorPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uiID);
        ORBIT_TRACK_PARAM(pMachineProcessorPowerPolicy);

        auto win32_impl_result = g_api_table.WriteProcessorPwrScheme(uiID, pMachineProcessorPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_ValidatePowerPolicies(win32::Windows::Win32::System::Power::GLOBAL_POWER_POLICY* pGlobalPowerPolicy, win32::Windows::Win32::System::Power::POWER_POLICY* pPowerPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGlobalPowerPolicy);
        ORBIT_TRACK_PARAM(pPowerPolicy);

        auto win32_impl_result = g_api_table.ValidatePowerPolicies(pGlobalPowerPolicy, pPowerPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_PowerIsSettingRangeDefined(::win32::guid* SubKeyGuid, ::win32::guid* SettingGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SubKeyGuid);
        ORBIT_TRACK_PARAM(SettingGuid);

        auto win32_impl_result = g_api_table.PowerIsSettingRangeDefined(SubKeyGuid, SettingGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerSettingAccessCheckEx(win32::Windows::Win32::System::Power::POWER_DATA_ACCESSOR AccessFlags, ::win32::guid* PowerGuid, win32::Windows::Win32::System::Registry::REG_SAM_FLAGS AccessType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AccessFlags);
        ORBIT_TRACK_PARAM(PowerGuid);
        ORBIT_TRACK_PARAM(AccessType);

        auto win32_impl_result = g_api_table.PowerSettingAccessCheckEx(AccessFlags, PowerGuid, AccessType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerSettingAccessCheck(win32::Windows::Win32::System::Power::POWER_DATA_ACCESSOR AccessFlags, ::win32::guid* PowerGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AccessFlags);
        ORBIT_TRACK_PARAM(PowerGuid);

        auto win32_impl_result = g_api_table.PowerSettingAccessCheck(AccessFlags, PowerGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadACValueIndex(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* AcValueIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(AcValueIndex);

        auto win32_impl_result = g_api_table.PowerReadACValueIndex(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, AcValueIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadDCValueIndex(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* DcValueIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(DcValueIndex);

        auto win32_impl_result = g_api_table.PowerReadDCValueIndex(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DcValueIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadFriendlyName(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadFriendlyName(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadDescription(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadDescription(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadPossibleValue(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* Type, uint32_t PossibleSettingIndex, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadPossibleValue(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Type, PossibleSettingIndex, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadPossibleFriendlyName(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t PossibleSettingIndex, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadPossibleFriendlyName(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadPossibleDescription(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t PossibleSettingIndex, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadPossibleDescription(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadValueMin(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* ValueMinimum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(ValueMinimum);

        auto win32_impl_result = g_api_table.PowerReadValueMin(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, ValueMinimum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadValueMax(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* ValueMaximum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(ValueMaximum);

        auto win32_impl_result = g_api_table.PowerReadValueMax(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, ValueMaximum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadValueIncrement(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* ValueIncrement) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(ValueIncrement);

        auto win32_impl_result = g_api_table.PowerReadValueIncrement(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, ValueIncrement);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadValueUnitsSpecifier(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadValueUnitsSpecifier(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadACDefaultIndex(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemePersonalityGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* AcDefaultIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemePersonalityGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(AcDefaultIndex);

        auto win32_impl_result = g_api_table.PowerReadACDefaultIndex(RootPowerKey, SchemePersonalityGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, AcDefaultIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadDCDefaultIndex(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemePersonalityGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t* DcDefaultIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemePersonalityGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(DcDefaultIndex);

        auto win32_impl_result = g_api_table.PowerReadDCDefaultIndex(RootPowerKey, SchemePersonalityGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DcDefaultIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadIconResourceSpecifier(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerReadIconResourceSpecifier(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReadSettingAttributes(::win32::guid* SubGroupGuid, ::win32::guid* PowerSettingGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SubGroupGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);

        auto win32_impl_result = g_api_table.PowerReadSettingAttributes(SubGroupGuid, PowerSettingGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteFriendlyName(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWriteFriendlyName(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteDescription(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWriteDescription(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWritePossibleValue(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t Type, uint32_t PossibleSettingIndex, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWritePossibleValue(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Type, PossibleSettingIndex, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWritePossibleFriendlyName(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t PossibleSettingIndex, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWritePossibleFriendlyName(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWritePossibleDescription(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t PossibleSettingIndex, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWritePossibleDescription(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteValueMin(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t ValueMinimum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(ValueMinimum);

        auto win32_impl_result = g_api_table.PowerWriteValueMin(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, ValueMinimum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteValueMax(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t ValueMaximum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(ValueMaximum);

        auto win32_impl_result = g_api_table.PowerWriteValueMax(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, ValueMaximum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteValueIncrement(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t ValueIncrement) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(ValueIncrement);

        auto win32_impl_result = g_api_table.PowerWriteValueIncrement(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, ValueIncrement);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteValueUnitsSpecifier(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWriteValueUnitsSpecifier(RootPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteACDefaultIndex(win32::Windows::Win32::System::Registry::HKEY RootSystemPowerKey, ::win32::guid* SchemePersonalityGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t DefaultAcIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootSystemPowerKey);
        ORBIT_TRACK_PARAM(SchemePersonalityGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(DefaultAcIndex);

        auto win32_impl_result = g_api_table.PowerWriteACDefaultIndex(RootSystemPowerKey, SchemePersonalityGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DefaultAcIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteDCDefaultIndex(win32::Windows::Win32::System::Registry::HKEY RootSystemPowerKey, ::win32::guid* SchemePersonalityGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t DefaultDcIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootSystemPowerKey);
        ORBIT_TRACK_PARAM(SchemePersonalityGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(DefaultDcIndex);

        auto win32_impl_result = g_api_table.PowerWriteDCDefaultIndex(RootSystemPowerKey, SchemePersonalityGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, DefaultDcIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteIconResourceSpecifier(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint8_t* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerWriteIconResourceSpecifier(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, PowerSettingGuid, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerWriteSettingAttributes(::win32::guid* SubGroupGuid, ::win32::guid* PowerSettingGuid, uint32_t Attributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SubGroupGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Attributes);

        auto win32_impl_result = g_api_table.PowerWriteSettingAttributes(SubGroupGuid, PowerSettingGuid, Attributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerDuplicateScheme(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SourceSchemeGuid, ::win32::guid** DestinationSchemeGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SourceSchemeGuid);
        ORBIT_TRACK_PARAM(DestinationSchemeGuid);

        auto win32_impl_result = g_api_table.PowerDuplicateScheme(RootPowerKey, SourceSchemeGuid, DestinationSchemeGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerImportPowerScheme(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, win32::Windows::Win32::Foundation::PWSTR ImportFileNamePath, ::win32::guid** DestinationSchemeGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(ImportFileNamePath);
        ORBIT_TRACK_PARAM(DestinationSchemeGuid);

        auto win32_impl_result = g_api_table.PowerImportPowerScheme(RootPowerKey, ImportFileNamePath, DestinationSchemeGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerDeleteScheme(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);

        auto win32_impl_result = g_api_table.PowerDeleteScheme(RootPowerKey, SchemeGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerRemovePowerSetting(::win32::guid* PowerSettingSubKeyGuid, ::win32::guid* PowerSettingGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PowerSettingSubKeyGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);

        auto win32_impl_result = g_api_table.PowerRemovePowerSetting(PowerSettingSubKeyGuid, PowerSettingGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerCreateSetting(win32::Windows::Win32::System::Registry::HKEY RootSystemPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootSystemPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);

        auto win32_impl_result = g_api_table.PowerCreateSetting(RootSystemPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerCreatePossibleSetting(win32::Windows::Win32::System::Registry::HKEY RootSystemPowerKey, ::win32::guid* SubGroupOfPowerSettingsGuid, ::win32::guid* PowerSettingGuid, uint32_t PossibleSettingIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootSystemPowerKey);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(PossibleSettingIndex);

        auto win32_impl_result = g_api_table.PowerCreatePossibleSetting(RootSystemPowerKey, SubGroupOfPowerSettingsGuid, PowerSettingGuid, PossibleSettingIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerEnumerate(win32::Windows::Win32::System::Registry::HKEY RootPowerKey, ::win32::guid* SchemeGuid, ::win32::guid* SubGroupOfPowerSettingsGuid, win32::Windows::Win32::System::Power::POWER_DATA_ACCESSOR AccessFlags, uint32_t Index, uint8_t* Buffer, uint32_t* BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RootPowerKey);
        ORBIT_TRACK_PARAM(SchemeGuid);
        ORBIT_TRACK_PARAM(SubGroupOfPowerSettingsGuid);
        ORBIT_TRACK_PARAM(AccessFlags);
        ORBIT_TRACK_PARAM(Index);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.PowerEnumerate(RootPowerKey, SchemeGuid, SubGroupOfPowerSettingsGuid, AccessFlags, Index, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerOpenUserPowerKey(win32::Windows::Win32::System::Registry::HKEY* phUserPowerKey, uint32_t Access, win32::Windows::Win32::Foundation::BOOL OpenExisting) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phUserPowerKey);
        ORBIT_TRACK_PARAM(Access);
        ORBIT_TRACK_PARAM(OpenExisting);

        auto win32_impl_result = g_api_table.PowerOpenUserPowerKey(phUserPowerKey, Access, OpenExisting);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerOpenSystemPowerKey(win32::Windows::Win32::System::Registry::HKEY* phSystemPowerKey, uint32_t Access, win32::Windows::Win32::Foundation::BOOL OpenExisting) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phSystemPowerKey);
        ORBIT_TRACK_PARAM(Access);
        ORBIT_TRACK_PARAM(OpenExisting);

        auto win32_impl_result = g_api_table.PowerOpenSystemPowerKey(phSystemPowerKey, Access, OpenExisting);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerCanRestoreIndividualDefaultPowerScheme(::win32::guid* SchemeGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SchemeGuid);

        auto win32_impl_result = g_api_table.PowerCanRestoreIndividualDefaultPowerScheme(SchemeGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerRestoreIndividualDefaultPowerScheme(::win32::guid* SchemeGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SchemeGuid);

        auto win32_impl_result = g_api_table.PowerRestoreIndividualDefaultPowerScheme(SchemeGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerRestoreDefaultPowerSchemes() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PowerRestoreDefaultPowerSchemes();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReplaceDefaultPowerSchemes() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PowerReplaceDefaultPowerSchemes();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Power::POWER_PLATFORM_ROLE __stdcall ORBIT_IMPL_PowerDeterminePlatformRole() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PowerDeterminePlatformRole();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_DevicePowerEnumDevices(uint32_t QueryIndex, uint32_t QueryInterpretationFlags, uint32_t QueryFlags, uint8_t* pReturnBuffer, uint32_t* pBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QueryIndex);
        ORBIT_TRACK_PARAM(QueryInterpretationFlags);
        ORBIT_TRACK_PARAM(QueryFlags);
        ORBIT_TRACK_PARAM(pReturnBuffer);
        ORBIT_TRACK_PARAM(pBufferSize);

        auto win32_impl_result = g_api_table.DevicePowerEnumDevices(QueryIndex, QueryInterpretationFlags, QueryFlags, pReturnBuffer, pBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DevicePowerSetDeviceState(win32::Windows::Win32::Foundation::PWSTR DeviceDescription, uint32_t SetFlags, void* SetData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DeviceDescription);
        ORBIT_TRACK_PARAM(SetFlags);
        ORBIT_TRACK_PARAM(SetData);

        auto win32_impl_result = g_api_table.DevicePowerSetDeviceState(DeviceDescription, SetFlags, SetData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_DevicePowerOpen(uint32_t DebugMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DebugMask);

        auto win32_impl_result = g_api_table.DevicePowerOpen(DebugMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_DevicePowerClose() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.DevicePowerClose();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PowerReportThermalEvent(win32::Windows::Win32::System::Power::THERMAL_EVENT* Event) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Event);

        auto win32_impl_result = g_api_table.PowerReportThermalEvent(Event);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Power::HPOWERNOTIFY __stdcall ORBIT_IMPL_RegisterPowerSettingNotification(win32::Windows::Win32::Foundation::HANDLE hRecipient, ::win32::guid* PowerSettingGuid, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRecipient);
        ORBIT_TRACK_PARAM(PowerSettingGuid);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.RegisterPowerSettingNotification(hRecipient, PowerSettingGuid, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnregisterPowerSettingNotification(win32::Windows::Win32::System::Power::HPOWERNOTIFY Handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);

        auto win32_impl_result = g_api_table.UnregisterPowerSettingNotification(Handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Power::HPOWERNOTIFY __stdcall ORBIT_IMPL_RegisterSuspendResumeNotification(win32::Windows::Win32::Foundation::HANDLE hRecipient, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRecipient);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.RegisterSuspendResumeNotification(hRecipient, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnregisterSuspendResumeNotification(win32::Windows::Win32::System::Power::HPOWERNOTIFY Handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);

        auto win32_impl_result = g_api_table.UnregisterSuspendResumeNotification(Handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RequestWakeupLatency(win32::Windows::Win32::System::Power::LATENCY_TIME latency) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(latency);

        auto win32_impl_result = g_api_table.RequestWakeupLatency(latency);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsSystemResumeAutomatic() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.IsSystemResumeAutomatic();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Power::EXECUTION_STATE __stdcall ORBIT_IMPL_SetThreadExecutionState(win32::Windows::Win32::System::Power::EXECUTION_STATE esFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(esFlags);

        auto win32_impl_result = g_api_table.SetThreadExecutionState(esFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_PowerCreateRequest(win32::Windows::Win32::System::SystemServices::REASON_CONTEXT* Context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Context);

        auto win32_impl_result = g_api_table.PowerCreateRequest(Context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PowerSetRequest(win32::Windows::Win32::Foundation::HANDLE PowerRequest, win32::Windows::Win32::System::SystemServices::POWER_REQUEST_TYPE RequestType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PowerRequest);
        ORBIT_TRACK_PARAM(RequestType);

        auto win32_impl_result = g_api_table.PowerSetRequest(PowerRequest, RequestType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PowerClearRequest(win32::Windows::Win32::Foundation::HANDLE PowerRequest, win32::Windows::Win32::System::SystemServices::POWER_REQUEST_TYPE RequestType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PowerRequest);
        ORBIT_TRACK_PARAM(RequestType);

        auto win32_impl_result = g_api_table.PowerClearRequest(PowerRequest, RequestType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDevicePowerState(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Foundation::BOOL* pfOn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(pfOn);

        auto win32_impl_result = g_api_table.GetDevicePowerState(hDevice, pfOn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetSystemPowerState(win32::Windows::Win32::Foundation::BOOL fSuspend, win32::Windows::Win32::Foundation::BOOL fForce) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fSuspend);
        ORBIT_TRACK_PARAM(fForce);

        auto win32_impl_result = g_api_table.SetSystemPowerState(fSuspend, fForce);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetSystemPowerStatus(win32::Windows::Win32::System::Power::SYSTEM_POWER_STATUS* lpSystemPowerStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSystemPowerStatus);

        auto win32_impl_result = g_api_table.GetSystemPowerStatus(lpSystemPowerStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
