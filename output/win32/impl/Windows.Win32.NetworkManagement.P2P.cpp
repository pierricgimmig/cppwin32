// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_P2P_2_H
#define WIN32_Windows_Win32_NetworkManagement_P2P_2_H
#include "win32/Windows.Win32.NetworkManagement.P2P.h"
#include "win32/impl/Windows.Win32.NetworkManagement.P2P.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::P2P
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphStartup(uint16_t wVersionRequested, win32::Windows::Win32::NetworkManagement::P2P::PEER_VERSION_DATA* pVersionData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVersionRequested);
        ORBIT_TRACK_PARAM(pVersionData);

        auto win32_impl_result = g_api_table.PeerGraphStartup(wVersionRequested, pVersionData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphShutdown() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PeerGraphShutdown();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_PeerGraphFreeData(void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvData);

        g_api_table.PeerGraphFreeData(pvData);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetItemCount(void* hPeerEnum, uint32_t* pCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEnum);
        ORBIT_TRACK_PARAM(pCount);

        auto win32_impl_result = g_api_table.PeerGraphGetItemCount(hPeerEnum, pCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetNextItem(void* hPeerEnum, uint32_t* pCount, void*** pppvItems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEnum);
        ORBIT_TRACK_PARAM(pCount);
        ORBIT_TRACK_PARAM(pppvItems);

        auto win32_impl_result = g_api_table.PeerGraphGetNextItem(hPeerEnum, pCount, pppvItems);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphEndEnumeration(void* hPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEnum);

        auto win32_impl_result = g_api_table.PeerGraphEndEnumeration(hPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphCreate(win32::Windows::Win32::NetworkManagement::P2P::PEER_GRAPH_PROPERTIES* pGraphProperties, win32::Windows::Win32::Foundation::PWSTR pwzDatabaseName, win32::Windows::Win32::NetworkManagement::P2P::PEER_SECURITY_INTERFACE* pSecurityInterface, void** phGraph) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGraphProperties);
        ORBIT_TRACK_PARAM(pwzDatabaseName);
        ORBIT_TRACK_PARAM(pSecurityInterface);
        ORBIT_TRACK_PARAM(phGraph);

        auto win32_impl_result = g_api_table.PeerGraphCreate(pGraphProperties, pwzDatabaseName, pSecurityInterface, phGraph);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphOpen(win32::Windows::Win32::Foundation::PWSTR pwzGraphId, win32::Windows::Win32::Foundation::PWSTR pwzPeerId, win32::Windows::Win32::Foundation::PWSTR pwzDatabaseName, win32::Windows::Win32::NetworkManagement::P2P::PEER_SECURITY_INTERFACE* pSecurityInterface, uint32_t cRecordTypeSyncPrecedence, ::win32::guid* pRecordTypeSyncPrecedence, void** phGraph) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzGraphId);
        ORBIT_TRACK_PARAM(pwzPeerId);
        ORBIT_TRACK_PARAM(pwzDatabaseName);
        ORBIT_TRACK_PARAM(pSecurityInterface);
        ORBIT_TRACK_PARAM(cRecordTypeSyncPrecedence);
        ORBIT_TRACK_PARAM(pRecordTypeSyncPrecedence);
        ORBIT_TRACK_PARAM(phGraph);

        auto win32_impl_result = g_api_table.PeerGraphOpen(pwzGraphId, pwzPeerId, pwzDatabaseName, pSecurityInterface, cRecordTypeSyncPrecedence, pRecordTypeSyncPrecedence, phGraph);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphListen(void* hGraph, uint32_t dwScope, uint32_t dwScopeId, uint16_t wPort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(dwScope);
        ORBIT_TRACK_PARAM(dwScopeId);
        ORBIT_TRACK_PARAM(wPort);

        auto win32_impl_result = g_api_table.PeerGraphListen(hGraph, dwScope, dwScopeId, wPort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphConnect(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzPeerId, win32::Windows::Win32::NetworkManagement::P2P::PEER_ADDRESS* pAddress, uint64_t* pullConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzPeerId);
        ORBIT_TRACK_PARAM(pAddress);
        ORBIT_TRACK_PARAM(pullConnectionId);

        auto win32_impl_result = g_api_table.PeerGraphConnect(hGraph, pwzPeerId, pAddress, pullConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphClose(void* hGraph) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);

        auto win32_impl_result = g_api_table.PeerGraphClose(hGraph);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphDelete(win32::Windows::Win32::Foundation::PWSTR pwzGraphId, win32::Windows::Win32::Foundation::PWSTR pwzPeerId, win32::Windows::Win32::Foundation::PWSTR pwzDatabaseName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzGraphId);
        ORBIT_TRACK_PARAM(pwzPeerId);
        ORBIT_TRACK_PARAM(pwzDatabaseName);

        auto win32_impl_result = g_api_table.PeerGraphDelete(pwzGraphId, pwzPeerId, pwzDatabaseName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetStatus(void* hGraph, uint32_t* pdwStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pdwStatus);

        auto win32_impl_result = g_api_table.PeerGraphGetStatus(hGraph, pdwStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetProperties(void* hGraph, win32::Windows::Win32::NetworkManagement::P2P::PEER_GRAPH_PROPERTIES** ppGraphProperties) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(ppGraphProperties);

        auto win32_impl_result = g_api_table.PeerGraphGetProperties(hGraph, ppGraphProperties);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphSetProperties(void* hGraph, win32::Windows::Win32::NetworkManagement::P2P::PEER_GRAPH_PROPERTIES* pGraphProperties) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pGraphProperties);

        auto win32_impl_result = g_api_table.PeerGraphSetProperties(hGraph, pGraphProperties);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphRegisterEvent(void* hGraph, win32::Windows::Win32::Foundation::HANDLE hEvent, uint32_t cEventRegistrations, win32::Windows::Win32::NetworkManagement::P2P::PEER_GRAPH_EVENT_REGISTRATION* pEventRegistrations, void** phPeerEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(cEventRegistrations);
        ORBIT_TRACK_PARAM(pEventRegistrations);
        ORBIT_TRACK_PARAM(phPeerEvent);

        auto win32_impl_result = g_api_table.PeerGraphRegisterEvent(hGraph, hEvent, cEventRegistrations, pEventRegistrations, phPeerEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphUnregisterEvent(void* hPeerEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEvent);

        auto win32_impl_result = g_api_table.PeerGraphUnregisterEvent(hPeerEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetEventData(void* hPeerEvent, win32::Windows::Win32::NetworkManagement::P2P::PEER_GRAPH_EVENT_DATA** ppEventData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEvent);
        ORBIT_TRACK_PARAM(ppEventData);

        auto win32_impl_result = g_api_table.PeerGraphGetEventData(hPeerEvent, ppEventData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetRecord(void* hGraph, ::win32::guid* pRecordId, win32::Windows::Win32::NetworkManagement::P2P::PEER_RECORD** ppRecord) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pRecordId);
        ORBIT_TRACK_PARAM(ppRecord);

        auto win32_impl_result = g_api_table.PeerGraphGetRecord(hGraph, pRecordId, ppRecord);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphAddRecord(void* hGraph, win32::Windows::Win32::NetworkManagement::P2P::PEER_RECORD* pRecord, ::win32::guid* pRecordId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pRecord);
        ORBIT_TRACK_PARAM(pRecordId);

        auto win32_impl_result = g_api_table.PeerGraphAddRecord(hGraph, pRecord, pRecordId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphUpdateRecord(void* hGraph, win32::Windows::Win32::NetworkManagement::P2P::PEER_RECORD* pRecord) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pRecord);

        auto win32_impl_result = g_api_table.PeerGraphUpdateRecord(hGraph, pRecord);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphDeleteRecord(void* hGraph, ::win32::guid* pRecordId, win32::Windows::Win32::Foundation::BOOL fLocal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pRecordId);
        ORBIT_TRACK_PARAM(fLocal);

        auto win32_impl_result = g_api_table.PeerGraphDeleteRecord(hGraph, pRecordId, fLocal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphEnumRecords(void* hGraph, ::win32::guid* pRecordType, win32::Windows::Win32::Foundation::PWSTR pwzPeerId, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pRecordType);
        ORBIT_TRACK_PARAM(pwzPeerId);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGraphEnumRecords(hGraph, pRecordType, pwzPeerId, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphSearchRecords(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzCriteria, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzCriteria);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGraphSearchRecords(hGraph, pwzCriteria, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphExportDatabase(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzFilePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzFilePath);

        auto win32_impl_result = g_api_table.PeerGraphExportDatabase(hGraph, pwzFilePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphImportDatabase(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzFilePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzFilePath);

        auto win32_impl_result = g_api_table.PeerGraphImportDatabase(hGraph, pwzFilePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphValidateDeferredRecords(void* hGraph, uint32_t cRecordIds, ::win32::guid* pRecordIds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(cRecordIds);
        ORBIT_TRACK_PARAM(pRecordIds);

        auto win32_impl_result = g_api_table.PeerGraphValidateDeferredRecords(hGraph, cRecordIds, pRecordIds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphOpenDirectConnection(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzPeerId, win32::Windows::Win32::NetworkManagement::P2P::PEER_ADDRESS* pAddress, uint64_t* pullConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzPeerId);
        ORBIT_TRACK_PARAM(pAddress);
        ORBIT_TRACK_PARAM(pullConnectionId);

        auto win32_impl_result = g_api_table.PeerGraphOpenDirectConnection(hGraph, pwzPeerId, pAddress, pullConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphSendData(void* hGraph, uint64_t ullConnectionId, ::win32::guid* pType, uint32_t cbData, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(ullConnectionId);
        ORBIT_TRACK_PARAM(pType);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.PeerGraphSendData(hGraph, ullConnectionId, pType, cbData, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphCloseDirectConnection(void* hGraph, uint64_t ullConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(ullConnectionId);

        auto win32_impl_result = g_api_table.PeerGraphCloseDirectConnection(hGraph, ullConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphEnumConnections(void* hGraph, uint32_t dwFlags, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGraphEnumConnections(hGraph, dwFlags, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphEnumNodes(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzPeerId, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzPeerId);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGraphEnumNodes(hGraph, pwzPeerId, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphSetPresence(void* hGraph, win32::Windows::Win32::Foundation::BOOL fPresent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(fPresent);

        auto win32_impl_result = g_api_table.PeerGraphSetPresence(hGraph, fPresent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphGetNodeInfo(void* hGraph, uint64_t ullNodeId, win32::Windows::Win32::NetworkManagement::P2P::PEER_NODE_INFO** ppNodeInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(ullNodeId);
        ORBIT_TRACK_PARAM(ppNodeInfo);

        auto win32_impl_result = g_api_table.PeerGraphGetNodeInfo(hGraph, ullNodeId, ppNodeInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphSetNodeAttributes(void* hGraph, win32::Windows::Win32::Foundation::PWSTR pwzAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pwzAttributes);

        auto win32_impl_result = g_api_table.PeerGraphSetNodeAttributes(hGraph, pwzAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphPeerTimeToUniversalTime(void* hGraph, win32::Windows::Win32::Foundation::FILETIME* pftPeerTime, win32::Windows::Win32::Foundation::FILETIME* pftUniversalTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pftPeerTime);
        ORBIT_TRACK_PARAM(pftUniversalTime);

        auto win32_impl_result = g_api_table.PeerGraphPeerTimeToUniversalTime(hGraph, pftPeerTime, pftUniversalTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGraphUniversalTimeToPeerTime(void* hGraph, win32::Windows::Win32::Foundation::FILETIME* pftUniversalTime, win32::Windows::Win32::Foundation::FILETIME* pftPeerTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGraph);
        ORBIT_TRACK_PARAM(pftUniversalTime);
        ORBIT_TRACK_PARAM(pftPeerTime);

        auto win32_impl_result = g_api_table.PeerGraphUniversalTimeToPeerTime(hGraph, pftUniversalTime, pftPeerTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_PeerFreeData(void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvData);

        g_api_table.PeerFreeData(pvData);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGetItemCount(void* hPeerEnum, uint32_t* pCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEnum);
        ORBIT_TRACK_PARAM(pCount);

        auto win32_impl_result = g_api_table.PeerGetItemCount(hPeerEnum, pCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGetNextItem(void* hPeerEnum, uint32_t* pCount, void*** pppvItems) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEnum);
        ORBIT_TRACK_PARAM(pCount);
        ORBIT_TRACK_PARAM(pppvItems);

        auto win32_impl_result = g_api_table.PeerGetNextItem(hPeerEnum, pCount, pppvItems);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerEndEnumeration(void* hPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEnum);

        auto win32_impl_result = g_api_table.PeerEndEnumeration(hPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupStartup(uint16_t wVersionRequested, win32::Windows::Win32::NetworkManagement::P2P::PEER_VERSION_DATA* pVersionData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVersionRequested);
        ORBIT_TRACK_PARAM(pVersionData);

        auto win32_impl_result = g_api_table.PeerGroupStartup(wVersionRequested, pVersionData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupShutdown() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PeerGroupShutdown();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupCreate(win32::Windows::Win32::NetworkManagement::P2P::PEER_GROUP_PROPERTIES* pProperties, void** phGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pProperties);
        ORBIT_TRACK_PARAM(phGroup);

        auto win32_impl_result = g_api_table.PeerGroupCreate(pProperties, phGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupOpen(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzGroupPeerName, win32::Windows::Win32::Foundation::PWSTR pwzCloud, void** phGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzGroupPeerName);
        ORBIT_TRACK_PARAM(pwzCloud);
        ORBIT_TRACK_PARAM(phGroup);

        auto win32_impl_result = g_api_table.PeerGroupOpen(pwzIdentity, pwzGroupPeerName, pwzCloud, phGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupJoin(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzInvitation, win32::Windows::Win32::Foundation::PWSTR pwzCloud, void** phGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzInvitation);
        ORBIT_TRACK_PARAM(pwzCloud);
        ORBIT_TRACK_PARAM(phGroup);

        auto win32_impl_result = g_api_table.PeerGroupJoin(pwzIdentity, pwzInvitation, pwzCloud, phGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupPasswordJoin(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzInvitation, win32::Windows::Win32::Foundation::PWSTR pwzPassword, win32::Windows::Win32::Foundation::PWSTR pwzCloud, void** phGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzInvitation);
        ORBIT_TRACK_PARAM(pwzPassword);
        ORBIT_TRACK_PARAM(pwzCloud);
        ORBIT_TRACK_PARAM(phGroup);

        auto win32_impl_result = g_api_table.PeerGroupPasswordJoin(pwzIdentity, pwzInvitation, pwzPassword, pwzCloud, phGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupConnect(void* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.PeerGroupConnect(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupConnectByAddress(void* hGroup, uint32_t cAddresses, win32::Windows::Win32::NetworkManagement::P2P::PEER_ADDRESS* pAddresses) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(cAddresses);
        ORBIT_TRACK_PARAM(pAddresses);

        auto win32_impl_result = g_api_table.PeerGroupConnectByAddress(hGroup, cAddresses, pAddresses);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupClose(void* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.PeerGroupClose(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupDelete(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzGroupPeerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzGroupPeerName);

        auto win32_impl_result = g_api_table.PeerGroupDelete(pwzIdentity, pwzGroupPeerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupCreateInvitation(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzIdentityInfo, win32::Windows::Win32::Foundation::FILETIME* pftExpiration, uint32_t cRoles, ::win32::guid* pRoles, win32::Windows::Win32::Foundation::PWSTR* ppwzInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzIdentityInfo);
        ORBIT_TRACK_PARAM(pftExpiration);
        ORBIT_TRACK_PARAM(cRoles);
        ORBIT_TRACK_PARAM(pRoles);
        ORBIT_TRACK_PARAM(ppwzInvitation);

        auto win32_impl_result = g_api_table.PeerGroupCreateInvitation(hGroup, pwzIdentityInfo, pftExpiration, cRoles, pRoles, ppwzInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupCreatePasswordInvitation(void* hGroup, win32::Windows::Win32::Foundation::PWSTR* ppwzInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(ppwzInvitation);

        auto win32_impl_result = g_api_table.PeerGroupCreatePasswordInvitation(hGroup, ppwzInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupParseInvitation(win32::Windows::Win32::Foundation::PWSTR pwzInvitation, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION_INFO** ppInvitationInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzInvitation);
        ORBIT_TRACK_PARAM(ppInvitationInfo);

        auto win32_impl_result = g_api_table.PeerGroupParseInvitation(pwzInvitation, ppInvitationInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupGetStatus(void* hGroup, uint32_t* pdwStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pdwStatus);

        auto win32_impl_result = g_api_table.PeerGroupGetStatus(hGroup, pdwStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupGetProperties(void* hGroup, win32::Windows::Win32::NetworkManagement::P2P::PEER_GROUP_PROPERTIES** ppProperties) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(ppProperties);

        auto win32_impl_result = g_api_table.PeerGroupGetProperties(hGroup, ppProperties);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupSetProperties(void* hGroup, win32::Windows::Win32::NetworkManagement::P2P::PEER_GROUP_PROPERTIES* pProperties) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pProperties);

        auto win32_impl_result = g_api_table.PeerGroupSetProperties(hGroup, pProperties);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupEnumMembers(void* hGroup, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwzIdentity, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGroupEnumMembers(hGroup, dwFlags, pwzIdentity, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupOpenDirectConnection(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::NetworkManagement::P2P::PEER_ADDRESS* pAddress, uint64_t* pullConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pAddress);
        ORBIT_TRACK_PARAM(pullConnectionId);

        auto win32_impl_result = g_api_table.PeerGroupOpenDirectConnection(hGroup, pwzIdentity, pAddress, pullConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupCloseDirectConnection(void* hGroup, uint64_t ullConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(ullConnectionId);

        auto win32_impl_result = g_api_table.PeerGroupCloseDirectConnection(hGroup, ullConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupEnumConnections(void* hGroup, uint32_t dwFlags, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGroupEnumConnections(hGroup, dwFlags, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupSendData(void* hGroup, uint64_t ullConnectionId, ::win32::guid* pType, uint32_t cbData, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(ullConnectionId);
        ORBIT_TRACK_PARAM(pType);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.PeerGroupSendData(hGroup, ullConnectionId, pType, cbData, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupRegisterEvent(void* hGroup, win32::Windows::Win32::Foundation::HANDLE hEvent, uint32_t cEventRegistration, win32::Windows::Win32::NetworkManagement::P2P::PEER_GROUP_EVENT_REGISTRATION* pEventRegistrations, void** phPeerEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(cEventRegistration);
        ORBIT_TRACK_PARAM(pEventRegistrations);
        ORBIT_TRACK_PARAM(phPeerEvent);

        auto win32_impl_result = g_api_table.PeerGroupRegisterEvent(hGroup, hEvent, cEventRegistration, pEventRegistrations, phPeerEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupUnregisterEvent(void* hPeerEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEvent);

        auto win32_impl_result = g_api_table.PeerGroupUnregisterEvent(hPeerEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupGetEventData(void* hPeerEvent, win32::Windows::Win32::NetworkManagement::P2P::PEER_GROUP_EVENT_DATA** ppEventData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEvent);
        ORBIT_TRACK_PARAM(ppEventData);

        auto win32_impl_result = g_api_table.PeerGroupGetEventData(hPeerEvent, ppEventData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupGetRecord(void* hGroup, ::win32::guid* pRecordId, win32::Windows::Win32::NetworkManagement::P2P::PEER_RECORD** ppRecord) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pRecordId);
        ORBIT_TRACK_PARAM(ppRecord);

        auto win32_impl_result = g_api_table.PeerGroupGetRecord(hGroup, pRecordId, ppRecord);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupAddRecord(void* hGroup, win32::Windows::Win32::NetworkManagement::P2P::PEER_RECORD* pRecord, ::win32::guid* pRecordId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pRecord);
        ORBIT_TRACK_PARAM(pRecordId);

        auto win32_impl_result = g_api_table.PeerGroupAddRecord(hGroup, pRecord, pRecordId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupUpdateRecord(void* hGroup, win32::Windows::Win32::NetworkManagement::P2P::PEER_RECORD* pRecord) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pRecord);

        auto win32_impl_result = g_api_table.PeerGroupUpdateRecord(hGroup, pRecord);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupDeleteRecord(void* hGroup, ::win32::guid* pRecordId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pRecordId);

        auto win32_impl_result = g_api_table.PeerGroupDeleteRecord(hGroup, pRecordId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupEnumRecords(void* hGroup, ::win32::guid* pRecordType, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pRecordType);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGroupEnumRecords(hGroup, pRecordType, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupSearchRecords(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzCriteria, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzCriteria);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerGroupSearchRecords(hGroup, pwzCriteria, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupExportDatabase(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzFilePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzFilePath);

        auto win32_impl_result = g_api_table.PeerGroupExportDatabase(hGroup, pwzFilePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupImportDatabase(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzFilePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzFilePath);

        auto win32_impl_result = g_api_table.PeerGroupImportDatabase(hGroup, pwzFilePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupIssueCredentials(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzSubjectIdentity, win32::Windows::Win32::NetworkManagement::P2P::PEER_CREDENTIAL_INFO* pCredentialInfo, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR* ppwzInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzSubjectIdentity);
        ORBIT_TRACK_PARAM(pCredentialInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(ppwzInvitation);

        auto win32_impl_result = g_api_table.PeerGroupIssueCredentials(hGroup, pwzSubjectIdentity, pCredentialInfo, dwFlags, ppwzInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupExportConfig(void* hGroup, win32::Windows::Win32::Foundation::PWSTR pwzPassword, win32::Windows::Win32::Foundation::PWSTR* ppwzXML) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pwzPassword);
        ORBIT_TRACK_PARAM(ppwzXML);

        auto win32_impl_result = g_api_table.PeerGroupExportConfig(hGroup, pwzPassword, ppwzXML);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupImportConfig(win32::Windows::Win32::Foundation::PWSTR pwzXML, win32::Windows::Win32::Foundation::PWSTR pwzPassword, win32::Windows::Win32::Foundation::BOOL fOverwrite, win32::Windows::Win32::Foundation::PWSTR* ppwzIdentity, win32::Windows::Win32::Foundation::PWSTR* ppwzGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzXML);
        ORBIT_TRACK_PARAM(pwzPassword);
        ORBIT_TRACK_PARAM(fOverwrite);
        ORBIT_TRACK_PARAM(ppwzIdentity);
        ORBIT_TRACK_PARAM(ppwzGroup);

        auto win32_impl_result = g_api_table.PeerGroupImportConfig(pwzXML, pwzPassword, fOverwrite, ppwzIdentity, ppwzGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupPeerTimeToUniversalTime(void* hGroup, win32::Windows::Win32::Foundation::FILETIME* pftPeerTime, win32::Windows::Win32::Foundation::FILETIME* pftUniversalTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pftPeerTime);
        ORBIT_TRACK_PARAM(pftUniversalTime);

        auto win32_impl_result = g_api_table.PeerGroupPeerTimeToUniversalTime(hGroup, pftPeerTime, pftUniversalTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupUniversalTimeToPeerTime(void* hGroup, win32::Windows::Win32::Foundation::FILETIME* pftUniversalTime, win32::Windows::Win32::Foundation::FILETIME* pftPeerTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pftUniversalTime);
        ORBIT_TRACK_PARAM(pftPeerTime);

        auto win32_impl_result = g_api_table.PeerGroupUniversalTimeToPeerTime(hGroup, pftUniversalTime, pftPeerTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerGroupResumePasswordAuthentication(void* hGroup, void* hPeerEventHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hPeerEventHandle);

        auto win32_impl_result = g_api_table.PeerGroupResumePasswordAuthentication(hGroup, hPeerEventHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityCreate(win32::Windows::Win32::Foundation::PWSTR pwzClassifier, win32::Windows::Win32::Foundation::PWSTR pwzFriendlyName, size_t hCryptProv, win32::Windows::Win32::Foundation::PWSTR* ppwzIdentity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzClassifier);
        ORBIT_TRACK_PARAM(pwzFriendlyName);
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(ppwzIdentity);

        auto win32_impl_result = g_api_table.PeerIdentityCreate(pwzClassifier, pwzFriendlyName, hCryptProv, ppwzIdentity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityGetFriendlyName(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR* ppwzFriendlyName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(ppwzFriendlyName);

        auto win32_impl_result = g_api_table.PeerIdentityGetFriendlyName(pwzIdentity, ppwzFriendlyName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentitySetFriendlyName(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzFriendlyName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzFriendlyName);

        auto win32_impl_result = g_api_table.PeerIdentitySetFriendlyName(pwzIdentity, pwzFriendlyName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityGetCryptKey(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, size_t* phCryptProv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(phCryptProv);

        auto win32_impl_result = g_api_table.PeerIdentityGetCryptKey(pwzIdentity, phCryptProv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityDelete(win32::Windows::Win32::Foundation::PWSTR pwzIdentity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);

        auto win32_impl_result = g_api_table.PeerIdentityDelete(pwzIdentity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerEnumIdentities(void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerEnumIdentities(phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerEnumGroups(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerEnumGroups(pwzIdentity, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCreatePeerName(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzClassifier, win32::Windows::Win32::Foundation::PWSTR* ppwzPeerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzClassifier);
        ORBIT_TRACK_PARAM(ppwzPeerName);

        auto win32_impl_result = g_api_table.PeerCreatePeerName(pwzIdentity, pwzClassifier, ppwzPeerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityGetXML(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR* ppwzIdentityXML) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(ppwzIdentityXML);

        auto win32_impl_result = g_api_table.PeerIdentityGetXML(pwzIdentity, ppwzIdentityXML);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityExport(win32::Windows::Win32::Foundation::PWSTR pwzIdentity, win32::Windows::Win32::Foundation::PWSTR pwzPassword, win32::Windows::Win32::Foundation::PWSTR* ppwzExportXML) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzIdentity);
        ORBIT_TRACK_PARAM(pwzPassword);
        ORBIT_TRACK_PARAM(ppwzExportXML);

        auto win32_impl_result = g_api_table.PeerIdentityExport(pwzIdentity, pwzPassword, ppwzExportXML);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityImport(win32::Windows::Win32::Foundation::PWSTR pwzImportXML, win32::Windows::Win32::Foundation::PWSTR pwzPassword, win32::Windows::Win32::Foundation::PWSTR* ppwzIdentity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzImportXML);
        ORBIT_TRACK_PARAM(pwzPassword);
        ORBIT_TRACK_PARAM(ppwzIdentity);

        auto win32_impl_result = g_api_table.PeerIdentityImport(pwzImportXML, pwzPassword, ppwzIdentity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerIdentityGetDefault(win32::Windows::Win32::Foundation::PWSTR* ppwzPeerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppwzPeerName);

        auto win32_impl_result = g_api_table.PeerIdentityGetDefault(ppwzPeerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabStartup(uint16_t wVersionRequested) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVersionRequested);

        auto win32_impl_result = g_api_table.PeerCollabStartup(wVersionRequested);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabShutdown() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PeerCollabShutdown();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabSignin(win32::Windows::Win32::Foundation::HWND hwndParent, uint32_t dwSigninOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(dwSigninOptions);

        auto win32_impl_result = g_api_table.PeerCollabSignin(hwndParent, dwSigninOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabSignout(uint32_t dwSigninOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwSigninOptions);

        auto win32_impl_result = g_api_table.PeerCollabSignout(dwSigninOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetSigninOptions(uint32_t* pdwSigninOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pdwSigninOptions);

        auto win32_impl_result = g_api_table.PeerCollabGetSigninOptions(pdwSigninOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabAsyncInviteContact(win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT* pcContact, win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION* pcInvitation, win32::Windows::Win32::Foundation::HANDLE hEvent, win32::Windows::Win32::Foundation::HANDLE* phInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcContact);
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(pcInvitation);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(phInvitation);

        auto win32_impl_result = g_api_table.PeerCollabAsyncInviteContact(pcContact, pcEndpoint, pcInvitation, hEvent, phInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetInvitationResponse(win32::Windows::Win32::Foundation::HANDLE hInvitation, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION_RESPONSE** ppInvitationResponse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hInvitation);
        ORBIT_TRACK_PARAM(ppInvitationResponse);

        auto win32_impl_result = g_api_table.PeerCollabGetInvitationResponse(hInvitation, ppInvitationResponse);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabCancelInvitation(win32::Windows::Win32::Foundation::HANDLE hInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hInvitation);

        auto win32_impl_result = g_api_table.PeerCollabCancelInvitation(hInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabCloseHandle(win32::Windows::Win32::Foundation::HANDLE hInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hInvitation);

        auto win32_impl_result = g_api_table.PeerCollabCloseHandle(hInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabInviteContact(win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT* pcContact, win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION* pcInvitation, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION_RESPONSE** ppResponse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcContact);
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(pcInvitation);
        ORBIT_TRACK_PARAM(ppResponse);

        auto win32_impl_result = g_api_table.PeerCollabInviteContact(pcContact, pcEndpoint, pcInvitation, ppResponse);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabAsyncInviteEndpoint(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION* pcInvitation, win32::Windows::Win32::Foundation::HANDLE hEvent, win32::Windows::Win32::Foundation::HANDLE* phInvitation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(pcInvitation);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(phInvitation);

        auto win32_impl_result = g_api_table.PeerCollabAsyncInviteEndpoint(pcEndpoint, pcInvitation, hEvent, phInvitation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabInviteEndpoint(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION* pcInvitation, win32::Windows::Win32::NetworkManagement::P2P::PEER_INVITATION_RESPONSE** ppResponse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(pcInvitation);
        ORBIT_TRACK_PARAM(ppResponse);

        auto win32_impl_result = g_api_table.PeerCollabInviteEndpoint(pcEndpoint, pcInvitation, ppResponse);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetAppLaunchInfo(win32::Windows::Win32::NetworkManagement::P2P::PEER_APP_LAUNCH_INFO** ppLaunchInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppLaunchInfo);

        auto win32_impl_result = g_api_table.PeerCollabGetAppLaunchInfo(ppLaunchInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabRegisterApplication(win32::Windows::Win32::NetworkManagement::P2P::PEER_APPLICATION_REGISTRATION_INFO* pcApplication, win32::Windows::Win32::NetworkManagement::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcApplication);
        ORBIT_TRACK_PARAM(registrationType);

        auto win32_impl_result = g_api_table.PeerCollabRegisterApplication(pcApplication, registrationType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabUnregisterApplication(::win32::guid* pApplicationId, win32::Windows::Win32::NetworkManagement::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pApplicationId);
        ORBIT_TRACK_PARAM(registrationType);

        auto win32_impl_result = g_api_table.PeerCollabUnregisterApplication(pApplicationId, registrationType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetApplicationRegistrationInfo(::win32::guid* pApplicationId, win32::Windows::Win32::NetworkManagement::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType, win32::Windows::Win32::NetworkManagement::P2P::PEER_APPLICATION_REGISTRATION_INFO** ppApplication) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pApplicationId);
        ORBIT_TRACK_PARAM(registrationType);
        ORBIT_TRACK_PARAM(ppApplication);

        auto win32_impl_result = g_api_table.PeerCollabGetApplicationRegistrationInfo(pApplicationId, registrationType, ppApplication);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabEnumApplicationRegistrationInfo(win32::Windows::Win32::NetworkManagement::P2P::PEER_APPLICATION_REGISTRATION_TYPE registrationType, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(registrationType);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerCollabEnumApplicationRegistrationInfo(registrationType, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetPresenceInfo(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, win32::Windows::Win32::NetworkManagement::P2P::PEER_PRESENCE_INFO** ppPresenceInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(ppPresenceInfo);

        auto win32_impl_result = g_api_table.PeerCollabGetPresenceInfo(pcEndpoint, ppPresenceInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabEnumApplications(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, ::win32::guid* pApplicationId, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(pApplicationId);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerCollabEnumApplications(pcEndpoint, pApplicationId, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabEnumObjects(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, ::win32::guid* pObjectId, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(pObjectId);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerCollabEnumObjects(pcEndpoint, pObjectId, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabEnumEndpoints(win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT* pcContact, void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcContact);
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerCollabEnumEndpoints(pcContact, phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabRefreshEndpointData(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);

        auto win32_impl_result = g_api_table.PeerCollabRefreshEndpointData(pcEndpoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabDeleteEndpointData(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);

        auto win32_impl_result = g_api_table.PeerCollabDeleteEndpointData(pcEndpoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabQueryContactData(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint, win32::Windows::Win32::Foundation::PWSTR* ppwzContactData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);
        ORBIT_TRACK_PARAM(ppwzContactData);

        auto win32_impl_result = g_api_table.PeerCollabQueryContactData(pcEndpoint, ppwzContactData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabSubscribeEndpointData(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);

        auto win32_impl_result = g_api_table.PeerCollabSubscribeEndpointData(pcEndpoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabUnsubscribeEndpointData(win32::Windows::Win32::NetworkManagement::P2P::PEER_ENDPOINT* pcEndpoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcEndpoint);

        auto win32_impl_result = g_api_table.PeerCollabUnsubscribeEndpointData(pcEndpoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabSetPresenceInfo(win32::Windows::Win32::NetworkManagement::P2P::PEER_PRESENCE_INFO* pcPresenceInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcPresenceInfo);

        auto win32_impl_result = g_api_table.PeerCollabSetPresenceInfo(pcPresenceInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetEndpointName(win32::Windows::Win32::Foundation::PWSTR* ppwzEndpointName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppwzEndpointName);

        auto win32_impl_result = g_api_table.PeerCollabGetEndpointName(ppwzEndpointName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabSetEndpointName(win32::Windows::Win32::Foundation::PWSTR pwzEndpointName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzEndpointName);

        auto win32_impl_result = g_api_table.PeerCollabSetEndpointName(pwzEndpointName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabSetObject(win32::Windows::Win32::NetworkManagement::P2P::PEER_OBJECT* pcObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcObject);

        auto win32_impl_result = g_api_table.PeerCollabSetObject(pcObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabDeleteObject(::win32::guid* pObjectId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pObjectId);

        auto win32_impl_result = g_api_table.PeerCollabDeleteObject(pObjectId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabRegisterEvent(win32::Windows::Win32::Foundation::HANDLE hEvent, uint32_t cEventRegistration, win32::Windows::Win32::NetworkManagement::P2P::PEER_COLLAB_EVENT_REGISTRATION* pEventRegistrations, void** phPeerEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(cEventRegistration);
        ORBIT_TRACK_PARAM(pEventRegistrations);
        ORBIT_TRACK_PARAM(phPeerEvent);

        auto win32_impl_result = g_api_table.PeerCollabRegisterEvent(hEvent, cEventRegistration, pEventRegistrations, phPeerEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetEventData(void* hPeerEvent, win32::Windows::Win32::NetworkManagement::P2P::PEER_COLLAB_EVENT_DATA** ppEventData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEvent);
        ORBIT_TRACK_PARAM(ppEventData);

        auto win32_impl_result = g_api_table.PeerCollabGetEventData(hPeerEvent, ppEventData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabUnregisterEvent(void* hPeerEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerEvent);

        auto win32_impl_result = g_api_table.PeerCollabUnregisterEvent(hPeerEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabEnumPeopleNearMe(void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerCollabEnumPeopleNearMe(phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabAddContact(win32::Windows::Win32::Foundation::PWSTR pwzContactData, win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT** ppContact) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzContactData);
        ORBIT_TRACK_PARAM(ppContact);

        auto win32_impl_result = g_api_table.PeerCollabAddContact(pwzContactData, ppContact);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabDeleteContact(win32::Windows::Win32::Foundation::PWSTR pwzPeerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzPeerName);

        auto win32_impl_result = g_api_table.PeerCollabDeleteContact(pwzPeerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabGetContact(win32::Windows::Win32::Foundation::PWSTR pwzPeerName, win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT** ppContact) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzPeerName);
        ORBIT_TRACK_PARAM(ppContact);

        auto win32_impl_result = g_api_table.PeerCollabGetContact(pwzPeerName, ppContact);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabUpdateContact(win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT* pContact) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pContact);

        auto win32_impl_result = g_api_table.PeerCollabUpdateContact(pContact);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabEnumContacts(void** phPeerEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phPeerEnum);

        auto win32_impl_result = g_api_table.PeerCollabEnumContacts(phPeerEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabExportContact(win32::Windows::Win32::Foundation::PWSTR pwzPeerName, win32::Windows::Win32::Foundation::PWSTR* ppwzContactData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzPeerName);
        ORBIT_TRACK_PARAM(ppwzContactData);

        auto win32_impl_result = g_api_table.PeerCollabExportContact(pwzPeerName, ppwzContactData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerCollabParseContact(win32::Windows::Win32::Foundation::PWSTR pwzContactData, win32::Windows::Win32::NetworkManagement::P2P::PEER_CONTACT** ppContact) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzContactData);
        ORBIT_TRACK_PARAM(ppContact);

        auto win32_impl_result = g_api_table.PeerCollabParseContact(pwzContactData, ppContact);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerNameToPeerHostName(win32::Windows::Win32::Foundation::PWSTR pwzPeerName, win32::Windows::Win32::Foundation::PWSTR* ppwzHostName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzPeerName);
        ORBIT_TRACK_PARAM(ppwzHostName);

        auto win32_impl_result = g_api_table.PeerNameToPeerHostName(pwzPeerName, ppwzHostName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerHostNameToPeerName(win32::Windows::Win32::Foundation::PWSTR pwzHostName, win32::Windows::Win32::Foundation::PWSTR* ppwzPeerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzHostName);
        ORBIT_TRACK_PARAM(ppwzPeerName);

        auto win32_impl_result = g_api_table.PeerHostNameToPeerName(pwzHostName, ppwzPeerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpStartup(uint16_t wVersionRequested) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVersionRequested);

        auto win32_impl_result = g_api_table.PeerPnrpStartup(wVersionRequested);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpShutdown() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PeerPnrpShutdown();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpRegister(win32::Windows::Win32::Foundation::PWSTR pcwzPeerName, win32::Windows::Win32::NetworkManagement::P2P::PEER_PNRP_REGISTRATION_INFO* pRegistrationInfo, void** phRegistration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcwzPeerName);
        ORBIT_TRACK_PARAM(pRegistrationInfo);
        ORBIT_TRACK_PARAM(phRegistration);

        auto win32_impl_result = g_api_table.PeerPnrpRegister(pcwzPeerName, pRegistrationInfo, phRegistration);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpUpdateRegistration(void* hRegistration, win32::Windows::Win32::NetworkManagement::P2P::PEER_PNRP_REGISTRATION_INFO* pRegistrationInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegistration);
        ORBIT_TRACK_PARAM(pRegistrationInfo);

        auto win32_impl_result = g_api_table.PeerPnrpUpdateRegistration(hRegistration, pRegistrationInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpUnregister(void* hRegistration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegistration);

        auto win32_impl_result = g_api_table.PeerPnrpUnregister(hRegistration);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpResolve(win32::Windows::Win32::Foundation::PWSTR pcwzPeerName, win32::Windows::Win32::Foundation::PWSTR pcwzCloudName, uint32_t* pcEndpoints, win32::Windows::Win32::NetworkManagement::P2P::PEER_PNRP_ENDPOINT_INFO** ppEndpoints) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcwzPeerName);
        ORBIT_TRACK_PARAM(pcwzCloudName);
        ORBIT_TRACK_PARAM(pcEndpoints);
        ORBIT_TRACK_PARAM(ppEndpoints);

        auto win32_impl_result = g_api_table.PeerPnrpResolve(pcwzPeerName, pcwzCloudName, pcEndpoints, ppEndpoints);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpStartResolve(win32::Windows::Win32::Foundation::PWSTR pcwzPeerName, win32::Windows::Win32::Foundation::PWSTR pcwzCloudName, uint32_t cMaxEndpoints, win32::Windows::Win32::Foundation::HANDLE hEvent, void** phResolve) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcwzPeerName);
        ORBIT_TRACK_PARAM(pcwzCloudName);
        ORBIT_TRACK_PARAM(cMaxEndpoints);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(phResolve);

        auto win32_impl_result = g_api_table.PeerPnrpStartResolve(pcwzPeerName, pcwzCloudName, cMaxEndpoints, hEvent, phResolve);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpGetCloudInfo(uint32_t* pcNumClouds, win32::Windows::Win32::NetworkManagement::P2P::PEER_PNRP_CLOUD_INFO** ppCloudInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcNumClouds);
        ORBIT_TRACK_PARAM(ppCloudInfo);

        auto win32_impl_result = g_api_table.PeerPnrpGetCloudInfo(pcNumClouds, ppCloudInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpGetEndpoint(void* hResolve, win32::Windows::Win32::NetworkManagement::P2P::PEER_PNRP_ENDPOINT_INFO** ppEndpoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResolve);
        ORBIT_TRACK_PARAM(ppEndpoint);

        auto win32_impl_result = g_api_table.PeerPnrpGetEndpoint(hResolve, ppEndpoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PeerPnrpEndResolve(void* hResolve) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResolve);

        auto win32_impl_result = g_api_table.PeerPnrpEndResolve(hResolve);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtCreatePnrpBootstrapResolver(win32::Windows::Win32::Foundation::BOOL fPublish, win32::Windows::Win32::Foundation::PWSTR pwzPeerName, win32::Windows::Win32::Foundation::PWSTR pwzCloudName, win32::Windows::Win32::Foundation::PWSTR pwzPublishingIdentity, win32::Windows::Win32::NetworkManagement::P2P::DRT_BOOTSTRAP_PROVIDER** ppResolver) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fPublish);
        ORBIT_TRACK_PARAM(pwzPeerName);
        ORBIT_TRACK_PARAM(pwzCloudName);
        ORBIT_TRACK_PARAM(pwzPublishingIdentity);
        ORBIT_TRACK_PARAM(ppResolver);

        auto win32_impl_result = g_api_table.DrtCreatePnrpBootstrapResolver(fPublish, pwzPeerName, pwzCloudName, pwzPublishingIdentity, ppResolver);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DrtDeletePnrpBootstrapResolver(win32::Windows::Win32::NetworkManagement::P2P::DRT_BOOTSTRAP_PROVIDER* pResolver) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResolver);

        g_api_table.DrtDeletePnrpBootstrapResolver(pResolver);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtCreateDnsBootstrapResolver(uint16_t port, win32::Windows::Win32::Foundation::PWSTR pwszAddress, win32::Windows::Win32::NetworkManagement::P2P::DRT_BOOTSTRAP_PROVIDER** ppModule) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(port);
        ORBIT_TRACK_PARAM(pwszAddress);
        ORBIT_TRACK_PARAM(ppModule);

        auto win32_impl_result = g_api_table.DrtCreateDnsBootstrapResolver(port, pwszAddress, ppModule);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DrtDeleteDnsBootstrapResolver(win32::Windows::Win32::NetworkManagement::P2P::DRT_BOOTSTRAP_PROVIDER* pResolver) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResolver);

        g_api_table.DrtDeleteDnsBootstrapResolver(pResolver);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtCreateIpv6UdpTransport(win32::Windows::Win32::NetworkManagement::P2P::DRT_SCOPE scope, uint32_t dwScopeId, uint32_t dwLocalityThreshold, uint16_t* pwPort, void** phTransport) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(scope);
        ORBIT_TRACK_PARAM(dwScopeId);
        ORBIT_TRACK_PARAM(dwLocalityThreshold);
        ORBIT_TRACK_PARAM(pwPort);
        ORBIT_TRACK_PARAM(phTransport);

        auto win32_impl_result = g_api_table.DrtCreateIpv6UdpTransport(scope, dwScopeId, dwLocalityThreshold, pwPort, phTransport);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtDeleteIpv6UdpTransport(void* hTransport) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hTransport);

        auto win32_impl_result = g_api_table.DrtDeleteIpv6UdpTransport(hTransport);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtCreateDerivedKeySecurityProvider(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pRootCert, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pLocalCert, win32::Windows::Win32::NetworkManagement::P2P::DRT_SECURITY_PROVIDER** ppSecurityProvider) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRootCert);
        ORBIT_TRACK_PARAM(pLocalCert);
        ORBIT_TRACK_PARAM(ppSecurityProvider);

        auto win32_impl_result = g_api_table.DrtCreateDerivedKeySecurityProvider(pRootCert, pLocalCert, ppSecurityProvider);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtCreateDerivedKey(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pLocalCert, win32::Windows::Win32::NetworkManagement::P2P::DRT_DATA* pKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pLocalCert);
        ORBIT_TRACK_PARAM(pKey);

        auto win32_impl_result = g_api_table.DrtCreateDerivedKey(pLocalCert, pKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DrtDeleteDerivedKeySecurityProvider(win32::Windows::Win32::NetworkManagement::P2P::DRT_SECURITY_PROVIDER* pSecurityProvider) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSecurityProvider);

        g_api_table.DrtDeleteDerivedKeySecurityProvider(pSecurityProvider);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtCreateNullSecurityProvider(win32::Windows::Win32::NetworkManagement::P2P::DRT_SECURITY_PROVIDER** ppSecurityProvider) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppSecurityProvider);

        auto win32_impl_result = g_api_table.DrtCreateNullSecurityProvider(ppSecurityProvider);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DrtDeleteNullSecurityProvider(win32::Windows::Win32::NetworkManagement::P2P::DRT_SECURITY_PROVIDER* pSecurityProvider) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSecurityProvider);

        g_api_table.DrtDeleteNullSecurityProvider(pSecurityProvider);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtOpen(win32::Windows::Win32::NetworkManagement::P2P::DRT_SETTINGS* pSettings, win32::Windows::Win32::Foundation::HANDLE hEvent, void* pvContext, void** phDrt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSettings);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(pvContext);
        ORBIT_TRACK_PARAM(phDrt);

        auto win32_impl_result = g_api_table.DrtOpen(pSettings, hEvent, pvContext, phDrt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DrtClose(void* hDrt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);

        g_api_table.DrtClose(hDrt);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetEventDataSize(void* hDrt, uint32_t* pulEventDataLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);
        ORBIT_TRACK_PARAM(pulEventDataLen);

        auto win32_impl_result = g_api_table.DrtGetEventDataSize(hDrt, pulEventDataLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetEventData(void* hDrt, uint32_t ulEventDataLen, win32::Windows::Win32::NetworkManagement::P2P::DRT_EVENT_DATA* pEventData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);
        ORBIT_TRACK_PARAM(ulEventDataLen);
        ORBIT_TRACK_PARAM(pEventData);

        auto win32_impl_result = g_api_table.DrtGetEventData(hDrt, ulEventDataLen, pEventData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtRegisterKey(void* hDrt, win32::Windows::Win32::NetworkManagement::P2P::DRT_REGISTRATION* pRegistration, void* pvKeyContext, void** phKeyRegistration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);
        ORBIT_TRACK_PARAM(pRegistration);
        ORBIT_TRACK_PARAM(pvKeyContext);
        ORBIT_TRACK_PARAM(phKeyRegistration);

        auto win32_impl_result = g_api_table.DrtRegisterKey(hDrt, pRegistration, pvKeyContext, phKeyRegistration);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtUpdateKey(void* hKeyRegistration, win32::Windows::Win32::NetworkManagement::P2P::DRT_DATA* pAppData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKeyRegistration);
        ORBIT_TRACK_PARAM(pAppData);

        auto win32_impl_result = g_api_table.DrtUpdateKey(hKeyRegistration, pAppData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DrtUnregisterKey(void* hKeyRegistration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKeyRegistration);

        g_api_table.DrtUnregisterKey(hKeyRegistration);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtStartSearch(void* hDrt, win32::Windows::Win32::NetworkManagement::P2P::DRT_DATA* pKey, win32::Windows::Win32::NetworkManagement::P2P::DRT_SEARCH_INFO* pInfo, uint32_t timeout, win32::Windows::Win32::Foundation::HANDLE hEvent, void* pvContext, void** hSearchContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(pvContext);
        ORBIT_TRACK_PARAM(hSearchContext);

        auto win32_impl_result = g_api_table.DrtStartSearch(hDrt, pKey, pInfo, timeout, hEvent, pvContext, hSearchContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtContinueSearch(void* hSearchContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSearchContext);

        auto win32_impl_result = g_api_table.DrtContinueSearch(hSearchContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetSearchResultSize(void* hSearchContext, uint32_t* pulSearchResultSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSearchContext);
        ORBIT_TRACK_PARAM(pulSearchResultSize);

        auto win32_impl_result = g_api_table.DrtGetSearchResultSize(hSearchContext, pulSearchResultSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetSearchResult(void* hSearchContext, uint32_t ulSearchResultSize, win32::Windows::Win32::NetworkManagement::P2P::DRT_SEARCH_RESULT* pSearchResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSearchContext);
        ORBIT_TRACK_PARAM(ulSearchResultSize);
        ORBIT_TRACK_PARAM(pSearchResult);

        auto win32_impl_result = g_api_table.DrtGetSearchResult(hSearchContext, ulSearchResultSize, pSearchResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetSearchPathSize(void* hSearchContext, uint32_t* pulSearchPathSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSearchContext);
        ORBIT_TRACK_PARAM(pulSearchPathSize);

        auto win32_impl_result = g_api_table.DrtGetSearchPathSize(hSearchContext, pulSearchPathSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetSearchPath(void* hSearchContext, uint32_t ulSearchPathSize, win32::Windows::Win32::NetworkManagement::P2P::DRT_ADDRESS_LIST* pSearchPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSearchContext);
        ORBIT_TRACK_PARAM(ulSearchPathSize);
        ORBIT_TRACK_PARAM(pSearchPath);

        auto win32_impl_result = g_api_table.DrtGetSearchPath(hSearchContext, ulSearchPathSize, pSearchPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtEndSearch(void* hSearchContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSearchContext);

        auto win32_impl_result = g_api_table.DrtEndSearch(hSearchContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetInstanceName(void* hDrt, uint32_t ulcbInstanceNameSize, win32::Windows::Win32::Foundation::PWSTR pwzDrtInstanceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);
        ORBIT_TRACK_PARAM(ulcbInstanceNameSize);
        ORBIT_TRACK_PARAM(pwzDrtInstanceName);

        auto win32_impl_result = g_api_table.DrtGetInstanceName(hDrt, ulcbInstanceNameSize, pwzDrtInstanceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DrtGetInstanceNameSize(void* hDrt, uint32_t* pulcbInstanceNameSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDrt);
        ORBIT_TRACK_PARAM(pulcbInstanceNameSize);

        auto win32_impl_result = g_api_table.DrtGetInstanceNameSize(hDrt, pulcbInstanceNameSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistStartup(uint32_t dwVersionRequested, intptr_t* phPeerDist, uint32_t* pdwSupportedVersion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwVersionRequested);
        ORBIT_TRACK_PARAM(phPeerDist);
        ORBIT_TRACK_PARAM(pdwSupportedVersion);

        auto win32_impl_result = g_api_table.PeerDistStartup(dwVersionRequested, phPeerDist, pdwSupportedVersion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistShutdown(intptr_t hPeerDist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);

        auto win32_impl_result = g_api_table.PeerDistShutdown(hPeerDist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistGetStatus(intptr_t hPeerDist, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_STATUS* pPeerDistStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(pPeerDistStatus);

        auto win32_impl_result = g_api_table.PeerDistGetStatus(hPeerDist, pPeerDistStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistRegisterForStatusChangeNotification(intptr_t hPeerDist, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_STATUS* pPeerDistStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(pPeerDistStatus);

        auto win32_impl_result = g_api_table.PeerDistRegisterForStatusChangeNotification(hPeerDist, hCompletionPort, ulCompletionKey, lpOverlapped, pPeerDistStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistUnregisterForStatusChangeNotification(intptr_t hPeerDist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);

        auto win32_impl_result = g_api_table.PeerDistUnregisterForStatusChangeNotification(hPeerDist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerPublishStream(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, uint64_t cbContentLength, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_PUBLICATION_OPTIONS* pPublishOptions, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(cbContentIdentifier);
        ORBIT_TRACK_PARAM(pContentIdentifier);
        ORBIT_TRACK_PARAM(cbContentLength);
        ORBIT_TRACK_PARAM(pPublishOptions);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(phStream);

        auto win32_impl_result = g_api_table.PeerDistServerPublishStream(hPeerDist, cbContentIdentifier, pContentIdentifier, cbContentLength, pPublishOptions, hCompletionPort, ulCompletionKey, phStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerPublishAddToStream(intptr_t hPeerDist, intptr_t hStream, uint32_t cbNumberOfBytes, uint8_t* pBuffer, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hStream);
        ORBIT_TRACK_PARAM(cbNumberOfBytes);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistServerPublishAddToStream(hPeerDist, hStream, cbNumberOfBytes, pBuffer, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerPublishCompleteStream(intptr_t hPeerDist, intptr_t hStream, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hStream);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistServerPublishCompleteStream(hPeerDist, hStream, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerCloseStreamHandle(intptr_t hPeerDist, intptr_t hStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hStream);

        auto win32_impl_result = g_api_table.PeerDistServerCloseStreamHandle(hPeerDist, hStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerUnpublish(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(cbContentIdentifier);
        ORBIT_TRACK_PARAM(pContentIdentifier);

        auto win32_impl_result = g_api_table.PeerDistServerUnpublish(hPeerDist, cbContentIdentifier, pContentIdentifier);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerOpenContentInformation(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, uint64_t ullContentOffset, uint64_t cbContentLength, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phContentInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(cbContentIdentifier);
        ORBIT_TRACK_PARAM(pContentIdentifier);
        ORBIT_TRACK_PARAM(ullContentOffset);
        ORBIT_TRACK_PARAM(cbContentLength);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(phContentInfo);

        auto win32_impl_result = g_api_table.PeerDistServerOpenContentInformation(hPeerDist, cbContentIdentifier, pContentIdentifier, ullContentOffset, cbContentLength, hCompletionPort, ulCompletionKey, phContentInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerRetrieveContentInformation(intptr_t hPeerDist, intptr_t hContentInfo, uint32_t cbMaxNumberOfBytes, uint8_t* pBuffer, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentInfo);
        ORBIT_TRACK_PARAM(cbMaxNumberOfBytes);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistServerRetrieveContentInformation(hPeerDist, hContentInfo, cbMaxNumberOfBytes, pBuffer, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerCloseContentInformation(intptr_t hPeerDist, intptr_t hContentInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentInfo);

        auto win32_impl_result = g_api_table.PeerDistServerCloseContentInformation(hPeerDist, hContentInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerCancelAsyncOperation(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(cbContentIdentifier);
        ORBIT_TRACK_PARAM(pContentIdentifier);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.PeerDistServerCancelAsyncOperation(hPeerDist, cbContentIdentifier, pContentIdentifier, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientOpenContent(intptr_t hPeerDist, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_CONTENT_TAG* pContentTag, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phContentHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(pContentTag);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(phContentHandle);

        auto win32_impl_result = g_api_table.PeerDistClientOpenContent(hPeerDist, pContentTag, hCompletionPort, ulCompletionKey, phContentHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientCloseContent(intptr_t hPeerDist, intptr_t hContentHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);

        auto win32_impl_result = g_api_table.PeerDistClientCloseContent(hPeerDist, hContentHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientAddContentInformation(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbNumberOfBytes, uint8_t* pBuffer, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(cbNumberOfBytes);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientAddContentInformation(hPeerDist, hContentHandle, cbNumberOfBytes, pBuffer, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientCompleteContentInformation(intptr_t hPeerDist, intptr_t hContentHandle, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientCompleteContentInformation(hPeerDist, hContentHandle, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientAddData(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbNumberOfBytes, uint8_t* pBuffer, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(cbNumberOfBytes);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientAddData(hPeerDist, hContentHandle, cbNumberOfBytes, pBuffer, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientBlockRead(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbMaxNumberOfBytes, uint8_t* pBuffer, uint32_t dwTimeoutInMilliseconds, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(cbMaxNumberOfBytes);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(dwTimeoutInMilliseconds);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientBlockRead(hPeerDist, hContentHandle, cbMaxNumberOfBytes, pBuffer, dwTimeoutInMilliseconds, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientStreamRead(intptr_t hPeerDist, intptr_t hContentHandle, uint32_t cbMaxNumberOfBytes, uint8_t* pBuffer, uint32_t dwTimeoutInMilliseconds, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(cbMaxNumberOfBytes);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(dwTimeoutInMilliseconds);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientStreamRead(hPeerDist, hContentHandle, cbMaxNumberOfBytes, pBuffer, dwTimeoutInMilliseconds, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientFlushContent(intptr_t hPeerDist, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_CONTENT_TAG* pContentTag, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(pContentTag);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientFlushContent(hPeerDist, pContentTag, hCompletionPort, ulCompletionKey, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientCancelAsyncOperation(intptr_t hPeerDist, intptr_t hContentHandle, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.PeerDistClientCancelAsyncOperation(hPeerDist, hContentHandle, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistGetStatusEx(intptr_t hPeerDist, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_STATUS_INFO* pPeerDistStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(pPeerDistStatus);

        auto win32_impl_result = g_api_table.PeerDistGetStatusEx(hPeerDist, pPeerDistStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistRegisterForStatusChangeNotificationEx(intptr_t hPeerDist, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_STATUS_INFO* pPeerDistStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(pPeerDistStatus);

        auto win32_impl_result = g_api_table.PeerDistRegisterForStatusChangeNotificationEx(hPeerDist, hCompletionPort, ulCompletionKey, lpOverlapped, pPeerDistStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PeerDistGetOverlappedResult(win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, uint32_t* lpNumberOfBytesTransferred, win32::Windows::Win32::Foundation::BOOL bWait) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpNumberOfBytesTransferred);
        ORBIT_TRACK_PARAM(bWait);

        auto win32_impl_result = g_api_table.PeerDistGetOverlappedResult(lpOverlapped, lpNumberOfBytesTransferred, bWait);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistServerOpenContentInformationEx(intptr_t hPeerDist, uint32_t cbContentIdentifier, uint8_t* pContentIdentifier, uint64_t ullContentOffset, uint64_t cbContentLength, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_RETRIEVAL_OPTIONS* pRetrievalOptions, win32::Windows::Win32::Foundation::HANDLE hCompletionPort, size_t ulCompletionKey, intptr_t* phContentInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(cbContentIdentifier);
        ORBIT_TRACK_PARAM(pContentIdentifier);
        ORBIT_TRACK_PARAM(ullContentOffset);
        ORBIT_TRACK_PARAM(cbContentLength);
        ORBIT_TRACK_PARAM(pRetrievalOptions);
        ORBIT_TRACK_PARAM(hCompletionPort);
        ORBIT_TRACK_PARAM(ulCompletionKey);
        ORBIT_TRACK_PARAM(phContentInfo);

        auto win32_impl_result = g_api_table.PeerDistServerOpenContentInformationEx(hPeerDist, cbContentIdentifier, pContentIdentifier, ullContentOffset, cbContentLength, pRetrievalOptions, hCompletionPort, ulCompletionKey, phContentInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PeerDistClientGetInformationByHandle(intptr_t hPeerDist, intptr_t hContentHandle, win32::Windows::Win32::NetworkManagement::P2P::PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS PeerDistClientInfoClass, uint32_t dwBufferSize, void* lpInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPeerDist);
        ORBIT_TRACK_PARAM(hContentHandle);
        ORBIT_TRACK_PARAM(PeerDistClientInfoClass);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpInformation);

        auto win32_impl_result = g_api_table.PeerDistClientGetInformationByHandle(hPeerDist, hContentHandle, PeerDistClientInfoClass, dwBufferSize, lpInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
