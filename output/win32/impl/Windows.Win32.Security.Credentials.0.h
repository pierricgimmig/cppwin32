// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_Credentials_0_H
#define WIN32_Windows_Win32_Security_Credentials_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct PSTR;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security::Credentials
{
#pragma region enums
    enum class CREDSPP_SUBMIT_TYPE : int32_t
    {
        CredsspPasswordCreds = 2,
        CredsspSchannelCreds = 4,
        CredsspCertificateCreds = 13,
        CredsspSubmitBufferBoth = 50,
        CredsspSubmitBufferBothOld = 51,
        CredsspCredEx = 100,
    };
    enum class CREDUIWIN_FLAGS : uint32_t
    {
        CREDUIWIN_GENERIC = 0x1,
        CREDUIWIN_CHECKBOX = 0x2,
        CREDUIWIN_AUTHPACKAGE_ONLY = 0x10,
        CREDUIWIN_IN_CRED_ONLY = 0x20,
        CREDUIWIN_ENUMERATE_ADMINS = 0x100,
        CREDUIWIN_ENUMERATE_CURRENT_USER = 0x200,
        CREDUIWIN_SECURE_PROMPT = 0x1000,
        CREDUIWIN_PREPROMPTING = 0x2000,
        CREDUIWIN_PACK_32_WOW = 0x10000000,
    };
    enum class CREDUI_FLAGS : uint32_t
    {
        CREDUI_FLAGS_ALWAYS_SHOW_UI = 0x80,
        CREDUI_FLAGS_COMPLETE_USERNAME = 0x800,
        CREDUI_FLAGS_DO_NOT_PERSIST = 0x2,
        CREDUI_FLAGS_EXCLUDE_CERTIFICATES = 0x8,
        CREDUI_FLAGS_EXPECT_CONFIRMATION = 0x20000,
        CREDUI_FLAGS_GENERIC_CREDENTIALS = 0x40000,
        CREDUI_FLAGS_INCORRECT_PASSWORD = 0x1,
        CREDUI_FLAGS_KEEP_USERNAME = 0x100000,
        CREDUI_FLAGS_PASSWORD_ONLY_OK = 0x200,
        CREDUI_FLAGS_PERSIST = 0x1000,
        CREDUI_FLAGS_REQUEST_ADMINISTRATOR = 0x4,
        CREDUI_FLAGS_REQUIRE_CERTIFICATE = 0x10,
        CREDUI_FLAGS_REQUIRE_SMARTCARD = 0x100,
        CREDUI_FLAGS_SERVER_CREDENTIAL = 0x4000,
        CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = 0x40,
        CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = 0x80000,
        CREDUI_FLAGS_VALIDATE_USERNAME = 0x400,
    };
    enum class CRED_ENUMERATE_FLAGS : uint32_t
    {
        CRED_ENUMERATE_ALL_CREDENTIALS = 0x1,
    };
    enum class CRED_FLAGS : uint32_t
    {
        CRED_FLAGS_PASSWORD_FOR_CERT = 0x1,
        CRED_FLAGS_PROMPT_NOW = 0x2,
        CRED_FLAGS_USERNAME_TARGET = 0x4,
        CRED_FLAGS_OWF_CRED_BLOB = 0x8,
        CRED_FLAGS_REQUIRE_CONFIRMATION = 0x10,
        CRED_FLAGS_WILDCARD_MATCH = 0x20,
        CRED_FLAGS_VSM_PROTECTED = 0x40,
        CRED_FLAGS_NGC_CERT = 0x80,
        CRED_FLAGS_VALID_FLAGS = 0xf0ff,
        CRED_FLAGS_VALID_INPUT_FLAGS = 0xf09f,
    };
    enum class CRED_MARSHAL_TYPE : int32_t
    {
        CertCredential = 1,
        UsernameTargetCredential = 2,
        BinaryBlobCredential = 3,
        UsernameForPackedCredentials = 4,
        BinaryBlobForSystem = 5,
    };
    enum class CRED_PACK_FLAGS : uint32_t
    {
        CRED_PACK_PROTECTED_CREDENTIALS = 0x1,
        CRED_PACK_WOW_BUFFER = 0x2,
        CRED_PACK_GENERIC_CREDENTIALS = 0x4,
        CRED_PACK_ID_PROVIDER_CREDENTIALS = 0x8,
    };
    enum class CRED_PERSIST : uint32_t
    {
        CRED_PERSIST_NONE = 0x0,
        CRED_PERSIST_SESSION = 0x1,
        CRED_PERSIST_LOCAL_MACHINE = 0x2,
        CRED_PERSIST_ENTERPRISE = 0x3,
    };
    enum class CRED_PROTECTION_TYPE : int32_t
    {
        CredUnprotected = 0,
        CredUserProtection = 1,
        CredTrustedProtection = 2,
        CredForSystemProtection = 3,
    };
    enum class CRED_TYPE : uint32_t
    {
        CRED_TYPE_GENERIC = 0x1,
        CRED_TYPE_DOMAIN_PASSWORD = 0x2,
        CRED_TYPE_DOMAIN_CERTIFICATE = 0x3,
        CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 0x4,
        CRED_TYPE_GENERIC_CERTIFICATE = 0x5,
        CRED_TYPE_DOMAIN_EXTENDED = 0x6,
        CRED_TYPE_MAXIMUM = 0x7,
        CRED_TYPE_MAXIMUM_EX = 0x3ef,
    };
    enum class KeyCredentialManagerOperationErrorStates : uint32_t
    {
        KeyCredentialManagerOperationErrorStateNone = 0x0,
        KeyCredentialManagerOperationErrorStateDeviceJoinFailure = 0x1,
        KeyCredentialManagerOperationErrorStateTokenFailure = 0x2,
        KeyCredentialManagerOperationErrorStateCertificateFailure = 0x4,
        KeyCredentialManagerOperationErrorStateRemoteSessionFailure = 0x8,
        KeyCredentialManagerOperationErrorStatePolicyFailure = 0x10,
        KeyCredentialManagerOperationErrorStateHardwareFailure = 0x20,
        KeyCredentialManagerOperationErrorStatePinExistsFailure = 0x40,
    };
    enum class KeyCredentialManagerOperationType : int32_t
    {
        KeyCredentialManagerProvisioning = 0,
        KeyCredentialManagerPinChange = 1,
        KeyCredentialManagerPinReset = 2,
    };
    enum class READER_SEL_REQUEST_MATCH_TYPE : int32_t
    {
        RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
        RSR_MATCH_TYPE_SERIAL_NUMBER = 2,
        RSR_MATCH_TYPE_ALL_CARDS = 3,
    };
    enum class SCARD_SCOPE : uint32_t
    {
        SCARD_SCOPE_USER = 0x0,
        SCARD_SCOPE_SYSTEM = 0x2,
    };
    enum class SCARD_STATE : uint32_t
    {
        SCARD_STATE_UNAWARE = 0x0,
        SCARD_STATE_IGNORE = 0x1,
        SCARD_STATE_UNAVAILABLE = 0x8,
        SCARD_STATE_EMPTY = 0x10,
        SCARD_STATE_PRESENT = 0x20,
        SCARD_STATE_ATRMATCH = 0x40,
        SCARD_STATE_EXCLUSIVE = 0x80,
        SCARD_STATE_INUSE = 0x100,
        SCARD_STATE_MUTE = 0x200,
        SCARD_STATE_CHANGED = 0x2,
        SCARD_STATE_UNKNOWN = 0x4,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct BINARY_BLOB_CREDENTIAL_INFO;
    struct CERT_CREDENTIAL_INFO;
    struct CREDENTIALA;
    struct CREDENTIALW;
    struct CREDENTIAL_ATTRIBUTEA;
    struct CREDENTIAL_ATTRIBUTEW;
    struct CREDENTIAL_TARGET_INFORMATIONA;
    struct CREDENTIAL_TARGET_INFORMATIONW;
    struct CREDSSP_CRED;
    struct CREDSSP_CRED_EX;
    struct CREDUI_INFOA;
    struct CREDUI_INFOW;
    struct KeyCredentialManagerInfo;
    struct OPENCARDNAMEA;
    struct OPENCARDNAMEW;
    struct OPENCARDNAME_EXA;
    struct OPENCARDNAME_EXW;
    struct OPENCARD_SEARCH_CRITERIAA;
    struct OPENCARD_SEARCH_CRITERIAW;
    struct READER_SEL_REQUEST;
    struct READER_SEL_RESPONSE;
    struct SCARD_ATRMASK;
    struct SCARD_IO_REQUEST;
    struct SCARD_READERSTATEA;
    struct SCARD_READERSTATEW;
    struct SCARD_T0_COMMAND;
    struct SCARD_T0_REQUEST;
    struct SCARD_T1_REQUEST;
    struct SecHandle;
    struct SecPkgContext_ClientCreds;
    struct USERNAME_TARGET_CREDENTIAL_INFO;
#pragma endregion forward_declarations

#pragma region delegates
    using LPOCNCONNPROCA = size_t __stdcall(size_t, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, void*);
    using LPOCNCONNPROCW = size_t __stdcall(size_t, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, void*);
    using LPOCNCHKPROC = Windows::Win32::Foundation::BOOL __stdcall(size_t, size_t, void*);
    using LPOCNDSCPROC = void __stdcall(size_t, size_t, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
