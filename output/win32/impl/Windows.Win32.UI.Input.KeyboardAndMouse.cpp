// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UI_Input_KeyboardAndMouse_2_H
#define WIN32_Windows_Win32_UI_Input_KeyboardAndMouse_2_H
#include "win32/Windows.Win32.UI.Input.KeyboardAndMouse.h"
#include "win32/impl/Windows.Win32.UI.Input.KeyboardAndMouse.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::UI::Input::KeyboardAndMouse
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL__TrackMouseEvent(win32::Windows::Win32::UI::Input::KeyboardAndMouse::TRACKMOUSEEVENT* lpEventTrack) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEventTrack);

        auto win32_impl_result = g_api_table._TrackMouseEvent(lpEventTrack);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::TextServices::HKL __stdcall ORBIT_IMPL_LoadKeyboardLayoutA(win32::Windows::Win32::Foundation::PSTR pwszKLID, win32::Windows::Win32::UI::Input::KeyboardAndMouse::ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszKLID);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.LoadKeyboardLayoutA(pwszKLID, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::TextServices::HKL __stdcall ORBIT_IMPL_LoadKeyboardLayoutW(win32::Windows::Win32::Foundation::PWSTR pwszKLID, win32::Windows::Win32::UI::Input::KeyboardAndMouse::ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszKLID);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.LoadKeyboardLayoutW(pwszKLID, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::TextServices::HKL __stdcall ORBIT_IMPL_ActivateKeyboardLayout(win32::Windows::Win32::UI::TextServices::HKL hkl, win32::Windows::Win32::UI::Input::KeyboardAndMouse::ACTIVATE_KEYBOARD_LAYOUT_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkl);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.ActivateKeyboardLayout(hkl, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ToUnicodeEx(uint32_t wVirtKey, uint32_t wScanCode, uint8_t* lpKeyState, win32::Windows::Win32::Foundation::PWSTR pwszBuff, int32_t cchBuff, uint32_t wFlags, win32::Windows::Win32::UI::TextServices::HKL dwhkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVirtKey);
        ORBIT_TRACK_PARAM(wScanCode);
        ORBIT_TRACK_PARAM(lpKeyState);
        ORBIT_TRACK_PARAM(pwszBuff);
        ORBIT_TRACK_PARAM(cchBuff);
        ORBIT_TRACK_PARAM(wFlags);
        ORBIT_TRACK_PARAM(dwhkl);

        auto win32_impl_result = g_api_table.ToUnicodeEx(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnloadKeyboardLayout(win32::Windows::Win32::UI::TextServices::HKL hkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkl);

        auto win32_impl_result = g_api_table.UnloadKeyboardLayout(hkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetKeyboardLayoutNameA(win32::Windows::Win32::Foundation::PSTR pwszKLID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszKLID);

        auto win32_impl_result = g_api_table.GetKeyboardLayoutNameA(pwszKLID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetKeyboardLayoutNameW(win32::Windows::Win32::Foundation::PWSTR pwszKLID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszKLID);

        auto win32_impl_result = g_api_table.GetKeyboardLayoutNameW(pwszKLID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetKeyboardLayoutList(int32_t nBuff, win32::Windows::Win32::UI::TextServices::HKL* lpList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nBuff);
        ORBIT_TRACK_PARAM(lpList);

        auto win32_impl_result = g_api_table.GetKeyboardLayoutList(nBuff, lpList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::TextServices::HKL __stdcall ORBIT_IMPL_GetKeyboardLayout(uint32_t idThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idThread);

        auto win32_impl_result = g_api_table.GetKeyboardLayout(idThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMouseMovePointsEx(uint32_t cbSize, win32::Windows::Win32::UI::Input::KeyboardAndMouse::MOUSEMOVEPOINT* lppt, win32::Windows::Win32::UI::Input::KeyboardAndMouse::MOUSEMOVEPOINT* lpptBuf, int32_t nBufPoints, win32::Windows::Win32::UI::Input::KeyboardAndMouse::GET_MOUSE_MOVE_POINTS_EX_RESOLUTION resolution) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cbSize);
        ORBIT_TRACK_PARAM(lppt);
        ORBIT_TRACK_PARAM(lpptBuf);
        ORBIT_TRACK_PARAM(nBufPoints);
        ORBIT_TRACK_PARAM(resolution);

        auto win32_impl_result = g_api_table.GetMouseMovePointsEx(cbSize, lppt, lpptBuf, nBufPoints, resolution);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TrackMouseEvent(win32::Windows::Win32::UI::Input::KeyboardAndMouse::TRACKMOUSEEVENT* lpEventTrack) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEventTrack);

        auto win32_impl_result = g_api_table.TrackMouseEvent(lpEventTrack);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RegisterHotKey(win32::Windows::Win32::Foundation::HWND hWnd, int32_t id, win32::Windows::Win32::UI::Input::KeyboardAndMouse::HOT_KEY_MODIFIERS fsModifiers, uint32_t vk) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(fsModifiers);
        ORBIT_TRACK_PARAM(vk);

        auto win32_impl_result = g_api_table.RegisterHotKey(hWnd, id, fsModifiers, vk);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnregisterHotKey(win32::Windows::Win32::Foundation::HWND hWnd, int32_t id) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(id);

        auto win32_impl_result = g_api_table.UnregisterHotKey(hWnd, id);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SwapMouseButton(win32::Windows::Win32::Foundation::BOOL fSwap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fSwap);

        auto win32_impl_result = g_api_table.SwapMouseButton(fSwap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDoubleClickTime() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetDoubleClickTime();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetDoubleClickTime(uint32_t param0) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);

        auto win32_impl_result = g_api_table.SetDoubleClickTime(param0);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HWND __stdcall ORBIT_IMPL_SetFocus(win32::Windows::Win32::Foundation::HWND hWnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);

        auto win32_impl_result = g_api_table.SetFocus(hWnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HWND __stdcall ORBIT_IMPL_GetActiveWindow() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetActiveWindow();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HWND __stdcall ORBIT_IMPL_GetFocus() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetFocus();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetKBCodePage() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetKBCodePage();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int16_t __stdcall ORBIT_IMPL_GetKeyState(int32_t nVirtKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nVirtKey);

        auto win32_impl_result = g_api_table.GetKeyState(nVirtKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int16_t __stdcall ORBIT_IMPL_GetAsyncKeyState(int32_t vKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vKey);

        auto win32_impl_result = g_api_table.GetAsyncKeyState(vKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetKeyboardState(uint8_t* lpKeyState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpKeyState);

        auto win32_impl_result = g_api_table.GetKeyboardState(lpKeyState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetKeyboardState(uint8_t* lpKeyState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpKeyState);

        auto win32_impl_result = g_api_table.SetKeyboardState(lpKeyState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetKeyNameTextA(int32_t lParam, win32::Windows::Win32::Foundation::PSTR lpString, int32_t cchSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lParam);
        ORBIT_TRACK_PARAM(lpString);
        ORBIT_TRACK_PARAM(cchSize);

        auto win32_impl_result = g_api_table.GetKeyNameTextA(lParam, lpString, cchSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetKeyNameTextW(int32_t lParam, win32::Windows::Win32::Foundation::PWSTR lpString, int32_t cchSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lParam);
        ORBIT_TRACK_PARAM(lpString);
        ORBIT_TRACK_PARAM(cchSize);

        auto win32_impl_result = g_api_table.GetKeyNameTextW(lParam, lpString, cchSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetKeyboardType(int32_t nTypeFlag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nTypeFlag);

        auto win32_impl_result = g_api_table.GetKeyboardType(nTypeFlag);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ToAscii(uint32_t uVirtKey, uint32_t uScanCode, uint8_t* lpKeyState, uint16_t* lpChar, uint32_t uFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uVirtKey);
        ORBIT_TRACK_PARAM(uScanCode);
        ORBIT_TRACK_PARAM(lpKeyState);
        ORBIT_TRACK_PARAM(lpChar);
        ORBIT_TRACK_PARAM(uFlags);

        auto win32_impl_result = g_api_table.ToAscii(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ToAsciiEx(uint32_t uVirtKey, uint32_t uScanCode, uint8_t* lpKeyState, uint16_t* lpChar, uint32_t uFlags, win32::Windows::Win32::UI::TextServices::HKL dwhkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uVirtKey);
        ORBIT_TRACK_PARAM(uScanCode);
        ORBIT_TRACK_PARAM(lpKeyState);
        ORBIT_TRACK_PARAM(lpChar);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(dwhkl);

        auto win32_impl_result = g_api_table.ToAsciiEx(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ToUnicode(uint32_t wVirtKey, uint32_t wScanCode, uint8_t* lpKeyState, win32::Windows::Win32::Foundation::PWSTR pwszBuff, int32_t cchBuff, uint32_t wFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVirtKey);
        ORBIT_TRACK_PARAM(wScanCode);
        ORBIT_TRACK_PARAM(lpKeyState);
        ORBIT_TRACK_PARAM(pwszBuff);
        ORBIT_TRACK_PARAM(cchBuff);
        ORBIT_TRACK_PARAM(wFlags);

        auto win32_impl_result = g_api_table.ToUnicode(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OemKeyScan(uint16_t wOemChar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wOemChar);

        auto win32_impl_result = g_api_table.OemKeyScan(wOemChar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int16_t __stdcall ORBIT_IMPL_VkKeyScanA(win32::Windows::Win32::Foundation::CHAR ch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ch);

        auto win32_impl_result = g_api_table.VkKeyScanA(ch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int16_t __stdcall ORBIT_IMPL_VkKeyScanW(char ch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ch);

        auto win32_impl_result = g_api_table.VkKeyScanW(ch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int16_t __stdcall ORBIT_IMPL_VkKeyScanExA(win32::Windows::Win32::Foundation::CHAR ch, win32::Windows::Win32::UI::TextServices::HKL dwhkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ch);
        ORBIT_TRACK_PARAM(dwhkl);

        auto win32_impl_result = g_api_table.VkKeyScanExA(ch, dwhkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int16_t __stdcall ORBIT_IMPL_VkKeyScanExW(char ch, win32::Windows::Win32::UI::TextServices::HKL dwhkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ch);
        ORBIT_TRACK_PARAM(dwhkl);

        auto win32_impl_result = g_api_table.VkKeyScanExW(ch, dwhkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_keybd_event(uint8_t bVk, uint8_t bScan, win32::Windows::Win32::UI::Input::KeyboardAndMouse::KEYBD_EVENT_FLAGS dwFlags, size_t dwExtraInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bVk);
        ORBIT_TRACK_PARAM(bScan);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwExtraInfo);

        g_api_table.keybd_event(bVk, bScan, dwFlags, dwExtraInfo);
        
    }

    void __stdcall ORBIT_IMPL_mouse_event(win32::Windows::Win32::UI::Input::KeyboardAndMouse::MOUSE_EVENT_FLAGS dwFlags, int32_t dx, int32_t dy, uint32_t dwData, size_t dwExtraInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dx);
        ORBIT_TRACK_PARAM(dy);
        ORBIT_TRACK_PARAM(dwData);
        ORBIT_TRACK_PARAM(dwExtraInfo);

        g_api_table.mouse_event(dwFlags, dx, dy, dwData, dwExtraInfo);
        
    }

    uint32_t __stdcall ORBIT_IMPL_SendInput(uint32_t cInputs, win32::Windows::Win32::UI::Input::KeyboardAndMouse::INPUT* pInputs, int32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cInputs);
        ORBIT_TRACK_PARAM(pInputs);
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.SendInput(cInputs, pInputs, cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetLastInputInfo(win32::Windows::Win32::UI::Input::KeyboardAndMouse::LASTINPUTINFO* plii) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plii);

        auto win32_impl_result = g_api_table.GetLastInputInfo(plii);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MapVirtualKeyA(uint32_t uCode, uint32_t uMapType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uCode);
        ORBIT_TRACK_PARAM(uMapType);

        auto win32_impl_result = g_api_table.MapVirtualKeyA(uCode, uMapType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MapVirtualKeyW(uint32_t uCode, uint32_t uMapType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uCode);
        ORBIT_TRACK_PARAM(uMapType);

        auto win32_impl_result = g_api_table.MapVirtualKeyW(uCode, uMapType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MapVirtualKeyExA(uint32_t uCode, uint32_t uMapType, win32::Windows::Win32::UI::TextServices::HKL dwhkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uCode);
        ORBIT_TRACK_PARAM(uMapType);
        ORBIT_TRACK_PARAM(dwhkl);

        auto win32_impl_result = g_api_table.MapVirtualKeyExA(uCode, uMapType, dwhkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MapVirtualKeyExW(uint32_t uCode, uint32_t uMapType, win32::Windows::Win32::UI::TextServices::HKL dwhkl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uCode);
        ORBIT_TRACK_PARAM(uMapType);
        ORBIT_TRACK_PARAM(dwhkl);

        auto win32_impl_result = g_api_table.MapVirtualKeyExW(uCode, uMapType, dwhkl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HWND __stdcall ORBIT_IMPL_GetCapture() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCapture();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HWND __stdcall ORBIT_IMPL_SetCapture(win32::Windows::Win32::Foundation::HWND hWnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);

        auto win32_impl_result = g_api_table.SetCapture(hWnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReleaseCapture() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ReleaseCapture();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnableWindow(win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Foundation::BOOL bEnable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(bEnable);

        auto win32_impl_result = g_api_table.EnableWindow(hWnd, bEnable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsWindowEnabled(win32::Windows::Win32::Foundation::HWND hWnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);

        auto win32_impl_result = g_api_table.IsWindowEnabled(hWnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DragDetect(win32::Windows::Win32::Foundation::HWND hwnd, win32::Windows::Win32::Foundation::POINT pt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);
        ORBIT_TRACK_PARAM(pt);

        auto win32_impl_result = g_api_table.DragDetect(hwnd, pt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HWND __stdcall ORBIT_IMPL_SetActiveWindow(win32::Windows::Win32::Foundation::HWND hWnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);

        auto win32_impl_result = g_api_table.SetActiveWindow(hWnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_BlockInput(win32::Windows::Win32::Foundation::BOOL fBlockIt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fBlockIt);

        auto win32_impl_result = g_api_table.BlockInput(fBlockIt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
