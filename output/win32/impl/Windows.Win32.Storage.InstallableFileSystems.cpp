// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_InstallableFileSystems_2_H
#define WIN32_Windows_Win32_Storage_InstallableFileSystems_2_H
#include "win32/Windows.Win32.Storage.InstallableFileSystems.h"
#include "win32/impl/Windows.Win32.Storage.InstallableFileSystems.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::InstallableFileSystems
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterLoad(win32::Windows::Win32::Foundation::PWSTR lpFilterName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);

        auto win32_impl_result = g_api_table.FilterLoad(lpFilterName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterUnload(win32::Windows::Win32::Foundation::PWSTR lpFilterName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);

        auto win32_impl_result = g_api_table.FilterUnload(lpFilterName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterCreate(win32::Windows::Win32::Foundation::PWSTR lpFilterName, win32::Windows::Win32::Storage::InstallableFileSystems::HFILTER* hFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);
        ORBIT_TRACK_PARAM(hFilter);

        auto win32_impl_result = g_api_table.FilterCreate(lpFilterName, hFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterClose(win32::Windows::Win32::Storage::InstallableFileSystems::HFILTER hFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFilter);

        auto win32_impl_result = g_api_table.FilterClose(hFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterInstanceCreate(win32::Windows::Win32::Foundation::PWSTR lpFilterName, win32::Windows::Win32::Foundation::PWSTR lpVolumeName, win32::Windows::Win32::Foundation::PWSTR lpInstanceName, win32::Windows::Win32::Storage::InstallableFileSystems::HFILTER_INSTANCE* hInstance) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);
        ORBIT_TRACK_PARAM(lpVolumeName);
        ORBIT_TRACK_PARAM(lpInstanceName);
        ORBIT_TRACK_PARAM(hInstance);

        auto win32_impl_result = g_api_table.FilterInstanceCreate(lpFilterName, lpVolumeName, lpInstanceName, hInstance);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterInstanceClose(win32::Windows::Win32::Storage::InstallableFileSystems::HFILTER_INSTANCE hInstance) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hInstance);

        auto win32_impl_result = g_api_table.FilterInstanceClose(hInstance);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterAttach(win32::Windows::Win32::Foundation::PWSTR lpFilterName, win32::Windows::Win32::Foundation::PWSTR lpVolumeName, win32::Windows::Win32::Foundation::PWSTR lpInstanceName, uint32_t dwCreatedInstanceNameLength, win32::Windows::Win32::Foundation::PWSTR lpCreatedInstanceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);
        ORBIT_TRACK_PARAM(lpVolumeName);
        ORBIT_TRACK_PARAM(lpInstanceName);
        ORBIT_TRACK_PARAM(dwCreatedInstanceNameLength);
        ORBIT_TRACK_PARAM(lpCreatedInstanceName);

        auto win32_impl_result = g_api_table.FilterAttach(lpFilterName, lpVolumeName, lpInstanceName, dwCreatedInstanceNameLength, lpCreatedInstanceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterAttachAtAltitude(win32::Windows::Win32::Foundation::PWSTR lpFilterName, win32::Windows::Win32::Foundation::PWSTR lpVolumeName, win32::Windows::Win32::Foundation::PWSTR lpAltitude, win32::Windows::Win32::Foundation::PWSTR lpInstanceName, uint32_t dwCreatedInstanceNameLength, win32::Windows::Win32::Foundation::PWSTR lpCreatedInstanceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);
        ORBIT_TRACK_PARAM(lpVolumeName);
        ORBIT_TRACK_PARAM(lpAltitude);
        ORBIT_TRACK_PARAM(lpInstanceName);
        ORBIT_TRACK_PARAM(dwCreatedInstanceNameLength);
        ORBIT_TRACK_PARAM(lpCreatedInstanceName);

        auto win32_impl_result = g_api_table.FilterAttachAtAltitude(lpFilterName, lpVolumeName, lpAltitude, lpInstanceName, dwCreatedInstanceNameLength, lpCreatedInstanceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterDetach(win32::Windows::Win32::Foundation::PWSTR lpFilterName, win32::Windows::Win32::Foundation::PWSTR lpVolumeName, win32::Windows::Win32::Foundation::PWSTR lpInstanceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);
        ORBIT_TRACK_PARAM(lpVolumeName);
        ORBIT_TRACK_PARAM(lpInstanceName);

        auto win32_impl_result = g_api_table.FilterDetach(lpFilterName, lpVolumeName, lpInstanceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterFindFirst(win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned, win32::Windows::Win32::Storage::InstallableFileSystems::FilterFindHandle* lpFilterFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);
        ORBIT_TRACK_PARAM(lpFilterFind);

        auto win32_impl_result = g_api_table.FilterFindFirst(dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned, lpFilterFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterFindNext(win32::Windows::Win32::Foundation::HANDLE hFilterFind, win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFilterFind);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterFindNext(hFilterFind, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterFindClose(win32::Windows::Win32::Foundation::HANDLE hFilterFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFilterFind);

        auto win32_impl_result = g_api_table.FilterFindClose(hFilterFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterVolumeFindFirst(win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_VOLUME_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned, win32::Windows::Win32::Storage::InstallableFileSystems::FilterVolumeFindHandle* lpVolumeFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);
        ORBIT_TRACK_PARAM(lpVolumeFind);

        auto win32_impl_result = g_api_table.FilterVolumeFindFirst(dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned, lpVolumeFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterVolumeFindNext(win32::Windows::Win32::Foundation::HANDLE hVolumeFind, win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_VOLUME_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hVolumeFind);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterVolumeFindNext(hVolumeFind, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterVolumeFindClose(win32::Windows::Win32::Foundation::HANDLE hVolumeFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hVolumeFind);

        auto win32_impl_result = g_api_table.FilterVolumeFindClose(hVolumeFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterInstanceFindFirst(win32::Windows::Win32::Foundation::PWSTR lpFilterName, win32::Windows::Win32::Storage::InstallableFileSystems::INSTANCE_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned, win32::Windows::Win32::Storage::InstallableFileSystems::FilterInstanceFindHandle* lpFilterInstanceFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFilterName);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);
        ORBIT_TRACK_PARAM(lpFilterInstanceFind);

        auto win32_impl_result = g_api_table.FilterInstanceFindFirst(lpFilterName, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned, lpFilterInstanceFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterInstanceFindNext(win32::Windows::Win32::Foundation::HANDLE hFilterInstanceFind, win32::Windows::Win32::Storage::InstallableFileSystems::INSTANCE_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFilterInstanceFind);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterInstanceFindNext(hFilterInstanceFind, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterInstanceFindClose(win32::Windows::Win32::Foundation::HANDLE hFilterInstanceFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFilterInstanceFind);

        auto win32_impl_result = g_api_table.FilterInstanceFindClose(hFilterInstanceFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterVolumeInstanceFindFirst(win32::Windows::Win32::Foundation::PWSTR lpVolumeName, win32::Windows::Win32::Storage::InstallableFileSystems::INSTANCE_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned, win32::Windows::Win32::Storage::InstallableFileSystems::FilterVolumeInstanceFindHandle* lpVolumeInstanceFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpVolumeName);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);
        ORBIT_TRACK_PARAM(lpVolumeInstanceFind);

        auto win32_impl_result = g_api_table.FilterVolumeInstanceFindFirst(lpVolumeName, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned, lpVolumeInstanceFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterVolumeInstanceFindNext(win32::Windows::Win32::Foundation::HANDLE hVolumeInstanceFind, win32::Windows::Win32::Storage::InstallableFileSystems::INSTANCE_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hVolumeInstanceFind);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterVolumeInstanceFindNext(hVolumeInstanceFind, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterVolumeInstanceFindClose(win32::Windows::Win32::Foundation::HANDLE hVolumeInstanceFind) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hVolumeInstanceFind);

        auto win32_impl_result = g_api_table.FilterVolumeInstanceFindClose(hVolumeInstanceFind);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterGetInformation(win32::Windows::Win32::Storage::InstallableFileSystems::HFILTER hFilter, win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFilter);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterGetInformation(hFilter, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterInstanceGetInformation(win32::Windows::Win32::Storage::InstallableFileSystems::HFILTER_INSTANCE hInstance, win32::Windows::Win32::Storage::InstallableFileSystems::INSTANCE_INFORMATION_CLASS dwInformationClass, void* lpBuffer, uint32_t dwBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hInstance);
        ORBIT_TRACK_PARAM(dwInformationClass);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterInstanceGetInformation(hInstance, dwInformationClass, lpBuffer, dwBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterConnectCommunicationPort(win32::Windows::Win32::Foundation::PWSTR lpPortName, uint32_t dwOptions, void* lpContext, uint16_t wSizeOfContext, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Foundation::HANDLE* hPort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPortName);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(lpContext);
        ORBIT_TRACK_PARAM(wSizeOfContext);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(hPort);

        auto win32_impl_result = g_api_table.FilterConnectCommunicationPort(lpPortName, dwOptions, lpContext, wSizeOfContext, lpSecurityAttributes, hPort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterSendMessage(win32::Windows::Win32::Foundation::HANDLE hPort, void* lpInBuffer, uint32_t dwInBufferSize, void* lpOutBuffer, uint32_t dwOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPort);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(dwInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(dwOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.FilterSendMessage(hPort, lpInBuffer, dwInBufferSize, lpOutBuffer, dwOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterGetMessage(win32::Windows::Win32::Foundation::HANDLE hPort, win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_MESSAGE_HEADER* lpMessageBuffer, uint32_t dwMessageBufferSize, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPort);
        ORBIT_TRACK_PARAM(lpMessageBuffer);
        ORBIT_TRACK_PARAM(dwMessageBufferSize);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.FilterGetMessage(hPort, lpMessageBuffer, dwMessageBufferSize, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterReplyMessage(win32::Windows::Win32::Foundation::HANDLE hPort, win32::Windows::Win32::Storage::InstallableFileSystems::FILTER_REPLY_HEADER* lpReplyBuffer, uint32_t dwReplyBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPort);
        ORBIT_TRACK_PARAM(lpReplyBuffer);
        ORBIT_TRACK_PARAM(dwReplyBufferSize);

        auto win32_impl_result = g_api_table.FilterReplyMessage(hPort, lpReplyBuffer, dwReplyBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FilterGetDosName(win32::Windows::Win32::Foundation::PWSTR lpVolumeName, win32::Windows::Win32::Foundation::PWSTR lpDosName, uint32_t dwDosNameBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpVolumeName);
        ORBIT_TRACK_PARAM(lpDosName);
        ORBIT_TRACK_PARAM(dwDosNameBufferSize);

        auto win32_impl_result = g_api_table.FilterGetDosName(lpVolumeName, lpDosName, dwDosNameBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
