// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Sensors_2_H
#define WIN32_Windows_Win32_Devices_Sensors_2_H
#include "win32/Windows.Win32.Devices.Sensors.h"
#include "win32/impl/Windows.Win32.Devices.Sensors.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Sensors
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetPerformanceTime(uint32_t* TimeMs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TimeMs);

        auto win32_impl_result = g_api_table.GetPerformanceTime(TimeMs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_InitPropVariantFromFloat(float fltVal, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* ppropvar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fltVal);
        ORBIT_TRACK_PARAM(ppropvar);

        auto win32_impl_result = g_api_table.InitPropVariantFromFloat(fltVal, ppropvar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetPropVariant(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, win32::Windows::Win32::Foundation::BOOLEAN TypeCheck, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(TypeCheck);
        ORBIT_TRACK_PARAM(pValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetPropVariant(pList, pKey, TypeCheck, pValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeySetPropVariant(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, win32::Windows::Win32::Foundation::BOOLEAN TypeCheck, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(TypeCheck);
        ORBIT_TRACK_PARAM(pValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeySetPropVariant(pList, pKey, TypeCheck, pValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetFileTime(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, win32::Windows::Win32::Foundation::FILETIME* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetFileTime(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetGuid(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, ::win32::guid* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetGuid(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetBool(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, win32::Windows::Win32::Foundation::BOOL* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetBool(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetUlong(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, uint32_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetUlong(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetUshort(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, uint16_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetUshort(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetFloat(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, float* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetFloat(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetDouble(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, double* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetDouble(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetInt32(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, int32_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetInt32(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetInt64(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, int64_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetInt64(pList, pKey, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetNthUlong(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, uint32_t Occurrence, uint32_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(Occurrence);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetNthUlong(pList, pKey, Occurrence, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetNthUshort(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, uint32_t Occurrence, uint16_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(Occurrence);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetNthUshort(pList, pKey, Occurrence, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropKeyFindKeyGetNthInt64(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, uint32_t Occurrence, int64_t* pRetValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(Occurrence);
        ORBIT_TRACK_PARAM(pRetValue);

        auto win32_impl_result = g_api_table.PropKeyFindKeyGetNthInt64(pList, pKey, Occurrence, pRetValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsKeyPresentInPropertyList(win32::Windows::Win32::Devices::Sensors::SENSOR_PROPERTY_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);

        auto win32_impl_result = g_api_table.IsKeyPresentInPropertyList(pList, pKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsKeyPresentInCollectionList(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pList);
        ORBIT_TRACK_PARAM(pKey);

        auto win32_impl_result = g_api_table.IsKeyPresentInCollectionList(pList, pKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsCollectionListSame(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* ListA, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* ListB) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListA);
        ORBIT_TRACK_PARAM(ListB);

        auto win32_impl_result = g_api_table.IsCollectionListSame(ListA, ListB);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropVariantGetInformation(win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* PropVariantValue, uint32_t* PropVariantOffset, uint32_t* PropVariantSize, void** PropVariantPointer, uint32_t* RemappedType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PropVariantValue);
        ORBIT_TRACK_PARAM(PropVariantOffset);
        ORBIT_TRACK_PARAM(PropVariantSize);
        ORBIT_TRACK_PARAM(PropVariantPointer);
        ORBIT_TRACK_PARAM(RemappedType);

        auto win32_impl_result = g_api_table.PropVariantGetInformation(PropVariantValue, PropVariantOffset, PropVariantSize, PropVariantPointer, RemappedType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_PropertiesListCopy(win32::Windows::Win32::Devices::Sensors::SENSOR_PROPERTY_LIST* Target, win32::Windows::Win32::Devices::Sensors::SENSOR_PROPERTY_LIST* Source) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Target);
        ORBIT_TRACK_PARAM(Source);

        auto win32_impl_result = g_api_table.PropertiesListCopy(Target, Source);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PropertiesListGetFillableCount(uint32_t BufferSizeBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeBytes);

        auto win32_impl_result = g_api_table.PropertiesListGetFillableCount(BufferSizeBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CollectionsListGetMarshalledSize(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Collection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Collection);

        auto win32_impl_result = g_api_table.CollectionsListGetMarshalledSize(Collection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListCopyAndMarshall(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Target, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Source) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Target);
        ORBIT_TRACK_PARAM(Source);

        auto win32_impl_result = g_api_table.CollectionsListCopyAndMarshall(Target, Source);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListMarshall(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Target) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Target);

        auto win32_impl_result = g_api_table.CollectionsListMarshall(Target);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CollectionsListGetMarshalledSizeWithoutSerialization(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Collection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Collection);

        auto win32_impl_result = g_api_table.CollectionsListGetMarshalledSizeWithoutSerialization(Collection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListUpdateMarshalledPointer(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Collection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Collection);

        auto win32_impl_result = g_api_table.CollectionsListUpdateMarshalledPointer(Collection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SerializationBufferAllocate(uint32_t SizeInBytes, uint8_t** pBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SizeInBytes);
        ORBIT_TRACK_PARAM(pBuffer);

        auto win32_impl_result = g_api_table.SerializationBufferAllocate(SizeInBytes, pBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SerializationBufferFree(uint8_t* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Buffer);

        g_api_table.SerializationBufferFree(Buffer);
        
    }

    uint32_t __stdcall ORBIT_IMPL_CollectionsListGetSerializedSize(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* Collection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Collection);

        auto win32_impl_result = g_api_table.CollectionsListGetSerializedSize(Collection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListSerializeToBuffer(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* SourceCollection, uint32_t TargetBufferSizeInBytes, uint8_t* TargetBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SourceCollection);
        ORBIT_TRACK_PARAM(TargetBufferSizeInBytes);
        ORBIT_TRACK_PARAM(TargetBuffer);

        auto win32_impl_result = g_api_table.CollectionsListSerializeToBuffer(SourceCollection, TargetBufferSizeInBytes, TargetBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListAllocateBufferAndSerialize(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* SourceCollection, uint32_t* pTargetBufferSizeInBytes, uint8_t** pTargetBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SourceCollection);
        ORBIT_TRACK_PARAM(pTargetBufferSizeInBytes);
        ORBIT_TRACK_PARAM(pTargetBuffer);

        auto win32_impl_result = g_api_table.CollectionsListAllocateBufferAndSerialize(SourceCollection, pTargetBufferSizeInBytes, pTargetBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListDeserializeFromBuffer(uint32_t SourceBufferSizeInBytes, uint8_t* SourceBuffer, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* TargetCollection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SourceBufferSizeInBytes);
        ORBIT_TRACK_PARAM(SourceBuffer);
        ORBIT_TRACK_PARAM(TargetCollection);

        auto win32_impl_result = g_api_table.CollectionsListDeserializeFromBuffer(SourceBufferSizeInBytes, SourceBuffer, TargetCollection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SensorCollectionGetAt(uint32_t Index, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pSensorsList, win32::Windows::Win32::System::PropertiesSystem::PROPERTYKEY* pKey, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Index);
        ORBIT_TRACK_PARAM(pSensorsList);
        ORBIT_TRACK_PARAM(pKey);
        ORBIT_TRACK_PARAM(pValue);

        auto win32_impl_result = g_api_table.SensorCollectionGetAt(Index, pSensorsList, pKey, pValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CollectionsListGetFillableCount(uint32_t BufferSizeBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeBytes);

        auto win32_impl_result = g_api_table.CollectionsListGetFillableCount(BufferSizeBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_EvaluateActivityThresholds(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* newSample, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* oldSample, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* thresholds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(newSample);
        ORBIT_TRACK_PARAM(oldSample);
        ORBIT_TRACK_PARAM(thresholds);

        auto win32_impl_result = g_api_table.EvaluateActivityThresholds(newSample, oldSample, thresholds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CollectionsListSortSubscribedActivitiesByConfidence(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* thresholds, win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* pCollection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(thresholds);
        ORBIT_TRACK_PARAM(pCollection);

        auto win32_impl_result = g_api_table.CollectionsListSortSubscribedActivitiesByConfidence(thresholds, pCollection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_InitPropVariantFromCLSIDArray(::win32::guid* members, uint32_t size, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* ppropvar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(members);
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(ppropvar);

        auto win32_impl_result = g_api_table.InitPropVariantFromCLSIDArray(members, size, ppropvar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsSensorSubscribed(win32::Windows::Win32::Devices::Sensors::SENSOR_COLLECTION_LIST* subscriptionList, ::win32::guid currentType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(subscriptionList);
        ORBIT_TRACK_PARAM(currentType);

        auto win32_impl_result = g_api_table.IsSensorSubscribed(subscriptionList, currentType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_IsGUIDPresentInList(::win32::guid* guidArray, uint32_t arrayLength, ::win32::guid* guidElem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidArray);
        ORBIT_TRACK_PARAM(arrayLength);
        ORBIT_TRACK_PARAM(guidElem);

        auto win32_impl_result = g_api_table.IsGUIDPresentInList(guidArray, arrayLength, guidElem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
