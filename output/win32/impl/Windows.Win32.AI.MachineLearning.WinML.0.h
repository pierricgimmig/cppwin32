// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_AI_MachineLearning_WinML_0_H
#define WIN32_Windows_Win32_AI_MachineLearning_WinML_0_H
WIN32_EXPORT namespace win32::Windows::Win32::AI::MachineLearning::WinML
{
#pragma region enums
    enum class MLOperatorAttributeType : uint32_t
    {
        Undefined = 0x0,
        Float = 0x2,
        Int = 0x3,
        String = 0x4,
        FloatArray = 0x7,
        IntArray = 0x8,
        StringArray = 0x9,
    };
    enum class MLOperatorEdgeType : uint32_t
    {
        Undefined = 0x0,
        Tensor = 0x1,
    };
    enum class MLOperatorExecutionType : uint32_t
    {
        Undefined = 0x0,
        Cpu = 0x1,
        D3D12 = 0x2,
    };
    enum class MLOperatorKernelOptions : uint32_t
    {
        None = 0x0,
        AllowDynamicInputShapes = 0x1,
    };
    enum class MLOperatorParameterOptions : uint32_t
    {
        Single = 0x0,
        Optional = 0x1,
        Variadic = 0x2,
    };
    enum class MLOperatorSchemaEdgeTypeFormat : int32_t
    {
        EdgeDescription = 0,
        Label = 1,
    };
    enum class MLOperatorTensorDataType : uint32_t
    {
        Undefined = 0x0,
        Float = 0x1,
        UInt8 = 0x2,
        Int8 = 0x3,
        UInt16 = 0x4,
        Int16 = 0x5,
        Int32 = 0x6,
        Int64 = 0x7,
        String = 0x8,
        Bool = 0x9,
        Float16 = 0xa,
        Double = 0xb,
        UInt32 = 0xc,
        UInt64 = 0xd,
        Complex64 = 0xe,
        Complex128 = 0xf,
    };
    enum class WINML_BINDING_TYPE : int32_t
    {
        WINML_BINDING_UNDEFINED = 0,
        WINML_BINDING_TENSOR = 1,
        WINML_BINDING_SEQUENCE = 2,
        WINML_BINDING_MAP = 3,
        WINML_BINDING_IMAGE = 4,
        WINML_BINDING_RESOURCE = 5,
    };
    enum class WINML_FEATURE_TYPE : int32_t
    {
        WINML_FEATURE_UNDEFINED = 0,
        WINML_FEATURE_TENSOR = 1,
        WINML_FEATURE_SEQUENCE = 2,
        WINML_FEATURE_MAP = 3,
        WINML_FEATURE_IMAGE = 4,
    };
    enum class WINML_RUNTIME_TYPE : int32_t
    {
        WINML_RUNTIME_CNTK = 0,
    };
    enum class WINML_TENSOR_DATA_TYPE : int32_t
    {
        WINML_TENSOR_UNDEFINED = 0,
        WINML_TENSOR_FLOAT = 1,
        WINML_TENSOR_UINT8 = 2,
        WINML_TENSOR_INT8 = 3,
        WINML_TENSOR_UINT16 = 4,
        WINML_TENSOR_INT16 = 5,
        WINML_TENSOR_INT32 = 6,
        WINML_TENSOR_INT64 = 7,
        WINML_TENSOR_STRING = 8,
        WINML_TENSOR_BOOLEAN = 9,
        WINML_TENSOR_FLOAT16 = 10,
        WINML_TENSOR_DOUBLE = 11,
        WINML_TENSOR_UINT32 = 12,
        WINML_TENSOR_UINT64 = 13,
        WINML_TENSOR_COMPLEX64 = 14,
        WINML_TENSOR_COMPLEX128 = 15,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct MLOperatorAttribute;
    struct MLOperatorAttributeNameValue;
    struct MLOperatorEdgeDescription;
    struct MLOperatorEdgeTypeConstraint;
    struct MLOperatorKernelDescription;
    struct MLOperatorSchemaDescription;
    struct MLOperatorSchemaEdgeDescription;
    struct MLOperatorSetId;
    struct WINML_BINDING_DESC;
    struct WINML_IMAGE_BINDING_DESC;
    struct WINML_IMAGE_VARIABLE_DESC;
    struct WINML_MAP_BINDING_DESC;
    struct WINML_MAP_VARIABLE_DESC;
    struct WINML_MODEL_DESC;
    struct WINML_RESOURCE_BINDING_DESC;
    struct WINML_SEQUENCE_BINDING_DESC;
    struct WINML_SEQUENCE_VARIABLE_DESC;
    struct WINML_TENSOR_BINDING_DESC;
    struct WINML_TENSOR_VARIABLE_DESC;
    struct WINML_VARIABLE_DESC;
    struct IMLOperatorAttributes;
    struct IMLOperatorKernel;
    struct IMLOperatorKernelContext;
    struct IMLOperatorKernelCreationContext;
    struct IMLOperatorKernelFactory;
    struct IMLOperatorRegistry;
    struct IMLOperatorShapeInferenceContext;
    struct IMLOperatorShapeInferrer;
    struct IMLOperatorTensor;
    struct IMLOperatorTensorShapeDescription;
    struct IMLOperatorTypeInferenceContext;
    struct IMLOperatorTypeInferrer;
    struct IWinMLEvaluationContext;
    struct IWinMLModel;
    struct IWinMLRuntime;
    struct IWinMLRuntimeFactory;
#pragma endregion forward_declarations

#pragma region delegates
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
