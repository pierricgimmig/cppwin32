// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UI_Input_XboxController_2_H
#define WIN32_Windows_Win32_UI_Input_XboxController_2_H
#include "win32/Windows.Win32.UI.Input.XboxController.h"
#include "win32/impl/Windows.Win32.UI.Input.XboxController.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::UI::Input::XboxController
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_XInputGetState(uint32_t dwUserIndex, win32::Windows::Win32::UI::Input::XboxController::XINPUT_STATE* pState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwUserIndex);
        ORBIT_TRACK_PARAM(pState);

        auto win32_impl_result = g_api_table.XInputGetState(dwUserIndex, pState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_XInputSetState(uint32_t dwUserIndex, win32::Windows::Win32::UI::Input::XboxController::XINPUT_VIBRATION* pVibration) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwUserIndex);
        ORBIT_TRACK_PARAM(pVibration);

        auto win32_impl_result = g_api_table.XInputSetState(dwUserIndex, pVibration);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_XInputGetCapabilities(uint32_t dwUserIndex, uint32_t dwFlags, win32::Windows::Win32::UI::Input::XboxController::XINPUT_CAPABILITIES* pCapabilities) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwUserIndex);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pCapabilities);

        auto win32_impl_result = g_api_table.XInputGetCapabilities(dwUserIndex, dwFlags, pCapabilities);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_XInputEnable(win32::Windows::Win32::Foundation::BOOL enable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(enable);

        g_api_table.XInputEnable(enable);
        
    }

    uint32_t __stdcall ORBIT_IMPL_XInputGetAudioDeviceIds(uint32_t dwUserIndex, win32::Windows::Win32::Foundation::PWSTR pRenderDeviceId, uint32_t* pRenderCount, win32::Windows::Win32::Foundation::PWSTR pCaptureDeviceId, uint32_t* pCaptureCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwUserIndex);
        ORBIT_TRACK_PARAM(pRenderDeviceId);
        ORBIT_TRACK_PARAM(pRenderCount);
        ORBIT_TRACK_PARAM(pCaptureDeviceId);
        ORBIT_TRACK_PARAM(pCaptureCount);

        auto win32_impl_result = g_api_table.XInputGetAudioDeviceIds(dwUserIndex, pRenderDeviceId, pRenderCount, pCaptureDeviceId, pCaptureCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_XInputGetBatteryInformation(uint32_t dwUserIndex, uint8_t devType, win32::Windows::Win32::UI::Input::XboxController::XINPUT_BATTERY_INFORMATION* pBatteryInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwUserIndex);
        ORBIT_TRACK_PARAM(devType);
        ORBIT_TRACK_PARAM(pBatteryInformation);

        auto win32_impl_result = g_api_table.XInputGetBatteryInformation(dwUserIndex, devType, pBatteryInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_XInputGetKeystroke(uint32_t dwUserIndex, uint32_t dwReserved, win32::Windows::Win32::UI::Input::XboxController::XINPUT_KEYSTROKE* pKeystroke) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwUserIndex);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(pKeystroke);

        auto win32_impl_result = g_api_table.XInputGetKeystroke(dwUserIndex, dwReserved, pKeystroke);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
