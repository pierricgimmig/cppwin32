// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Enumeration_Pnp_2_H
#define WIN32_Windows_Win32_Devices_Enumeration_Pnp_2_H
#include "win32/Windows.Win32.Devices.Enumeration.Pnp.h"
#include "win32/impl/Windows.Win32.Devices.Enumeration.Pnp.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Enumeration::Pnp
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDeviceCreate(win32::Windows::Win32::Foundation::PWSTR pszEnumeratorName, win32::Windows::Win32::Foundation::PWSTR pszParentDeviceInstance, win32::Windows::Win32::Devices::Enumeration::Pnp::SW_DEVICE_CREATE_INFO* pCreateInfo, uint32_t cPropertyCount, win32::Windows::Win32::System::SystemServices::DEVPROPERTY* pProperties, win32::Windows::Win32::Devices::Enumeration::Pnp::SW_DEVICE_CREATE_CALLBACK* pCallback, void* pContext, intptr_t* phSwDevice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszEnumeratorName);
        ORBIT_TRACK_PARAM(pszParentDeviceInstance);
        ORBIT_TRACK_PARAM(pCreateInfo);
        ORBIT_TRACK_PARAM(cPropertyCount);
        ORBIT_TRACK_PARAM(pProperties);
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(pContext);
        ORBIT_TRACK_PARAM(phSwDevice);

        auto win32_impl_result = g_api_table.SwDeviceCreate(pszEnumeratorName, pszParentDeviceInstance, pCreateInfo, cPropertyCount, pProperties, pCallback, pContext, phSwDevice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SwDeviceClose(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);

        g_api_table.SwDeviceClose(hSwDevice);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDeviceSetLifetime(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice, win32::Windows::Win32::Devices::Enumeration::Pnp::SW_DEVICE_LIFETIME Lifetime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);
        ORBIT_TRACK_PARAM(Lifetime);

        auto win32_impl_result = g_api_table.SwDeviceSetLifetime(hSwDevice, Lifetime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDeviceGetLifetime(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice, win32::Windows::Win32::Devices::Enumeration::Pnp::SW_DEVICE_LIFETIME* pLifetime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);
        ORBIT_TRACK_PARAM(pLifetime);

        auto win32_impl_result = g_api_table.SwDeviceGetLifetime(hSwDevice, pLifetime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDevicePropertySet(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice, uint32_t cPropertyCount, win32::Windows::Win32::System::SystemServices::DEVPROPERTY* pProperties) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);
        ORBIT_TRACK_PARAM(cPropertyCount);
        ORBIT_TRACK_PARAM(pProperties);

        auto win32_impl_result = g_api_table.SwDevicePropertySet(hSwDevice, cPropertyCount, pProperties);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDeviceInterfaceRegister(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice, ::win32::guid* pInterfaceClassGuid, win32::Windows::Win32::Foundation::PWSTR pszReferenceString, uint32_t cPropertyCount, win32::Windows::Win32::System::SystemServices::DEVPROPERTY* pProperties, win32::Windows::Win32::Foundation::BOOL fEnabled, win32::Windows::Win32::Foundation::PWSTR* ppszDeviceInterfaceId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);
        ORBIT_TRACK_PARAM(pInterfaceClassGuid);
        ORBIT_TRACK_PARAM(pszReferenceString);
        ORBIT_TRACK_PARAM(cPropertyCount);
        ORBIT_TRACK_PARAM(pProperties);
        ORBIT_TRACK_PARAM(fEnabled);
        ORBIT_TRACK_PARAM(ppszDeviceInterfaceId);

        auto win32_impl_result = g_api_table.SwDeviceInterfaceRegister(hSwDevice, pInterfaceClassGuid, pszReferenceString, cPropertyCount, pProperties, fEnabled, ppszDeviceInterfaceId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SwMemFree(void* pMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMem);

        g_api_table.SwMemFree(pMem);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDeviceInterfaceSetState(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice, win32::Windows::Win32::Foundation::PWSTR pszDeviceInterfaceId, win32::Windows::Win32::Foundation::BOOL fEnabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);
        ORBIT_TRACK_PARAM(pszDeviceInterfaceId);
        ORBIT_TRACK_PARAM(fEnabled);

        auto win32_impl_result = g_api_table.SwDeviceInterfaceSetState(hSwDevice, pszDeviceInterfaceId, fEnabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SwDeviceInterfacePropertySet(win32::Windows::Win32::Devices::Enumeration::Pnp::HSWDEVICE hSwDevice, win32::Windows::Win32::Foundation::PWSTR pszDeviceInterfaceId, uint32_t cPropertyCount, win32::Windows::Win32::System::SystemServices::DEVPROPERTY* pProperties) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSwDevice);
        ORBIT_TRACK_PARAM(pszDeviceInterfaceId);
        ORBIT_TRACK_PARAM(cPropertyCount);
        ORBIT_TRACK_PARAM(pProperties);

        auto win32_impl_result = g_api_table.SwDeviceInterfacePropertySet(hSwDevice, pszDeviceInterfaceId, cPropertyCount, pProperties);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
