// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UI_HiDpi_2_H
#define WIN32_Windows_Win32_UI_HiDpi_2_H
#include "win32/Windows.Win32.UI.HiDpi.h"
#include "win32/impl/Windows.Win32.UI.HiDpi.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::UI::HiDpi
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    intptr_t __stdcall ORBIT_IMPL_OpenThemeDataForDpi(win32::Windows::Win32::Foundation::HWND hwnd, win32::Windows::Win32::Foundation::PWSTR pszClassList, uint32_t dpi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);
        ORBIT_TRACK_PARAM(pszClassList);
        ORBIT_TRACK_PARAM(dpi);

        auto win32_impl_result = g_api_table.OpenThemeDataForDpi(hwnd, pszClassList, dpi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetDialogControlDpiChangeBehavior(win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::UI::HiDpi::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, win32::Windows::Win32::UI::HiDpi::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(mask);
        ORBIT_TRACK_PARAM(values);

        auto win32_impl_result = g_api_table.SetDialogControlDpiChangeBehavior(hWnd, mask, values);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS __stdcall ORBIT_IMPL_GetDialogControlDpiChangeBehavior(win32::Windows::Win32::Foundation::HWND hWnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);

        auto win32_impl_result = g_api_table.GetDialogControlDpiChangeBehavior(hWnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetDialogDpiChangeBehavior(win32::Windows::Win32::Foundation::HWND hDlg, win32::Windows::Win32::UI::HiDpi::DIALOG_DPI_CHANGE_BEHAVIORS mask, win32::Windows::Win32::UI::HiDpi::DIALOG_DPI_CHANGE_BEHAVIORS values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDlg);
        ORBIT_TRACK_PARAM(mask);
        ORBIT_TRACK_PARAM(values);

        auto win32_impl_result = g_api_table.SetDialogDpiChangeBehavior(hDlg, mask, values);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DIALOG_DPI_CHANGE_BEHAVIORS __stdcall ORBIT_IMPL_GetDialogDpiChangeBehavior(win32::Windows::Win32::Foundation::HWND hDlg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDlg);

        auto win32_impl_result = g_api_table.GetDialogDpiChangeBehavior(hDlg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetSystemMetricsForDpi(int32_t nIndex, uint32_t dpi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nIndex);
        ORBIT_TRACK_PARAM(dpi);

        auto win32_impl_result = g_api_table.GetSystemMetricsForDpi(nIndex, dpi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AdjustWindowRectExForDpi(win32::Windows::Win32::Foundation::RECT* lpRect, uint32_t dwStyle, win32::Windows::Win32::Foundation::BOOL bMenu, uint32_t dwExStyle, uint32_t dpi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRect);
        ORBIT_TRACK_PARAM(dwStyle);
        ORBIT_TRACK_PARAM(bMenu);
        ORBIT_TRACK_PARAM(dwExStyle);
        ORBIT_TRACK_PARAM(dpi);

        auto win32_impl_result = g_api_table.AdjustWindowRectExForDpi(lpRect, dwStyle, bMenu, dwExStyle, dpi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_LogicalToPhysicalPointForPerMonitorDPI(win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Foundation::POINT* lpPoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(lpPoint);

        auto win32_impl_result = g_api_table.LogicalToPhysicalPointForPerMonitorDPI(hWnd, lpPoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PhysicalToLogicalPointForPerMonitorDPI(win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Foundation::POINT* lpPoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(lpPoint);

        auto win32_impl_result = g_api_table.PhysicalToLogicalPointForPerMonitorDPI(hWnd, lpPoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SystemParametersInfoForDpi(uint32_t uiAction, uint32_t uiParam, void* pvParam, uint32_t fWinIni, uint32_t dpi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uiAction);
        ORBIT_TRACK_PARAM(uiParam);
        ORBIT_TRACK_PARAM(pvParam);
        ORBIT_TRACK_PARAM(fWinIni);
        ORBIT_TRACK_PARAM(dpi);

        auto win32_impl_result = g_api_table.SystemParametersInfoForDpi(uiAction, uiParam, pvParam, fWinIni, dpi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT __stdcall ORBIT_IMPL_SetThreadDpiAwarenessContext(win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT dpiContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dpiContext);

        auto win32_impl_result = g_api_table.SetThreadDpiAwarenessContext(dpiContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT __stdcall ORBIT_IMPL_GetThreadDpiAwarenessContext() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetThreadDpiAwarenessContext();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT __stdcall ORBIT_IMPL_GetWindowDpiAwarenessContext(win32::Windows::Win32::Foundation::HWND hwnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);

        auto win32_impl_result = g_api_table.GetWindowDpiAwarenessContext(hwnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS __stdcall ORBIT_IMPL_GetAwarenessFromDpiAwarenessContext(win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.GetAwarenessFromDpiAwarenessContext(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDpiFromDpiAwarenessContext(win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.GetDpiFromDpiAwarenessContext(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AreDpiAwarenessContextsEqual(win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT dpiContextA, win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT dpiContextB) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dpiContextA);
        ORBIT_TRACK_PARAM(dpiContextB);

        auto win32_impl_result = g_api_table.AreDpiAwarenessContextsEqual(dpiContextA, dpiContextB);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsValidDpiAwarenessContext(win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.IsValidDpiAwarenessContext(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDpiForWindow(win32::Windows::Win32::Foundation::HWND hwnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);

        auto win32_impl_result = g_api_table.GetDpiForWindow(hwnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDpiForSystem() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetDpiForSystem();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetSystemDpiForProcess(win32::Windows::Win32::Foundation::HANDLE hProcess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);

        auto win32_impl_result = g_api_table.GetSystemDpiForProcess(hProcess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnableNonClientDpiScaling(win32::Windows::Win32::Foundation::HWND hwnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);

        auto win32_impl_result = g_api_table.EnableNonClientDpiScaling(hwnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessDpiAwarenessContext(win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.SetProcessDpiAwarenessContext(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_AWARENESS_CONTEXT __stdcall ORBIT_IMPL_GetDpiAwarenessContextForProcess(win32::Windows::Win32::Foundation::HANDLE hProcess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);

        auto win32_impl_result = g_api_table.GetDpiAwarenessContextForProcess(hProcess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_HOSTING_BEHAVIOR __stdcall ORBIT_IMPL_SetThreadDpiHostingBehavior(win32::Windows::Win32::UI::HiDpi::DPI_HOSTING_BEHAVIOR value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.SetThreadDpiHostingBehavior(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_HOSTING_BEHAVIOR __stdcall ORBIT_IMPL_GetThreadDpiHostingBehavior() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetThreadDpiHostingBehavior();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::HiDpi::DPI_HOSTING_BEHAVIOR __stdcall ORBIT_IMPL_GetWindowDpiHostingBehavior(win32::Windows::Win32::Foundation::HWND hwnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);

        auto win32_impl_result = g_api_table.GetWindowDpiHostingBehavior(hwnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetProcessDpiAwareness(win32::Windows::Win32::UI::HiDpi::PROCESS_DPI_AWARENESS value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.SetProcessDpiAwareness(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetProcessDpiAwareness(win32::Windows::Win32::Foundation::HANDLE hprocess, win32::Windows::Win32::UI::HiDpi::PROCESS_DPI_AWARENESS* value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hprocess);
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.GetProcessDpiAwareness(hprocess, value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetDpiForMonitor(win32::Windows::Win32::Graphics::Gdi::HMONITOR hmonitor, win32::Windows::Win32::UI::HiDpi::MONITOR_DPI_TYPE dpiType, uint32_t* dpiX, uint32_t* dpiY) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmonitor);
        ORBIT_TRACK_PARAM(dpiType);
        ORBIT_TRACK_PARAM(dpiX);
        ORBIT_TRACK_PARAM(dpiY);

        auto win32_impl_result = g_api_table.GetDpiForMonitor(hmonitor, dpiType, dpiX, dpiY);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
