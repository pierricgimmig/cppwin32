// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_WinWlx_0_H
#define WIN32_Windows_Win32_Security_WinWlx_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HANDLE;
    struct HWND;
    struct LPARAM;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::UI::WindowsAndMessaging
{
    using DLGPROC = intptr_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    struct DLGTEMPLATE;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security::WinWlx
{
#pragma region enums
    enum class WLX_SHUTDOWN_TYPE : uint32_t
    {
        WLX_SAS_ACTION_SHUTDOWN = 0x5,
        WLX_SAS_ACTION_SHUTDOWN_REBOOT = 0xb,
        WLX_SAS_ACTION_SHUTDOWN_POWER_OFF = 0xa,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct WLX_CLIENT_CREDENTIALS_INFO_V1_0;
    struct WLX_CLIENT_CREDENTIALS_INFO_V2_0;
    struct WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0;
    struct WLX_DESKTOP;
    struct WLX_DISPATCH_VERSION_1_0;
    struct WLX_DISPATCH_VERSION_1_1;
    struct WLX_DISPATCH_VERSION_1_2;
    struct WLX_DISPATCH_VERSION_1_3;
    struct WLX_DISPATCH_VERSION_1_4;
    struct WLX_MPR_NOTIFY_INFO;
    struct WLX_NOTIFICATION_INFO;
    struct WLX_PROFILE_V1_0;
    struct WLX_PROFILE_V2_0;
    struct WLX_SC_NOTIFICATION_INFO;
    struct WLX_TERMINAL_SERVICES_DATA;
#pragma endregion forward_declarations

#pragma region delegates
    using PWLX_USE_CTRL_ALT_DEL = void __stdcall(Windows::Win32::Foundation::HANDLE);
    using PWLX_SET_CONTEXT_POINTER = void __stdcall(Windows::Win32::Foundation::HANDLE, void*);
    using PWLX_SAS_NOTIFY = void __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
    using PWLX_SET_TIMEOUT = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
    using PWLX_ASSIGN_SHELL_PROTECTION = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE);
    using PWLX_MESSAGE_BOX = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HWND, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint32_t);
    using PWLX_DIALOG_BOX = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::HWND, Windows::Win32::UI::WindowsAndMessaging::DLGPROC*);
    using PWLX_DIALOG_BOX_INDIRECT = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::UI::WindowsAndMessaging::DLGTEMPLATE*, Windows::Win32::Foundation::HWND, Windows::Win32::UI::WindowsAndMessaging::DLGPROC*);
    using PWLX_DIALOG_BOX_PARAM = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::HWND, Windows::Win32::UI::WindowsAndMessaging::DLGPROC*, Windows::Win32::Foundation::LPARAM);
    using PWLX_DIALOG_BOX_INDIRECT_PARAM = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::UI::WindowsAndMessaging::DLGTEMPLATE*, Windows::Win32::Foundation::HWND, Windows::Win32::UI::WindowsAndMessaging::DLGPROC*, Windows::Win32::Foundation::LPARAM);
    using PWLX_SWITCH_DESKTOP_TO_USER = int32_t __stdcall(Windows::Win32::Foundation::HANDLE);
    using PWLX_SWITCH_DESKTOP_TO_WINLOGON = int32_t __stdcall(Windows::Win32::Foundation::HANDLE);
    using PWLX_CHANGE_PASSWORD_NOTIFY = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::WinWlx::WLX_MPR_NOTIFY_INFO*, uint32_t);
    using PWLX_GET_SOURCE_DESKTOP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::WinWlx::WLX_DESKTOP**);
    using PWLX_SET_RETURN_DESKTOP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::WinWlx::WLX_DESKTOP*);
    using PWLX_CREATE_USER_DESKTOP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, uint32_t, Windows::Win32::Foundation::PWSTR, Windows::Win32::Security::WinWlx::WLX_DESKTOP**);
    using PWLX_CHANGE_PASSWORD_NOTIFY_EX = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::WinWlx::WLX_MPR_NOTIFY_INFO*, uint32_t, Windows::Win32::Foundation::PWSTR, void*);
    using PWLX_CLOSE_USER_DESKTOP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::WinWlx::WLX_DESKTOP*, Windows::Win32::Foundation::HANDLE);
    using PWLX_SET_OPTION = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, size_t, size_t*);
    using PWLX_GET_OPTION = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, size_t*);
    using PWLX_WIN31_MIGRATE = void __stdcall(Windows::Win32::Foundation::HANDLE);
    using PWLX_QUERY_CLIENT_CREDENTIALS = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::WinWlx::WLX_CLIENT_CREDENTIALS_INFO_V1_0*);
    using PWLX_QUERY_IC_CREDENTIALS = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::WinWlx::WLX_CLIENT_CREDENTIALS_INFO_V1_0*);
    using PWLX_QUERY_TS_LOGON_CREDENTIALS = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::WinWlx::WLX_CLIENT_CREDENTIALS_INFO_V2_0*);
    using PWLX_DISCONNECT = Windows::Win32::Foundation::BOOL __stdcall();
    using PWLX_QUERY_TERMINAL_SERVICES_DATA = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::WinWlx::WLX_TERMINAL_SERVICES_DATA*, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR);
    using PWLX_QUERY_CONSOLESWITCH_CREDENTIALS = uint32_t __stdcall(Windows::Win32::Security::WinWlx::WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0*);
    using PFNMSGECALLBACK = uint32_t __stdcall(Windows::Win32::Foundation::BOOL, Windows::Win32::Foundation::PWSTR);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
