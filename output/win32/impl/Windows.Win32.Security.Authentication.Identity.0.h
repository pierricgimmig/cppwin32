// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_Authentication_Identity_0_H
#define WIN32_Windows_Win32_Security_Authentication_Identity_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct BOOLEAN;
    struct FILETIME;
    struct HANDLE;
    union LARGE_INTEGER;
    struct LUID;
    struct NTSTATUS;
    struct PSID;
    struct PSTR;
    struct PWSTR;
    struct UNICODE_STRING;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct SECURITY_ATTRIBUTES;
    enum class SECURITY_IMPERSONATION_LEVEL : int32_t;
    struct TOKEN_GROUPS;
    struct TOKEN_SOURCE;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security::Credentials
{
    struct CREDENTIAL_TARGET_INFORMATIONW;
    struct SecHandle;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Kernel
{
    struct STRING;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::SystemServices
{
    using LPTHREAD_START_ROUTINE = uint32_t __stdcall(void*);
}
WIN32_EXPORT namespace win32::Windows::Win32::Security::Authentication::Identity
{
#pragma region enums
    enum class ACCEPT_SECURITY_CONTEXT_CONTEXT_REQ : uint32_t
    {
        ASC_REQ_ALLOCATE_MEMORY = 0x100,
        ASC_REQ_CONNECTION = 0x800,
        ASC_REQ_DELEGATE = 0x1,
        ASC_REQ_EXTENDED_ERROR = 0x8000,
        ASC_REQ_REPLAY_DETECT = 0x4,
        ASC_REQ_SEQUENCE_DETECT = 0x8,
        ASC_REQ_STREAM = 0x10000,
    };
    enum class CRED_FETCH : int32_t
    {
        CredFetchDefault = 0,
        CredFetchDPAPI = 1,
        CredFetchForced = 2,
    };
    enum class DOMAIN_PASSWORD_PROPERTIES : uint32_t
    {
        DOMAIN_PASSWORD_COMPLEX = 0x1,
        DOMAIN_PASSWORD_NO_ANON_CHANGE = 0x2,
        DOMAIN_PASSWORD_NO_CLEAR_CHANGE = 0x4,
        DOMAIN_LOCKOUT_ADMINS = 0x8,
        DOMAIN_PASSWORD_STORE_CLEARTEXT = 0x10,
        DOMAIN_REFUSE_PASSWORD_CHANGE = 0x20,
    };
    enum class EXPORT_SECURITY_CONTEXT_FLAGS : uint32_t
    {
        SECPKG_CONTEXT_EXPORT_RESET_NEW = 0x1,
        SECPKG_CONTEXT_EXPORT_DELETE_OLD = 0x2,
        SECPKG_CONTEXT_EXPORT_TO_KERNEL = 0x4,
    };
    enum class EXTENDED_NAME_FORMAT : int32_t
    {
        NameUnknown = 0,
        NameFullyQualifiedDN = 1,
        NameSamCompatible = 2,
        NameDisplay = 3,
        NameUniqueId = 6,
        NameCanonical = 7,
        NameUserPrincipal = 8,
        NameCanonicalEx = 9,
        NameServicePrincipal = 10,
        NameDnsDomain = 12,
        NameGivenName = 13,
        NameSurname = 14,
    };
    enum class KERB_ADDRESS_TYPE : uint32_t
    {
        DS_INET_ADDRESS = 0x1,
        DS_NETBIOS_ADDRESS = 0x2,
    };
    enum class KERB_CERTIFICATE_INFO_TYPE : int32_t
    {
        CertHashInfo = 1,
    };
    enum class KERB_CRYPTO_KEY_TYPE : int32_t
    {
        KERB_ETYPE_DES_CBC_CRC = 1,
        KERB_ETYPE_DES_CBC_MD4 = 2,
        KERB_ETYPE_DES_CBC_MD5 = 3,
        KERB_ETYPE_NULL = 0,
        KERB_ETYPE_RC4_HMAC_NT = 23,
        KERB_ETYPE_RC4_MD4 = -128,
    };
    enum class KERB_LOGON_SUBMIT_TYPE : int32_t
    {
        KerbInteractiveLogon = 2,
        KerbSmartCardLogon = 6,
        KerbWorkstationUnlockLogon = 7,
        KerbSmartCardUnlockLogon = 8,
        KerbProxyLogon = 9,
        KerbTicketLogon = 10,
        KerbTicketUnlockLogon = 11,
        KerbS4ULogon = 12,
        KerbCertificateLogon = 13,
        KerbCertificateS4ULogon = 14,
        KerbCertificateUnlockLogon = 15,
        KerbNoElevationLogon = 83,
        KerbLuidLogon = 84,
    };
    enum class KERB_PROFILE_BUFFER_TYPE : int32_t
    {
        KerbInteractiveProfile = 2,
        KerbSmartCardProfile = 4,
        KerbTicketProfile = 6,
    };
    enum class KERB_PROTOCOL_MESSAGE_TYPE : int32_t
    {
        KerbDebugRequestMessage = 0,
        KerbQueryTicketCacheMessage = 1,
        KerbChangeMachinePasswordMessage = 2,
        KerbVerifyPacMessage = 3,
        KerbRetrieveTicketMessage = 4,
        KerbUpdateAddressesMessage = 5,
        KerbPurgeTicketCacheMessage = 6,
        KerbChangePasswordMessage = 7,
        KerbRetrieveEncodedTicketMessage = 8,
        KerbDecryptDataMessage = 9,
        KerbAddBindingCacheEntryMessage = 10,
        KerbSetPasswordMessage = 11,
        KerbSetPasswordExMessage = 12,
        KerbVerifyCredentialsMessage = 13,
        KerbQueryTicketCacheExMessage = 14,
        KerbPurgeTicketCacheExMessage = 15,
        KerbRefreshSmartcardCredentialsMessage = 16,
        KerbAddExtraCredentialsMessage = 17,
        KerbQuerySupplementalCredentialsMessage = 18,
        KerbTransferCredentialsMessage = 19,
        KerbQueryTicketCacheEx2Message = 20,
        KerbSubmitTicketMessage = 21,
        KerbAddExtraCredentialsExMessage = 22,
        KerbQueryKdcProxyCacheMessage = 23,
        KerbPurgeKdcProxyCacheMessage = 24,
        KerbQueryTicketCacheEx3Message = 25,
        KerbCleanupMachinePkinitCredsMessage = 26,
        KerbAddBindingCacheEntryExMessage = 27,
        KerbQueryBindingCacheMessage = 28,
        KerbPurgeBindingCacheMessage = 29,
        KerbPinKdcMessage = 30,
        KerbUnpinAllKdcsMessage = 31,
        KerbQueryDomainExtendedPoliciesMessage = 32,
        KerbQueryS4U2ProxyCacheMessage = 33,
        KerbRetrieveKeyTabMessage = 34,
        KerbRefreshPolicyMessage = 35,
        KerbPrintCloudKerberosDebugMessage = 36,
    };
    enum class KERB_REQUEST_FLAGS : uint32_t
    {
        KERB_REQUEST_ADD_CREDENTIAL = 0x1,
        KERB_REQUEST_REPLACE_CREDENTIAL = 0x2,
        KERB_REQUEST_REMOVE_CREDENTIAL = 0x4,
    };
    enum class KERB_TICKET_FLAGS : uint32_t
    {
        KERB_TICKET_FLAGS_forwardable = 0x40000000,
        KERB_TICKET_FLAGS_forwarded = 0x20000000,
        KERB_TICKET_FLAGS_hw_authent = 0x100000,
        KERB_TICKET_FLAGS_initial = 0x400000,
        KERB_TICKET_FLAGS_invalid = 0x1000000,
        KERB_TICKET_FLAGS_may_postdate = 0x4000000,
        KERB_TICKET_FLAGS_ok_as_delegate = 0x40000,
        KERB_TICKET_FLAGS_postdated = 0x2000000,
        KERB_TICKET_FLAGS_pre_authent = 0x200000,
        KERB_TICKET_FLAGS_proxiable = 0x10000000,
        KERB_TICKET_FLAGS_proxy = 0x8000000,
        KERB_TICKET_FLAGS_renewable = 0x800000,
        KERB_TICKET_FLAGS_reserved = 0x80000000,
        KERB_TICKET_FLAGS_reserved1 = 0x1,
    };
    enum class KSEC_CONTEXT_TYPE : int32_t
    {
        KSecPaged = 0,
        KSecNonPaged = 1,
    };
    enum class LSA_AUTH_INFORMATION_AUTH_TYPE : uint32_t
    {
        TRUST_AUTH_TYPE_NONE = 0x0,
        TRUST_AUTH_TYPE_NT4OWF = 0x1,
        TRUST_AUTH_TYPE_CLEAR = 0x2,
        TRUST_AUTH_TYPE_VERSION = 0x3,
    };
    enum class LSA_FOREST_TRUST_COLLISION_RECORD_TYPE : int32_t
    {
        CollisionTdo = 0,
        CollisionXref = 1,
        CollisionOther = 2,
    };
    enum class LSA_FOREST_TRUST_RECORD_TYPE : int32_t
    {
        ForestTrustTopLevelName = 0,
        ForestTrustTopLevelNameEx = 1,
        ForestTrustDomainInfo = 2,
        ForestTrustRecordTypeLast = 2,
    };
    enum class LSA_LOOKUP_DOMAIN_INFO_CLASS : int32_t
    {
        AccountDomainInformation = 5,
        DnsDomainInformation = 12,
    };
    enum class LSA_TOKEN_INFORMATION_TYPE : int32_t
    {
        LsaTokenInformationNull = 0,
        LsaTokenInformationV1 = 1,
        LsaTokenInformationV2 = 2,
        LsaTokenInformationV3 = 3,
    };
    enum class MSV1_0 : uint32_t
    {
        MSV1_0_PASSTHRU = 0x1,
        MSV1_0_GUEST_LOGON = 0x2,
    };
    enum class MSV1_0_AVID : int32_t
    {
        MsvAvEOL = 0,
        MsvAvNbComputerName = 1,
        MsvAvNbDomainName = 2,
        MsvAvDnsComputerName = 3,
        MsvAvDnsDomainName = 4,
        MsvAvDnsTreeName = 5,
        MsvAvFlags = 6,
        MsvAvTimestamp = 7,
        MsvAvRestrictions = 8,
        MsvAvTargetName = 9,
        MsvAvChannelBindings = 10,
    };
    enum class MSV1_0_CREDENTIAL_KEY_TYPE : int32_t
    {
        InvalidCredKey = 0,
        DeprecatedIUMCredKey = 1,
        DomainUserCredKey = 2,
        LocalUserCredKey = 3,
        ExternallySuppliedCredKey = 4,
    };
    enum class MSV1_0_LOGON_SUBMIT_TYPE : int32_t
    {
        MsV1_0InteractiveLogon = 2,
        MsV1_0Lm20Logon = 3,
        MsV1_0NetworkLogon = 4,
        MsV1_0SubAuthLogon = 5,
        MsV1_0WorkstationUnlockLogon = 7,
        MsV1_0S4ULogon = 12,
        MsV1_0VirtualLogon = 82,
        MsV1_0NoElevationLogon = 83,
        MsV1_0LuidLogon = 84,
    };
    enum class MSV1_0_PROFILE_BUFFER_TYPE : int32_t
    {
        MsV1_0InteractiveProfile = 2,
        MsV1_0Lm20LogonProfile = 3,
        MsV1_0SmartCardProfile = 4,
    };
    enum class MSV1_0_PROTOCOL_MESSAGE_TYPE : int32_t
    {
        MsV1_0Lm20ChallengeRequest = 0,
        MsV1_0Lm20GetChallengeResponse = 1,
        MsV1_0EnumerateUsers = 2,
        MsV1_0GetUserInfo = 3,
        MsV1_0ReLogonUsers = 4,
        MsV1_0ChangePassword = 5,
        MsV1_0ChangeCachedPassword = 6,
        MsV1_0GenericPassthrough = 7,
        MsV1_0CacheLogon = 8,
        MsV1_0SubAuth = 9,
        MsV1_0DeriveCredential = 10,
        MsV1_0CacheLookup = 11,
        MsV1_0SetProcessOption = 12,
        MsV1_0ConfigLocalAliases = 13,
        MsV1_0ClearCachedCredentials = 14,
        MsV1_0LookupToken = 15,
        MsV1_0ValidateAuth = 16,
        MsV1_0CacheLookupEx = 17,
        MsV1_0GetCredentialKey = 18,
        MsV1_0SetThreadOption = 19,
        MsV1_0DecryptDpapiMasterKey = 20,
        MsV1_0GetStrongCredentialKey = 21,
        MsV1_0TransferCred = 22,
        MsV1_0ProvisionTbal = 23,
        MsV1_0DeleteTbalSecrets = 24,
    };
    enum class MSV_SUBAUTH_LOGON_PARAMETER_CONTROL : uint32_t
    {
        MSV1_0_CLEARTEXT_PASSWORD_ALLOWED = 0x2,
        MSV1_0_UPDATE_LOGON_STATISTICS = 0x4,
        MSV1_0_RETURN_USER_PARAMETERS = 0x8,
        MSV1_0_DONT_TRY_GUEST_ACCOUNT = 0x10,
        MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT = 0x20,
        MSV1_0_RETURN_PASSWORD_EXPIRY = 0x40,
        MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT = 0x800,
        MSV1_0_TRY_GUEST_ACCOUNT_ONLY = 0x100,
        MSV1_0_RETURN_PROFILE_PATH = 0x200,
        MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY = 0x400,
    };
    enum class MSV_SUB_AUTHENTICATION_FILTER : uint32_t
    {
        LOGON_GUEST = 0x1,
        LOGON_NOENCRYPTION = 0x2,
        LOGON_CACHED_ACCOUNT = 0x4,
        LOGON_USED_LM_PASSWORD = 0x8,
        LOGON_EXTRA_SIDS = 0x20,
        LOGON_SUBAUTH_SESSION_KEY = 0x40,
        LOGON_SERVER_TRUST_ACCOUNT = 0x80,
        LOGON_PROFILE_PATH_RETURNED = 0x400,
        LOGON_RESOURCE_GROUPS = 0x200,
    };
    enum class MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS : uint32_t
    {
        MSV1_0_CRED_LM_PRESENT = 0x1,
        MSV1_0_CRED_NT_PRESENT = 0x2,
        MSV1_0_CRED_VERSION = 0x0,
    };
    enum class NEGOTIATE_MESSAGES : int32_t
    {
        NegEnumPackagePrefixes = 0,
        NegGetCallerName = 1,
        NegTransferCredentials = 2,
        NegMsgReserved1 = 3,
        NegCallPackageMax = 4,
    };
    enum class NETLOGON_LOGON_INFO_CLASS : int32_t
    {
        NetlogonInteractiveInformation = 1,
        NetlogonNetworkInformation = 2,
        NetlogonServiceInformation = 3,
        NetlogonGenericInformation = 4,
        NetlogonInteractiveTransitiveInformation = 5,
        NetlogonNetworkTransitiveInformation = 6,
        NetlogonServiceTransitiveInformation = 7,
    };
    enum class PKU2U_LOGON_SUBMIT_TYPE : int32_t
    {
        Pku2uCertificateS4ULogon = 14,
    };
    enum class POLICY_AUDIT_EVENT_TYPE : int32_t
    {
        AuditCategorySystem = 0,
        AuditCategoryLogon = 1,
        AuditCategoryObjectAccess = 2,
        AuditCategoryPrivilegeUse = 3,
        AuditCategoryDetailedTracking = 4,
        AuditCategoryPolicyChange = 5,
        AuditCategoryAccountManagement = 6,
        AuditCategoryDirectoryServiceAccess = 7,
        AuditCategoryAccountLogon = 8,
    };
    enum class POLICY_DOMAIN_INFORMATION_CLASS : int32_t
    {
        PolicyDomainEfsInformation = 2,
        PolicyDomainKerberosTicketInformation = 3,
    };
    enum class POLICY_INFORMATION_CLASS : int32_t
    {
        PolicyAuditLogInformation = 1,
        PolicyAuditEventsInformation = 2,
        PolicyPrimaryDomainInformation = 3,
        PolicyPdAccountInformation = 4,
        PolicyAccountDomainInformation = 5,
        PolicyLsaServerRoleInformation = 6,
        PolicyReplicaSourceInformation = 7,
        PolicyDefaultQuotaInformation = 8,
        PolicyModificationInformation = 9,
        PolicyAuditFullSetInformation = 10,
        PolicyAuditFullQueryInformation = 11,
        PolicyDnsDomainInformation = 12,
        PolicyDnsDomainInformationInt = 13,
        PolicyLocalAccountDomainInformation = 14,
        PolicyMachineAccountInformation = 15,
        PolicyLastEntry = 16,
    };
    enum class POLICY_LSA_SERVER_ROLE : int32_t
    {
        PolicyServerRoleBackup = 2,
        PolicyServerRolePrimary = 3,
    };
    enum class POLICY_NOTIFICATION_INFORMATION_CLASS : int32_t
    {
        PolicyNotifyAuditEventsInformation = 1,
        PolicyNotifyAccountDomainInformation = 2,
        PolicyNotifyServerRoleInformation = 3,
        PolicyNotifyDnsDomainInformation = 4,
        PolicyNotifyDomainEfsInformation = 5,
        PolicyNotifyDomainKerberosTicketInformation = 6,
        PolicyNotifyMachineAccountPasswordInformation = 7,
        PolicyNotifyGlobalSaclInformation = 8,
        PolicyNotifyMax = 9,
    };
    enum class SASL_AUTHZID_STATE : int32_t
    {
        Sasl_AuthZIDForbidden = 0,
        Sasl_AuthZIDProcessed = 1,
    };
    enum class SCHANNEL_ALERT_TOKEN_ALERT_TYPE : uint32_t
    {
        TLS1_ALERT_WARNING = 0x1,
        TLS1_ALERT_FATAL = 0x2,
    };
    enum class SCHANNEL_CRED_FLAGS : uint32_t
    {
        SCH_CRED_AUTO_CRED_VALIDATION = 0x20,
        SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE = 0x20000,
        SCH_DISABLE_RECONNECTS = 0x80,
        SCH_CRED_IGNORE_NO_REVOCATION_CHECK = 0x800,
        SCH_CRED_IGNORE_REVOCATION_OFFLINE = 0x1000,
        SCH_CRED_MANUAL_CRED_VALIDATION = 0x8,
        SCH_CRED_NO_DEFAULT_CREDS = 0x10,
        SCH_CRED_NO_SERVERNAME_CHECK = 0x4,
        SCH_CRED_NO_SYSTEM_MAPPER = 0x2,
        SCH_CRED_REVOCATION_CHECK_CHAIN = 0x200,
        SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x400,
        SCH_CRED_REVOCATION_CHECK_END_CERT = 0x100,
        SCH_CRED_USE_DEFAULT_CREDS = 0x40,
        SCH_SEND_AUX_RECORD = 0x200000,
        SCH_SEND_ROOT_CERT = 0x40000,
        SCH_USE_STRONG_CRYPTO = 0x400000,
        SCH_USE_PRESHAREDKEY_ONLY = 0x800000,
    };
    enum class SCHANNEL_SESSION_TOKEN_FLAGS : uint32_t
    {
        SSL_SESSION_ENABLE_RECONNECTS = 0x1,
        SSL_SESSION_DISABLE_RECONNECTS = 0x2,
    };
    enum class SECPKG_ATTR : uint32_t
    {
        SECPKG_ATTR_C_ACCESS_TOKEN = 0x80000012,
        SECPKG_ATTR_C_FULL_ACCESS_TOKEN = 0x80000082,
        SECPKG_ATTR_CERT_TRUST_STATUS = 0x80000084,
        SECPKG_ATTR_CREDS = 0x80000080,
        SECPKG_ATTR_CREDS_2 = 0x80000086,
        SECPKG_ATTR_NEGOTIATION_PACKAGE = 0x80000081,
        SECPKG_ATTR_PACKAGE_INFO = 0xa,
        SECPKG_ATTR_SERVER_AUTH_FLAGS = 0x80000083,
        SECPKG_ATTR_SIZES = 0x0,
        SECPKG_ATTR_SUBJECT_SECURITY_ATTRIBUTES = 0x7c,
        SECPKG_ATTR_APP_DATA = 0x5e,
        SECPKG_ATTR_EAP_PRF_INFO = 0x65,
        SECPKG_ATTR_EARLY_START = 0x69,
        SECPKG_ATTR_DTLS_MTU = 0x22,
        SECPKG_ATTR_KEYING_MATERIAL_INFO = 0x6a,
        SECPKG_ATTR_ACCESS_TOKEN = 0x12,
        SECPKG_ATTR_AUTHORITY = 0x6,
        SECPKG_ATTR_CLIENT_SPECIFIED_TARGET = 0x1b,
        SECPKG_ATTR_CONNECTION_INFO = 0x5a,
        SECPKG_ATTR_DCE_INFO = 0x3,
        SECPKG_ATTR_ENDPOINT_BINDINGS = 0x1a,
        SECPKG_ATTR_EAP_KEY_BLOCK = 0x5b,
        SECPKG_ATTR_FLAGS = 0xe,
        SECPKG_ATTR_ISSUER_LIST_EX = 0x59,
        SECPKG_ATTR_KEY_INFO = 0x5,
        SECPKG_ATTR_LAST_CLIENT_TOKEN_STATUS = 0x1e,
        SECPKG_ATTR_LIFESPAN = 0x2,
        SECPKG_ATTR_LOCAL_CERT_CONTEXT = 0x54,
        SECPKG_ATTR_LOCAL_CRED = 0x52,
        SECPKG_ATTR_NAMES = 0x1,
        SECPKG_ATTR_NATIVE_NAMES = 0xd,
        SECPKG_ATTR_NEGOTIATION_INFO = 0xc,
        SECPKG_ATTR_PASSWORD_EXPIRY = 0x8,
        SECPKG_ATTR_REMOTE_CERT_CONTEXT = 0x53,
        SECPKG_ATTR_ROOT_STORE = 0x55,
        SECPKG_ATTR_SESSION_KEY = 0x9,
        SECPKG_ATTR_SESSION_INFO = 0x5d,
        SECPKG_ATTR_STREAM_SIZES = 0x4,
        SECPKG_ATTR_SUPPORTED_SIGNATURES = 0x66,
        SECPKG_ATTR_TARGET_INFORMATION = 0x11,
        SECPKG_ATTR_UNIQUE_BINDINGS = 0x19,
    };
    enum class SECPKG_ATTR_LCT_STATUS : int32_t
    {
        SecPkgAttrLastClientTokenYes = 0,
        SecPkgAttrLastClientTokenNo = 1,
        SecPkgAttrLastClientTokenMaybe = 2,
    };
    enum class SECPKG_CALL_PACKAGE_MESSAGE_TYPE : int32_t
    {
        SecPkgCallPackageMinMessage = 1024,
        SecPkgCallPackagePinDcMessage = 1024,
        SecPkgCallPackageUnpinAllDcsMessage = 1025,
        SecPkgCallPackageTransferCredMessage = 1026,
        SecPkgCallPackageMaxMessage = 1026,
    };
    enum class SECPKG_CRED : uint32_t
    {
        SECPKG_CRED_INBOUND = 0x1,
        SECPKG_CRED_OUTBOUND = 0x2,
    };
    enum class SECPKG_CRED_CLASS : int32_t
    {
        SecPkgCredClass_None = 0,
        SecPkgCredClass_Ephemeral = 10,
        SecPkgCredClass_PersistedGeneric = 20,
        SecPkgCredClass_PersistedSpecific = 30,
        SecPkgCredClass_Explicit = 40,
    };
    enum class SECPKG_EXTENDED_INFORMATION_CLASS : int32_t
    {
        SecpkgGssInfo = 1,
        SecpkgContextThunks = 2,
        SecpkgMutualAuthLevel = 3,
        SecpkgWowClientDll = 4,
        SecpkgExtraOids = 5,
        SecpkgMaxInfo = 6,
        SecpkgNego2Info = 7,
    };
    enum class SECPKG_NAME_TYPE : int32_t
    {
        SecNameSamCompatible = 0,
        SecNameAlternateId = 1,
        SecNameFlat = 2,
        SecNameDN = 3,
        SecNameSPN = 4,
    };
    enum class SECPKG_PACKAGE_CHANGE_TYPE : uint32_t
    {
        SECPKG_PACKAGE_CHANGE_LOAD = 0x0,
        SECPKG_PACKAGE_CHANGE_UNLOAD = 0x1,
        SECPKG_PACKAGE_CHANGE_SELECT = 0x2,
    };
    enum class SECPKG_SESSIONINFO_TYPE : int32_t
    {
        SecSessionPrimaryCred = 0,
    };
    enum class SECURITY_LOGON_TYPE : int32_t
    {
        UndefinedLogonType = 0,
        Interactive = 2,
        Network = 3,
        Batch = 4,
        Service = 5,
        Proxy = 6,
        Unlock = 7,
        NetworkCleartext = 8,
        NewCredentials = 9,
        RemoteInteractive = 10,
        CachedInteractive = 11,
        CachedRemoteInteractive = 12,
        CachedUnlock = 13,
    };
    enum class SECURITY_PACKAGE_OPTIONS_TYPE : uint32_t
    {
        SECPKG_OPTIONS_TYPE_UNKNOWN = 0x0,
        SECPKG_OPTIONS_TYPE_LSA = 0x1,
        SECPKG_OPTIONS_TYPE_SSPI = 0x2,
    };
    enum class SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT : int32_t
    {
        SecApplicationProtocolNegotiationExt_None = 0,
        SecApplicationProtocolNegotiationExt_NPN = 1,
        SecApplicationProtocolNegotiationExt_ALPN = 2,
    };
    enum class SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS : int32_t
    {
        SecApplicationProtocolNegotiationStatus_None = 0,
        SecApplicationProtocolNegotiationStatus_Success = 1,
        SecApplicationProtocolNegotiationStatus_SelectedClientOnly = 2,
    };
    enum class SEC_TRAFFIC_SECRET_TYPE : int32_t
    {
        SecTrafficSecret_None = 0,
        SecTrafficSecret_Client = 1,
        SecTrafficSecret_Server = 2,
    };
    enum class SE_ADT_PARAMETER_TYPE : int32_t
    {
        SeAdtParmTypeNone = 0,
        SeAdtParmTypeString = 1,
        SeAdtParmTypeFileSpec = 2,
        SeAdtParmTypeUlong = 3,
        SeAdtParmTypeSid = 4,
        SeAdtParmTypeLogonId = 5,
        SeAdtParmTypeNoLogonId = 6,
        SeAdtParmTypeAccessMask = 7,
        SeAdtParmTypePrivs = 8,
        SeAdtParmTypeObjectTypes = 9,
        SeAdtParmTypeHexUlong = 10,
        SeAdtParmTypePtr = 11,
        SeAdtParmTypeTime = 12,
        SeAdtParmTypeGuid = 13,
        SeAdtParmTypeLuid = 14,
        SeAdtParmTypeHexInt64 = 15,
        SeAdtParmTypeStringList = 16,
        SeAdtParmTypeSidList = 17,
        SeAdtParmTypeDuration = 18,
        SeAdtParmTypeUserAccountControl = 19,
        SeAdtParmTypeNoUac = 20,
        SeAdtParmTypeMessage = 21,
        SeAdtParmTypeDateTime = 22,
        SeAdtParmTypeSockAddr = 23,
        SeAdtParmTypeSD = 24,
        SeAdtParmTypeLogonHours = 25,
        SeAdtParmTypeLogonIdNoSid = 26,
        SeAdtParmTypeUlongNoConv = 27,
        SeAdtParmTypeSockAddrNoPort = 28,
        SeAdtParmTypeAccessReason = 29,
        SeAdtParmTypeStagingReason = 30,
        SeAdtParmTypeResourceAttribute = 31,
        SeAdtParmTypeClaims = 32,
        SeAdtParmTypeLogonIdAsSid = 33,
        SeAdtParmTypeMultiSzString = 34,
        SeAdtParmTypeLogonIdEx = 35,
    };
    enum class SLDATATYPE : uint32_t
    {
        SL_DATA_NONE = 0x0,
        SL_DATA_SZ = 0x1,
        SL_DATA_DWORD = 0x4,
        SL_DATA_BINARY = 0x3,
        SL_DATA_MULTI_SZ = 0x7,
        SL_DATA_SUM = 0x64,
    };
    enum class SLIDTYPE : int32_t
    {
        SL_ID_APPLICATION = 0,
        SL_ID_PRODUCT_SKU = 1,
        SL_ID_LICENSE_FILE = 2,
        SL_ID_LICENSE = 3,
        SL_ID_PKEY = 4,
        SL_ID_ALL_LICENSES = 5,
        SL_ID_ALL_LICENSE_FILES = 6,
        SL_ID_STORE_TOKEN = 7,
        SL_ID_LAST = 8,
    };
    enum class SLLICENSINGSTATUS : int32_t
    {
        SL_LICENSING_STATUS_UNLICENSED = 0,
        SL_LICENSING_STATUS_LICENSED = 1,
        SL_LICENSING_STATUS_IN_GRACE_PERIOD = 2,
        SL_LICENSING_STATUS_NOTIFICATION = 3,
        SL_LICENSING_STATUS_LAST = 4,
    };
    enum class SLREFERRALTYPE : int32_t
    {
        SL_REFERRALTYPE_SKUID = 0,
        SL_REFERRALTYPE_APPID = 1,
        SL_REFERRALTYPE_OVERRIDE_SKUID = 2,
        SL_REFERRALTYPE_OVERRIDE_APPID = 3,
        SL_REFERRALTYPE_BEST_MATCH = 4,
    };
    enum class SL_ACTIVATION_TYPE : int32_t
    {
        SL_ACTIVATION_TYPE_DEFAULT = 0,
        SL_ACTIVATION_TYPE_ACTIVE_DIRECTORY = 1,
    };
    enum class SL_GENUINE_STATE : int32_t
    {
        SL_GEN_STATE_IS_GENUINE = 0,
        SL_GEN_STATE_INVALID_LICENSE = 1,
        SL_GEN_STATE_TAMPERED = 2,
        SL_GEN_STATE_OFFLINE = 3,
        SL_GEN_STATE_LAST = 4,
    };
    enum class SchGetExtensionsOptions : uint32_t
    {
        SCH_EXTENSIONS_OPTIONS_NONE = 0x0,
        SCH_NO_RECORD_HEADER = 0x1,
    };
    enum class SecDelegationType : int32_t
    {
        SecFull = 0,
        SecService = 1,
        SecTree = 2,
        SecDirectory = 3,
        SecObject = 4,
    };
    enum class TOKENBINDING_EXTENSION_FORMAT : int32_t
    {
        TOKENBINDING_EXTENSION_FORMAT_UNDEFINED = 0,
    };
    enum class TOKENBINDING_KEY_PARAMETERS_TYPE : int32_t
    {
        TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS = 0,
        TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS = 1,
        TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256 = 2,
        TOKENBINDING_KEY_PARAMETERS_TYPE_ANYEXISTING = 255,
    };
    enum class TOKENBINDING_TYPE : int32_t
    {
        TOKENBINDING_TYPE_PROVIDED = 0,
        TOKENBINDING_TYPE_REFERRED = 1,
    };
    enum class TRUSTED_DOMAIN_TRUST_ATTRIBUTES : uint32_t
    {
        TRUST_ATTRIBUTE_NON_TRANSITIVE = 0x1,
        TRUST_ATTRIBUTE_UPLEVEL_ONLY = 0x2,
        TRUST_ATTRIBUTE_FILTER_SIDS = 0x4,
        TRUST_ATTRIBUTE_FOREST_TRANSITIVE = 0x8,
        TRUST_ATTRIBUTE_CROSS_ORGANIZATION = 0x10,
        TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL = 0x40,
        TRUST_ATTRIBUTE_WITHIN_FOREST = 0x20,
    };
    enum class TRUSTED_DOMAIN_TRUST_DIRECTION : uint32_t
    {
        TRUST_DIRECTION_DISABLED = 0x0,
        TRUST_DIRECTION_INBOUND = 0x1,
        TRUST_DIRECTION_OUTBOUND = 0x2,
        TRUST_DIRECTION_BIDIRECTIONAL = 0x3,
    };
    enum class TRUSTED_DOMAIN_TRUST_TYPE : uint32_t
    {
        TRUST_TYPE_DOWNLEVEL = 0x1,
        TRUST_TYPE_UPLEVEL = 0x2,
        TRUST_TYPE_MIT = 0x3,
        TRUST_TYPE_DCE = 0x4,
    };
    enum class TRUSTED_INFORMATION_CLASS : int32_t
    {
        TrustedDomainNameInformation = 1,
        TrustedControllersInformation = 2,
        TrustedPosixOffsetInformation = 3,
        TrustedPasswordInformation = 4,
        TrustedDomainInformationBasic = 5,
        TrustedDomainInformationEx = 6,
        TrustedDomainAuthInformation = 7,
        TrustedDomainFullInformation = 8,
        TrustedDomainAuthInformationInternal = 9,
        TrustedDomainFullInformationInternal = 10,
        TrustedDomainInformationEx2Internal = 11,
        TrustedDomainFullInformation2Internal = 12,
        TrustedDomainSupportedEncryptionTypes = 13,
    };
    enum class eTlsHashAlgorithm : int32_t
    {
        TlsHashAlgorithm_None = 0,
        TlsHashAlgorithm_Md5 = 1,
        TlsHashAlgorithm_Sha1 = 2,
        TlsHashAlgorithm_Sha224 = 3,
        TlsHashAlgorithm_Sha256 = 4,
        TlsHashAlgorithm_Sha384 = 5,
        TlsHashAlgorithm_Sha512 = 6,
    };
    enum class eTlsSignatureAlgorithm : int32_t
    {
        TlsSignatureAlgorithm_Anonymous = 0,
        TlsSignatureAlgorithm_Rsa = 1,
        TlsSignatureAlgorithm_Dsa = 2,
        TlsSignatureAlgorithm_Ecdsa = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct AUDIT_POLICY_INFORMATION;
    struct CENTRAL_ACCESS_POLICY;
    struct CENTRAL_ACCESS_POLICY_ENTRY;
    struct CLEAR_BLOCK;
    struct DOMAIN_PASSWORD_INFORMATION;
    struct ENCRYPTED_CREDENTIALW;
    struct KDC_PROXY_CACHE_ENTRY_DATA;
    struct KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST;
    struct KERB_ADD_BINDING_CACHE_ENTRY_REQUEST;
    struct KERB_ADD_CREDENTIALS_REQUEST;
    struct KERB_ADD_CREDENTIALS_REQUEST_EX;
    struct KERB_AUTH_DATA;
    struct KERB_BINDING_CACHE_ENTRY_DATA;
    struct KERB_CERTIFICATE_HASHINFO;
    struct KERB_CERTIFICATE_INFO;
    struct KERB_CERTIFICATE_LOGON;
    struct KERB_CERTIFICATE_S4U_LOGON;
    struct KERB_CERTIFICATE_UNLOCK_LOGON;
    struct KERB_CHANGEPASSWORD_REQUEST;
    struct KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST;
    struct KERB_CLOUD_KERBEROS_DEBUG_DATA_V0;
    struct KERB_CLOUD_KERBEROS_DEBUG_REQUEST;
    struct KERB_CLOUD_KERBEROS_DEBUG_RESPONSE;
    struct KERB_CRYPTO_KEY;
    struct KERB_CRYPTO_KEY32;
    struct KERB_DECRYPT_REQUEST;
    struct KERB_DECRYPT_RESPONSE;
    struct KERB_EXTERNAL_NAME;
    struct KERB_EXTERNAL_TICKET;
    struct KERB_INTERACTIVE_LOGON;
    struct KERB_INTERACTIVE_PROFILE;
    struct KERB_INTERACTIVE_UNLOCK_LOGON;
    struct KERB_NET_ADDRESS;
    struct KERB_NET_ADDRESSES;
    struct KERB_PURGE_BINDING_CACHE_REQUEST;
    struct KERB_PURGE_KDC_PROXY_CACHE_REQUEST;
    struct KERB_PURGE_KDC_PROXY_CACHE_RESPONSE;
    struct KERB_PURGE_TKT_CACHE_EX_REQUEST;
    struct KERB_PURGE_TKT_CACHE_REQUEST;
    struct KERB_QUERY_BINDING_CACHE_REQUEST;
    struct KERB_QUERY_BINDING_CACHE_RESPONSE;
    struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST;
    struct KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE;
    struct KERB_QUERY_KDC_PROXY_CACHE_REQUEST;
    struct KERB_QUERY_KDC_PROXY_CACHE_RESPONSE;
    struct KERB_QUERY_S4U2PROXY_CACHE_REQUEST;
    struct KERB_QUERY_S4U2PROXY_CACHE_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_EX2_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_EX3_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_EX_RESPONSE;
    struct KERB_QUERY_TKT_CACHE_REQUEST;
    struct KERB_QUERY_TKT_CACHE_RESPONSE;
    struct KERB_REFRESH_POLICY_REQUEST;
    struct KERB_REFRESH_POLICY_RESPONSE;
    struct KERB_REFRESH_SCCRED_REQUEST;
    struct KERB_RETRIEVE_KEY_TAB_REQUEST;
    struct KERB_RETRIEVE_KEY_TAB_RESPONSE;
    struct KERB_RETRIEVE_TKT_REQUEST;
    struct KERB_RETRIEVE_TKT_RESPONSE;
    struct KERB_S4U2PROXY_CACHE_ENTRY_INFO;
    struct KERB_S4U2PROXY_CRED;
    struct KERB_S4U_LOGON;
    struct KERB_SETPASSWORD_EX_REQUEST;
    struct KERB_SETPASSWORD_REQUEST;
    struct KERB_SMART_CARD_LOGON;
    struct KERB_SMART_CARD_PROFILE;
    struct KERB_SMART_CARD_UNLOCK_LOGON;
    struct KERB_SUBMIT_TKT_REQUEST;
    struct KERB_TICKET_CACHE_INFO;
    struct KERB_TICKET_CACHE_INFO_EX;
    struct KERB_TICKET_CACHE_INFO_EX2;
    struct KERB_TICKET_CACHE_INFO_EX3;
    struct KERB_TICKET_LOGON;
    struct KERB_TICKET_PROFILE;
    struct KERB_TICKET_UNLOCK_LOGON;
    struct KERB_TRANSFER_CRED_REQUEST;
    struct KSEC_LIST_ENTRY;
    struct LOGON_HOURS;
    struct LSA_AUTH_INFORMATION;
    struct LSA_DISPATCH_TABLE;
    struct LSA_ENUMERATION_INFORMATION;
    struct LSA_FOREST_TRUST_BINARY_DATA;
    struct LSA_FOREST_TRUST_COLLISION_INFORMATION;
    struct LSA_FOREST_TRUST_COLLISION_RECORD;
    struct LSA_FOREST_TRUST_DOMAIN_INFO;
    struct LSA_FOREST_TRUST_INFORMATION;
    struct LSA_FOREST_TRUST_RECORD;
    struct LSA_LAST_INTER_LOGON_INFO;
    struct LSA_REFERENCED_DOMAIN_LIST;
    struct LSA_SECPKG_FUNCTION_TABLE;
    struct LSA_TOKEN_INFORMATION_NULL;
    struct LSA_TOKEN_INFORMATION_V1;
    struct LSA_TOKEN_INFORMATION_V3;
    struct LSA_TRANSLATED_NAME;
    struct LSA_TRANSLATED_SID;
    struct LSA_TRANSLATED_SID2;
    struct LSA_TRUST_INFORMATION;
    struct LsaHandle;
    struct MSV1_0_AV_PAIR;
    struct MSV1_0_CHANGEPASSWORD_REQUEST;
    struct MSV1_0_CHANGEPASSWORD_RESPONSE;
    struct MSV1_0_CREDENTIAL_KEY;
    struct MSV1_0_INTERACTIVE_LOGON;
    struct MSV1_0_INTERACTIVE_PROFILE;
    struct MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL;
    struct MSV1_0_LM20_LOGON;
    struct MSV1_0_LM20_LOGON_PROFILE;
    struct MSV1_0_NTLM3_RESPONSE;
    struct MSV1_0_PASSTHROUGH_REQUEST;
    struct MSV1_0_PASSTHROUGH_RESPONSE;
    struct MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL;
    struct MSV1_0_S4U_LOGON;
    struct MSV1_0_SUBAUTH_LOGON;
    struct MSV1_0_SUBAUTH_REQUEST;
    struct MSV1_0_SUBAUTH_RESPONSE;
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL;
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2;
    struct MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3;
    struct MSV1_0_VALIDATION_INFO;
    struct NEGOTIATE_CALLER_NAME_REQUEST;
    struct NEGOTIATE_CALLER_NAME_RESPONSE;
    struct NEGOTIATE_PACKAGE_PREFIX;
    struct NEGOTIATE_PACKAGE_PREFIXES;
    struct NETLOGON_GENERIC_INFO;
    struct NETLOGON_INTERACTIVE_INFO;
    struct NETLOGON_LOGON_IDENTITY_INFO;
    struct NETLOGON_NETWORK_INFO;
    struct NETLOGON_SERVICE_INFO;
    struct PKU2U_CERTIFICATE_S4U_LOGON;
    struct PKU2U_CERT_BLOB;
    struct PKU2U_CREDUI_CONTEXT;
    struct POLICY_ACCOUNT_DOMAIN_INFO;
    struct POLICY_AUDIT_CATEGORIES_INFO;
    struct POLICY_AUDIT_EVENTS_INFO;
    struct POLICY_AUDIT_FULL_QUERY_INFO;
    struct POLICY_AUDIT_FULL_SET_INFO;
    struct POLICY_AUDIT_LOG_INFO;
    struct POLICY_AUDIT_SID_ARRAY;
    struct POLICY_AUDIT_SUBCATEGORIES_INFO;
    struct POLICY_DEFAULT_QUOTA_INFO;
    struct POLICY_DNS_DOMAIN_INFO;
    struct POLICY_DOMAIN_EFS_INFO;
    struct POLICY_DOMAIN_KERBEROS_TICKET_INFO;
    struct POLICY_LSA_SERVER_ROLE_INFO;
    struct POLICY_MACHINE_ACCT_INFO;
    struct POLICY_MODIFICATION_INFO;
    struct POLICY_PD_ACCOUNT_INFO;
    struct POLICY_PRIMARY_DOMAIN_INFO;
    struct POLICY_REPLICA_SOURCE_INFO;
    struct PctPublicKey;
    struct SAM_REGISTER_MAPPING_ELEMENT;
    struct SAM_REGISTER_MAPPING_LIST;
    struct SAM_REGISTER_MAPPING_TABLE;
    struct SCHANNEL_ALERT_TOKEN;
    struct SCHANNEL_CERT_HASH;
    struct SCHANNEL_CERT_HASH_STORE;
    struct SCHANNEL_CLIENT_SIGNATURE;
    struct SCHANNEL_CRED;
    struct SCHANNEL_SESSION_TOKEN;
    struct SCH_CRED;
    struct SCH_CRED_PUBLIC_CERTCHAIN;
    struct SCH_CRED_SECRET_CAPI;
    struct SCH_CRED_SECRET_PRIVKEY;
    struct SCH_EXTENSION_DATA;
    struct SECPKG_APP_MODE_INFO;
    struct SECPKG_BYTE_VECTOR;
    struct SECPKG_CALL_INFO;
    struct SECPKG_CALL_PACKAGE_PIN_DC_REQUEST;
    struct SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST;
    struct SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST;
    struct SECPKG_CLIENT_INFO;
    struct SECPKG_CONTEXT_THUNKS;
    struct SECPKG_CREDENTIAL;
    struct SECPKG_DLL_FUNCTIONS;
    struct SECPKG_EVENT_NOTIFY;
    struct SECPKG_EVENT_PACKAGE_CHANGE;
    struct SECPKG_EVENT_ROLE_CHANGE;
    struct SECPKG_EXTENDED_INFORMATION;
    struct SECPKG_EXTRA_OIDS;
    struct SECPKG_FUNCTION_TABLE;
    struct SECPKG_GSS_INFO;
    struct SECPKG_KERNEL_FUNCTIONS;
    struct SECPKG_KERNEL_FUNCTION_TABLE;
    struct SECPKG_MUTUAL_AUTH_LEVEL;
    struct SECPKG_NEGO2_INFO;
    struct SECPKG_PARAMETERS;
    struct SECPKG_POST_LOGON_USER_INFO;
    struct SECPKG_PRIMARY_CRED;
    struct SECPKG_PRIMARY_CRED_EX;
    struct SECPKG_REDIRECTED_LOGON_BUFFER;
    struct SECPKG_SERIALIZED_OID;
    struct SECPKG_SHORT_VECTOR;
    struct SECPKG_SUPPLEMENTAL_CRED;
    struct SECPKG_SUPPLEMENTAL_CRED_ARRAY;
    struct SECPKG_SUPPLIED_CREDENTIAL;
    struct SECPKG_SURROGATE_LOGON;
    struct SECPKG_SURROGATE_LOGON_ENTRY;
    struct SECPKG_TARGETINFO;
    struct SECPKG_USER_FUNCTION_TABLE;
    struct SECPKG_WOW_CLIENT_DLL;
    struct SECURITY_LOGON_SESSION_DATA;
    struct SECURITY_PACKAGE_OPTIONS;
    struct SECURITY_USER_DATA;
    struct SEC_APPLICATION_PROTOCOLS;
    struct SEC_APPLICATION_PROTOCOL_LIST;
    struct SEC_CHANNEL_BINDINGS;
    struct SEC_DTLS_MTU;
    struct SEC_FLAGS;
    struct SEC_NEGOTIATION_INFO;
    struct SEC_PRESHAREDKEY;
    struct SEC_PRESHAREDKEY_IDENTITY;
    struct SEC_SRTP_MASTER_KEY_IDENTIFIER;
    struct SEC_SRTP_PROTECTION_PROFILES;
    struct SEC_TOKEN_BINDING;
    struct SEC_TRAFFIC_SECRETS;
    struct SEC_WINNT_AUTH_IDENTITY32;
    struct SEC_WINNT_AUTH_IDENTITY_EX2;
    struct SEC_WINNT_AUTH_IDENTITY_EX32;
    struct SEC_WINNT_AUTH_IDENTITY_EXA;
    struct SEC_WINNT_AUTH_IDENTITY_EXW;
    union SEC_WINNT_AUTH_IDENTITY_INFO;
    struct SEND_GENERIC_TLS_EXTENSION;
    struct SE_ADT_ACCESS_REASON;
    struct SE_ADT_CLAIMS;
    struct SE_ADT_OBJECT_TYPE;
    struct SE_ADT_PARAMETER_ARRAY;
    struct SE_ADT_PARAMETER_ARRAY_ENTRY;
    struct SE_ADT_PARAMETER_ARRAY_EX;
    struct SL_ACTIVATION_INFO_HEADER;
    struct SL_AD_ACTIVATION_INFO;
    struct SL_LICENSING_STATUS;
    struct SL_NONGENUINE_UI_OPTIONS;
    struct SL_SYSTEM_POLICY_INFORMATION;
    struct SR_SECURITY_DESCRIPTOR;
    struct SSL_CREDENTIAL_CERTIFICATE;
    struct SUBSCRIBE_GENERIC_TLS_EXTENSION;
    struct SecBuffer;
    struct SecBufferDesc;
    struct SecPkgContext_AccessToken;
    struct SecPkgContext_ApplicationProtocol;
    struct SecPkgContext_AuthorityA;
    struct SecPkgContext_AuthorityW;
    struct SecPkgContext_AuthzID;
    struct SecPkgContext_Bindings;
    struct SecPkgContext_CertInfo;
    struct SecPkgContext_CertificateValidationResult;
    struct SecPkgContext_Certificates;
    struct SecPkgContext_CipherInfo;
    struct SecPkgContext_ClientCertPolicyResult;
    struct SecPkgContext_ClientSpecifiedTarget;
    struct SecPkgContext_ConnectionInfo;
    struct SecPkgContext_ConnectionInfoEx;
    struct SecPkgContext_CredInfo;
    struct SecPkgContext_CredentialNameA;
    struct SecPkgContext_CredentialNameW;
    struct SecPkgContext_DceInfo;
    struct SecPkgContext_EapKeyBlock;
    struct SecPkgContext_EapPrfInfo;
    struct SecPkgContext_EarlyStart;
    struct SecPkgContext_Flags;
    struct SecPkgContext_IssuerListInfoEx;
    struct SecPkgContext_KeyInfoA;
    struct SecPkgContext_KeyInfoW;
    struct SecPkgContext_KeyingMaterial;
    struct SecPkgContext_KeyingMaterialInfo;
    struct SecPkgContext_KeyingMaterial_Inproc;
    struct SecPkgContext_LastClientTokenStatus;
    struct SecPkgContext_Lifespan;
    struct SecPkgContext_LocalCredentialInfo;
    struct SecPkgContext_LogoffTime;
    struct SecPkgContext_MappedCredAttr;
    struct SecPkgContext_NamesA;
    struct SecPkgContext_NamesW;
    struct SecPkgContext_NativeNamesA;
    struct SecPkgContext_NativeNamesW;
    struct SecPkgContext_NegoKeys;
    struct SecPkgContext_NegoPackageInfo;
    struct SecPkgContext_NegoStatus;
    struct SecPkgContext_NegotiatedTlsExtensions;
    struct SecPkgContext_NegotiationInfoA;
    struct SecPkgContext_NegotiationInfoW;
    struct SecPkgContext_PackageInfoA;
    struct SecPkgContext_PackageInfoW;
    struct SecPkgContext_PasswordExpiry;
    struct SecPkgContext_ProtoInfoA;
    struct SecPkgContext_ProtoInfoW;
    struct SecPkgContext_RemoteCredentialInfo;
    struct SecPkgContext_SaslContext;
    struct SecPkgContext_SessionAppData;
    struct SecPkgContext_SessionInfo;
    struct SecPkgContext_SessionKey;
    struct SecPkgContext_Sizes;
    struct SecPkgContext_SrtpParameters;
    struct SecPkgContext_StreamSizes;
    struct SecPkgContext_SubjectAttributes;
    struct SecPkgContext_SupportedSignatures;
    struct SecPkgContext_Target;
    struct SecPkgContext_TargetInformation;
    struct SecPkgContext_TokenBinding;
    struct SecPkgContext_UiInfo;
    struct SecPkgContext_UserFlags;
    struct SecPkgCred_CipherStrengths;
    struct SecPkgCred_ClientCertPolicy;
    struct SecPkgCred_SessionTicketKey;
    struct SecPkgCred_SessionTicketKeys;
    struct SecPkgCred_SupportedAlgs;
    struct SecPkgCred_SupportedProtocols;
    struct SecPkgCredentials_Cert;
    struct SecPkgCredentials_KdcProxySettingsW;
    struct SecPkgCredentials_NamesA;
    struct SecPkgCredentials_NamesW;
    struct SecPkgCredentials_SSIProviderA;
    struct SecPkgCredentials_SSIProviderW;
    struct SecPkgInfoA;
    struct SecPkgInfoW;
    struct SecurityFunctionTableA;
    struct SecurityFunctionTableW;
    struct TLS_EXTENSION_SUBSCRIPTION;
    struct TOKENBINDING_IDENTIFIER;
    struct TOKENBINDING_KEY_TYPES;
    struct TOKENBINDING_RESULT_DATA;
    struct TOKENBINDING_RESULT_LIST;
    struct TRUSTED_CONTROLLERS_INFO;
    struct TRUSTED_DOMAIN_AUTH_INFORMATION;
    struct TRUSTED_DOMAIN_FULL_INFORMATION;
    struct TRUSTED_DOMAIN_FULL_INFORMATION2;
    struct TRUSTED_DOMAIN_INFORMATION_EX;
    struct TRUSTED_DOMAIN_INFORMATION_EX2;
    struct TRUSTED_DOMAIN_NAME_INFO;
    struct TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;
    struct TRUSTED_PASSWORD_INFO;
    struct TRUSTED_POSIX_OFFSET_INFO;
    struct USER_ALL_INFORMATION;
    struct USER_SESSION_KEY;
    struct X509Certificate;
    struct _HMAPPER;
    struct ICcgDomainAuthCredentials;
#pragma endregion forward_declarations

#pragma region delegates
    using PSAM_PASSWORD_NOTIFICATION_ROUTINE = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, Windows::Win32::Foundation::UNICODE_STRING*);
    using PSAM_INIT_NOTIFICATION_ROUTINE = Windows::Win32::Foundation::BOOLEAN __stdcall();
    using PSAM_PASSWORD_FILTER_ROUTINE = Windows::Win32::Foundation::BOOLEAN __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::BOOLEAN);
    using SEC_GET_KEY_FN = void __stdcall(void*, void*, uint32_t, void**, int32_t*);
    using ACQUIRE_CREDENTIALS_HANDLE_FN_W = int32_t __stdcall(uint16_t*, uint16_t*, uint32_t, void*, void*, Windows::Win32::Security::Authentication::Identity::SEC_GET_KEY_FN*, void*, Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using ACQUIRE_CREDENTIALS_HANDLE_FN_A = int32_t __stdcall(int8_t*, int8_t*, uint32_t, void*, void*, Windows::Win32::Security::Authentication::Identity::SEC_GET_KEY_FN*, void*, Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using FREE_CREDENTIALS_HANDLE_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*);
    using ADD_CREDENTIALS_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint16_t*, uint16_t*, uint32_t, void*, Windows::Win32::Security::Authentication::Identity::SEC_GET_KEY_FN*, void*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using ADD_CREDENTIALS_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, int8_t*, int8_t*, uint32_t, void*, Windows::Win32::Security::Authentication::Identity::SEC_GET_KEY_FN*, void*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using CHANGE_PASSWORD_FN_W = int32_t __stdcall(uint16_t*, uint16_t*, uint16_t*, uint16_t*, uint16_t*, Windows::Win32::Foundation::BOOLEAN, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using CHANGE_PASSWORD_FN_A = int32_t __stdcall(int8_t*, int8_t*, int8_t*, int8_t*, int8_t*, Windows::Win32::Foundation::BOOLEAN, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using INITIALIZE_SECURITY_CONTEXT_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Credentials::SecHandle*, uint16_t*, uint32_t, uint32_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using INITIALIZE_SECURITY_CONTEXT_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Credentials::SecHandle*, int8_t*, uint32_t, uint32_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using ACCEPT_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t, Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using COMPLETE_AUTH_TOKEN_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using IMPERSONATE_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*);
    using REVERT_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*);
    using QUERY_SECURITY_CONTEXT_TOKEN_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, void**);
    using DELETE_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*);
    using APPLY_CONTROL_TOKEN_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using QUERY_CONTEXT_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*);
    using QUERY_CONTEXT_ATTRIBUTES_EX_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using QUERY_CONTEXT_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*);
    using QUERY_CONTEXT_ATTRIBUTES_EX_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CONTEXT_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CONTEXT_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using QUERY_CREDENTIALS_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*);
    using QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using QUERY_CREDENTIALS_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*);
    using QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CREDENTIALS_ATTRIBUTES_FN_W = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using SET_CREDENTIALS_ATTRIBUTES_FN_A = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, void*, uint32_t);
    using FREE_CONTEXT_BUFFER_FN = int32_t __stdcall(void*);
    using MAKE_SIGNATURE_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t);
    using VERIFY_SIGNATURE_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t*);
    using ENCRYPT_MESSAGE_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t);
    using DECRYPT_MESSAGE_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t*);
    using ENUMERATE_SECURITY_PACKAGES_FN_W = int32_t __stdcall(uint32_t*, Windows::Win32::Security::Authentication::Identity::SecPkgInfoW**);
    using ENUMERATE_SECURITY_PACKAGES_FN_A = int32_t __stdcall(uint32_t*, Windows::Win32::Security::Authentication::Identity::SecPkgInfoA**);
    using QUERY_SECURITY_PACKAGE_INFO_FN_W = int32_t __stdcall(uint16_t*, Windows::Win32::Security::Authentication::Identity::SecPkgInfoW**);
    using QUERY_SECURITY_PACKAGE_INFO_FN_A = int32_t __stdcall(int8_t*, Windows::Win32::Security::Authentication::Identity::SecPkgInfoA**);
    using EXPORT_SECURITY_CONTEXT_FN = int32_t __stdcall(Windows::Win32::Security::Credentials::SecHandle*, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*, void**);
    using IMPORT_SECURITY_CONTEXT_FN_W = int32_t __stdcall(uint16_t*, Windows::Win32::Security::Authentication::Identity::SecBuffer*, void*, Windows::Win32::Security::Credentials::SecHandle*);
    using IMPORT_SECURITY_CONTEXT_FN_A = int32_t __stdcall(int8_t*, Windows::Win32::Security::Authentication::Identity::SecBuffer*, void*, Windows::Win32::Security::Credentials::SecHandle*);
    using INIT_SECURITY_INTERFACE_A = Windows::Win32::Security::Authentication::Identity::SecurityFunctionTableA* __stdcall();
    using INIT_SECURITY_INTERFACE_W = Windows::Win32::Security::Authentication::Identity::SecurityFunctionTableW* __stdcall();
    using PLSA_CREATE_LOGON_SESSION = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*);
    using PLSA_DELETE_LOGON_SESSION = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*);
    using PLSA_ADD_CREDENTIAL = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, Windows::Win32::System::Kernel::STRING*, Windows::Win32::System::Kernel::STRING*);
    using PLSA_GET_CREDENTIALS = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, uint32_t*, Windows::Win32::Foundation::BOOLEAN, Windows::Win32::System::Kernel::STRING*, uint32_t*, Windows::Win32::System::Kernel::STRING*);
    using PLSA_DELETE_CREDENTIAL = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, Windows::Win32::System::Kernel::STRING*);
    using PLSA_ALLOCATE_LSA_HEAP = void* __stdcall(uint32_t);
    using PLSA_FREE_LSA_HEAP = void __stdcall(void*);
    using PLSA_ALLOCATE_PRIVATE_HEAP = void* __stdcall(size_t);
    using PLSA_FREE_PRIVATE_HEAP = void __stdcall(void*);
    using PLSA_ALLOCATE_CLIENT_BUFFER = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, uint32_t, void**);
    using PLSA_FREE_CLIENT_BUFFER = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, void*);
    using PLSA_COPY_TO_CLIENT_BUFFER = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, uint32_t, void*, void*);
    using PLSA_COPY_FROM_CLIENT_BUFFER = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, uint32_t, void*, void*);
    using PLSA_AP_INITIALIZE_PACKAGE = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, Windows::Win32::Security::Authentication::Identity::LSA_DISPATCH_TABLE*, Windows::Win32::System::Kernel::STRING*, Windows::Win32::System::Kernel::STRING*, Windows::Win32::System::Kernel::STRING**);
    using PLSA_AP_LOGON_USER = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, void*, void*, uint32_t, void**, uint32_t*, Windows::Win32::Foundation::LUID*, int32_t*, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**);
    using PLSA_AP_LOGON_USER_EX = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, void*, void*, uint32_t, void**, uint32_t*, Windows::Win32::Foundation::LUID*, int32_t*, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**);
    using PLSA_AP_CALL_PACKAGE = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using PLSA_AP_CALL_PACKAGE_PASSTHROUGH = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using PLSA_AP_LOGON_TERMINATED = void __stdcall(Windows::Win32::Foundation::LUID*);
    using PSAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, void*, uint32_t, uint32_t, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, void**, uint32_t*);
    using PSAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = Windows::Win32::Foundation::BOOLEAN __stdcall(Windows::Win32::Foundation::UNICODE_STRING*);
    using PSAM_CREDENTIAL_UPDATE_FREE_ROUTINE = void __stdcall(void*);
    using PSAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SAM_REGISTER_MAPPING_TABLE*);
    using PLSA_CALLBACK_FUNCTION = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using PLSA_REDIRECTED_LOGON_INIT = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, Windows::Win32::Foundation::LUID*);
    using PLSA_REDIRECTED_LOGON_CALLBACK = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE, void*, uint32_t, void**, uint32_t*);
    using PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK = void __stdcall(Windows::Win32::Foundation::HANDLE);
    using PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE, uint8_t**, uint32_t*);
    using PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Security::Authentication::Identity::SECPKG_SUPPLEMENTAL_CRED_ARRAY**);
    using PLSA_IMPERSONATE_CLIENT = Windows::Win32::Foundation::NTSTATUS __stdcall();
    using PLSA_UNLOAD_PACKAGE = Windows::Win32::Foundation::NTSTATUS __stdcall();
    using PLSA_DUPLICATE_HANDLE = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE*);
    using PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, void*, Windows::Win32::Foundation::BOOLEAN);
    using PLSA_CREATE_THREAD = Windows::Win32::Foundation::HANDLE __stdcall(Windows::Win32::Security::SECURITY_ATTRIBUTES*, uint32_t, Windows::Win32::System::SystemServices::LPTHREAD_START_ROUTINE*, void*, uint32_t, uint32_t*);
    using PLSA_GET_CLIENT_INFO = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_CLIENT_INFO*);
    using PLSA_REGISTER_NOTIFICATION = Windows::Win32::Foundation::HANDLE __stdcall(Windows::Win32::System::SystemServices::LPTHREAD_START_ROUTINE*, void*, uint32_t, uint32_t, uint32_t, uint32_t, Windows::Win32::Foundation::HANDLE);
    using PLSA_CANCEL_NOTIFICATION = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE);
    using PLSA_MAP_BUFFER = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using PLSA_CREATE_TOKEN = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE, void*, Windows::Win32::Security::TOKEN_GROUPS*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::HANDLE*, int32_t*);
    using PLSA_CREATE_TOKEN_EX = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE, void*, Windows::Win32::Security::TOKEN_GROUPS*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, void*, Windows::Win32::Security::Authentication::Identity::SECPKG_SESSIONINFO_TYPE, Windows::Win32::Foundation::HANDLE*, int32_t*);
    using PLSA_AUDIT_LOGON = void __stdcall(Windows::Win32::Foundation::NTSTATUS, Windows::Win32::Foundation::NTSTATUS, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::PSID, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Foundation::LUID*);
    using PLSA_CALL_PACKAGE = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using PLSA_CALL_PACKAGEEX = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using PLSA_CALL_PACKAGE_PASSTHROUGH = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using PLSA_GET_CALL_INFO = Windows::Win32::Foundation::BOOLEAN __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_CALL_INFO*);
    using PLSA_CREATE_SHARED_MEMORY = void* __stdcall(uint32_t, uint32_t);
    using PLSA_ALLOCATE_SHARED_MEMORY = void* __stdcall(void*, uint32_t);
    using PLSA_FREE_SHARED_MEMORY = void __stdcall(void*, void*);
    using PLSA_DELETE_SHARED_MEMORY = Windows::Win32::Foundation::BOOLEAN __stdcall(void*);
    using PLSA_GET_APP_MODE_INFO = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t*, size_t*, size_t*, Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Foundation::BOOLEAN*);
    using PLSA_SET_APP_MODE_INFO = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, size_t, size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Foundation::BOOLEAN);
    using PLSA_OPEN_SAM_USER = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Security::Authentication::Identity::SECPKG_NAME_TYPE, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::BOOLEAN, uint32_t, void**);
    using PLSA_GET_USER_CREDENTIALS = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, void**, uint32_t*, void**, uint32_t*);
    using PLSA_GET_USER_AUTH_DATA = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint8_t**, uint32_t*);
    using PLSA_CLOSE_SAM_USER = Windows::Win32::Foundation::NTSTATUS __stdcall(void*);
    using PLSA_GET_AUTH_DATA_FOR_USER = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Security::Authentication::Identity::SECPKG_NAME_TYPE, Windows::Win32::Foundation::UNICODE_STRING*, uint8_t**, uint32_t*, Windows::Win32::Foundation::UNICODE_STRING*);
    using PLSA_CONVERT_AUTH_DATA_TO_TOKEN = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint32_t, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::HANDLE*, Windows::Win32::Foundation::LUID*, Windows::Win32::Foundation::UNICODE_STRING*, int32_t*);
    using PLSA_CRACK_SINGLE_NAME = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, Windows::Win32::Foundation::BOOLEAN, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t*);
    using PLSA_AUDIT_ACCOUNT_LOGON = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, Windows::Win32::Foundation::BOOLEAN, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::NTSTATUS);
    using PLSA_CLIENT_CALLBACK = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::PSTR, size_t, size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using PLSA_REGISTER_CALLBACK = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, Windows::Win32::Security::Authentication::Identity::PLSA_CALLBACK_FUNCTION*);
    using PLSA_GET_EXTENDED_CALL_FLAGS = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t*);
    using PLSA_UPDATE_PRIMARY_CREDENTIALS = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::Authentication::Identity::SECPKG_SUPPLEMENTAL_CRED_ARRAY*);
    using PLSA_PROTECT_MEMORY = void __stdcall(void*, uint32_t);
    using PLSA_OPEN_TOKEN_BY_LOGON_ID = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, Windows::Win32::Foundation::HANDLE*);
    using PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN = Windows::Win32::Foundation::NTSTATUS __stdcall(uint8_t*, uint32_t, void*, uint8_t**, uint32_t*);
    using PLSA_GET_SERVICE_ACCOUNT_PASSWORD = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Security::Authentication::Identity::CRED_FETCH, Windows::Win32::Foundation::FILETIME*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::FILETIME*);
    using PLSA_AUDIT_LOGON_EX = void __stdcall(Windows::Win32::Foundation::NTSTATUS, Windows::Win32::Foundation::NTSTATUS, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::PSID, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, Windows::Win32::Security::SECURITY_IMPERSONATION_LEVEL, Windows::Win32::Security::TOKEN_SOURCE*, Windows::Win32::Foundation::LUID*);
    using PLSA_CHECK_PROTECTED_USER_BY_TOKEN = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::BOOLEAN*);
    using PLSA_QUERY_CLIENT_REQUEST = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, uint32_t, void**);
    using CredReadFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, Windows::Win32::Foundation::PWSTR, uint32_t, uint32_t, Windows::Win32::Security::Authentication::Identity::ENCRYPTED_CREDENTIALW**);
    using CredReadDomainCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, Windows::Win32::Security::Credentials::CREDENTIAL_TARGET_INFORMATIONW*, uint32_t, uint32_t*, Windows::Win32::Security::Authentication::Identity::ENCRYPTED_CREDENTIALW***);
    using CredFreeCredentialsFn = void __stdcall(uint32_t, Windows::Win32::Security::Authentication::Identity::ENCRYPTED_CREDENTIALW**);
    using CredWriteFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, Windows::Win32::Security::Authentication::Identity::ENCRYPTED_CREDENTIALW*, uint32_t);
    using CrediUnmarshalandDecodeStringFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::PWSTR, uint8_t**, uint32_t*, uint8_t*);
    using PLSA_LOCATE_PKG_BY_ID = void* __stdcall(uint32_t);
    using SpInitializeFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SECPKG_PARAMETERS*, Windows::Win32::Security::Authentication::Identity::LSA_SECPKG_FUNCTION_TABLE*);
    using SpShutdownFn = Windows::Win32::Foundation::NTSTATUS __stdcall();
    using SpGetInfoFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SecPkgInfoA*);
    using SpGetExtendedInformationFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_EXTENDED_INFORMATION_CLASS, Windows::Win32::Security::Authentication::Identity::SECPKG_EXTENDED_INFORMATION**);
    using SpSetExtendedInformationFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_EXTENDED_INFORMATION_CLASS, Windows::Win32::Security::Authentication::Identity::SECPKG_EXTENDED_INFORMATION*);
    using PLSA_AP_LOGON_USER_EX2 = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, void*, void*, uint32_t, void**, uint32_t*, Windows::Win32::Foundation::LUID*, int32_t*, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Security::Authentication::Identity::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::Authentication::Identity::SECPKG_SUPPLEMENTAL_CRED_ARRAY**);
    using PLSA_AP_LOGON_USER_EX3 = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, void*, void*, uint32_t, Windows::Win32::Security::Authentication::Identity::SECPKG_SURROGATE_LOGON*, void**, uint32_t*, Windows::Win32::Foundation::LUID*, int32_t*, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE*, void**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Foundation::UNICODE_STRING**, Windows::Win32::Security::Authentication::Identity::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::Authentication::Identity::SECPKG_SUPPLEMENTAL_CRED_ARRAY**);
    using PLSA_AP_PRE_LOGON_USER_SURROGATE = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, void*, void*, uint32_t, Windows::Win32::Security::Authentication::Identity::SECPKG_SURROGATE_LOGON*, int32_t*);
    using PLSA_AP_POST_LOGON_USER_SURROGATE = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, void*, void*, uint32_t, Windows::Win32::Security::Authentication::Identity::SECPKG_SURROGATE_LOGON*, void*, uint32_t, Windows::Win32::Foundation::LUID*, Windows::Win32::Foundation::NTSTATUS, Windows::Win32::Foundation::NTSTATUS, Windows::Win32::Security::Authentication::Identity::LSA_TOKEN_INFORMATION_TYPE, void*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Security::Authentication::Identity::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::Authentication::Identity::SECPKG_SUPPLEMENTAL_CRED_ARRAY*);
    using SpAcceptCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECURITY_LOGON_TYPE, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Security::Authentication::Identity::SECPKG_PRIMARY_CRED*, Windows::Win32::Security::Authentication::Identity::SECPKG_SUPPLEMENTAL_CRED*);
    using SpAcquireCredentialsHandleFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, Windows::Win32::Foundation::LUID*, void*, void*, void*, size_t*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using SpFreeCredentialsHandleFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t);
    using SpQueryCredentialsAttributesFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, void*);
    using SpSetCredentialsAttributesFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, void*, uint32_t);
    using SpAddCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, void*, void*, void*, Windows::Win32::Foundation::LARGE_INTEGER*);
    using SpSaveCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpGetCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpDeleteCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpInitLsaModeContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, size_t*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t*, Windows::Win32::Foundation::LARGE_INTEGER*, Windows::Win32::Foundation::BOOLEAN*, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpDeleteContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t);
    using SpApplyControlTokenFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using SpAcceptLsaModeContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t, size_t*, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t*, Windows::Win32::Foundation::LARGE_INTEGER*, Windows::Win32::Foundation::BOOLEAN*, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpGetUserInfoFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID*, uint32_t, Windows::Win32::Security::Authentication::Identity::SECURITY_USER_DATA**);
    using SpQueryContextAttributesFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, void*);
    using SpSetContextAttributesFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, void*, uint32_t);
    using SpChangeAccountPasswordFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::BOOLEAN, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using SpQueryMetaDataFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, uint32_t*, uint8_t**, size_t*);
    using SpExchangeMetaDataFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Foundation::UNICODE_STRING*, uint32_t, uint32_t, uint8_t*, size_t*);
    using SpGetCredUIContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, ::win32::guid*, uint32_t*, uint8_t**);
    using SpUpdateCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, ::win32::guid*, uint32_t, uint8_t*);
    using SpValidateTargetInfoFn = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, void*, void*, uint32_t, Windows::Win32::Security::Authentication::Identity::SECPKG_TARGETINFO*);
    using LSA_AP_POST_LOGON_USER = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_POST_LOGON_USER_INFO*);
    using SpGetRemoteCredGuardLogonBufferFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, size_t, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::HANDLE*, Windows::Win32::Security::Authentication::Identity::PLSA_REDIRECTED_LOGON_CALLBACK**, Windows::Win32::Security::Authentication::Identity::PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK**, uint32_t*, void**);
    using SpGetRemoteCredGuardSupplementalCredsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Foundation::UNICODE_STRING*, Windows::Win32::Foundation::HANDLE*, Windows::Win32::Security::Authentication::Identity::PLSA_REDIRECTED_LOGON_CALLBACK**, Windows::Win32::Security::Authentication::Identity::PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK**, uint32_t*, void**);
    using SpGetTbalSupplementalCredsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::LUID, uint32_t*, void**);
    using SpInstanceInitFn = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, Windows::Win32::Security::Authentication::Identity::SECPKG_DLL_FUNCTIONS*, void**);
    using SpInitUserModeContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpMakeSignatureFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t);
    using SpVerifySignatureFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t*);
    using SpSealMessageFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t);
    using SpUnsealMessageFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t*);
    using SpGetContextTokenFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Foundation::HANDLE*);
    using SpExportSecurityContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Foundation::HANDLE*);
    using SpImportSecurityContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Foundation::HANDLE, size_t*);
    using SpCompleteAuthTokenFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using SpFormatCredentialsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SecBuffer*, Windows::Win32::Security::Authentication::Identity::SecBuffer*);
    using SpMarshallSupplementalCredsFn = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, uint8_t*, uint32_t*, void**);
    using SpMarshalAttributeDataFn = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, uint32_t, uint32_t, uint8_t*, uint32_t*, uint8_t**);
    using SpLsaModeInitializeFn = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, uint32_t*, Windows::Win32::Security::Authentication::Identity::SECPKG_FUNCTION_TABLE**, uint32_t*);
    using SpUserModeInitializeFn = Windows::Win32::Foundation::NTSTATUS __stdcall(uint32_t, uint32_t*, Windows::Win32::Security::Authentication::Identity::SECPKG_USER_FUNCTION_TABLE**, uint32_t*);
    using PKSEC_CREATE_CONTEXT_LIST = void* __stdcall(Windows::Win32::Security::Authentication::Identity::KSEC_CONTEXT_TYPE);
    using PKSEC_INSERT_LIST_ENTRY = void __stdcall(void*, Windows::Win32::Security::Authentication::Identity::KSEC_LIST_ENTRY*);
    using PKSEC_REFERENCE_LIST_ENTRY = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::KSEC_LIST_ENTRY*, uint32_t, Windows::Win32::Foundation::BOOLEAN);
    using PKSEC_DEREFERENCE_LIST_ENTRY = void __stdcall(Windows::Win32::Security::Authentication::Identity::KSEC_LIST_ENTRY*, uint8_t*);
    using PKSEC_SERIALIZE_WINNT_AUTH_DATA = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint32_t*, void**);
    using PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint32_t*, void**);
    using PKSEC_LOCATE_PKG_BY_ID = void* __stdcall(uint32_t);
    using KspInitPackageFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Security::Authentication::Identity::SECPKG_KERNEL_FUNCTIONS*);
    using KspDeleteContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, size_t*);
    using KspInitContextFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBuffer*, size_t*);
    using KspMakeSignatureFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t);
    using KspVerifySignatureFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t*);
    using KspSealMessageFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t);
    using KspUnsealMessageFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*, uint32_t, uint32_t*);
    using KspGetTokenFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Foundation::HANDLE*, void**);
    using KspQueryAttributesFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, uint32_t, void*);
    using KspCompleteTokenFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, Windows::Win32::Security::Authentication::Identity::SecBufferDesc*);
    using KspMapHandleFn = Windows::Win32::Foundation::NTSTATUS __stdcall(size_t, size_t*);
    using KspSetPagingModeFn = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::Foundation::BOOLEAN);
    using KspSerializeAuthDataFn = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint32_t*, void**);
    using SSL_EMPTY_CACHE_FN_A = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint32_t);
    using SSL_EMPTY_CACHE_FN_W = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, uint32_t);
    using SSL_CRACK_CERTIFICATE_FN = Windows::Win32::Foundation::BOOL __stdcall(uint8_t*, uint32_t, Windows::Win32::Foundation::BOOL, Windows::Win32::Security::Authentication::Identity::X509Certificate**);
    using SSL_FREE_CERTIFICATE_FN = void __stdcall(Windows::Win32::Security::Authentication::Identity::X509Certificate*);
    using SslGetServerIdentityFn = int32_t __stdcall(uint8_t*, uint32_t, uint8_t**, uint32_t*, uint32_t);
    using SslGetExtensionsFn = int32_t __stdcall(uint8_t*, uint32_t, Windows::Win32::Security::Authentication::Identity::SCH_EXTENSION_DATA*, uint8_t, uint32_t*, Windows::Win32::Security::Authentication::Identity::SchGetExtensionsOptions);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
