// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_BiometricFramework_2_H
#define WIN32_Windows_Win32_Devices_BiometricFramework_2_H
#include "win32/Windows.Win32.Devices.BiometricFramework.h"
#include "win32/impl/Windows.Win32.Devices.BiometricFramework.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::BiometricFramework
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnumServiceProviders(uint32_t Factor, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_BSP_SCHEMA** BspSchemaArray, size_t* BspCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Factor);
        ORBIT_TRACK_PARAM(BspSchemaArray);
        ORBIT_TRACK_PARAM(BspCount);

        auto win32_impl_result = g_api_table.WinBioEnumServiceProviders(Factor, BspSchemaArray, BspCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnumBiometricUnits(uint32_t Factor, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_UNIT_SCHEMA** UnitSchemaArray, size_t* UnitCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Factor);
        ORBIT_TRACK_PARAM(UnitSchemaArray);
        ORBIT_TRACK_PARAM(UnitCount);

        auto win32_impl_result = g_api_table.WinBioEnumBiometricUnits(Factor, UnitSchemaArray, UnitCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnumDatabases(uint32_t Factor, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_STORAGE_SCHEMA** StorageSchemaArray, size_t* StorageCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Factor);
        ORBIT_TRACK_PARAM(StorageSchemaArray);
        ORBIT_TRACK_PARAM(StorageCount);

        auto win32_impl_result = g_api_table.WinBioEnumDatabases(Factor, StorageSchemaArray, StorageCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAsyncOpenFramework(win32::Windows::Win32::Devices::BiometricFramework::WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, win32::Windows::Win32::Foundation::HWND TargetWindow, uint32_t MessageCode, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_ASYNC_COMPLETION_CALLBACK* CallbackRoutine, void* UserData, win32::Windows::Win32::Foundation::BOOL AsynchronousOpen, uint32_t* FrameworkHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NotificationMethod);
        ORBIT_TRACK_PARAM(TargetWindow);
        ORBIT_TRACK_PARAM(MessageCode);
        ORBIT_TRACK_PARAM(CallbackRoutine);
        ORBIT_TRACK_PARAM(UserData);
        ORBIT_TRACK_PARAM(AsynchronousOpen);
        ORBIT_TRACK_PARAM(FrameworkHandle);

        auto win32_impl_result = g_api_table.WinBioAsyncOpenFramework(NotificationMethod, TargetWindow, MessageCode, CallbackRoutine, UserData, AsynchronousOpen, FrameworkHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioCloseFramework(uint32_t FrameworkHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FrameworkHandle);

        auto win32_impl_result = g_api_table.WinBioCloseFramework(FrameworkHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAsyncEnumServiceProviders(uint32_t FrameworkHandle, uint32_t Factor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FrameworkHandle);
        ORBIT_TRACK_PARAM(Factor);

        auto win32_impl_result = g_api_table.WinBioAsyncEnumServiceProviders(FrameworkHandle, Factor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAsyncEnumBiometricUnits(uint32_t FrameworkHandle, uint32_t Factor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FrameworkHandle);
        ORBIT_TRACK_PARAM(Factor);

        auto win32_impl_result = g_api_table.WinBioAsyncEnumBiometricUnits(FrameworkHandle, Factor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAsyncEnumDatabases(uint32_t FrameworkHandle, uint32_t Factor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FrameworkHandle);
        ORBIT_TRACK_PARAM(Factor);

        auto win32_impl_result = g_api_table.WinBioAsyncEnumDatabases(FrameworkHandle, Factor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAsyncMonitorFrameworkChanges(uint32_t FrameworkHandle, uint32_t ChangeTypes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FrameworkHandle);
        ORBIT_TRACK_PARAM(ChangeTypes);

        auto win32_impl_result = g_api_table.WinBioAsyncMonitorFrameworkChanges(FrameworkHandle, ChangeTypes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioOpenSession(uint32_t Factor, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_POOL PoolType, uint32_t Flags, uint32_t* UnitArray, size_t UnitCount, ::win32::guid* DatabaseId, uint32_t* SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Factor);
        ORBIT_TRACK_PARAM(PoolType);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(UnitArray);
        ORBIT_TRACK_PARAM(UnitCount);
        ORBIT_TRACK_PARAM(DatabaseId);
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioOpenSession(Factor, PoolType, Flags, UnitArray, UnitCount, DatabaseId, SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAsyncOpenSession(uint32_t Factor, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_POOL PoolType, uint32_t Flags, uint32_t* UnitArray, size_t UnitCount, ::win32::guid* DatabaseId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, win32::Windows::Win32::Foundation::HWND TargetWindow, uint32_t MessageCode, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_ASYNC_COMPLETION_CALLBACK* CallbackRoutine, void* UserData, win32::Windows::Win32::Foundation::BOOL AsynchronousOpen, uint32_t* SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Factor);
        ORBIT_TRACK_PARAM(PoolType);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(UnitArray);
        ORBIT_TRACK_PARAM(UnitCount);
        ORBIT_TRACK_PARAM(DatabaseId);
        ORBIT_TRACK_PARAM(NotificationMethod);
        ORBIT_TRACK_PARAM(TargetWindow);
        ORBIT_TRACK_PARAM(MessageCode);
        ORBIT_TRACK_PARAM(CallbackRoutine);
        ORBIT_TRACK_PARAM(UserData);
        ORBIT_TRACK_PARAM(AsynchronousOpen);
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioAsyncOpenSession(Factor, PoolType, Flags, UnitArray, UnitCount, DatabaseId, NotificationMethod, TargetWindow, MessageCode, CallbackRoutine, UserData, AsynchronousOpen, SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioCloseSession(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioCloseSession(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioVerify(uint32_t SessionHandle, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, uint32_t* UnitId, uint8_t* Match, uint32_t* RejectDetail) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactor);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Match);
        ORBIT_TRACK_PARAM(RejectDetail);

        auto win32_impl_result = g_api_table.WinBioVerify(SessionHandle, Identity, SubFactor, UnitId, Match, RejectDetail);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioVerifyWithCallback(uint32_t SessionHandle, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_VERIFY_CALLBACK* VerifyCallback, void* VerifyCallbackContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactor);
        ORBIT_TRACK_PARAM(VerifyCallback);
        ORBIT_TRACK_PARAM(VerifyCallbackContext);

        auto win32_impl_result = g_api_table.WinBioVerifyWithCallback(SessionHandle, Identity, SubFactor, VerifyCallback, VerifyCallbackContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioIdentify(uint32_t SessionHandle, uint32_t* UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t* SubFactor, uint32_t* RejectDetail) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactor);
        ORBIT_TRACK_PARAM(RejectDetail);

        auto win32_impl_result = g_api_table.WinBioIdentify(SessionHandle, UnitId, Identity, SubFactor, RejectDetail);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioIdentifyWithCallback(uint32_t SessionHandle, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_IDENTIFY_CALLBACK* IdentifyCallback, void* IdentifyCallbackContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(IdentifyCallback);
        ORBIT_TRACK_PARAM(IdentifyCallbackContext);

        auto win32_impl_result = g_api_table.WinBioIdentifyWithCallback(SessionHandle, IdentifyCallback, IdentifyCallbackContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioWait(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioWait(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioCancel(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioCancel(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioLocateSensor(uint32_t SessionHandle, uint32_t* UnitId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);

        auto win32_impl_result = g_api_table.WinBioLocateSensor(SessionHandle, UnitId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioLocateSensorWithCallback(uint32_t SessionHandle, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_LOCATE_SENSOR_CALLBACK* LocateCallback, void* LocateCallbackContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(LocateCallback);
        ORBIT_TRACK_PARAM(LocateCallbackContext);

        auto win32_impl_result = g_api_table.WinBioLocateSensorWithCallback(SessionHandle, LocateCallback, LocateCallbackContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnrollBegin(uint32_t SessionHandle, uint8_t SubFactor, uint32_t UnitId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(SubFactor);
        ORBIT_TRACK_PARAM(UnitId);

        auto win32_impl_result = g_api_table.WinBioEnrollBegin(SessionHandle, SubFactor, UnitId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnrollSelect(uint32_t SessionHandle, uint64_t SelectorValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(SelectorValue);

        auto win32_impl_result = g_api_table.WinBioEnrollSelect(SessionHandle, SelectorValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnrollCapture(uint32_t SessionHandle, uint32_t* RejectDetail) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(RejectDetail);

        auto win32_impl_result = g_api_table.WinBioEnrollCapture(SessionHandle, RejectDetail);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnrollCaptureWithCallback(uint32_t SessionHandle, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_ENROLL_CAPTURE_CALLBACK* EnrollCallback, void* EnrollCallbackContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(EnrollCallback);
        ORBIT_TRACK_PARAM(EnrollCallbackContext);

        auto win32_impl_result = g_api_table.WinBioEnrollCaptureWithCallback(SessionHandle, EnrollCallback, EnrollCallbackContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnrollCommit(uint32_t SessionHandle, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t* IsNewTemplate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(IsNewTemplate);

        auto win32_impl_result = g_api_table.WinBioEnrollCommit(SessionHandle, Identity, IsNewTemplate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnrollDiscard(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioEnrollDiscard(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioEnumEnrollments(uint32_t SessionHandle, uint32_t UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t** SubFactorArray, size_t* SubFactorCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactorArray);
        ORBIT_TRACK_PARAM(SubFactorCount);

        auto win32_impl_result = g_api_table.WinBioEnumEnrollments(SessionHandle, UnitId, Identity, SubFactorArray, SubFactorCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioImproveBegin(uint32_t SessionHandle, uint32_t UnitId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);

        auto win32_impl_result = g_api_table.WinBioImproveBegin(SessionHandle, UnitId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioImproveEnd(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioImproveEnd(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioRegisterEventMonitor(uint32_t SessionHandle, uint32_t EventMask, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_EVENT_CALLBACK* EventCallback, void* EventCallbackContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(EventMask);
        ORBIT_TRACK_PARAM(EventCallback);
        ORBIT_TRACK_PARAM(EventCallbackContext);

        auto win32_impl_result = g_api_table.WinBioRegisterEventMonitor(SessionHandle, EventMask, EventCallback, EventCallbackContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioUnregisterEventMonitor(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioUnregisterEventMonitor(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioMonitorPresence(uint32_t SessionHandle, uint32_t UnitId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);

        auto win32_impl_result = g_api_table.WinBioMonitorPresence(SessionHandle, UnitId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioCaptureSample(uint32_t SessionHandle, uint8_t Purpose, uint8_t Flags, uint32_t* UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_BIR** Sample, size_t* SampleSize, uint32_t* RejectDetail) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(Purpose);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Sample);
        ORBIT_TRACK_PARAM(SampleSize);
        ORBIT_TRACK_PARAM(RejectDetail);

        auto win32_impl_result = g_api_table.WinBioCaptureSample(SessionHandle, Purpose, Flags, UnitId, Sample, SampleSize, RejectDetail);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioCaptureSampleWithCallback(uint32_t SessionHandle, uint8_t Purpose, uint8_t Flags, win32::Windows::Win32::Devices::BiometricFramework::PWINBIO_CAPTURE_CALLBACK* CaptureCallback, void* CaptureCallbackContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(Purpose);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(CaptureCallback);
        ORBIT_TRACK_PARAM(CaptureCallbackContext);

        auto win32_impl_result = g_api_table.WinBioCaptureSampleWithCallback(SessionHandle, Purpose, Flags, CaptureCallback, CaptureCallbackContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioDeleteTemplate(uint32_t SessionHandle, uint32_t UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactor);

        auto win32_impl_result = g_api_table.WinBioDeleteTemplate(SessionHandle, UnitId, Identity, SubFactor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioLockUnit(uint32_t SessionHandle, uint32_t UnitId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);

        auto win32_impl_result = g_api_table.WinBioLockUnit(SessionHandle, UnitId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioUnlockUnit(uint32_t SessionHandle, uint32_t UnitId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);

        auto win32_impl_result = g_api_table.WinBioUnlockUnit(SessionHandle, UnitId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioControlUnit(uint32_t SessionHandle, uint32_t UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_COMPONENT Component, uint32_t ControlCode, uint8_t* SendBuffer, size_t SendBufferSize, uint8_t* ReceiveBuffer, size_t ReceiveBufferSize, size_t* ReceiveDataSize, uint32_t* OperationStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Component);
        ORBIT_TRACK_PARAM(ControlCode);
        ORBIT_TRACK_PARAM(SendBuffer);
        ORBIT_TRACK_PARAM(SendBufferSize);
        ORBIT_TRACK_PARAM(ReceiveBuffer);
        ORBIT_TRACK_PARAM(ReceiveBufferSize);
        ORBIT_TRACK_PARAM(ReceiveDataSize);
        ORBIT_TRACK_PARAM(OperationStatus);

        auto win32_impl_result = g_api_table.WinBioControlUnit(SessionHandle, UnitId, Component, ControlCode, SendBuffer, SendBufferSize, ReceiveBuffer, ReceiveBufferSize, ReceiveDataSize, OperationStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioControlUnitPrivileged(uint32_t SessionHandle, uint32_t UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_COMPONENT Component, uint32_t ControlCode, uint8_t* SendBuffer, size_t SendBufferSize, uint8_t* ReceiveBuffer, size_t ReceiveBufferSize, size_t* ReceiveDataSize, uint32_t* OperationStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Component);
        ORBIT_TRACK_PARAM(ControlCode);
        ORBIT_TRACK_PARAM(SendBuffer);
        ORBIT_TRACK_PARAM(SendBufferSize);
        ORBIT_TRACK_PARAM(ReceiveBuffer);
        ORBIT_TRACK_PARAM(ReceiveBufferSize);
        ORBIT_TRACK_PARAM(ReceiveDataSize);
        ORBIT_TRACK_PARAM(OperationStatus);

        auto win32_impl_result = g_api_table.WinBioControlUnitPrivileged(SessionHandle, UnitId, Component, ControlCode, SendBuffer, SendBufferSize, ReceiveBuffer, ReceiveBufferSize, ReceiveDataSize, OperationStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioGetProperty(uint32_t SessionHandle, uint32_t PropertyType, uint32_t PropertyId, uint32_t UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, void** PropertyBuffer, size_t* PropertyBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(PropertyType);
        ORBIT_TRACK_PARAM(PropertyId);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactor);
        ORBIT_TRACK_PARAM(PropertyBuffer);
        ORBIT_TRACK_PARAM(PropertyBufferSize);

        auto win32_impl_result = g_api_table.WinBioGetProperty(SessionHandle, PropertyType, PropertyId, UnitId, Identity, SubFactor, PropertyBuffer, PropertyBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioSetProperty(uint32_t SessionHandle, uint32_t PropertyType, uint32_t PropertyId, uint32_t UnitId, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* Identity, uint8_t SubFactor, void* PropertyBuffer, size_t PropertyBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);
        ORBIT_TRACK_PARAM(PropertyType);
        ORBIT_TRACK_PARAM(PropertyId);
        ORBIT_TRACK_PARAM(UnitId);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(SubFactor);
        ORBIT_TRACK_PARAM(PropertyBuffer);
        ORBIT_TRACK_PARAM(PropertyBufferSize);

        auto win32_impl_result = g_api_table.WinBioSetProperty(SessionHandle, PropertyType, PropertyId, UnitId, Identity, SubFactor, PropertyBuffer, PropertyBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioFree(void* Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.WinBioFree(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioSetCredential(win32::Windows::Win32::Devices::BiometricFramework::WINBIO_CREDENTIAL_TYPE Type, uint8_t* Credential, size_t CredentialSize, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_CREDENTIAL_FORMAT Format) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(Credential);
        ORBIT_TRACK_PARAM(CredentialSize);
        ORBIT_TRACK_PARAM(Format);

        auto win32_impl_result = g_api_table.WinBioSetCredential(Type, Credential, CredentialSize, Format);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioRemoveCredential(win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY Identity, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_CREDENTIAL_TYPE Type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(Type);

        auto win32_impl_result = g_api_table.WinBioRemoveCredential(Identity, Type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioRemoveAllCredentials() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WinBioRemoveAllCredentials();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioRemoveAllDomainCredentials() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WinBioRemoveAllDomainCredentials();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioGetCredentialState(win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY Identity, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_CREDENTIAL_TYPE Type, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_CREDENTIAL_STATE* CredentialState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(Type);
        ORBIT_TRACK_PARAM(CredentialState);

        auto win32_impl_result = g_api_table.WinBioGetCredentialState(Identity, Type, CredentialState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioLogonIdentifiedUser(uint32_t SessionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionHandle);

        auto win32_impl_result = g_api_table.WinBioLogonIdentifiedUser(SessionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioGetEnrolledFactors(win32::Windows::Win32::Devices::BiometricFramework::WINBIO_IDENTITY* AccountOwner, uint32_t* EnrolledFactors) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AccountOwner);
        ORBIT_TRACK_PARAM(EnrolledFactors);

        auto win32_impl_result = g_api_table.WinBioGetEnrolledFactors(AccountOwner, EnrolledFactors);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WinBioGetEnabledSetting(uint8_t* Value, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_SETTING_SOURCE* Source) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Value);
        ORBIT_TRACK_PARAM(Source);

        g_api_table.WinBioGetEnabledSetting(Value, Source);
        
    }

    void __stdcall ORBIT_IMPL_WinBioGetLogonSetting(uint8_t* Value, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_SETTING_SOURCE* Source) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Value);
        ORBIT_TRACK_PARAM(Source);

        g_api_table.WinBioGetLogonSetting(Value, Source);
        
    }

    void __stdcall ORBIT_IMPL_WinBioGetDomainLogonSetting(uint8_t* Value, win32::Windows::Win32::Devices::BiometricFramework::WINBIO_SETTING_SOURCE* Source) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Value);
        ORBIT_TRACK_PARAM(Source);

        g_api_table.WinBioGetDomainLogonSetting(Value, Source);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioAcquireFocus() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WinBioAcquireFocus();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WinBioReleaseFocus() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WinBioReleaseFocus();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
