// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Networking_WinSock_2_H
#define WIN32_Windows_Win32_Networking_WinSock_2_H
#include "win32/Windows.Win32.Networking.WinSock.h"
#include "win32/impl/Windows.Win32.Networking.WinSock.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Networking::WinSock
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL___WSAFDIsSet(win32::Windows::Win32::Networking::WinSock::SOCKET fd, win32::Windows::Win32::Networking::WinSock::fd_set* param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fd);
        ORBIT_TRACK_PARAM(param1);

        auto win32_impl_result = g_api_table.__WSAFDIsSet(fd, param1);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::SOCKET __stdcall ORBIT_IMPL_accept(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* addr, int32_t* addrlen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(addr);
        ORBIT_TRACK_PARAM(addrlen);

        auto win32_impl_result = g_api_table.accept(s, addr, addrlen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_bind(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* name, int32_t namelen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);

        auto win32_impl_result = g_api_table.bind(s, name, namelen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_closesocket(win32::Windows::Win32::Networking::WinSock::SOCKET s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        auto win32_impl_result = g_api_table.closesocket(s);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_connect(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* name, int32_t namelen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);

        auto win32_impl_result = g_api_table.connect(s, name, namelen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ioctlsocket(win32::Windows::Win32::Networking::WinSock::SOCKET s, int32_t cmd, uint32_t* argp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(cmd);
        ORBIT_TRACK_PARAM(argp);

        auto win32_impl_result = g_api_table.ioctlsocket(s, cmd, argp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_getpeername(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* name, int32_t* namelen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);

        auto win32_impl_result = g_api_table.getpeername(s, name, namelen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_getsockname(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* name, int32_t* namelen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);

        auto win32_impl_result = g_api_table.getsockname(s, name, namelen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_getsockopt(win32::Windows::Win32::Networking::WinSock::SOCKET s, int32_t level, int32_t optname, win32::Windows::Win32::Foundation::PSTR optval, int32_t* optlen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(optname);
        ORBIT_TRACK_PARAM(optval);
        ORBIT_TRACK_PARAM(optlen);

        auto win32_impl_result = g_api_table.getsockopt(s, level, optname, optval, optlen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_htonl(uint32_t hostlong) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hostlong);

        auto win32_impl_result = g_api_table.htonl(hostlong);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_htons(uint16_t hostshort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hostshort);

        auto win32_impl_result = g_api_table.htons(hostshort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_inet_addr(win32::Windows::Win32::Foundation::PSTR cp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cp);

        auto win32_impl_result = g_api_table.inet_addr(cp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_inet_ntoa(win32::Windows::Win32::Networking::WinSock::IN_ADDR in) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(in);

        auto win32_impl_result = g_api_table.inet_ntoa(in);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_listen(win32::Windows::Win32::Networking::WinSock::SOCKET s, int32_t backlog) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(backlog);

        auto win32_impl_result = g_api_table.listen(s, backlog);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ntohl(uint32_t netlong) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(netlong);

        auto win32_impl_result = g_api_table.ntohl(netlong);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_ntohs(uint16_t netshort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(netshort);

        auto win32_impl_result = g_api_table.ntohs(netshort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_recv(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PSTR buf, int32_t len, int32_t flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.recv(s, buf, len, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_recvfrom(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PSTR buf, int32_t len, int32_t flags, win32::Windows::Win32::Networking::WinSock::SOCKADDR* from, int32_t* fromlen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(from);
        ORBIT_TRACK_PARAM(fromlen);

        auto win32_impl_result = g_api_table.recvfrom(s, buf, len, flags, from, fromlen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_select(int32_t nfds, win32::Windows::Win32::Networking::WinSock::fd_set* readfds, win32::Windows::Win32::Networking::WinSock::fd_set* writefds, win32::Windows::Win32::Networking::WinSock::fd_set* exceptfds, win32::Windows::Win32::Networking::WinSock::timeval* timeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nfds);
        ORBIT_TRACK_PARAM(readfds);
        ORBIT_TRACK_PARAM(writefds);
        ORBIT_TRACK_PARAM(exceptfds);
        ORBIT_TRACK_PARAM(timeout);

        auto win32_impl_result = g_api_table.select(nfds, readfds, writefds, exceptfds, timeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_send(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PSTR buf, int32_t len, win32::Windows::Win32::Networking::WinSock::SEND_FLAGS flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.send(s, buf, len, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_sendto(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PSTR buf, int32_t len, int32_t flags, win32::Windows::Win32::Networking::WinSock::SOCKADDR* to, int32_t tolen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(to);
        ORBIT_TRACK_PARAM(tolen);

        auto win32_impl_result = g_api_table.sendto(s, buf, len, flags, to, tolen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_setsockopt(win32::Windows::Win32::Networking::WinSock::SOCKET s, int32_t level, int32_t optname, win32::Windows::Win32::Foundation::PSTR optval, int32_t optlen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(optname);
        ORBIT_TRACK_PARAM(optval);
        ORBIT_TRACK_PARAM(optlen);

        auto win32_impl_result = g_api_table.setsockopt(s, level, optname, optval, optlen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_shutdown(win32::Windows::Win32::Networking::WinSock::SOCKET s, int32_t how) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(how);

        auto win32_impl_result = g_api_table.shutdown(s, how);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::SOCKET __stdcall ORBIT_IMPL_socket(int32_t af, int32_t type, int32_t protocol) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(af);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(protocol);

        auto win32_impl_result = g_api_table.socket(af, type, protocol);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::hostent* __stdcall ORBIT_IMPL_gethostbyaddr(win32::Windows::Win32::Foundation::PSTR addr, int32_t len, int32_t type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(addr);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(type);

        auto win32_impl_result = g_api_table.gethostbyaddr(addr, len, type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::hostent* __stdcall ORBIT_IMPL_gethostbyname(win32::Windows::Win32::Foundation::PSTR name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        auto win32_impl_result = g_api_table.gethostbyname(name);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_gethostname(win32::Windows::Win32::Foundation::PSTR name, int32_t namelen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);

        auto win32_impl_result = g_api_table.gethostname(name, namelen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetHostNameW(win32::Windows::Win32::Foundation::PWSTR name, int32_t namelen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);

        auto win32_impl_result = g_api_table.GetHostNameW(name, namelen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::servent* __stdcall ORBIT_IMPL_getservbyport(int32_t port, win32::Windows::Win32::Foundation::PSTR proto) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(port);
        ORBIT_TRACK_PARAM(proto);

        auto win32_impl_result = g_api_table.getservbyport(port, proto);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::servent* __stdcall ORBIT_IMPL_getservbyname(win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Foundation::PSTR proto) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(proto);

        auto win32_impl_result = g_api_table.getservbyname(name, proto);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::protoent* __stdcall ORBIT_IMPL_getprotobynumber(int32_t number) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(number);

        auto win32_impl_result = g_api_table.getprotobynumber(number);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::protoent* __stdcall ORBIT_IMPL_getprotobyname(win32::Windows::Win32::Foundation::PSTR name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        auto win32_impl_result = g_api_table.getprotobyname(name);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAStartup(uint16_t wVersionRequested, win32::Windows::Win32::Networking::WinSock::WSAData* lpWSAData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wVersionRequested);
        ORBIT_TRACK_PARAM(lpWSAData);

        auto win32_impl_result = g_api_table.WSAStartup(wVersionRequested, lpWSAData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSACleanup() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSACleanup();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WSASetLastError(int32_t iError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(iError);

        g_api_table.WSASetLastError(iError);
        
    }

    win32::Windows::Win32::Networking::WinSock::WSA_ERROR __stdcall ORBIT_IMPL_WSAGetLastError() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSAGetLastError();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAIsBlocking() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSAIsBlocking();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAUnhookBlockingHook() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSAUnhookBlockingHook();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::FARPROC* __stdcall ORBIT_IMPL_WSASetBlockingHook(win32::Windows::Win32::Foundation::FARPROC* lpBlockFunc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBlockFunc);

        auto win32_impl_result = g_api_table.WSASetBlockingHook(lpBlockFunc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSACancelBlockingCall() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSACancelBlockingCall();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSAAsyncGetServByName(win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Foundation::PSTR proto, win32::Windows::Win32::Foundation::PSTR buf, int32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(proto);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.WSAAsyncGetServByName(hWnd, wMsg, name, proto, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSAAsyncGetServByPort(win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, int32_t port, win32::Windows::Win32::Foundation::PSTR proto, win32::Windows::Win32::Foundation::PSTR buf, int32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(port);
        ORBIT_TRACK_PARAM(proto);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.WSAAsyncGetServByPort(hWnd, wMsg, port, proto, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSAAsyncGetProtoByName(win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Foundation::PSTR buf, int32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.WSAAsyncGetProtoByName(hWnd, wMsg, name, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSAAsyncGetProtoByNumber(win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, int32_t number, win32::Windows::Win32::Foundation::PSTR buf, int32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(number);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.WSAAsyncGetProtoByNumber(hWnd, wMsg, number, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSAAsyncGetHostByName(win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, win32::Windows::Win32::Foundation::PSTR name, win32::Windows::Win32::Foundation::PSTR buf, int32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.WSAAsyncGetHostByName(hWnd, wMsg, name, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSAAsyncGetHostByAddr(win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, win32::Windows::Win32::Foundation::PSTR addr, int32_t len, int32_t type, win32::Windows::Win32::Foundation::PSTR buf, int32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(addr);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.WSAAsyncGetHostByAddr(hWnd, wMsg, addr, len, type, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSACancelAsyncRequest(win32::Windows::Win32::Foundation::HANDLE hAsyncTaskHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAsyncTaskHandle);

        auto win32_impl_result = g_api_table.WSACancelAsyncRequest(hAsyncTaskHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAAsyncSelect(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::HWND hWnd, uint32_t wMsg, int32_t lEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(wMsg);
        ORBIT_TRACK_PARAM(lEvent);

        auto win32_impl_result = g_api_table.WSAAsyncSelect(s, hWnd, wMsg, lEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::SOCKET __stdcall ORBIT_IMPL_WSAAccept(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* addr, int32_t* addrlen, win32::Windows::Win32::Networking::WinSock::LPCONDITIONPROC* lpfnCondition, size_t dwCallbackData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(addr);
        ORBIT_TRACK_PARAM(addrlen);
        ORBIT_TRACK_PARAM(lpfnCondition);
        ORBIT_TRACK_PARAM(dwCallbackData);

        auto win32_impl_result = g_api_table.WSAAccept(s, addr, addrlen, lpfnCondition, dwCallbackData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSACloseEvent(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.WSACloseEvent(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAConnect(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* name, int32_t namelen, win32::Windows::Win32::Networking::WinSock::WSABUF* lpCallerData, win32::Windows::Win32::Networking::WinSock::WSABUF* lpCalleeData, win32::Windows::Win32::NetworkManagement::QoS::QOS* lpSQOS, win32::Windows::Win32::NetworkManagement::QoS::QOS* lpGQOS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);
        ORBIT_TRACK_PARAM(lpCallerData);
        ORBIT_TRACK_PARAM(lpCalleeData);
        ORBIT_TRACK_PARAM(lpSQOS);
        ORBIT_TRACK_PARAM(lpGQOS);

        auto win32_impl_result = g_api_table.WSAConnect(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAConnectByNameW(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PWSTR nodename, win32::Windows::Win32::Foundation::PWSTR servicename, uint32_t* LocalAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR* LocalAddress, uint32_t* RemoteAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR* RemoteAddress, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(nodename);
        ORBIT_TRACK_PARAM(servicename);
        ORBIT_TRACK_PARAM(LocalAddressLength);
        ORBIT_TRACK_PARAM(LocalAddress);
        ORBIT_TRACK_PARAM(RemoteAddressLength);
        ORBIT_TRACK_PARAM(RemoteAddress);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.WSAConnectByNameW(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAConnectByNameA(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PSTR nodename, win32::Windows::Win32::Foundation::PSTR servicename, uint32_t* LocalAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR* LocalAddress, uint32_t* RemoteAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR* RemoteAddress, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(nodename);
        ORBIT_TRACK_PARAM(servicename);
        ORBIT_TRACK_PARAM(LocalAddressLength);
        ORBIT_TRACK_PARAM(LocalAddress);
        ORBIT_TRACK_PARAM(RemoteAddressLength);
        ORBIT_TRACK_PARAM(RemoteAddress);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.WSAConnectByNameA(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAConnectByList(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS_LIST* SocketAddress, uint32_t* LocalAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR* LocalAddress, uint32_t* RemoteAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR* RemoteAddress, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(SocketAddress);
        ORBIT_TRACK_PARAM(LocalAddressLength);
        ORBIT_TRACK_PARAM(LocalAddress);
        ORBIT_TRACK_PARAM(RemoteAddressLength);
        ORBIT_TRACK_PARAM(RemoteAddress);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.WSAConnectByList(s, SocketAddress, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_WSACreateEvent() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSACreateEvent();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSADuplicateSocketA(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint32_t dwProcessId, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(dwProcessId);
        ORBIT_TRACK_PARAM(lpProtocolInfo);

        auto win32_impl_result = g_api_table.WSADuplicateSocketA(s, dwProcessId, lpProtocolInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSADuplicateSocketW(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint32_t dwProcessId, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(dwProcessId);
        ORBIT_TRACK_PARAM(lpProtocolInfo);

        auto win32_impl_result = g_api_table.WSADuplicateSocketW(s, dwProcessId, lpProtocolInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumNetworkEvents(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::HANDLE hEventObject, win32::Windows::Win32::Networking::WinSock::WSANETWORKEVENTS* lpNetworkEvents) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(hEventObject);
        ORBIT_TRACK_PARAM(lpNetworkEvents);

        auto win32_impl_result = g_api_table.WSAEnumNetworkEvents(s, hEventObject, lpNetworkEvents);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumProtocolsA(int32_t* lpiProtocols, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOA* lpProtocolBuffer, uint32_t* lpdwBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(lpProtocolBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);

        auto win32_impl_result = g_api_table.WSAEnumProtocolsA(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumProtocolsW(int32_t* lpiProtocols, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolBuffer, uint32_t* lpdwBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(lpProtocolBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);

        auto win32_impl_result = g_api_table.WSAEnumProtocolsW(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEventSelect(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::HANDLE hEventObject, int32_t lNetworkEvents) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(hEventObject);
        ORBIT_TRACK_PARAM(lNetworkEvents);

        auto win32_impl_result = g_api_table.WSAEventSelect(s, hEventObject, lNetworkEvents);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAGetOverlappedResult(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, uint32_t* lpcbTransfer, win32::Windows::Win32::Foundation::BOOL fWait, uint32_t* lpdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpcbTransfer);
        ORBIT_TRACK_PARAM(fWait);
        ORBIT_TRACK_PARAM(lpdwFlags);

        auto win32_impl_result = g_api_table.WSAGetOverlappedResult(s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAGetQOSByName(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpQOSName, win32::Windows::Win32::NetworkManagement::QoS::QOS* lpQOS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpQOSName);
        ORBIT_TRACK_PARAM(lpQOS);

        auto win32_impl_result = g_api_table.WSAGetQOSByName(s, lpQOSName, lpQOS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAHtonl(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint32_t hostlong, uint32_t* lpnetlong) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(hostlong);
        ORBIT_TRACK_PARAM(lpnetlong);

        auto win32_impl_result = g_api_table.WSAHtonl(s, hostlong, lpnetlong);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAHtons(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint16_t hostshort, uint16_t* lpnetshort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(hostshort);
        ORBIT_TRACK_PARAM(lpnetshort);

        auto win32_impl_result = g_api_table.WSAHtons(s, hostshort, lpnetshort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAIoctl(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint32_t dwIoControlCode, void* lpvInBuffer, uint32_t cbInBuffer, void* lpvOutBuffer, uint32_t cbOutBuffer, uint32_t* lpcbBytesReturned, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(dwIoControlCode);
        ORBIT_TRACK_PARAM(lpvInBuffer);
        ORBIT_TRACK_PARAM(cbInBuffer);
        ORBIT_TRACK_PARAM(lpvOutBuffer);
        ORBIT_TRACK_PARAM(cbOutBuffer);
        ORBIT_TRACK_PARAM(lpcbBytesReturned);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSAIoctl(s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::SOCKET __stdcall ORBIT_IMPL_WSAJoinLeaf(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::SOCKADDR* name, int32_t namelen, win32::Windows::Win32::Networking::WinSock::WSABUF* lpCallerData, win32::Windows::Win32::Networking::WinSock::WSABUF* lpCalleeData, win32::Windows::Win32::NetworkManagement::QoS::QOS* lpSQOS, win32::Windows::Win32::NetworkManagement::QoS::QOS* lpGQOS, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(name);
        ORBIT_TRACK_PARAM(namelen);
        ORBIT_TRACK_PARAM(lpCallerData);
        ORBIT_TRACK_PARAM(lpCalleeData);
        ORBIT_TRACK_PARAM(lpSQOS);
        ORBIT_TRACK_PARAM(lpGQOS);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.WSAJoinLeaf(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSANtohl(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint32_t netlong, uint32_t* lphostlong) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(netlong);
        ORBIT_TRACK_PARAM(lphostlong);

        auto win32_impl_result = g_api_table.WSANtohl(s, netlong, lphostlong);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSANtohs(win32::Windows::Win32::Networking::WinSock::SOCKET s, uint16_t netshort, uint16_t* lphostshort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(netshort);
        ORBIT_TRACK_PARAM(lphostshort);

        auto win32_impl_result = g_api_table.WSANtohs(s, netshort, lphostshort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSARecv(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesRecvd, uint32_t* lpFlags, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpBuffers);
        ORBIT_TRACK_PARAM(dwBufferCount);
        ORBIT_TRACK_PARAM(lpNumberOfBytesRecvd);
        ORBIT_TRACK_PARAM(lpFlags);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSARecv(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSARecvDisconnect(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpInboundDisconnectData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpInboundDisconnectData);

        auto win32_impl_result = g_api_table.WSARecvDisconnect(s, lpInboundDisconnectData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSARecvFrom(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesRecvd, uint32_t* lpFlags, win32::Windows::Win32::Networking::WinSock::SOCKADDR* lpFrom, int32_t* lpFromlen, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpBuffers);
        ORBIT_TRACK_PARAM(dwBufferCount);
        ORBIT_TRACK_PARAM(lpNumberOfBytesRecvd);
        ORBIT_TRACK_PARAM(lpFlags);
        ORBIT_TRACK_PARAM(lpFrom);
        ORBIT_TRACK_PARAM(lpFromlen);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSARecvFrom(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSAResetEvent(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.WSAResetEvent(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASend(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesSent, uint32_t dwFlags, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpBuffers);
        ORBIT_TRACK_PARAM(dwBufferCount);
        ORBIT_TRACK_PARAM(lpNumberOfBytesSent);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSASend(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASendMsg(win32::Windows::Win32::Networking::WinSock::SOCKET Handle, win32::Windows::Win32::Networking::WinSock::WSAMSG* lpMsg, uint32_t dwFlags, uint32_t* lpNumberOfBytesSent, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(lpMsg);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpNumberOfBytesSent);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSASendMsg(Handle, lpMsg, dwFlags, lpNumberOfBytesSent, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASendDisconnect(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpOutboundDisconnectData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpOutboundDisconnectData);

        auto win32_impl_result = g_api_table.WSASendDisconnect(s, lpOutboundDisconnectData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASendTo(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Networking::WinSock::WSABUF* lpBuffers, uint32_t dwBufferCount, uint32_t* lpNumberOfBytesSent, uint32_t dwFlags, win32::Windows::Win32::Networking::WinSock::SOCKADDR* lpTo, int32_t iTolen, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpBuffers);
        ORBIT_TRACK_PARAM(dwBufferCount);
        ORBIT_TRACK_PARAM(lpNumberOfBytesSent);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpTo);
        ORBIT_TRACK_PARAM(iTolen);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSASendTo(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iTolen, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WSASetEvent(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.WSASetEvent(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::SOCKET __stdcall ORBIT_IMPL_WSASocketA(int32_t af, int32_t type, int32_t protocol, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo, uint32_t g, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(af);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(protocol);
        ORBIT_TRACK_PARAM(lpProtocolInfo);
        ORBIT_TRACK_PARAM(g);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.WSASocketA(af, type, protocol, lpProtocolInfo, g, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::WinSock::SOCKET __stdcall ORBIT_IMPL_WSASocketW(int32_t af, int32_t type, int32_t protocol, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo, uint32_t g, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(af);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(protocol);
        ORBIT_TRACK_PARAM(lpProtocolInfo);
        ORBIT_TRACK_PARAM(g);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.WSASocketW(af, type, protocol, lpProtocolInfo, g, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WSAWaitForMultipleEvents(uint32_t cEvents, win32::Windows::Win32::Foundation::HANDLE* lphEvents, win32::Windows::Win32::Foundation::BOOL fWaitAll, uint32_t dwTimeout, win32::Windows::Win32::Foundation::BOOL fAlertable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cEvents);
        ORBIT_TRACK_PARAM(lphEvents);
        ORBIT_TRACK_PARAM(fWaitAll);
        ORBIT_TRACK_PARAM(dwTimeout);
        ORBIT_TRACK_PARAM(fAlertable);

        auto win32_impl_result = g_api_table.WSAWaitForMultipleEvents(cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAAddressToStringA(win32::Windows::Win32::Networking::WinSock::SOCKADDR* lpsaAddress, uint32_t dwAddressLength, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo, win32::Windows::Win32::Foundation::PSTR lpszAddressString, uint32_t* lpdwAddressStringLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpsaAddress);
        ORBIT_TRACK_PARAM(dwAddressLength);
        ORBIT_TRACK_PARAM(lpProtocolInfo);
        ORBIT_TRACK_PARAM(lpszAddressString);
        ORBIT_TRACK_PARAM(lpdwAddressStringLength);

        auto win32_impl_result = g_api_table.WSAAddressToStringA(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAAddressToStringW(win32::Windows::Win32::Networking::WinSock::SOCKADDR* lpsaAddress, uint32_t dwAddressLength, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo, win32::Windows::Win32::Foundation::PWSTR lpszAddressString, uint32_t* lpdwAddressStringLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpsaAddress);
        ORBIT_TRACK_PARAM(dwAddressLength);
        ORBIT_TRACK_PARAM(lpProtocolInfo);
        ORBIT_TRACK_PARAM(lpszAddressString);
        ORBIT_TRACK_PARAM(lpdwAddressStringLength);

        auto win32_impl_result = g_api_table.WSAAddressToStringW(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAStringToAddressA(win32::Windows::Win32::Foundation::PSTR AddressString, int32_t AddressFamily, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOA* lpProtocolInfo, win32::Windows::Win32::Networking::WinSock::SOCKADDR* lpAddress, int32_t* lpAddressLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(AddressFamily);
        ORBIT_TRACK_PARAM(lpProtocolInfo);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(lpAddressLength);

        auto win32_impl_result = g_api_table.WSAStringToAddressA(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAStringToAddressW(win32::Windows::Win32::Foundation::PWSTR AddressString, int32_t AddressFamily, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfo, win32::Windows::Win32::Networking::WinSock::SOCKADDR* lpAddress, int32_t* lpAddressLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(AddressFamily);
        ORBIT_TRACK_PARAM(lpProtocolInfo);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(lpAddressLength);

        auto win32_impl_result = g_api_table.WSAStringToAddressW(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSALookupServiceBeginA(win32::Windows::Win32::Networking::WinSock::WSAQUERYSETA* lpqsRestrictions, uint32_t dwControlFlags, win32::Windows::Win32::Foundation::HANDLE* lphLookup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpqsRestrictions);
        ORBIT_TRACK_PARAM(dwControlFlags);
        ORBIT_TRACK_PARAM(lphLookup);

        auto win32_impl_result = g_api_table.WSALookupServiceBeginA(lpqsRestrictions, dwControlFlags, lphLookup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSALookupServiceBeginW(win32::Windows::Win32::Networking::WinSock::WSAQUERYSETW* lpqsRestrictions, uint32_t dwControlFlags, win32::Windows::Win32::Foundation::HANDLE* lphLookup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpqsRestrictions);
        ORBIT_TRACK_PARAM(dwControlFlags);
        ORBIT_TRACK_PARAM(lphLookup);

        auto win32_impl_result = g_api_table.WSALookupServiceBeginW(lpqsRestrictions, dwControlFlags, lphLookup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSALookupServiceNextA(win32::Windows::Win32::Foundation::HANDLE hLookup, uint32_t dwControlFlags, uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSAQUERYSETA* lpqsResults) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLookup);
        ORBIT_TRACK_PARAM(dwControlFlags);
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpqsResults);

        auto win32_impl_result = g_api_table.WSALookupServiceNextA(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSALookupServiceNextW(win32::Windows::Win32::Foundation::HANDLE hLookup, uint32_t dwControlFlags, uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSAQUERYSETW* lpqsResults) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLookup);
        ORBIT_TRACK_PARAM(dwControlFlags);
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpqsResults);

        auto win32_impl_result = g_api_table.WSALookupServiceNextW(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSANSPIoctl(win32::Windows::Win32::Foundation::HANDLE hLookup, uint32_t dwControlCode, void* lpvInBuffer, uint32_t cbInBuffer, void* lpvOutBuffer, uint32_t cbOutBuffer, uint32_t* lpcbBytesReturned, win32::Windows::Win32::Networking::WinSock::WSACOMPLETION* lpCompletion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLookup);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpvInBuffer);
        ORBIT_TRACK_PARAM(cbInBuffer);
        ORBIT_TRACK_PARAM(lpvOutBuffer);
        ORBIT_TRACK_PARAM(cbOutBuffer);
        ORBIT_TRACK_PARAM(lpcbBytesReturned);
        ORBIT_TRACK_PARAM(lpCompletion);

        auto win32_impl_result = g_api_table.WSANSPIoctl(hLookup, dwControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSALookupServiceEnd(win32::Windows::Win32::Foundation::HANDLE hLookup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLookup);

        auto win32_impl_result = g_api_table.WSALookupServiceEnd(hLookup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAInstallServiceClassA(win32::Windows::Win32::Networking::WinSock::WSASERVICECLASSINFOA* lpServiceClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceClassInfo);

        auto win32_impl_result = g_api_table.WSAInstallServiceClassA(lpServiceClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAInstallServiceClassW(win32::Windows::Win32::Networking::WinSock::WSASERVICECLASSINFOW* lpServiceClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceClassInfo);

        auto win32_impl_result = g_api_table.WSAInstallServiceClassW(lpServiceClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSARemoveServiceClass(::win32::guid* lpServiceClassId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceClassId);

        auto win32_impl_result = g_api_table.WSARemoveServiceClass(lpServiceClassId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAGetServiceClassInfoA(::win32::guid* lpProviderId, ::win32::guid* lpServiceClassId, uint32_t* lpdwBufSize, win32::Windows::Win32::Networking::WinSock::WSASERVICECLASSINFOA* lpServiceClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpServiceClassId);
        ORBIT_TRACK_PARAM(lpdwBufSize);
        ORBIT_TRACK_PARAM(lpServiceClassInfo);

        auto win32_impl_result = g_api_table.WSAGetServiceClassInfoA(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAGetServiceClassInfoW(::win32::guid* lpProviderId, ::win32::guid* lpServiceClassId, uint32_t* lpdwBufSize, win32::Windows::Win32::Networking::WinSock::WSASERVICECLASSINFOW* lpServiceClassInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpServiceClassId);
        ORBIT_TRACK_PARAM(lpdwBufSize);
        ORBIT_TRACK_PARAM(lpServiceClassInfo);

        auto win32_impl_result = g_api_table.WSAGetServiceClassInfoW(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumNameSpaceProvidersA(uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSANAMESPACE_INFOA* lpnspBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpnspBuffer);

        auto win32_impl_result = g_api_table.WSAEnumNameSpaceProvidersA(lpdwBufferLength, lpnspBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumNameSpaceProvidersW(uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSANAMESPACE_INFOW* lpnspBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpnspBuffer);

        auto win32_impl_result = g_api_table.WSAEnumNameSpaceProvidersW(lpdwBufferLength, lpnspBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumNameSpaceProvidersExA(uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSANAMESPACE_INFOEXA* lpnspBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpnspBuffer);

        auto win32_impl_result = g_api_table.WSAEnumNameSpaceProvidersExA(lpdwBufferLength, lpnspBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAEnumNameSpaceProvidersExW(uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSANAMESPACE_INFOEXW* lpnspBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpnspBuffer);

        auto win32_impl_result = g_api_table.WSAEnumNameSpaceProvidersExW(lpdwBufferLength, lpnspBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAGetServiceClassNameByClassIdA(::win32::guid* lpServiceClassId, win32::Windows::Win32::Foundation::PSTR lpszServiceClassName, uint32_t* lpdwBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceClassId);
        ORBIT_TRACK_PARAM(lpszServiceClassName);
        ORBIT_TRACK_PARAM(lpdwBufferLength);

        auto win32_impl_result = g_api_table.WSAGetServiceClassNameByClassIdA(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAGetServiceClassNameByClassIdW(::win32::guid* lpServiceClassId, win32::Windows::Win32::Foundation::PWSTR lpszServiceClassName, uint32_t* lpdwBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceClassId);
        ORBIT_TRACK_PARAM(lpszServiceClassName);
        ORBIT_TRACK_PARAM(lpdwBufferLength);

        auto win32_impl_result = g_api_table.WSAGetServiceClassNameByClassIdW(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASetServiceA(win32::Windows::Win32::Networking::WinSock::WSAQUERYSETA* lpqsRegInfo, win32::Windows::Win32::Networking::WinSock::WSAESETSERVICEOP essoperation, uint32_t dwControlFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpqsRegInfo);
        ORBIT_TRACK_PARAM(essoperation);
        ORBIT_TRACK_PARAM(dwControlFlags);

        auto win32_impl_result = g_api_table.WSASetServiceA(lpqsRegInfo, essoperation, dwControlFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASetServiceW(win32::Windows::Win32::Networking::WinSock::WSAQUERYSETW* lpqsRegInfo, win32::Windows::Win32::Networking::WinSock::WSAESETSERVICEOP essoperation, uint32_t dwControlFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpqsRegInfo);
        ORBIT_TRACK_PARAM(essoperation);
        ORBIT_TRACK_PARAM(dwControlFlags);

        auto win32_impl_result = g_api_table.WSASetServiceW(lpqsRegInfo, essoperation, dwControlFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAProviderConfigChange(win32::Windows::Win32::Foundation::HANDLE* lpNotificationHandle, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpNotificationHandle);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WSAProviderConfigChange(lpNotificationHandle, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAPoll(win32::Windows::Win32::Networking::WinSock::WSAPOLLFD* fdArray, uint32_t fds, int32_t timeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fdArray);
        ORBIT_TRACK_PARAM(fds);
        ORBIT_TRACK_PARAM(timeout);

        auto win32_impl_result = g_api_table.WSAPoll(fdArray, fds, timeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ProcessSocketNotifications(win32::Windows::Win32::Foundation::HANDLE completionPort, uint32_t registrationCount, win32::Windows::Win32::Networking::WinSock::SOCK_NOTIFY_REGISTRATION* registrationInfos, uint32_t timeoutMs, uint32_t completionCount, win32::Windows::Win32::System::IO::OVERLAPPED_ENTRY* completionPortEntries, uint32_t* receivedEntryCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(completionPort);
        ORBIT_TRACK_PARAM(registrationCount);
        ORBIT_TRACK_PARAM(registrationInfos);
        ORBIT_TRACK_PARAM(timeoutMs);
        ORBIT_TRACK_PARAM(completionCount);
        ORBIT_TRACK_PARAM(completionPortEntries);
        ORBIT_TRACK_PARAM(receivedEntryCount);

        auto win32_impl_result = g_api_table.ProcessSocketNotifications(completionPort, registrationCount, registrationInfos, timeoutMs, completionCount, completionPortEntries, receivedEntryCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_RtlIpv4AddressToStringA(win32::Windows::Win32::Networking::WinSock::IN_ADDR* Addr, win32::Windows::Win32::Foundation::PSTR S) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Addr);
        ORBIT_TRACK_PARAM(S);

        auto win32_impl_result = g_api_table.RtlIpv4AddressToStringA(Addr, S);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv4AddressToStringExA(win32::Windows::Win32::Networking::WinSock::IN_ADDR* Address, uint16_t Port, win32::Windows::Win32::Foundation::PSTR AddressString, uint32_t* AddressStringLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(Port);
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(AddressStringLength);

        auto win32_impl_result = g_api_table.RtlIpv4AddressToStringExA(Address, Port, AddressString, AddressStringLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_RtlIpv4AddressToStringW(win32::Windows::Win32::Networking::WinSock::IN_ADDR* Addr, win32::Windows::Win32::Foundation::PWSTR S) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Addr);
        ORBIT_TRACK_PARAM(S);

        auto win32_impl_result = g_api_table.RtlIpv4AddressToStringW(Addr, S);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv4AddressToStringExW(win32::Windows::Win32::Networking::WinSock::IN_ADDR* Address, uint16_t Port, win32::Windows::Win32::Foundation::PWSTR AddressString, uint32_t* AddressStringLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(Port);
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(AddressStringLength);

        auto win32_impl_result = g_api_table.RtlIpv4AddressToStringExW(Address, Port, AddressString, AddressStringLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv4StringToAddressA(win32::Windows::Win32::Foundation::PSTR S, win32::Windows::Win32::Foundation::BOOLEAN Strict, win32::Windows::Win32::Foundation::PSTR* Terminator, win32::Windows::Win32::Networking::WinSock::IN_ADDR* Addr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(S);
        ORBIT_TRACK_PARAM(Strict);
        ORBIT_TRACK_PARAM(Terminator);
        ORBIT_TRACK_PARAM(Addr);

        auto win32_impl_result = g_api_table.RtlIpv4StringToAddressA(S, Strict, Terminator, Addr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv4StringToAddressExA(win32::Windows::Win32::Foundation::PSTR AddressString, win32::Windows::Win32::Foundation::BOOLEAN Strict, win32::Windows::Win32::Networking::WinSock::IN_ADDR* Address, uint16_t* Port) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(Strict);
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(Port);

        auto win32_impl_result = g_api_table.RtlIpv4StringToAddressExA(AddressString, Strict, Address, Port);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv4StringToAddressW(win32::Windows::Win32::Foundation::PWSTR S, win32::Windows::Win32::Foundation::BOOLEAN Strict, win32::Windows::Win32::Foundation::PWSTR* Terminator, win32::Windows::Win32::Networking::WinSock::IN_ADDR* Addr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(S);
        ORBIT_TRACK_PARAM(Strict);
        ORBIT_TRACK_PARAM(Terminator);
        ORBIT_TRACK_PARAM(Addr);

        auto win32_impl_result = g_api_table.RtlIpv4StringToAddressW(S, Strict, Terminator, Addr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv4StringToAddressExW(win32::Windows::Win32::Foundation::PWSTR AddressString, win32::Windows::Win32::Foundation::BOOLEAN Strict, win32::Windows::Win32::Networking::WinSock::IN_ADDR* Address, uint16_t* Port) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(Strict);
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(Port);

        auto win32_impl_result = g_api_table.RtlIpv4StringToAddressExW(AddressString, Strict, Address, Port);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_RtlIpv6AddressToStringA(win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Addr, win32::Windows::Win32::Foundation::PSTR S) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Addr);
        ORBIT_TRACK_PARAM(S);

        auto win32_impl_result = g_api_table.RtlIpv6AddressToStringA(Addr, S);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv6AddressToStringExA(win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Address, uint32_t ScopeId, uint16_t Port, win32::Windows::Win32::Foundation::PSTR AddressString, uint32_t* AddressStringLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(Port);
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(AddressStringLength);

        auto win32_impl_result = g_api_table.RtlIpv6AddressToStringExA(Address, ScopeId, Port, AddressString, AddressStringLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_RtlIpv6AddressToStringW(win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Addr, win32::Windows::Win32::Foundation::PWSTR S) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Addr);
        ORBIT_TRACK_PARAM(S);

        auto win32_impl_result = g_api_table.RtlIpv6AddressToStringW(Addr, S);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv6AddressToStringExW(win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Address, uint32_t ScopeId, uint16_t Port, win32::Windows::Win32::Foundation::PWSTR AddressString, uint32_t* AddressStringLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(Port);
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(AddressStringLength);

        auto win32_impl_result = g_api_table.RtlIpv6AddressToStringExW(Address, ScopeId, Port, AddressString, AddressStringLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv6StringToAddressA(win32::Windows::Win32::Foundation::PSTR S, win32::Windows::Win32::Foundation::PSTR* Terminator, win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Addr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(S);
        ORBIT_TRACK_PARAM(Terminator);
        ORBIT_TRACK_PARAM(Addr);

        auto win32_impl_result = g_api_table.RtlIpv6StringToAddressA(S, Terminator, Addr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv6StringToAddressExA(win32::Windows::Win32::Foundation::PSTR AddressString, win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Address, uint32_t* ScopeId, uint16_t* Port) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(Port);

        auto win32_impl_result = g_api_table.RtlIpv6StringToAddressExA(AddressString, Address, ScopeId, Port);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv6StringToAddressW(win32::Windows::Win32::Foundation::PWSTR S, win32::Windows::Win32::Foundation::PWSTR* Terminator, win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Addr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(S);
        ORBIT_TRACK_PARAM(Terminator);
        ORBIT_TRACK_PARAM(Addr);

        auto win32_impl_result = g_api_table.RtlIpv6StringToAddressW(S, Terminator, Addr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlIpv6StringToAddressExW(win32::Windows::Win32::Foundation::PWSTR AddressString, win32::Windows::Win32::Networking::WinSock::IN6_ADDR* Address, uint32_t* ScopeId, uint16_t* Port) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressString);
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(ScopeId);
        ORBIT_TRACK_PARAM(Port);

        auto win32_impl_result = g_api_table.RtlIpv6StringToAddressExW(AddressString, Address, ScopeId, Port);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_RtlEthernetAddressToStringA(win32::Windows::Win32::NetworkManagement::WindowsFilteringPlatform::DL_EUI48* Addr, win32::Windows::Win32::Foundation::PSTR S) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Addr);
        ORBIT_TRACK_PARAM(S);

        auto win32_impl_result = g_api_table.RtlEthernetAddressToStringA(Addr, S);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_RtlEthernetAddressToStringW(win32::Windows::Win32::NetworkManagement::WindowsFilteringPlatform::DL_EUI48* Addr, win32::Windows::Win32::Foundation::PWSTR S) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Addr);
        ORBIT_TRACK_PARAM(S);

        auto win32_impl_result = g_api_table.RtlEthernetAddressToStringW(Addr, S);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlEthernetStringToAddressA(win32::Windows::Win32::Foundation::PSTR S, win32::Windows::Win32::Foundation::PSTR* Terminator, win32::Windows::Win32::NetworkManagement::WindowsFilteringPlatform::DL_EUI48* Addr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(S);
        ORBIT_TRACK_PARAM(Terminator);
        ORBIT_TRACK_PARAM(Addr);

        auto win32_impl_result = g_api_table.RtlEthernetStringToAddressA(S, Terminator, Addr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RtlEthernetStringToAddressW(win32::Windows::Win32::Foundation::PWSTR S, win32::Windows::Win32::Foundation::PWSTR* Terminator, win32::Windows::Win32::NetworkManagement::WindowsFilteringPlatform::DL_EUI48* Addr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(S);
        ORBIT_TRACK_PARAM(Terminator);
        ORBIT_TRACK_PARAM(Addr);

        auto win32_impl_result = g_api_table.RtlEthernetStringToAddressW(S, Terminator, Addr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSARecvEx(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::Foundation::PSTR buf, int32_t len, int32_t* flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(len);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.WSARecvEx(s, buf, len, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TransmitFile(win32::Windows::Win32::Networking::WinSock::SOCKET hSocket, win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t nNumberOfBytesToWrite, uint32_t nNumberOfBytesPerSend, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::TRANSMIT_FILE_BUFFERS* lpTransmitBuffers, uint32_t dwReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSocket);
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(nNumberOfBytesToWrite);
        ORBIT_TRACK_PARAM(nNumberOfBytesPerSend);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpTransmitBuffers);
        ORBIT_TRACK_PARAM(dwReserved);

        auto win32_impl_result = g_api_table.TransmitFile(hSocket, hFile, nNumberOfBytesToWrite, nNumberOfBytesPerSend, lpOverlapped, lpTransmitBuffers, dwReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AcceptEx(win32::Windows::Win32::Networking::WinSock::SOCKET sListenSocket, win32::Windows::Win32::Networking::WinSock::SOCKET sAcceptSocket, void* lpOutputBuffer, uint32_t dwReceiveDataLength, uint32_t dwLocalAddressLength, uint32_t dwRemoteAddressLength, uint32_t* lpdwBytesReceived, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sListenSocket);
        ORBIT_TRACK_PARAM(sAcceptSocket);
        ORBIT_TRACK_PARAM(lpOutputBuffer);
        ORBIT_TRACK_PARAM(dwReceiveDataLength);
        ORBIT_TRACK_PARAM(dwLocalAddressLength);
        ORBIT_TRACK_PARAM(dwRemoteAddressLength);
        ORBIT_TRACK_PARAM(lpdwBytesReceived);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.AcceptEx(sListenSocket, sAcceptSocket, lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, lpdwBytesReceived, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_GetAcceptExSockaddrs(void* lpOutputBuffer, uint32_t dwReceiveDataLength, uint32_t dwLocalAddressLength, uint32_t dwRemoteAddressLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR** LocalSockaddr, int32_t* LocalSockaddrLength, win32::Windows::Win32::Networking::WinSock::SOCKADDR** RemoteSockaddr, int32_t* RemoteSockaddrLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpOutputBuffer);
        ORBIT_TRACK_PARAM(dwReceiveDataLength);
        ORBIT_TRACK_PARAM(dwLocalAddressLength);
        ORBIT_TRACK_PARAM(dwRemoteAddressLength);
        ORBIT_TRACK_PARAM(LocalSockaddr);
        ORBIT_TRACK_PARAM(LocalSockaddrLength);
        ORBIT_TRACK_PARAM(RemoteSockaddr);
        ORBIT_TRACK_PARAM(RemoteSockaddrLength);

        g_api_table.GetAcceptExSockaddrs(lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, LocalSockaddr, LocalSockaddrLength, RemoteSockaddr, RemoteSockaddrLength);
        
    }

    int32_t __stdcall ORBIT_IMPL_WSCEnumProtocols(int32_t* lpiProtocols, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolBuffer, uint32_t* lpdwBufferLength, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(lpProtocolBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCEnumProtocols(lpiProtocols, lpProtocolBuffer, lpdwBufferLength, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCEnumProtocols32(int32_t* lpiProtocols, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolBuffer, uint32_t* lpdwBufferLength, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(lpProtocolBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCEnumProtocols32(lpiProtocols, lpProtocolBuffer, lpdwBufferLength, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCDeinstallProvider(::win32::guid* lpProviderId, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCDeinstallProvider(lpProviderId, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCDeinstallProvider32(::win32::guid* lpProviderId, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCDeinstallProvider32(lpProviderId, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallProvider(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpProtocolInfoList);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCInstallProvider(lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallProvider64_32(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpProtocolInfoList);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCInstallProvider64_32(lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCGetProviderPath(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, int32_t* lpProviderDllPathLen, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpProviderDllPathLen);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCGetProviderPath(lpProviderId, lpszProviderDllPath, lpProviderDllPathLen, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCGetProviderPath32(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, int32_t* lpProviderDllPathLen, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpProviderDllPathLen);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCGetProviderPath32(lpProviderId, lpszProviderDllPath, lpProviderDllPathLen, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCUpdateProvider(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpProtocolInfoList);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCUpdateProvider(lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCUpdateProvider32(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpProtocolInfoList);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCUpdateProvider32(lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCSetProviderInfo(::win32::guid* lpProviderId, win32::Windows::Win32::Networking::WinSock::WSC_PROVIDER_INFO_TYPE InfoType, uint8_t* Info, size_t InfoSize, uint32_t Flags, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(Info);
        ORBIT_TRACK_PARAM(InfoSize);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCSetProviderInfo(lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCGetProviderInfo(::win32::guid* lpProviderId, win32::Windows::Win32::Networking::WinSock::WSC_PROVIDER_INFO_TYPE InfoType, uint8_t* Info, size_t* InfoSize, uint32_t Flags, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(Info);
        ORBIT_TRACK_PARAM(InfoSize);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCGetProviderInfo(lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCSetProviderInfo32(::win32::guid* lpProviderId, win32::Windows::Win32::Networking::WinSock::WSC_PROVIDER_INFO_TYPE InfoType, uint8_t* Info, size_t InfoSize, uint32_t Flags, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(Info);
        ORBIT_TRACK_PARAM(InfoSize);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCSetProviderInfo32(lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCGetProviderInfo32(::win32::guid* lpProviderId, win32::Windows::Win32::Networking::WinSock::WSC_PROVIDER_INFO_TYPE InfoType, uint8_t* Info, size_t* InfoSize, uint32_t Flags, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(Info);
        ORBIT_TRACK_PARAM(InfoSize);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCGetProviderInfo32(lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCSetApplicationCategory(win32::Windows::Win32::Foundation::PWSTR Path, uint32_t PathLength, win32::Windows::Win32::Foundation::PWSTR Extra, uint32_t ExtraLength, uint32_t PermittedLspCategories, uint32_t* pPrevPermLspCat, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Path);
        ORBIT_TRACK_PARAM(PathLength);
        ORBIT_TRACK_PARAM(Extra);
        ORBIT_TRACK_PARAM(ExtraLength);
        ORBIT_TRACK_PARAM(PermittedLspCategories);
        ORBIT_TRACK_PARAM(pPrevPermLspCat);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCSetApplicationCategory(Path, PathLength, Extra, ExtraLength, PermittedLspCategories, pPrevPermLspCat, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCGetApplicationCategory(win32::Windows::Win32::Foundation::PWSTR Path, uint32_t PathLength, win32::Windows::Win32::Foundation::PWSTR Extra, uint32_t ExtraLength, uint32_t* pPermittedLspCategories, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Path);
        ORBIT_TRACK_PARAM(PathLength);
        ORBIT_TRACK_PARAM(Extra);
        ORBIT_TRACK_PARAM(ExtraLength);
        ORBIT_TRACK_PARAM(pPermittedLspCategories);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCGetApplicationCategory(Path, PathLength, Extra, ExtraLength, pPermittedLspCategories, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WPUCompleteOverlappedRequest(win32::Windows::Win32::Networking::WinSock::SOCKET s, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, uint32_t dwError, uint32_t cbTransferred, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(dwError);
        ORBIT_TRACK_PARAM(cbTransferred);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WPUCompleteOverlappedRequest(s, lpOverlapped, dwError, cbTransferred, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCEnumNameSpaceProviders32(uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSANAMESPACE_INFOW* lpnspBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpnspBuffer);

        auto win32_impl_result = g_api_table.WSCEnumNameSpaceProviders32(lpdwBufferLength, lpnspBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCEnumNameSpaceProvidersEx32(uint32_t* lpdwBufferLength, win32::Windows::Win32::Networking::WinSock::WSANAMESPACE_INFOEXW* lpnspBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpnspBuffer);

        auto win32_impl_result = g_api_table.WSCEnumNameSpaceProvidersEx32(lpdwBufferLength, lpnspBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallNameSpace(win32::Windows::Win32::Foundation::PWSTR lpszIdentifier, win32::Windows::Win32::Foundation::PWSTR lpszPathName, uint32_t dwNameSpace, uint32_t dwVersion, ::win32::guid* lpProviderId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszIdentifier);
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(lpProviderId);

        auto win32_impl_result = g_api_table.WSCInstallNameSpace(lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallNameSpace32(win32::Windows::Win32::Foundation::PWSTR lpszIdentifier, win32::Windows::Win32::Foundation::PWSTR lpszPathName, uint32_t dwNameSpace, uint32_t dwVersion, ::win32::guid* lpProviderId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszIdentifier);
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(lpProviderId);

        auto win32_impl_result = g_api_table.WSCInstallNameSpace32(lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCUnInstallNameSpace(::win32::guid* lpProviderId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);

        auto win32_impl_result = g_api_table.WSCUnInstallNameSpace(lpProviderId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallNameSpaceEx(win32::Windows::Win32::Foundation::PWSTR lpszIdentifier, win32::Windows::Win32::Foundation::PWSTR lpszPathName, uint32_t dwNameSpace, uint32_t dwVersion, ::win32::guid* lpProviderId, win32::Windows::Win32::System::Com::BLOB* lpProviderSpecific) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszIdentifier);
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpProviderSpecific);

        auto win32_impl_result = g_api_table.WSCInstallNameSpaceEx(lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId, lpProviderSpecific);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallNameSpaceEx32(win32::Windows::Win32::Foundation::PWSTR lpszIdentifier, win32::Windows::Win32::Foundation::PWSTR lpszPathName, uint32_t dwNameSpace, uint32_t dwVersion, ::win32::guid* lpProviderId, win32::Windows::Win32::System::Com::BLOB* lpProviderSpecific) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszIdentifier);
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpProviderSpecific);

        auto win32_impl_result = g_api_table.WSCInstallNameSpaceEx32(lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId, lpProviderSpecific);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCUnInstallNameSpace32(::win32::guid* lpProviderId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);

        auto win32_impl_result = g_api_table.WSCUnInstallNameSpace32(lpProviderId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCEnableNSProvider(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::BOOL fEnable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(fEnable);

        auto win32_impl_result = g_api_table.WSCEnableNSProvider(lpProviderId, fEnable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCEnableNSProvider32(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::BOOL fEnable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(fEnable);

        auto win32_impl_result = g_api_table.WSCEnableNSProvider32(lpProviderId, fEnable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCInstallProviderAndChains64_32(::win32::guid* lpProviderId, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath, win32::Windows::Win32::Foundation::PWSTR lpszProviderDllPath32, win32::Windows::Win32::Foundation::PWSTR lpszLspName, uint32_t dwServiceFlags, win32::Windows::Win32::Networking::WinSock::WSAPROTOCOL_INFOW* lpProtocolInfoList, uint32_t dwNumberOfEntries, uint32_t* lpdwCatalogEntryId, int32_t* lpErrno) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(lpszProviderDllPath);
        ORBIT_TRACK_PARAM(lpszProviderDllPath32);
        ORBIT_TRACK_PARAM(lpszLspName);
        ORBIT_TRACK_PARAM(dwServiceFlags);
        ORBIT_TRACK_PARAM(lpProtocolInfoList);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);
        ORBIT_TRACK_PARAM(lpdwCatalogEntryId);
        ORBIT_TRACK_PARAM(lpErrno);

        auto win32_impl_result = g_api_table.WSCInstallProviderAndChains64_32(lpProviderId, lpszProviderDllPath, lpszProviderDllPath32, lpszLspName, dwServiceFlags, lpProtocolInfoList, dwNumberOfEntries, lpdwCatalogEntryId, lpErrno);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAAdvertiseProvider(::win32::guid* puuidProviderId, win32::Windows::Win32::Networking::WinSock::NSPV2_ROUTINE* pNSPv2Routine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(puuidProviderId);
        ORBIT_TRACK_PARAM(pNSPv2Routine);

        auto win32_impl_result = g_api_table.WSAAdvertiseProvider(puuidProviderId, pNSPv2Routine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAUnadvertiseProvider(::win32::guid* puuidProviderId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(puuidProviderId);

        auto win32_impl_result = g_api_table.WSAUnadvertiseProvider(puuidProviderId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAProviderCompleteAsyncCall(win32::Windows::Win32::Foundation::HANDLE hAsyncCall, int32_t iRetCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAsyncCall);
        ORBIT_TRACK_PARAM(iRetCode);

        auto win32_impl_result = g_api_table.WSAProviderCompleteAsyncCall(hAsyncCall, iRetCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_EnumProtocolsA(int32_t* lpiProtocols, void* lpProtocolBuffer, uint32_t* lpdwBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(lpProtocolBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);

        auto win32_impl_result = g_api_table.EnumProtocolsA(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_EnumProtocolsW(int32_t* lpiProtocols, void* lpProtocolBuffer, uint32_t* lpdwBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(lpProtocolBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);

        auto win32_impl_result = g_api_table.EnumProtocolsW(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddressByNameA(uint32_t dwNameSpace, ::win32::guid* lpServiceType, win32::Windows::Win32::Foundation::PSTR lpServiceName, int32_t* lpiProtocols, uint32_t dwResolution, win32::Windows::Win32::Networking::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, void* lpCsaddrBuffer, uint32_t* lpdwBufferLength, win32::Windows::Win32::Foundation::PSTR lpAliasBuffer, uint32_t* lpdwAliasBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpServiceType);
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(dwResolution);
        ORBIT_TRACK_PARAM(lpServiceAsyncInfo);
        ORBIT_TRACK_PARAM(lpCsaddrBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpAliasBuffer);
        ORBIT_TRACK_PARAM(lpdwAliasBufferLength);

        auto win32_impl_result = g_api_table.GetAddressByNameA(dwNameSpace, lpServiceType, lpServiceName, lpiProtocols, dwResolution, lpServiceAsyncInfo, lpCsaddrBuffer, lpdwBufferLength, lpAliasBuffer, lpdwAliasBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddressByNameW(uint32_t dwNameSpace, ::win32::guid* lpServiceType, win32::Windows::Win32::Foundation::PWSTR lpServiceName, int32_t* lpiProtocols, uint32_t dwResolution, win32::Windows::Win32::Networking::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, void* lpCsaddrBuffer, uint32_t* lpdwBufferLength, win32::Windows::Win32::Foundation::PWSTR lpAliasBuffer, uint32_t* lpdwAliasBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpServiceType);
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(lpiProtocols);
        ORBIT_TRACK_PARAM(dwResolution);
        ORBIT_TRACK_PARAM(lpServiceAsyncInfo);
        ORBIT_TRACK_PARAM(lpCsaddrBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferLength);
        ORBIT_TRACK_PARAM(lpAliasBuffer);
        ORBIT_TRACK_PARAM(lpdwAliasBufferLength);

        auto win32_impl_result = g_api_table.GetAddressByNameW(dwNameSpace, lpServiceType, lpServiceName, lpiProtocols, dwResolution, lpServiceAsyncInfo, lpCsaddrBuffer, lpdwBufferLength, lpAliasBuffer, lpdwAliasBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTypeByNameA(win32::Windows::Win32::Foundation::PSTR lpServiceName, ::win32::guid* lpServiceType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(lpServiceType);

        auto win32_impl_result = g_api_table.GetTypeByNameA(lpServiceName, lpServiceType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTypeByNameW(win32::Windows::Win32::Foundation::PWSTR lpServiceName, ::win32::guid* lpServiceType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(lpServiceType);

        auto win32_impl_result = g_api_table.GetTypeByNameW(lpServiceName, lpServiceType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetNameByTypeA(::win32::guid* lpServiceType, win32::Windows::Win32::Foundation::PSTR lpServiceName, uint32_t dwNameLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceType);
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(dwNameLength);

        auto win32_impl_result = g_api_table.GetNameByTypeA(lpServiceType, lpServiceName, dwNameLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetNameByTypeW(::win32::guid* lpServiceType, win32::Windows::Win32::Foundation::PWSTR lpServiceName, uint32_t dwNameLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServiceType);
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(dwNameLength);

        auto win32_impl_result = g_api_table.GetNameByTypeW(lpServiceType, lpServiceName, dwNameLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetServiceA(uint32_t dwNameSpace, win32::Windows::Win32::Networking::WinSock::SET_SERVICE_OPERATION dwOperation, uint32_t dwFlags, win32::Windows::Win32::Networking::WinSock::SERVICE_INFOA* lpServiceInfo, win32::Windows::Win32::Networking::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, uint32_t* lpdwStatusFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(dwOperation);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpServiceInfo);
        ORBIT_TRACK_PARAM(lpServiceAsyncInfo);
        ORBIT_TRACK_PARAM(lpdwStatusFlags);

        auto win32_impl_result = g_api_table.SetServiceA(dwNameSpace, dwOperation, dwFlags, lpServiceInfo, lpServiceAsyncInfo, lpdwStatusFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetServiceW(uint32_t dwNameSpace, win32::Windows::Win32::Networking::WinSock::SET_SERVICE_OPERATION dwOperation, uint32_t dwFlags, win32::Windows::Win32::Networking::WinSock::SERVICE_INFOW* lpServiceInfo, win32::Windows::Win32::Networking::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo, uint32_t* lpdwStatusFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(dwOperation);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpServiceInfo);
        ORBIT_TRACK_PARAM(lpServiceAsyncInfo);
        ORBIT_TRACK_PARAM(lpdwStatusFlags);

        auto win32_impl_result = g_api_table.SetServiceW(dwNameSpace, dwOperation, dwFlags, lpServiceInfo, lpServiceAsyncInfo, lpdwStatusFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetServiceA(uint32_t dwNameSpace, ::win32::guid* lpGuid, win32::Windows::Win32::Foundation::PSTR lpServiceName, uint32_t dwProperties, void* lpBuffer, uint32_t* lpdwBufferSize, win32::Windows::Win32::Networking::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpGuid);
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(dwProperties);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferSize);
        ORBIT_TRACK_PARAM(lpServiceAsyncInfo);

        auto win32_impl_result = g_api_table.GetServiceA(dwNameSpace, lpGuid, lpServiceName, dwProperties, lpBuffer, lpdwBufferSize, lpServiceAsyncInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetServiceW(uint32_t dwNameSpace, ::win32::guid* lpGuid, win32::Windows::Win32::Foundation::PWSTR lpServiceName, uint32_t dwProperties, void* lpBuffer, uint32_t* lpdwBufferSize, win32::Windows::Win32::Networking::WinSock::SERVICE_ASYNC_INFO* lpServiceAsyncInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpGuid);
        ORBIT_TRACK_PARAM(lpServiceName);
        ORBIT_TRACK_PARAM(dwProperties);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpdwBufferSize);
        ORBIT_TRACK_PARAM(lpServiceAsyncInfo);

        auto win32_impl_result = g_api_table.GetServiceW(dwNameSpace, lpGuid, lpServiceName, dwProperties, lpBuffer, lpdwBufferSize, lpServiceAsyncInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_getaddrinfo(win32::Windows::Win32::Foundation::PSTR pNodeName, win32::Windows::Win32::Foundation::PSTR pServiceName, win32::Windows::Win32::Networking::WinSock::ADDRINFOA* pHints, win32::Windows::Win32::Networking::WinSock::ADDRINFOA** ppResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pNodeName);
        ORBIT_TRACK_PARAM(pServiceName);
        ORBIT_TRACK_PARAM(pHints);
        ORBIT_TRACK_PARAM(ppResult);

        auto win32_impl_result = g_api_table.getaddrinfo(pNodeName, pServiceName, pHints, ppResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddrInfoW(win32::Windows::Win32::Foundation::PWSTR pNodeName, win32::Windows::Win32::Foundation::PWSTR pServiceName, win32::Windows::Win32::Networking::WinSock::addrinfoW* pHints, win32::Windows::Win32::Networking::WinSock::addrinfoW** ppResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pNodeName);
        ORBIT_TRACK_PARAM(pServiceName);
        ORBIT_TRACK_PARAM(pHints);
        ORBIT_TRACK_PARAM(ppResult);

        auto win32_impl_result = g_api_table.GetAddrInfoW(pNodeName, pServiceName, pHints, ppResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddrInfoExA(win32::Windows::Win32::Foundation::PSTR pName, win32::Windows::Win32::Foundation::PSTR pServiceName, uint32_t dwNameSpace, ::win32::guid* lpNspId, win32::Windows::Win32::Networking::WinSock::addrinfoexA* hints, win32::Windows::Win32::Networking::WinSock::addrinfoexA** ppResult, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, win32::Windows::Win32::Foundation::HANDLE* lpNameHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(pServiceName);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpNspId);
        ORBIT_TRACK_PARAM(hints);
        ORBIT_TRACK_PARAM(ppResult);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);
        ORBIT_TRACK_PARAM(lpNameHandle);

        auto win32_impl_result = g_api_table.GetAddrInfoExA(pName, pServiceName, dwNameSpace, lpNspId, hints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddrInfoExW(win32::Windows::Win32::Foundation::PWSTR pName, win32::Windows::Win32::Foundation::PWSTR pServiceName, uint32_t dwNameSpace, ::win32::guid* lpNspId, win32::Windows::Win32::Networking::WinSock::addrinfoexW* hints, win32::Windows::Win32::Networking::WinSock::addrinfoexW** ppResult, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, win32::Windows::Win32::Foundation::HANDLE* lpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(pServiceName);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpNspId);
        ORBIT_TRACK_PARAM(hints);
        ORBIT_TRACK_PARAM(ppResult);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);
        ORBIT_TRACK_PARAM(lpHandle);

        auto win32_impl_result = g_api_table.GetAddrInfoExW(pName, pServiceName, dwNameSpace, lpNspId, hints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddrInfoExCancel(win32::Windows::Win32::Foundation::HANDLE* lpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpHandle);

        auto win32_impl_result = g_api_table.GetAddrInfoExCancel(lpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetAddrInfoExOverlappedResult(win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.GetAddrInfoExOverlappedResult(lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetAddrInfoExA(win32::Windows::Win32::Foundation::PSTR pName, win32::Windows::Win32::Foundation::PSTR pServiceName, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS* pAddresses, uint32_t dwAddressCount, win32::Windows::Win32::System::Com::BLOB* lpBlob, uint32_t dwFlags, uint32_t dwNameSpace, ::win32::guid* lpNspId, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, win32::Windows::Win32::Foundation::HANDLE* lpNameHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(pServiceName);
        ORBIT_TRACK_PARAM(pAddresses);
        ORBIT_TRACK_PARAM(dwAddressCount);
        ORBIT_TRACK_PARAM(lpBlob);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpNspId);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);
        ORBIT_TRACK_PARAM(lpNameHandle);

        auto win32_impl_result = g_api_table.SetAddrInfoExA(pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetAddrInfoExW(win32::Windows::Win32::Foundation::PWSTR pName, win32::Windows::Win32::Foundation::PWSTR pServiceName, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS* pAddresses, uint32_t dwAddressCount, win32::Windows::Win32::System::Com::BLOB* lpBlob, uint32_t dwFlags, uint32_t dwNameSpace, ::win32::guid* lpNspId, win32::Windows::Win32::Networking::WinSock::timeval* timeout, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::Networking::WinSock::LPLOOKUPSERVICE_COMPLETION_ROUTINE* lpCompletionRoutine, win32::Windows::Win32::Foundation::HANDLE* lpNameHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(pServiceName);
        ORBIT_TRACK_PARAM(pAddresses);
        ORBIT_TRACK_PARAM(dwAddressCount);
        ORBIT_TRACK_PARAM(lpBlob);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwNameSpace);
        ORBIT_TRACK_PARAM(lpNspId);
        ORBIT_TRACK_PARAM(timeout);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);
        ORBIT_TRACK_PARAM(lpNameHandle);

        auto win32_impl_result = g_api_table.SetAddrInfoExW(pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_freeaddrinfo(win32::Windows::Win32::Networking::WinSock::ADDRINFOA* pAddrInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAddrInfo);

        g_api_table.freeaddrinfo(pAddrInfo);
        
    }

    void __stdcall ORBIT_IMPL_FreeAddrInfoW(win32::Windows::Win32::Networking::WinSock::addrinfoW* pAddrInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAddrInfo);

        g_api_table.FreeAddrInfoW(pAddrInfo);
        
    }

    void __stdcall ORBIT_IMPL_FreeAddrInfoEx(win32::Windows::Win32::Networking::WinSock::addrinfoexA* pAddrInfoEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAddrInfoEx);

        g_api_table.FreeAddrInfoEx(pAddrInfoEx);
        
    }

    void __stdcall ORBIT_IMPL_FreeAddrInfoExW(win32::Windows::Win32::Networking::WinSock::addrinfoexW* pAddrInfoEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAddrInfoEx);

        g_api_table.FreeAddrInfoExW(pAddrInfoEx);
        
    }

    int32_t __stdcall ORBIT_IMPL_getnameinfo(win32::Windows::Win32::Networking::WinSock::SOCKADDR* pSockaddr, int32_t SockaddrLength, win32::Windows::Win32::Foundation::PSTR pNodeBuffer, uint32_t NodeBufferSize, win32::Windows::Win32::Foundation::PSTR pServiceBuffer, uint32_t ServiceBufferSize, int32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSockaddr);
        ORBIT_TRACK_PARAM(SockaddrLength);
        ORBIT_TRACK_PARAM(pNodeBuffer);
        ORBIT_TRACK_PARAM(NodeBufferSize);
        ORBIT_TRACK_PARAM(pServiceBuffer);
        ORBIT_TRACK_PARAM(ServiceBufferSize);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.getnameinfo(pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetNameInfoW(win32::Windows::Win32::Networking::WinSock::SOCKADDR* pSockaddr, int32_t SockaddrLength, win32::Windows::Win32::Foundation::PWSTR pNodeBuffer, uint32_t NodeBufferSize, win32::Windows::Win32::Foundation::PWSTR pServiceBuffer, uint32_t ServiceBufferSize, int32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSockaddr);
        ORBIT_TRACK_PARAM(SockaddrLength);
        ORBIT_TRACK_PARAM(pNodeBuffer);
        ORBIT_TRACK_PARAM(NodeBufferSize);
        ORBIT_TRACK_PARAM(pServiceBuffer);
        ORBIT_TRACK_PARAM(ServiceBufferSize);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.GetNameInfoW(pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_inet_pton(int32_t Family, win32::Windows::Win32::Foundation::PSTR pszAddrString, void* pAddrBuf) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(pszAddrString);
        ORBIT_TRACK_PARAM(pAddrBuf);

        auto win32_impl_result = g_api_table.inet_pton(Family, pszAddrString, pAddrBuf);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_InetPtonW(int32_t Family, win32::Windows::Win32::Foundation::PWSTR pszAddrString, void* pAddrBuf) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(pszAddrString);
        ORBIT_TRACK_PARAM(pAddrBuf);

        auto win32_impl_result = g_api_table.InetPtonW(Family, pszAddrString, pAddrBuf);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_inet_ntop(int32_t Family, void* pAddr, win32::Windows::Win32::Foundation::PSTR pStringBuf, size_t StringBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(pAddr);
        ORBIT_TRACK_PARAM(pStringBuf);
        ORBIT_TRACK_PARAM(StringBufSize);

        auto win32_impl_result = g_api_table.inet_ntop(Family, pAddr, pStringBuf, StringBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_InetNtopW(int32_t Family, void* pAddr, win32::Windows::Win32::Foundation::PWSTR pStringBuf, size_t StringBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(pAddr);
        ORBIT_TRACK_PARAM(pStringBuf);
        ORBIT_TRACK_PARAM(StringBufSize);

        auto win32_impl_result = g_api_table.InetNtopW(Family, pAddr, pStringBuf, StringBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASetSocketSecurity(win32::Windows::Win32::Networking::WinSock::SOCKET Socket, win32::Windows::Win32::Networking::WinSock::SOCKET_SECURITY_SETTINGS* SecuritySettings, uint32_t SecuritySettingsLen, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(SecuritySettings);
        ORBIT_TRACK_PARAM(SecuritySettingsLen);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(CompletionRoutine);

        auto win32_impl_result = g_api_table.WSASetSocketSecurity(Socket, SecuritySettings, SecuritySettingsLen, Overlapped, CompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAQuerySocketSecurity(win32::Windows::Win32::Networking::WinSock::SOCKET Socket, win32::Windows::Win32::Networking::WinSock::SOCKET_SECURITY_QUERY_TEMPLATE* SecurityQueryTemplate, uint32_t SecurityQueryTemplateLen, win32::Windows::Win32::Networking::WinSock::SOCKET_SECURITY_QUERY_INFO* SecurityQueryInfo, uint32_t* SecurityQueryInfoLen, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(SecurityQueryTemplate);
        ORBIT_TRACK_PARAM(SecurityQueryTemplateLen);
        ORBIT_TRACK_PARAM(SecurityQueryInfo);
        ORBIT_TRACK_PARAM(SecurityQueryInfoLen);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(CompletionRoutine);

        auto win32_impl_result = g_api_table.WSAQuerySocketSecurity(Socket, SecurityQueryTemplate, SecurityQueryTemplateLen, SecurityQueryInfo, SecurityQueryInfoLen, Overlapped, CompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSASetSocketPeerTargetName(win32::Windows::Win32::Networking::WinSock::SOCKET Socket, win32::Windows::Win32::Networking::WinSock::SOCKET_PEER_TARGET_NAME* PeerTargetName, uint32_t PeerTargetNameLen, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(PeerTargetName);
        ORBIT_TRACK_PARAM(PeerTargetNameLen);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(CompletionRoutine);

        auto win32_impl_result = g_api_table.WSASetSocketPeerTargetName(Socket, PeerTargetName, PeerTargetNameLen, Overlapped, CompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSADeleteSocketPeerTargetName(win32::Windows::Win32::Networking::WinSock::SOCKET Socket, win32::Windows::Win32::Networking::WinSock::SOCKADDR* PeerAddr, uint32_t PeerAddrLen, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Networking::WinSock::LPWSAOVERLAPPED_COMPLETION_ROUTINE* CompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(PeerAddr);
        ORBIT_TRACK_PARAM(PeerAddrLen);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(CompletionRoutine);

        auto win32_impl_result = g_api_table.WSADeleteSocketPeerTargetName(Socket, PeerAddr, PeerAddrLen, Overlapped, CompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSAImpersonateSocketPeer(win32::Windows::Win32::Networking::WinSock::SOCKET Socket, win32::Windows::Win32::Networking::WinSock::SOCKADDR* PeerAddr, uint32_t PeerAddrLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(PeerAddr);
        ORBIT_TRACK_PARAM(PeerAddrLen);

        auto win32_impl_result = g_api_table.WSAImpersonateSocketPeer(Socket, PeerAddr, PeerAddrLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSARevertImpersonation() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WSARevertImpersonation();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetSocketMediaStreamingMode(win32::Windows::Win32::Foundation::BOOL value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(value);

        auto win32_impl_result = g_api_table.SetSocketMediaStreamingMode(value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCWriteProviderOrder(uint32_t* lpwdCatalogEntryId, uint32_t dwNumberOfEntries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpwdCatalogEntryId);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);

        auto win32_impl_result = g_api_table.WSCWriteProviderOrder(lpwdCatalogEntryId, dwNumberOfEntries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCWriteProviderOrder32(uint32_t* lpwdCatalogEntryId, uint32_t dwNumberOfEntries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpwdCatalogEntryId);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);

        auto win32_impl_result = g_api_table.WSCWriteProviderOrder32(lpwdCatalogEntryId, dwNumberOfEntries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCWriteNameSpaceOrder(::win32::guid* lpProviderId, uint32_t dwNumberOfEntries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);

        auto win32_impl_result = g_api_table.WSCWriteNameSpaceOrder(lpProviderId, dwNumberOfEntries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_WSCWriteNameSpaceOrder32(::win32::guid* lpProviderId, uint32_t dwNumberOfEntries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpProviderId);
        ORBIT_TRACK_PARAM(dwNumberOfEntries);

        auto win32_impl_result = g_api_table.WSCWriteNameSpaceOrder32(lpProviderId, dwNumberOfEntries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
