// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Networking_WindowsWebServices_2_H
#define WIN32_Windows_Win32_Networking_WindowsWebServices_2_H
#include "win32/Windows.Win32.Networking.WindowsWebServices.h"
#include "win32/impl/Windows.Win32.Networking.WindowsWebServices.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Networking::WindowsWebServices
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsStartReaderCanonicalization(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_CALLBACK* writeCallback, void* writeCallbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_CANONICALIZATION_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(writeCallback);
        ORBIT_TRACK_PARAM(writeCallbackState);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsStartReaderCanonicalization(reader, writeCallback, writeCallbackState, properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsEndReaderCanonicalization(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsEndReaderCanonicalization(reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsStartWriterCanonicalization(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_CALLBACK* writeCallback, void* writeCallbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_CANONICALIZATION_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(writeCallback);
        ORBIT_TRACK_PARAM(writeCallbackState);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsStartWriterCanonicalization(writer, writeCallback, writeCallbackState, properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsEndWriterCanonicalization(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsEndWriterCanonicalization(writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateXmlBuffer(win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER** buffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateXmlBuffer(heap, properties, propertyCount, buffer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRemoveNode(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE_POSITION* nodePosition, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nodePosition);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRemoveNode(nodePosition, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateReader(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER** reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateReader(properties, propertyCount, reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetInput(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_ENCODING* encoding, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_INPUT* input, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(encoding);
        ORBIT_TRACK_PARAM(input);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetInput(reader, encoding, input, properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetInputToBuffer(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER* buffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetInputToBuffer(reader, buffer, properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeReader(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);

        g_api_table.WsFreeReader(reader);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetReaderProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetReaderProperty(reader, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetReaderNode(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* xmlReader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE** node, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(xmlReader);
        ORBIT_TRACK_PARAM(node);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetReaderNode(xmlReader, node, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsFillReader(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, uint32_t minSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(minSize);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsFillReader(reader, minSize, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadStartElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadStartElement(reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadToStartElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Foundation::BOOL* found, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(found);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadToStartElement(reader, localName, ns, found, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadStartAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, uint32_t attributeIndex, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(attributeIndex);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadStartAttribute(reader, attributeIndex, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadEndAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadEndAttribute(reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadNode(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadNode(reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSkipNode(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSkipNode(reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadEndElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadEndElement(reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsFindAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Foundation::BOOL required, uint32_t* attributeIndex, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(required);
        ORBIT_TRACK_PARAM(attributeIndex);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsFindAttribute(reader, localName, ns, required, attributeIndex, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadValue(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_VALUE_TYPE valueType, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadValue(reader, valueType, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadChars(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Foundation::PWSTR chars, uint32_t maxCharCount, uint32_t* actualCharCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(chars);
        ORBIT_TRACK_PARAM(maxCharCount);
        ORBIT_TRACK_PARAM(actualCharCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadChars(reader, chars, maxCharCount, actualCharCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadCharsUtf8(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, uint8_t* bytes, uint32_t maxByteCount, uint32_t* actualByteCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(bytes);
        ORBIT_TRACK_PARAM(maxByteCount);
        ORBIT_TRACK_PARAM(actualByteCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadCharsUtf8(reader, bytes, maxByteCount, actualByteCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadBytes(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, void* bytes, uint32_t maxByteCount, uint32_t* actualByteCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(bytes);
        ORBIT_TRACK_PARAM(maxByteCount);
        ORBIT_TRACK_PARAM(actualByteCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadBytes(reader, bytes, maxByteCount, actualByteCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadArray(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Networking::WindowsWebServices::WS_VALUE_TYPE valueType, void* array, uint32_t arraySize, uint32_t itemOffset, uint32_t itemCount, uint32_t* actualItemCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(array);
        ORBIT_TRACK_PARAM(arraySize);
        ORBIT_TRACK_PARAM(itemOffset);
        ORBIT_TRACK_PARAM(itemCount);
        ORBIT_TRACK_PARAM(actualItemCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadArray(reader, localName, ns, valueType, array, arraySize, itemOffset, itemCount, actualItemCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetReaderPosition(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE_POSITION* nodePosition, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(nodePosition);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetReaderPosition(reader, nodePosition, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetReaderPosition(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE_POSITION* nodePosition, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(nodePosition);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetReaderPosition(reader, nodePosition, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsMoveReader(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_MOVE_TO moveTo, win32::Windows::Win32::Foundation::BOOL* found, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(moveTo);
        ORBIT_TRACK_PARAM(found);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsMoveReader(reader, moveTo, found, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateWriter(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER** writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateWriter(properties, propertyCount, writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeWriter(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);

        g_api_table.WsFreeWriter(writer);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetOutput(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_ENCODING* encoding, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_OUTPUT* output, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(encoding);
        ORBIT_TRACK_PARAM(output);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetOutput(writer, encoding, output, properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetOutputToBuffer(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER* buffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetOutputToBuffer(writer, buffer, properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetWriterProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetWriterProperty(writer, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsFlushWriter(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, uint32_t minSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(minSize);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsFlushWriter(writer, minSize, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteStartElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* prefix, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteStartElement(writer, prefix, localName, ns, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteEndStartElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteEndStartElement(writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteXmlnsAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* prefix, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Foundation::BOOL singleQuote, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(singleQuote);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteXmlnsAttribute(writer, prefix, ns, singleQuote, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteStartAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* prefix, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Foundation::BOOL singleQuote, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(singleQuote);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteStartAttribute(writer, prefix, localName, ns, singleQuote, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteEndAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteEndAttribute(writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteValue(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_VALUE_TYPE valueType, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteValue(writer, valueType, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteXmlBuffer(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER* xmlBuffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(xmlBuffer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteXmlBuffer(writer, xmlBuffer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadXmlBuffer(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER** xmlBuffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(xmlBuffer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadXmlBuffer(reader, heap, xmlBuffer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteXmlBufferToBytes(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER* xmlBuffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_ENCODING* encoding, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void** bytes, uint32_t* byteCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(xmlBuffer);
        ORBIT_TRACK_PARAM(encoding);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(bytes);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteXmlBufferToBytes(writer, xmlBuffer, encoding, properties, propertyCount, heap, bytes, byteCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadXmlBufferFromBytes(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_ENCODING* encoding, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER_PROPERTY* properties, uint32_t propertyCount, void* bytes, uint32_t byteCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER** xmlBuffer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(encoding);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(bytes);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(xmlBuffer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadXmlBufferFromBytes(reader, encoding, properties, propertyCount, bytes, byteCount, heap, xmlBuffer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteArray(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Networking::WindowsWebServices::WS_VALUE_TYPE valueType, void* array, uint32_t arraySize, uint32_t itemOffset, uint32_t itemCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(array);
        ORBIT_TRACK_PARAM(arraySize);
        ORBIT_TRACK_PARAM(itemOffset);
        ORBIT_TRACK_PARAM(itemCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteArray(writer, localName, ns, valueType, array, arraySize, itemOffset, itemCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteQualifiedName(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* prefix, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteQualifiedName(writer, prefix, localName, ns, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteChars(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Foundation::PWSTR chars, uint32_t charCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(chars);
        ORBIT_TRACK_PARAM(charCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteChars(writer, chars, charCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteCharsUtf8(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, uint8_t* bytes, uint32_t byteCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(bytes);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteCharsUtf8(writer, bytes, byteCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteBytes(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, void* bytes, uint32_t byteCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(bytes);
        ORBIT_TRACK_PARAM(byteCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteBytes(writer, bytes, byteCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsPushBytes(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_PUSH_BYTES_CALLBACK* callback, void* callbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(callbackState);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsPushBytes(writer, callback, callbackState, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsPullBytes(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_PULL_BYTES_CALLBACK* callback, void* callbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(callbackState);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsPullBytes(writer, callback, callbackState, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteEndElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteEndElement(writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteText(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_TEXT* text, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(text);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteText(writer, text, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteStartCData(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteStartCData(writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteEndCData(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteEndCData(writer, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteNode(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE* node, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(node);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteNode(writer, node, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetPrefixFromNamespace(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Foundation::BOOL required, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING** prefix, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(required);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetPrefixFromNamespace(writer, ns, required, prefix, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetWriterPosition(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE_POSITION* nodePosition, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(nodePosition);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetWriterPosition(writer, nodePosition, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetWriterPosition(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE_POSITION* nodePosition, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(nodePosition);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetWriterPosition(writer, nodePosition, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsMoveWriter(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_MOVE_TO moveTo, win32::Windows::Win32::Foundation::BOOL* found, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(moveTo);
        ORBIT_TRACK_PARAM(found);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsMoveWriter(writer, moveTo, found, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsTrimXmlWhitespace(win32::Windows::Win32::Foundation::PWSTR chars, uint32_t charCount, uint16_t** trimmedChars, uint32_t* trimmedCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(chars);
        ORBIT_TRACK_PARAM(charCount);
        ORBIT_TRACK_PARAM(trimmedChars);
        ORBIT_TRACK_PARAM(trimmedCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsTrimXmlWhitespace(chars, charCount, trimmedChars, trimmedCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsVerifyXmlNCName(win32::Windows::Win32::Foundation::PWSTR ncNameChars, uint32_t ncNameCharCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ncNameChars);
        ORBIT_TRACK_PARAM(ncNameCharCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsVerifyXmlNCName(ncNameChars, ncNameCharCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsXmlStringEquals(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* string1, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* string2, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(string1);
        ORBIT_TRACK_PARAM(string2);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsXmlStringEquals(string1, string2, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetNamespaceFromPrefix(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* prefix, win32::Windows::Win32::Foundation::BOOL required, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING** ns, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(required);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetNamespaceFromPrefix(reader, prefix, required, ns, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadQualifiedName(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* prefix, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* ns, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(prefix);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(ns);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadQualifiedName(reader, heap, prefix, localName, ns, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetXmlAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* localName, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, uint16_t** valueChars, uint32_t* valueCharCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(localName);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(valueChars);
        ORBIT_TRACK_PARAM(valueCharCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetXmlAttribute(reader, localName, heap, valueChars, valueCharCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCopyNode(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCopyNode(writer, reader, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAsyncExecute(win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_STATE* asyncState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_FUNCTION* operation, win32::Windows::Win32::Networking::WindowsWebServices::WS_CALLBACK_MODEL callbackModel, void* callbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(asyncState);
        ORBIT_TRACK_PARAM(operation);
        ORBIT_TRACK_PARAM(callbackModel);
        ORBIT_TRACK_PARAM(callbackState);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAsyncExecute(asyncState, operation, callbackModel, callbackState, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_TYPE channelType, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_BINDING channelBinding, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_DESCRIPTION* securityDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL** channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channelType);
        ORBIT_TRACK_PARAM(channelBinding);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(securityDescription);
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateChannel(channelType, channelBinding, properties, propertyCount, securityDescription, channel, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsOpenChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ENDPOINT_ADDRESS* endpointAddress, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(endpointAddress);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsOpenChannel(channel, endpointAddress, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSendMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DESCRIPTION* messageDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* bodyValue, uint32_t bodyValueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(messageDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(bodyValue);
        ORBIT_TRACK_PARAM(bodyValueSize);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSendMessage(channel, message, messageDescription, writeOption, bodyValue, bodyValueSize, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReceiveMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DESCRIPTION** messageDescriptions, uint32_t messageDescriptionCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_RECEIVE_OPTION receiveOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readBodyOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, uint32_t* index, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(messageDescriptions);
        ORBIT_TRACK_PARAM(messageDescriptionCount);
        ORBIT_TRACK_PARAM(receiveOption);
        ORBIT_TRACK_PARAM(readBodyOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(index);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReceiveMessage(channel, message, messageDescriptions, messageDescriptionCount, receiveOption, readBodyOption, heap, value, valueSize, index, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRequestReply(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* requestMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DESCRIPTION* requestMessageDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* requestBodyValue, uint32_t requestBodyValueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* replyMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DESCRIPTION* replyMessageDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(requestMessage);
        ORBIT_TRACK_PARAM(requestMessageDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(requestBodyValue);
        ORBIT_TRACK_PARAM(requestBodyValueSize);
        ORBIT_TRACK_PARAM(replyMessage);
        ORBIT_TRACK_PARAM(replyMessageDescription);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRequestReply(channel, requestMessage, requestMessageDescription, writeOption, requestBodyValue, requestBodyValueSize, replyMessage, replyMessageDescription, readOption, heap, value, valueSize, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSendReplyMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* replyMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DESCRIPTION* replyMessageDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* replyBodyValue, uint32_t replyBodyValueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* requestMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(replyMessage);
        ORBIT_TRACK_PARAM(replyMessageDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(replyBodyValue);
        ORBIT_TRACK_PARAM(replyBodyValueSize);
        ORBIT_TRACK_PARAM(requestMessage);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSendReplyMessage(channel, replyMessage, replyMessageDescription, writeOption, replyBodyValue, replyBodyValueSize, requestMessage, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSendFaultMessageForError(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* replyMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* faultError, win32::Windows::Win32::Foundation::HRESULT faultErrorCode, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT_DISCLOSURE faultDisclosure, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* requestMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(replyMessage);
        ORBIT_TRACK_PARAM(faultError);
        ORBIT_TRACK_PARAM(faultErrorCode);
        ORBIT_TRACK_PARAM(faultDisclosure);
        ORBIT_TRACK_PARAM(requestMessage);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSendFaultMessageForError(channel, replyMessage, faultError, faultErrorCode, faultDisclosure, requestMessage, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetChannelProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetChannelProperty(channel, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetChannelProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetChannelProperty(channel, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteMessageStart(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteMessageStart(channel, message, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteMessageEnd(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteMessageEnd(channel, message, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadMessageStart(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadMessageStart(channel, message, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadMessageEnd(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadMessageEnd(channel, message, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCloseChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCloseChannel(channel, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAbortChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAbortChannel(channel, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);

        g_api_table.WsFreeChannel(channel);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetChannel(channel, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAbandonMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAbandonMessage(channel, message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsShutdownSessionChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsShutdownSessionChannel(channel, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetOperationContextProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_OPERATION_CONTEXT* context, win32::Windows::Win32::Networking::WindowsWebServices::WS_OPERATION_CONTEXT_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetOperationContextProperty(context, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetDictionary(win32::Windows::Win32::Networking::WindowsWebServices::WS_ENCODING encoding, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_DICTIONARY** dictionary, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(encoding);
        ORBIT_TRACK_PARAM(dictionary);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetDictionary(encoding, dictionary, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadEndpointAddressExtension(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ENDPOINT_ADDRESS* endpointAddress, win32::Windows::Win32::Networking::WindowsWebServices::WS_ENDPOINT_ADDRESS_EXTENSION_TYPE extensionType, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(endpointAddress);
        ORBIT_TRACK_PARAM(extensionType);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadEndpointAddressExtension(reader, endpointAddress, extensionType, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateError(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR** error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateError(properties, propertyCount, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAddErrorString(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* string) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(string);

        auto win32_impl_result = g_api_table.WsAddErrorString(error, string);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetErrorString(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, uint32_t index, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* string) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(index);
        ORBIT_TRACK_PARAM(string);

        auto win32_impl_result = g_api_table.WsGetErrorString(error, index, string);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCopyError(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* source, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* destination) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(source);
        ORBIT_TRACK_PARAM(destination);

        auto win32_impl_result = g_api_table.WsCopyError(source, destination);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetErrorProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR_PROPERTY_ID id, void* buffer, uint32_t bufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferSize);

        auto win32_impl_result = g_api_table.WsGetErrorProperty(error, id, buffer, bufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetErrorProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR_PROPERTY_ID id, void* value, uint32_t valueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);

        auto win32_impl_result = g_api_table.WsSetErrorProperty(error, id, value, valueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetError(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetError(error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeError(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);

        g_api_table.WsFreeError(error);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetFaultErrorProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT_ERROR_PROPERTY_ID id, void* buffer, uint32_t bufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(bufferSize);

        auto win32_impl_result = g_api_table.WsGetFaultErrorProperty(error, id, buffer, bufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetFaultErrorProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT_ERROR_PROPERTY_ID id, void* value, uint32_t valueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);

        auto win32_impl_result = g_api_table.WsSetFaultErrorProperty(error, id, value, valueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateFaultFromError(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Foundation::HRESULT faultErrorCode, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT_DISCLOSURE faultDisclosure, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT* fault) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(faultErrorCode);
        ORBIT_TRACK_PARAM(faultDisclosure);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(fault);

        auto win32_impl_result = g_api_table.WsCreateFaultFromError(error, faultErrorCode, faultDisclosure, heap, fault);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetFaultErrorDetail(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(faultDetailDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);

        auto win32_impl_result = g_api_table.WsSetFaultErrorDetail(error, faultDetailDescription, writeOption, value, valueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetFaultErrorDetail(win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error, win32::Windows::Win32::Networking::WindowsWebServices::WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(error);
        ORBIT_TRACK_PARAM(faultDetailDescription);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);

        auto win32_impl_result = g_api_table.WsGetFaultErrorDetail(error, faultDetailDescription, readOption, heap, value, valueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateHeap(size_t maxSize, size_t trimSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP** heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(maxSize);
        ORBIT_TRACK_PARAM(trimSize);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateHeap(maxSize, trimSize, properties, propertyCount, heap, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAlloc(win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, size_t size, void** ptr, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(ptr);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAlloc(heap, size, ptr, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetHeapProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetHeapProperty(heap, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetHeap(win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetHeap(heap, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeHeap(win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(heap);

        g_api_table.WsFreeHeap(heap);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_TYPE channelType, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_BINDING channelBinding, win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_DESCRIPTION* securityDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER** listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channelType);
        ORBIT_TRACK_PARAM(channelBinding);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(securityDescription);
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateListener(channelType, channelBinding, properties, propertyCount, securityDescription, listener, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsOpenListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* url, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(url);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsOpenListener(listener, url, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAcceptChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAcceptChannel(listener, channel, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCloseListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCloseListener(listener, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAbortListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAbortListener(listener, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetListener(listener, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);

        g_api_table.WsFreeListener(listener);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetListenerProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetListenerProperty(listener, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetListenerProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetListenerProperty(listener, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateChannelForListener(win32::Windows::Win32::Networking::WindowsWebServices::WS_LISTENER* listener, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL** channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(listener);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateChannelForListener(listener, properties, propertyCount, channel, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_ENVELOPE_VERSION envelopeVersion, win32::Windows::Win32::Networking::WindowsWebServices::WS_ADDRESSING_VERSION addressingVersion, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE** message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(envelopeVersion);
        ORBIT_TRACK_PARAM(addressingVersion);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateMessage(envelopeVersion, addressingVersion, properties, propertyCount, message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateMessageForChannel(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE** message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateMessageForChannel(channel, properties, propertyCount, message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsInitializeMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_INITIALIZATION initialization, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* sourceMessage, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(initialization);
        ORBIT_TRACK_PARAM(sourceMessage);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsInitializeMessage(message, initialization, sourceMessage, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetMessage(message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);

        g_api_table.WsFreeMessage(message);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetHeaderAttributes(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, uint32_t* headerAttributes, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(headerAttributes);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetHeaderAttributes(message, reader, headerAttributes, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEADER_TYPE headerType, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE valueType, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerType);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetHeader(message, headerType, valueType, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetCustomHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ELEMENT_DESCRIPTION* customHeaderDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_REPEATING_HEADER_OPTION repeatingOption, uint32_t headerIndex, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, uint32_t* headerAttributes, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(customHeaderDescription);
        ORBIT_TRACK_PARAM(repeatingOption);
        ORBIT_TRACK_PARAM(headerIndex);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(headerAttributes);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetCustomHeader(message, customHeaderDescription, repeatingOption, headerIndex, readOption, heap, value, valueSize, headerAttributes, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRemoveHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEADER_TYPE headerType, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerType);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRemoveHeader(message, headerType, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEADER_TYPE headerType, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE valueType, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerType);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetHeader(message, headerType, valueType, writeOption, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRemoveCustomHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* headerName, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* headerNs, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerName);
        ORBIT_TRACK_PARAM(headerNs);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRemoveCustomHeader(message, headerName, headerNs, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAddCustomHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ELEMENT_DESCRIPTION* headerDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, uint32_t headerAttributes, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(headerAttributes);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAddCustomHeader(message, headerDescription, writeOption, value, valueSize, headerAttributes, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAddMappedHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* headerName, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE valueType, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerName);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAddMappedHeader(message, headerName, valueType, writeOption, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRemoveMappedHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* headerName, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerName);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRemoveMappedHeader(message, headerName, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetMappedHeader(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_STRING* headerName, win32::Windows::Win32::Networking::WindowsWebServices::WS_REPEATING_HEADER_OPTION repeatingOption, uint32_t headerIndex, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE valueType, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerName);
        ORBIT_TRACK_PARAM(repeatingOption);
        ORBIT_TRACK_PARAM(headerIndex);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetMappedHeader(message, headerName, repeatingOption, headerIndex, valueType, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteBody(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ELEMENT_DESCRIPTION* bodyDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(bodyDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteBody(message, bodyDescription, writeOption, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadBody(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ELEMENT_DESCRIPTION* bodyDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(bodyDescription);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadBody(message, bodyDescription, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteEnvelopeStart(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DONE_CALLBACK* doneCallback, void* doneCallbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(doneCallback);
        ORBIT_TRACK_PARAM(doneCallbackState);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteEnvelopeStart(message, writer, doneCallback, doneCallbackState, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteEnvelopeEnd(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteEnvelopeEnd(message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadEnvelopeStart(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_DONE_CALLBACK* doneCallback, void* doneCallbackState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(doneCallback);
        ORBIT_TRACK_PARAM(doneCallbackState);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadEnvelopeStart(message, reader, doneCallback, doneCallbackState, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadEnvelopeEnd(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadEnvelopeEnd(message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetMessageProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetMessageProperty(message, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsSetMessageProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsSetMessageProperty(message, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAddressMessage(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ENDPOINT_ADDRESS* address, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(address);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAddressMessage(message, address, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCheckMustUnderstandHeaders(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCheckMustUnderstandHeaders(message, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsMarkHeaderAsUnderstood(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_NODE_POSITION* headerPosition, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(headerPosition);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsMarkHeaderAsUnderstood(message, headerPosition, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsFillBody(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, uint32_t minSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(minSize);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsFillBody(message, minSize, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsFlushBody(win32::Windows::Win32::Networking::WindowsWebServices::WS_MESSAGE* message, uint32_t minSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(message);
        ORBIT_TRACK_PARAM(minSize);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsFlushBody(message, minSize, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRequestSecurityToken(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL* channel, win32::Windows::Win32::Networking::WindowsWebServices::WS_REQUEST_SECURITY_TOKEN_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_TOKEN** token, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channel);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(token);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRequestSecurityToken(channel, properties, propertyCount, token, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetSecurityTokenProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_TOKEN* securityToken, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_TOKEN_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(securityToken);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetSecurityTokenProperty(securityToken, id, value, valueSize, heap, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateXmlSecurityToken(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_BUFFER* tokenXml, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_KEY_HANDLE* tokenKey, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_SECURITY_TOKEN_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_TOKEN** token, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tokenXml);
        ORBIT_TRACK_PARAM(tokenKey);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(token);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateXmlSecurityToken(tokenXml, tokenKey, properties, propertyCount, token, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeSecurityToken(win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_TOKEN* token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(token);

        g_api_table.WsFreeSecurityToken(token);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRevokeSecurityContext(win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_CONTEXT* securityContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(securityContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRevokeSecurityContext(securityContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetSecurityContextProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_CONTEXT* securityContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_CONTEXT_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(securityContext);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetSecurityContextProperty(securityContext, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ELEMENT_DESCRIPTION* elementDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(elementDescription);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadElement(reader, elementDescription, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_ATTRIBUTE_DESCRIPTION* attributeDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(attributeDescription);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadAttribute(reader, attributeDescription, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadType(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE_MAPPING typeMapping, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE type, void* typeDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_READ_OPTION readOption, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(typeMapping);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(typeDescription);
        ORBIT_TRACK_PARAM(readOption);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadType(reader, typeMapping, type, typeDescription, readOption, heap, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteElement(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ELEMENT_DESCRIPTION* elementDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(elementDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteElement(writer, elementDescription, writeOption, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteAttribute(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_ATTRIBUTE_DESCRIPTION* attributeDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(attributeDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteAttribute(writer, attributeDescription, writeOption, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsWriteType(win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_WRITER* writer, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE_MAPPING typeMapping, win32::Windows::Win32::Networking::WindowsWebServices::WS_TYPE type, void* typeDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_WRITE_OPTION writeOption, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(writer);
        ORBIT_TRACK_PARAM(typeMapping);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(typeDescription);
        ORBIT_TRACK_PARAM(writeOption);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsWriteType(writer, typeMapping, type, typeDescription, writeOption, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsRegisterOperationForCancel(win32::Windows::Win32::Networking::WindowsWebServices::WS_OPERATION_CONTEXT* context, win32::Windows::Win32::Networking::WindowsWebServices::WS_OPERATION_CANCEL_CALLBACK* cancelCallback, win32::Windows::Win32::Networking::WindowsWebServices::WS_OPERATION_FREE_STATE_CALLBACK* freestateCallback, void* userState, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(context);
        ORBIT_TRACK_PARAM(cancelCallback);
        ORBIT_TRACK_PARAM(freestateCallback);
        ORBIT_TRACK_PARAM(userState);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsRegisterOperationForCancel(context, cancelCallback, freestateCallback, userState, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetServiceHostProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST* serviceHost, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceHost);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetServiceHostProperty(serviceHost, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateServiceHost(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_ENDPOINT** endpoints, uint16_t endpointCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROPERTY* serviceProperties, uint32_t servicePropertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST** serviceHost, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(endpoints);
        ORBIT_TRACK_PARAM(endpointCount);
        ORBIT_TRACK_PARAM(serviceProperties);
        ORBIT_TRACK_PARAM(servicePropertyCount);
        ORBIT_TRACK_PARAM(serviceHost);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateServiceHost(endpoints, endpointCount, serviceProperties, servicePropertyCount, serviceHost, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsOpenServiceHost(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST* serviceHost, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceHost);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsOpenServiceHost(serviceHost, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCloseServiceHost(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST* serviceHost, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceHost);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCloseServiceHost(serviceHost, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAbortServiceHost(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST* serviceHost, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceHost);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAbortServiceHost(serviceHost, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeServiceHost(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST* serviceHost) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceHost);

        g_api_table.WsFreeServiceHost(serviceHost);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetServiceHost(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_HOST* serviceHost, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceHost);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetServiceHost(serviceHost, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetServiceProxyProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_PROXY_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetServiceProxyProperty(serviceProxy, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateServiceProxy(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_TYPE channelType, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_BINDING channelBinding, win32::Windows::Win32::Networking::WindowsWebServices::WS_SECURITY_DESCRIPTION* securityDescription, win32::Windows::Win32::Networking::WindowsWebServices::WS_PROXY_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_PROPERTY* channelProperties, uint32_t channelPropertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY** serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channelType);
        ORBIT_TRACK_PARAM(channelBinding);
        ORBIT_TRACK_PARAM(securityDescription);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(channelProperties);
        ORBIT_TRACK_PARAM(channelPropertyCount);
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateServiceProxy(channelType, channelBinding, securityDescription, properties, propertyCount, channelProperties, channelPropertyCount, serviceProxy, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsOpenServiceProxy(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_ENDPOINT_ADDRESS* address, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(address);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsOpenServiceProxy(serviceProxy, address, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCloseServiceProxy(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCloseServiceProxy(serviceProxy, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAbortServiceProxy(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAbortServiceProxy(serviceProxy, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeServiceProxy(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);

        g_api_table.WsFreeServiceProxy(serviceProxy);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetServiceProxy(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetServiceProxy(serviceProxy, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsAbandonCall(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, uint32_t callId, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(callId);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsAbandonCall(serviceProxy, callId, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCall(win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY* serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_OPERATION_DESCRIPTION* operation, void** arguments, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_CALL_PROPERTY* callProperties, uint32_t callPropertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_ASYNC_CONTEXT* asyncContext, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(operation);
        ORBIT_TRACK_PARAM(arguments);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(callProperties);
        ORBIT_TRACK_PARAM(callPropertyCount);
        ORBIT_TRACK_PARAM(asyncContext);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCall(serviceProxy, operation, arguments, heap, callProperties, callPropertyCount, asyncContext, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsDecodeUrl(win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* url, uint32_t flags, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_URL** outUrl, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(url);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(outUrl);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsDecodeUrl(url, flags, heap, outUrl, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsEncodeUrl(win32::Windows::Win32::Networking::WindowsWebServices::WS_URL* url, uint32_t flags, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* outUrl, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(url);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(outUrl);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsEncodeUrl(url, flags, heap, outUrl, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCombineUrl(win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* baseUrl, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* referenceUrl, uint32_t flags, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* resultUrl, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(baseUrl);
        ORBIT_TRACK_PARAM(referenceUrl);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(resultUrl);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCombineUrl(baseUrl, referenceUrl, flags, heap, resultUrl, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsDateTimeToFileTime(win32::Windows::Win32::Networking::WindowsWebServices::WS_DATETIME* dateTime, win32::Windows::Win32::Foundation::FILETIME* fileTime, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dateTime);
        ORBIT_TRACK_PARAM(fileTime);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsDateTimeToFileTime(dateTime, fileTime, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsFileTimeToDateTime(win32::Windows::Win32::Foundation::FILETIME* fileTime, win32::Windows::Win32::Networking::WindowsWebServices::WS_DATETIME* dateTime, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileTime);
        ORBIT_TRACK_PARAM(dateTime);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsFileTimeToDateTime(fileTime, dateTime, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateMetadata(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA** metadata, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(metadata);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateMetadata(properties, propertyCount, metadata, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsReadMetadata(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA* metadata, win32::Windows::Win32::Networking::WindowsWebServices::WS_XML_READER* reader, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* url, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(metadata);
        ORBIT_TRACK_PARAM(reader);
        ORBIT_TRACK_PARAM(url);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsReadMetadata(metadata, reader, url, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WsFreeMetadata(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA* metadata) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(metadata);

        g_api_table.WsFreeMetadata(metadata);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsResetMetadata(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA* metadata, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(metadata);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsResetMetadata(metadata, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetMetadataProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA* metadata, win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(metadata);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetMetadataProperty(metadata, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetMissingMetadataDocumentAddress(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA* metadata, win32::Windows::Win32::Networking::WindowsWebServices::WS_ENDPOINT_ADDRESS** address, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(metadata);
        ORBIT_TRACK_PARAM(address);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetMissingMetadataDocumentAddress(metadata, address, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetMetadataEndpoints(win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA* metadata, win32::Windows::Win32::Networking::WindowsWebServices::WS_METADATA_ENDPOINTS* endpoints, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(metadata);
        ORBIT_TRACK_PARAM(endpoints);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetMetadataEndpoints(metadata, endpoints, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsMatchPolicyAlternative(win32::Windows::Win32::Networking::WindowsWebServices::WS_POLICY* policy, uint32_t alternativeIndex, win32::Windows::Win32::Networking::WindowsWebServices::WS_POLICY_CONSTRAINTS* policyConstraints, win32::Windows::Win32::Foundation::BOOL matchRequired, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(alternativeIndex);
        ORBIT_TRACK_PARAM(policyConstraints);
        ORBIT_TRACK_PARAM(matchRequired);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsMatchPolicyAlternative(policy, alternativeIndex, policyConstraints, matchRequired, heap, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetPolicyProperty(win32::Windows::Win32::Networking::WindowsWebServices::WS_POLICY* policy, win32::Windows::Win32::Networking::WindowsWebServices::WS_POLICY_PROPERTY_ID id, void* value, uint32_t valueSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(value);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetPolicyProperty(policy, id, value, valueSize, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsGetPolicyAlternativeCount(win32::Windows::Win32::Networking::WindowsWebServices::WS_POLICY* policy, uint32_t* count, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(policy);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsGetPolicyAlternativeCount(policy, count, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateServiceProxyFromTemplate(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_TYPE channelType, win32::Windows::Win32::Networking::WindowsWebServices::WS_PROXY_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_BINDING_TEMPLATE_TYPE templateType, void* templateValue, uint32_t templateSize, void* templateDescription, uint32_t templateDescriptionSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_PROXY** serviceProxy, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channelType);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(templateType);
        ORBIT_TRACK_PARAM(templateValue);
        ORBIT_TRACK_PARAM(templateSize);
        ORBIT_TRACK_PARAM(templateDescription);
        ORBIT_TRACK_PARAM(templateDescriptionSize);
        ORBIT_TRACK_PARAM(serviceProxy);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateServiceProxyFromTemplate(channelType, properties, propertyCount, templateType, templateValue, templateSize, templateDescription, templateDescriptionSize, serviceProxy, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WsCreateServiceEndpointFromTemplate(win32::Windows::Win32::Networking::WindowsWebServices::WS_CHANNEL_TYPE channelType, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_ENDPOINT_PROPERTY* properties, uint32_t propertyCount, win32::Windows::Win32::Networking::WindowsWebServices::WS_STRING* addressUrl, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_CONTRACT* contract, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_SECURITY_CALLBACK* authorizationCallback, win32::Windows::Win32::Networking::WindowsWebServices::WS_HEAP* heap, win32::Windows::Win32::Networking::WindowsWebServices::WS_BINDING_TEMPLATE_TYPE templateType, void* templateValue, uint32_t templateSize, void* templateDescription, uint32_t templateDescriptionSize, win32::Windows::Win32::Networking::WindowsWebServices::WS_SERVICE_ENDPOINT** serviceEndpoint, win32::Windows::Win32::Networking::WindowsWebServices::WS_ERROR* error) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(channelType);
        ORBIT_TRACK_PARAM(properties);
        ORBIT_TRACK_PARAM(propertyCount);
        ORBIT_TRACK_PARAM(addressUrl);
        ORBIT_TRACK_PARAM(contract);
        ORBIT_TRACK_PARAM(authorizationCallback);
        ORBIT_TRACK_PARAM(heap);
        ORBIT_TRACK_PARAM(templateType);
        ORBIT_TRACK_PARAM(templateValue);
        ORBIT_TRACK_PARAM(templateSize);
        ORBIT_TRACK_PARAM(templateDescription);
        ORBIT_TRACK_PARAM(templateDescriptionSize);
        ORBIT_TRACK_PARAM(serviceEndpoint);
        ORBIT_TRACK_PARAM(error);

        auto win32_impl_result = g_api_table.WsCreateServiceEndpointFromTemplate(channelType, properties, propertyCount, addressUrl, contract, authorizationCallback, heap, templateType, templateValue, templateSize, templateDescription, templateDescriptionSize, serviceEndpoint, error);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WebAuthNGetApiVersionNumber() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.WebAuthNGetApiVersionNumber();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(win32::Windows::Win32::Foundation::BOOL* pbIsUserVerifyingPlatformAuthenticatorAvailable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbIsUserVerifyingPlatformAuthenticatorAvailable);

        auto win32_impl_result = g_api_table.WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(pbIsUserVerifyingPlatformAuthenticatorAvailable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WebAuthNAuthenticatorMakeCredential(win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_RP_ENTITY_INFORMATION* pRpInformation, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_USER_ENTITY_INFORMATION* pUserInformation, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_COSE_CREDENTIAL_PARAMETERS* pPubKeyCredParams, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_CLIENT_DATA* pWebAuthNClientData, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS* pWebAuthNMakeCredentialOptions, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_CREDENTIAL_ATTESTATION** ppWebAuthNCredentialAttestation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(pRpInformation);
        ORBIT_TRACK_PARAM(pUserInformation);
        ORBIT_TRACK_PARAM(pPubKeyCredParams);
        ORBIT_TRACK_PARAM(pWebAuthNClientData);
        ORBIT_TRACK_PARAM(pWebAuthNMakeCredentialOptions);
        ORBIT_TRACK_PARAM(ppWebAuthNCredentialAttestation);

        auto win32_impl_result = g_api_table.WebAuthNAuthenticatorMakeCredential(hWnd, pRpInformation, pUserInformation, pPubKeyCredParams, pWebAuthNClientData, pWebAuthNMakeCredentialOptions, ppWebAuthNCredentialAttestation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WebAuthNAuthenticatorGetAssertion(win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Foundation::PWSTR pwszRpId, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_CLIENT_DATA* pWebAuthNClientData, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS* pWebAuthNGetAssertionOptions, win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_ASSERTION** ppWebAuthNAssertion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(pwszRpId);
        ORBIT_TRACK_PARAM(pWebAuthNClientData);
        ORBIT_TRACK_PARAM(pWebAuthNGetAssertionOptions);
        ORBIT_TRACK_PARAM(ppWebAuthNAssertion);

        auto win32_impl_result = g_api_table.WebAuthNAuthenticatorGetAssertion(hWnd, pwszRpId, pWebAuthNClientData, pWebAuthNGetAssertionOptions, ppWebAuthNAssertion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WebAuthNFreeCredentialAttestation(win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_CREDENTIAL_ATTESTATION* pWebAuthNCredentialAttestation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pWebAuthNCredentialAttestation);

        g_api_table.WebAuthNFreeCredentialAttestation(pWebAuthNCredentialAttestation);
        
    }

    void __stdcall ORBIT_IMPL_WebAuthNFreeAssertion(win32::Windows::Win32::Networking::WindowsWebServices::WEBAUTHN_ASSERTION* pWebAuthNAssertion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pWebAuthNAssertion);

        g_api_table.WebAuthNFreeAssertion(pWebAuthNAssertion);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WebAuthNGetCancellationId(::win32::guid* pCancellationId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCancellationId);

        auto win32_impl_result = g_api_table.WebAuthNGetCancellationId(pCancellationId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WebAuthNCancelCurrentOperation(::win32::guid* pCancellationId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCancellationId);

        auto win32_impl_result = g_api_table.WebAuthNCancelCurrentOperation(pCancellationId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_WebAuthNGetErrorName(win32::Windows::Win32::Foundation::HRESULT hr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hr);

        auto win32_impl_result = g_api_table.WebAuthNGetErrorName(hr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WebAuthNGetW3CExceptionDOMError(win32::Windows::Win32::Foundation::HRESULT hr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hr);

        auto win32_impl_result = g_api_table.WebAuthNGetW3CExceptionDOMError(hr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
