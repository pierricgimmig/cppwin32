// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_Cryptography_0_H
#define WIN32_Windows_Win32_Security_Cryptography_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct FILETIME;
    struct HRESULT;
    struct HWND;
    struct LPARAM;
    struct PSTR;
    struct PWSTR;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
    struct NCRYPT_DESCRIPTOR_HANDLE;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security::Cryptography
{
#pragma region enums
    enum class BCRYPT_DH_KEY_BLOB_MAGIC : uint32_t
    {
        BCRYPT_DH_PUBLIC_MAGIC = 0x42504844,
        BCRYPT_DH_PRIVATE_MAGIC = 0x56504844,
    };
    enum class BCRYPT_DSA_MAGIC : uint32_t
    {
        BCRYPT_DSA_PUBLIC_MAGIC = 0x42505344,
        BCRYPT_DSA_PRIVATE_MAGIC = 0x56505344,
    };
    enum class BCRYPT_HASH_OPERATION_TYPE : int32_t
    {
        BCRYPT_HASH_OPERATION_HASH_DATA = 1,
        BCRYPT_HASH_OPERATION_FINISH_HASH = 2,
    };
    enum class BCRYPT_INTERFACE : uint32_t
    {
        BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 0x3,
        BCRYPT_CIPHER_INTERFACE = 0x1,
        BCRYPT_HASH_INTERFACE = 0x2,
        BCRYPT_RNG_INTERFACE = 0x6,
        BCRYPT_SECRET_AGREEMENT_INTERFACE = 0x4,
        BCRYPT_SIGNATURE_INTERFACE = 0x5,
        NCRYPT_KEY_STORAGE_INTERFACE = 0x10001,
        NCRYPT_SCHANNEL_INTERFACE = 0x10002,
        NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 0x10003,
    };
    enum class BCRYPT_MULTI_OPERATION_TYPE : int32_t
    {
        BCRYPT_OPERATION_TYPE_HASH = 1,
    };
    enum class BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS : uint32_t
    {
        BCRYPT_ALG_HANDLE_HMAC_FLAG = 0x8,
        BCRYPT_PROV_DISPATCH = 0x1,
        BCRYPT_HASH_REUSABLE_FLAG = 0x20,
    };
    enum class BCRYPT_OPERATION : uint32_t
    {
        BCRYPT_CIPHER_OPERATION = 0x1,
        BCRYPT_HASH_OPERATION = 0x2,
        BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 0x4,
        BCRYPT_SECRET_AGREEMENT_OPERATION = 0x8,
        BCRYPT_SIGNATURE_OPERATION = 0x10,
        BCRYPT_RNG_OPERATION = 0x20,
    };
    enum class BCRYPT_QUERY_PROVIDER_MODE : uint32_t
    {
        CRYPT_ANY = 0x4,
        CRYPT_UM = 0x1,
        CRYPT_KM = 0x2,
        CRYPT_MM = 0x3,
    };
    enum class BCRYPT_RESOLVE_PROVIDERS_FLAGS : uint32_t
    {
        CRYPT_ALL_FUNCTIONS = 0x1,
        CRYPT_ALL_PROVIDERS = 0x2,
    };
    enum class BCRYPT_RSAKEY_BLOB_MAGIC : uint32_t
    {
        BCRYPT_RSAPUBLIC_MAGIC = 0x31415352,
        BCRYPT_RSAPRIVATE_MAGIC = 0x32415352,
        BCRYPT_RSAFULLPRIVATE_MAGIC = 0x33415352,
    };
    enum class BCRYPT_TABLE : uint32_t
    {
        CRYPT_LOCAL = 0x1,
        CRYPT_DOMAIN = 0x2,
    };
    enum class CASetupProperty : int32_t
    {
        ENUM_SETUPPROP_INVALID = -1,
        ENUM_SETUPPROP_CATYPE = 0,
        ENUM_SETUPPROP_CAKEYINFORMATION = 1,
        ENUM_SETUPPROP_INTERACTIVE = 2,
        ENUM_SETUPPROP_CANAME = 3,
        ENUM_SETUPPROP_CADSSUFFIX = 4,
        ENUM_SETUPPROP_VALIDITYPERIOD = 5,
        ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6,
        ENUM_SETUPPROP_EXPIRATIONDATE = 7,
        ENUM_SETUPPROP_PRESERVEDATABASE = 8,
        ENUM_SETUPPROP_DATABASEDIRECTORY = 9,
        ENUM_SETUPPROP_LOGDIRECTORY = 10,
        ENUM_SETUPPROP_SHAREDFOLDER = 11,
        ENUM_SETUPPROP_PARENTCAMACHINE = 12,
        ENUM_SETUPPROP_PARENTCANAME = 13,
        ENUM_SETUPPROP_REQUESTFILE = 14,
        ENUM_SETUPPROP_WEBCAMACHINE = 15,
        ENUM_SETUPPROP_WEBCANAME = 16,
    };
    enum class CEPSetupProperty : int32_t
    {
        ENUM_CEPSETUPPROP_AUTHENTICATION = 0,
        ENUM_CEPSETUPPROP_SSLCERTHASH = 1,
        ENUM_CEPSETUPPROP_URL = 2,
        ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3,
    };
    enum class CERT_BIOMETRIC_DATA_TYPE : uint32_t
    {
        CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 0x1,
        CERT_BIOMETRIC_OID_DATA_CHOICE = 0x2,
    };
    enum class CERT_CHAIN_POLICY_FLAGS : uint32_t
    {
        CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 0x1,
        CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 0x2,
        CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 0x4,
        CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 0x7,
        CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 0x8,
        CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 0x10,
        CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 0x20,
        CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 0x40,
        CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 0x80,
        CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 0x100,
        CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 0x200,
        CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 0x400,
        CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 0x800,
        CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 0xf00,
        CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 0x8000,
        CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 0x4000,
        CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 0x2000,
        CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 0x1000,
    };
    enum class CERT_CONTROL_STORE_FLAGS : uint32_t
    {
        CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 0x1,
        CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 0x2,
        CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 0x1,
    };
    enum class CERT_CREATE_SELFSIGN_FLAGS : uint32_t
    {
        CERT_CREATE_SELFSIGN_NO_KEY_INFO = 0x2,
        CERT_CREATE_SELFSIGN_NO_SIGN = 0x1,
    };
    enum class CERT_FIND_CHAIN_IN_STORE_FLAGS : uint32_t
    {
        CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 0x1,
        CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 0x2,
        CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 0x8000,
        CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 0x4,
        CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 0x8,
        CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 0x4000,
    };
    enum class CERT_FIND_FLAGS : uint32_t
    {
        CERT_FIND_ANY = 0x0,
        CERT_FIND_CERT_ID = 0x100000,
        CERT_FIND_CTL_USAGE = 0xa0000,
        CERT_FIND_ENHKEY_USAGE = 0xa0000,
        CERT_FIND_EXISTING = 0xd0000,
        CERT_FIND_HASH = 0x10000,
        CERT_FIND_HAS_PRIVATE_KEY = 0x150000,
        CERT_FIND_ISSUER_ATTR = 0x30004,
        CERT_FIND_ISSUER_NAME = 0x20004,
        CERT_FIND_ISSUER_OF = 0xc0000,
        CERT_FIND_ISSUER_STR = 0x80004,
        CERT_FIND_KEY_IDENTIFIER = 0xf0000,
        CERT_FIND_KEY_SPEC = 0x90000,
        CERT_FIND_MD5_HASH = 0x40000,
        CERT_FIND_PROPERTY = 0x50000,
        CERT_FIND_PUBLIC_KEY = 0x60000,
        CERT_FIND_SHA1_HASH = 0x10000,
        CERT_FIND_SIGNATURE_HASH = 0xe0000,
        CERT_FIND_SUBJECT_ATTR = 0x30007,
        CERT_FIND_SUBJECT_CERT = 0xb0000,
        CERT_FIND_SUBJECT_NAME = 0x20007,
        CERT_FIND_SUBJECT_STR = 0x80007,
        CERT_FIND_CROSS_CERT_DIST_POINTS = 0x110000,
        CERT_FIND_PUBKEY_MD5_HASH = 0x120000,
        CERT_FIND_SUBJECT_STR_A = 0x70007,
        CERT_FIND_SUBJECT_STR_W = 0x80007,
        CERT_FIND_ISSUER_STR_A = 0x70004,
        CERT_FIND_ISSUER_STR_W = 0x80004,
        CERT_FIND_SUBJECT_INFO_ACCESS = 0x130000,
        CERT_FIND_HASH_STR = 0x140000,
        CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 0x1,
        CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 0x2,
        CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 0x4,
        CERT_FIND_NO_ENHKEY_USAGE_FLAG = 0x8,
        CERT_FIND_OR_ENHKEY_USAGE_FLAG = 0x10,
        CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 0x20,
        CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 0x1,
        CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 0x2,
        CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 0x4,
        CERT_FIND_NO_CTL_USAGE_FLAG = 0x8,
        CERT_FIND_OR_CTL_USAGE_FLAG = 0x10,
        CERT_FIND_VALID_CTL_USAGE_FLAG = 0x20,
    };
    enum class CERT_FIND_TYPE : uint32_t
    {
        CTL_FIND_ANY = 0x0,
        CTL_FIND_SHA1_HASH = 0x1,
        CTL_FIND_MD5_HASH = 0x2,
        CTL_FIND_USAGE = 0x3,
        CTL_FIND_SAME_USAGE_FLAG = 0x1,
        CTL_FIND_EXISTING = 0x5,
        CTL_FIND_SUBJECT = 0x4,
    };
    enum class CERT_ID_OPTION : uint32_t
    {
        CERT_ID_ISSUER_SERIAL_NUMBER = 0x1,
        CERT_ID_KEY_IDENTIFIER = 0x2,
        CERT_ID_SHA1_HASH = 0x3,
    };
    enum class CERT_KEY_SPEC : uint32_t
    {
        AT_KEYEXCHANGE = 0x1,
        AT_SIGNATURE = 0x2,
        CERT_NCRYPT_KEY_SPEC = 0xffffffff,
    };
    enum class CERT_LOGOTYPE_CHOICE : uint32_t
    {
        CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0x0,
        CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 0x1,
        CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 0x2,
    };
    enum class CERT_LOGOTYPE_IMAGE_INFO_TYPE : uint32_t
    {
        CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 0x1,
        CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 0x2,
    };
    enum class CERT_LOGOTYPE_OPTION : uint32_t
    {
        CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 0x1,
        CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 0x2,
    };
    enum class CERT_OPEN_STORE_FLAGS : uint32_t
    {
        CERT_STORE_BACKUP_RESTORE_FLAG = 0x800,
        CERT_STORE_CREATE_NEW_FLAG = 0x2000,
        CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 0x4,
        CERT_STORE_DELETE_FLAG = 0x10,
        CERT_STORE_ENUM_ARCHIVED_FLAG = 0x200,
        CERT_STORE_MAXIMUM_ALLOWED_FLAG = 0x1000,
        CERT_STORE_NO_CRYPT_RELEASE_FLAG = 0x1,
        CERT_STORE_OPEN_EXISTING_FLAG = 0x4000,
        CERT_STORE_READONLY_FLAG = 0x8000,
        CERT_STORE_SET_LOCALIZED_NAME_FLAG = 0x2,
        CERT_STORE_SHARE_CONTEXT_FLAG = 0x80,
        CERT_STORE_UPDATE_KEYID_FLAG = 0x400,
    };
    enum class CERT_QUERY_CONTENT_TYPE : uint32_t
    {
        CERT_QUERY_CONTENT_CERT = 0x1,
        CERT_QUERY_CONTENT_CTL = 0x2,
        CERT_QUERY_CONTENT_CRL = 0x3,
        CERT_QUERY_CONTENT_SERIALIZED_STORE = 0x4,
        CERT_QUERY_CONTENT_SERIALIZED_CERT = 0x5,
        CERT_QUERY_CONTENT_SERIALIZED_CTL = 0x6,
        CERT_QUERY_CONTENT_SERIALIZED_CRL = 0x7,
        CERT_QUERY_CONTENT_PKCS7_SIGNED = 0x8,
        CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 0x9,
        CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 0xa,
        CERT_QUERY_CONTENT_PKCS10 = 0xb,
        CERT_QUERY_CONTENT_PFX = 0xc,
        CERT_QUERY_CONTENT_CERT_PAIR = 0xd,
        CERT_QUERY_CONTENT_PFX_AND_LOAD = 0xe,
    };
    enum class CERT_QUERY_CONTENT_TYPE_FLAGS : uint32_t
    {
        CERT_QUERY_CONTENT_FLAG_CERT = 0x2,
        CERT_QUERY_CONTENT_FLAG_CTL = 0x4,
        CERT_QUERY_CONTENT_FLAG_CRL = 0x8,
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 0x10,
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 0x20,
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 0x40,
        CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 0x80,
        CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 0x100,
        CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 0x200,
        CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 0x400,
        CERT_QUERY_CONTENT_FLAG_PKCS10 = 0x800,
        CERT_QUERY_CONTENT_FLAG_PFX = 0x1000,
        CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 0x2000,
        CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 0x4000,
        CERT_QUERY_CONTENT_FLAG_ALL = 0x3ffe,
        CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 0x332,
    };
    enum class CERT_QUERY_ENCODING_TYPE : uint32_t
    {
        X509_ASN_ENCODING = 0x1,
        PKCS_7_ASN_ENCODING = 0x10000,
    };
    enum class CERT_QUERY_FORMAT_TYPE : uint32_t
    {
        CERT_QUERY_FORMAT_BINARY = 0x1,
        CERT_QUERY_FORMAT_BASE64_ENCODED = 0x2,
        CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 0x3,
    };
    enum class CERT_QUERY_FORMAT_TYPE_FLAGS : uint32_t
    {
        CERT_QUERY_FORMAT_FLAG_BINARY = 0x2,
        CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 0x4,
        CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 0x8,
        CERT_QUERY_FORMAT_FLAG_ALL = 0xe,
    };
    enum class CERT_QUERY_OBJECT_TYPE : uint32_t
    {
        CERT_QUERY_OBJECT_FILE = 0x1,
        CERT_QUERY_OBJECT_BLOB = 0x2,
    };
    enum class CERT_RDN_ATTR_VALUE_TYPE : uint32_t
    {
        CERT_RDN_ANY_TYPE = 0x0,
        CERT_RDN_NUMERIC_STRING = 0x3,
        CERT_RDN_PRINTABLE_STRING = 0x4,
        CERT_RDN_T61_STRING = 0x5,
        CERT_RDN_VIDEOTEX_STRING = 0x6,
        CERT_RDN_IA5_STRING = 0x7,
        CERT_RDN_GRAPHIC_STRING = 0x8,
        CERT_RDN_ISO646_STRING = 0x9,
        CERT_RDN_GENERAL_STRING = 0xa,
        CERT_RDN_INT4_STRING = 0xb,
        CERT_RDN_UNICODE_STRING = 0xc,
        CERT_RDN_BMP_STRING = 0xc,
        CERT_RDN_ENCODED_BLOB = 0x1,
        CERT_RDN_OCTET_STRING = 0x2,
        CERT_RDN_TELETEX_STRING = 0x5,
        CERT_RDN_UNIVERSAL_STRING = 0xb,
        CERT_RDN_UTF8_STRING = 0xd,
        CERT_RDN_VISIBLE_STRING = 0x9,
    };
    enum class CERT_REVOCATION_STATUS_REASON : uint32_t
    {
        CRL_REASON_UNSPECIFIED = 0x0,
        CRL_REASON_KEY_COMPROMISE = 0x1,
        CRL_REASON_CA_COMPROMISE = 0x2,
        CRL_REASON_AFFILIATION_CHANGED = 0x3,
        CRL_REASON_SUPERSEDED = 0x4,
        CRL_REASON_CESSATION_OF_OPERATION = 0x5,
        CRL_REASON_CERTIFICATE_HOLD = 0x6,
        CRL_REASON_REMOVE_FROM_CRL = 0x8,
    };
    enum class CERT_ROOT_PROGRAM_FLAGS : uint32_t
    {
        CERT_ROOT_PROGRAM_FLAG_LSC = 0x40,
        CERT_ROOT_PROGRAM_FLAG_ORG = 0x80,
        CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 0x20,
    };
    enum class CERT_SELECT_CRITERIA_TYPE : uint32_t
    {
        CERT_SELECT_BY_ENHKEY_USAGE = 0x1,
        CERT_SELECT_BY_KEY_USAGE = 0x2,
        CERT_SELECT_BY_POLICY_OID = 0x3,
        CERT_SELECT_BY_PROV_NAME = 0x4,
        CERT_SELECT_BY_EXTENSION = 0x5,
        CERT_SELECT_BY_SUBJECT_HOST_NAME = 0x6,
        CERT_SELECT_BY_ISSUER_ATTR = 0x7,
        CERT_SELECT_BY_SUBJECT_ATTR = 0x8,
        CERT_SELECT_BY_ISSUER_NAME = 0x9,
        CERT_SELECT_BY_PUBLIC_KEY = 0xa,
        CERT_SELECT_BY_TLS_SIGNATURES = 0xb,
    };
    enum class CERT_SELECT_STRUCT_FLAGS : uint32_t
    {
        CSS_HIDE_PROPERTIES = 0x1,
        CSS_ENABLEHOOK = 0x2,
        CSS_ALLOWMULTISELECT = 0x4,
        CSS_SHOW_HELP = 0x10,
        CSS_ENABLETEMPLATE = 0x20,
        CSS_ENABLETEMPLATEHANDLE = 0x40,
    };
    enum class CERT_STORE_PROV_FLAGS : uint32_t
    {
        CERT_STORE_PROV_EXTERNAL_FLAG = 0x1,
        CERT_STORE_PROV_DELETED_FLAG = 0x2,
        CERT_STORE_PROV_NO_PERSIST_FLAG = 0x4,
        CERT_STORE_PROV_SYSTEM_STORE_FLAG = 0x8,
        CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 0x10,
    };
    enum class CERT_STORE_SAVE_AS : uint32_t
    {
        CERT_STORE_SAVE_AS_PKCS7 = 0x2,
        CERT_STORE_SAVE_AS_STORE = 0x1,
    };
    enum class CERT_STORE_SAVE_TO : uint32_t
    {
        CERT_STORE_SAVE_TO_FILE = 0x1,
        CERT_STORE_SAVE_TO_FILENAME = 0x4,
        CERT_STORE_SAVE_TO_FILENAME_A = 0x3,
        CERT_STORE_SAVE_TO_FILENAME_W = 0x4,
        CERT_STORE_SAVE_TO_MEMORY = 0x2,
    };
    enum class CERT_STRING_TYPE : uint32_t
    {
        CERT_SIMPLE_NAME_STR = 0x1,
        CERT_OID_NAME_STR = 0x2,
        CERT_X500_NAME_STR = 0x3,
    };
    enum class CERT_STRONG_SIGN_FLAGS : uint32_t
    {
        CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 0x1,
        CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 0x2,
    };
    enum class CERT_SYSTEM_STORE_FLAGS : uint32_t
    {
        CERT_SYSTEM_STORE_LOCATION_MASK = 0xff0000,
        CERT_SYSTEM_STORE_RELOCATE_FLAG = 0x80000000,
    };
    enum class CESSetupProperty : int32_t
    {
        ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0,
        ENUM_CESSETUPPROP_CACONFIG = 1,
        ENUM_CESSETUPPROP_AUTHENTICATION = 2,
        ENUM_CESSETUPPROP_SSLCERTHASH = 3,
        ENUM_CESSETUPPROP_URL = 4,
        ENUM_CESSETUPPROP_RENEWALONLY = 5,
        ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6,
    };
    enum class CMSG_KEY_AGREE_OPTION : uint32_t
    {
        CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 0x1,
        CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 0x2,
    };
    enum class CMSG_KEY_AGREE_ORIGINATOR : uint32_t
    {
        CMSG_KEY_AGREE_ORIGINATOR_CERT = 0x1,
        CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 0x2,
    };
    enum class CRYPTUI_VIEWCERTIFICATE_FLAGS : uint32_t
    {
        CRYPTUI_HIDE_HIERARCHYPAGE = 0x1,
        CRYPTUI_HIDE_DETAILPAGE = 0x2,
        CRYPTUI_DISABLE_EDITPROPERTIES = 0x4,
        CRYPTUI_ENABLE_EDITPROPERTIES = 0x8,
        CRYPTUI_DISABLE_ADDTOSTORE = 0x10,
        CRYPTUI_ENABLE_ADDTOSTORE = 0x20,
        CRYPTUI_ACCEPT_DECLINE_STYLE = 0x40,
        CRYPTUI_IGNORE_UNTRUSTED_ROOT = 0x80,
        CRYPTUI_DONT_OPEN_STORES = 0x100,
        CRYPTUI_ONLY_OPEN_ROOT_STORE = 0x200,
        CRYPTUI_WARN_UNTRUSTED_ROOT = 0x400,
        CRYPTUI_ENABLE_REVOCATION_CHECKING = 0x800,
        CRYPTUI_WARN_REMOTE_TRUST = 0x1000,
        CRYPTUI_DISABLE_EXPORT = 0x2000,
        CRYPTUI_ENABLE_REVOCATION_CHECK_END_CERT = 0x4000,
        CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN = 0x8000,
        CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x800,
        CRYPTUI_DISABLE_HTMLLINK = 0x10000,
        CRYPTUI_DISABLE_ISSUERSTATEMENT = 0x20000,
        CRYPTUI_CACHE_ONLY_URL_RETRIEVAL = 0x40000,
    };
    enum class CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE : uint32_t
    {
        CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN = 0x1,
        CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN_NO_ROOT = 0x2,
        CRYPTUI_WIZ_DIGITAL_SIGN_ADD_NONE = 0x0,
    };
    enum class CRYPTUI_WIZ_DIGITAL_SIGN : uint32_t
    {
        CRYPTUI_WIZ_DIGITAL_SIGN_CERT = 0x1,
        CRYPTUI_WIZ_DIGITAL_SIGN_STORE = 0x2,
        CRYPTUI_WIZ_DIGITAL_SIGN_PVK = 0x3,
        CRYPTUI_WIZ_DIGITAL_SIGN_NONE = 0x0,
    };
    enum class CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION : uint32_t
    {
        CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE = 0x1,
        CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV = 0x2,
    };
    enum class CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE : uint32_t
    {
        CRYPTUI_WIZ_DIGITAL_SIGN_COMMERCIAL = 0x1,
        CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL = 0x2,
    };
    enum class CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT : uint32_t
    {
        CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB = 0x2,
        CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE = 0x1,
        CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_NONE = 0x0,
    };
    enum class CRYPTUI_WIZ_EXPORT_FORMAT : uint32_t
    {
        CRYPTUI_WIZ_EXPORT_FORMAT_DER = 0x1,
        CRYPTUI_WIZ_EXPORT_FORMAT_PFX = 0x2,
        CRYPTUI_WIZ_EXPORT_FORMAT_PKCS7 = 0x3,
        CRYPTUI_WIZ_EXPORT_FORMAT_BASE64 = 0x4,
        CRYPTUI_WIZ_EXPORT_FORMAT_CRL = 0x6,
        CRYPTUI_WIZ_EXPORT_FORMAT_CTL = 0x7,
    };
    enum class CRYPTUI_WIZ_EXPORT_SUBJECT : uint32_t
    {
        CRYPTUI_WIZ_EXPORT_CERT_CONTEXT = 0x1,
        CRYPTUI_WIZ_EXPORT_CTL_CONTEXT = 0x2,
        CRYPTUI_WIZ_EXPORT_CRL_CONTEXT = 0x3,
        CRYPTUI_WIZ_EXPORT_CERT_STORE = 0x4,
        CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY = 0x5,
    };
    enum class CRYPTUI_WIZ_FLAGS : uint32_t
    {
        CRYPTUI_WIZ_NO_UI = 0x1,
        CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS = 0x2,
        CRYPTUI_WIZ_NO_UI_EXCEPT_CSP = 0x3,
        CRYPTUI_WIZ_IMPORT_ALLOW_CERT = 0x20000,
        CRYPTUI_WIZ_IMPORT_ALLOW_CRL = 0x40000,
        CRYPTUI_WIZ_IMPORT_ALLOW_CTL = 0x80000,
        CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE = 0x10000,
        CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE = 0x100000,
        CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER = 0x200000,
        CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE = 0x400000,
        CRYPTUI_WIZ_EXPORT_PRIVATE_KEY = 0x100,
        CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY = 0x200,
    };
    enum class CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION : uint32_t
    {
        CRYPTUI_WIZ_IMPORT_SUBJECT_FILE = 0x1,
        CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT = 0x2,
        CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT = 0x3,
        CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT = 0x4,
        CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE = 0x5,
    };
    enum class CRYPT_ACQUIRE_FLAGS : uint32_t
    {
        CRYPT_ACQUIRE_CACHE_FLAG = 0x1,
        CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 0x4,
        CRYPT_ACQUIRE_NO_HEALING = 0x8,
        CRYPT_ACQUIRE_SILENT_FLAG = 0x40,
        CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 0x2,
    };
    enum class CRYPT_CONTEXT_CONFIG_FLAGS : uint32_t
    {
        CRYPT_EXCLUSIVE = 0x1,
        CRYPT_OVERRIDE = 0x10000,
    };
    enum class CRYPT_DEFAULT_CONTEXT_FLAGS : uint32_t
    {
        CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 0x1,
        CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 0x2,
    };
    enum class CRYPT_DEFAULT_CONTEXT_TYPE : uint32_t
    {
        CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 0x1,
        CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 0x2,
    };
    enum class CRYPT_ENCODE_OBJECT_FLAGS : uint32_t
    {
        CRYPT_ENCODE_ALLOC_FLAG = 0x8000,
        CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 0x20000,
        CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 0x40000000,
        CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 0x80000000,
        CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 0x20000000,
    };
    enum class CRYPT_FIND_FLAGS : uint32_t
    {
        CRYPT_FIND_USER_KEYSET_FLAG = 0x1,
        CRYPT_FIND_MACHINE_KEYSET_FLAG = 0x2,
        CRYPT_FIND_SILENT_KEYSET_FLAG = 0x40,
    };
    enum class CRYPT_GET_URL_FLAGS : uint32_t
    {
        CRYPT_GET_URL_FROM_PROPERTY = 0x1,
        CRYPT_GET_URL_FROM_EXTENSION = 0x2,
        CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 0x4,
        CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 0x8,
    };
    enum class CRYPT_IMAGE_REF_FLAGS : uint32_t
    {
        CRYPT_MIN_DEPENDENCIES = 0x1,
        CRYPT_PROCESS_ISOLATE = 0x10000,
    };
    enum class CRYPT_IMPORT_PUBLIC_KEY_FLAGS : uint32_t
    {
        CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 0x80000000,
        CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 0x40000000,
    };
    enum class CRYPT_KEY_FLAGS : uint32_t
    {
        CRYPT_EXPORTABLE = 0x1,
        CRYPT_USER_PROTECTED = 0x2,
        CRYPT_ARCHIVABLE = 0x4000,
        CRYPT_CREATE_IV = 0x200,
        CRYPT_CREATE_SALT = 0x4,
        CRYPT_DATA_KEY = 0x800,
        CRYPT_FORCE_KEY_PROTECTION_HIGH = 0x8000,
        CRYPT_KEK = 0x400,
        CRYPT_INITIATOR = 0x40,
        CRYPT_NO_SALT = 0x10,
        CRYPT_ONLINE = 0x80,
        CRYPT_PREGEN = 0x40,
        CRYPT_RECIPIENT = 0x10,
        CRYPT_SF = 0x100,
        CRYPT_SGCKEY = 0x2000,
        CRYPT_VOLATILE = 0x1000,
        CRYPT_MACHINE_KEYSET = 0x20,
        CRYPT_USER_KEYSET = 0x1000,
        PKCS12_PREFER_CNG_KSP = 0x100,
        PKCS12_ALWAYS_CNG_KSP = 0x200,
        PKCS12_ALLOW_OVERWRITE_KEY = 0x4000,
        PKCS12_NO_PERSIST_KEY = 0x8000,
        PKCS12_INCLUDE_EXTENDED_PROPERTIES = 0x10,
        CRYPT_OAEP = 0x40,
        CRYPT_BLOB_VER3 = 0x80,
        CRYPT_DESTROYKEY = 0x4,
        CRYPT_SSL2_FALLBACK = 0x2,
        CRYPT_Y_ONLY = 0x1,
        CRYPT_IPSEC_HMAC_KEY = 0x100,
        CERT_SET_KEY_PROV_HANDLE_PROP_ID = 0x1,
        CERT_SET_KEY_CONTEXT_PROP_ID = 0x1,
    };
    enum class CRYPT_KEY_PARAM_ID : uint32_t
    {
        KP_ALGID = 0x7,
        KP_CERTIFICATE = 0x1a,
        KP_PERMISSIONS = 0x6,
        KP_SALT = 0x2,
        KP_SALT_EX = 0xa,
        KP_BLOCKLEN = 0x8,
        KP_GET_USE_COUNT = 0x2a,
        KP_KEYLEN = 0x9,
    };
    enum class CRYPT_MSG_TYPE : uint32_t
    {
        CMSG_DATA = 0x1,
        CMSG_SIGNED = 0x2,
        CMSG_ENVELOPED = 0x3,
        CMSG_SIGNED_AND_ENVELOPED = 0x4,
        CMSG_HASHED = 0x5,
    };
    enum class CRYPT_OBJECT_LOCATOR_RELEASE_REASON : uint32_t
    {
        CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 0x1,
        CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 0x2,
        CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 0x3,
        CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 0x4,
    };
    enum class CRYPT_SET_HASH_PARAM : uint32_t
    {
        HP_HMAC_INFO = 0x5,
        HP_HASHVAL = 0x2,
    };
    enum class CRYPT_SET_PROV_PARAM_ID : uint32_t
    {
        PP_CLIENT_HWND = 0x1,
        PP_DELETEKEY = 0x18,
        PP_KEYEXCHANGE_ALG = 0xe,
        PP_KEYEXCHANGE_PIN = 0x20,
        PP_KEYEXCHANGE_KEYSIZE = 0xc,
        PP_KEYSET_SEC_DESCR = 0x8,
        PP_PIN_PROMPT_STRING = 0x2c,
        PP_ROOT_CERTSTORE = 0x2e,
        PP_SIGNATURE_ALG = 0xf,
        PP_SIGNATURE_PIN = 0x21,
        PP_SIGNATURE_KEYSIZE = 0xd,
        PP_UI_PROMPT = 0x15,
        PP_USE_HARDWARE_RNG = 0x26,
        PP_USER_CERTSTORE = 0x2a,
        PP_SECURE_KEYEXCHANGE_PIN = 0x2f,
        PP_SECURE_SIGNATURE_PIN = 0x30,
        PP_SMARTCARD_READER = 0x2b,
    };
    enum class CRYPT_STRING : uint32_t
    {
        CRYPT_STRING_BASE64HEADER = 0x0,
        CRYPT_STRING_BASE64 = 0x1,
        CRYPT_STRING_BINARY = 0x2,
        CRYPT_STRING_BASE64REQUESTHEADER = 0x3,
        CRYPT_STRING_HEX = 0x4,
        CRYPT_STRING_HEXASCII = 0x5,
        CRYPT_STRING_BASE64X509CRLHEADER = 0x9,
        CRYPT_STRING_HEXADDR = 0xa,
        CRYPT_STRING_HEXASCIIADDR = 0xb,
        CRYPT_STRING_HEXRAW = 0xc,
        CRYPT_STRING_STRICT = 0x20000000,
        CRYPT_STRING_BASE64_ANY = 0x6,
        CRYPT_STRING_ANY = 0x7,
        CRYPT_STRING_HEX_ANY = 0x8,
    };
    enum class CRYPT_TIMESTAMP_RESPONSE_STATUS : uint32_t
    {
        TIMESTAMP_STATUS_GRANTED = 0x0,
        TIMESTAMP_STATUS_GRANTED_WITH_MODS = 0x1,
        TIMESTAMP_STATUS_REJECTED = 0x2,
        TIMESTAMP_STATUS_WAITING = 0x3,
        TIMESTAMP_STATUS_REVOCATION_WARNING = 0x4,
        TIMESTAMP_STATUS_REVOKED = 0x5,
    };
    enum class CRYPT_TIMESTAMP_VERSION : uint32_t
    {
        TIMESTAMP_VERSION = 0x1,
    };
    enum class CRYPT_VERIFY_CERT_FLAGS : uint32_t
    {
        CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 0x1,
        CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 0x2,
        CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 0x4,
    };
    enum class CRYPT_XML_CHARSET : int32_t
    {
        CRYPT_XML_CHARSET_AUTO = 0,
        CRYPT_XML_CHARSET_UTF8 = 1,
        CRYPT_XML_CHARSET_UTF16LE = 2,
        CRYPT_XML_CHARSET_UTF16BE = 3,
    };
    enum class CRYPT_XML_FLAGS : uint32_t
    {
        CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 0x10000000,
        CRYPT_XML_FLAG_NO_SERIALIZE = 0x80000000,
        CRYPT_XML_SIGN_ADD_KEYVALUE = 0x1,
    };
    enum class CRYPT_XML_GROUP_ID : uint32_t
    {
        CRYPT_XML_GROUP_ID_HASH_________ = 0x1,
        CRYPT_XML_GROUP_ID_SIGN_________ = 0x2,
    };
    enum class CRYPT_XML_KEYINFO_SPEC : int32_t
    {
        CRYPT_XML_KEYINFO_SPEC_NONE = 0,
        CRYPT_XML_KEYINFO_SPEC_ENCODED = 1,
        CRYPT_XML_KEYINFO_SPEC_PARAM = 2,
    };
    enum class CRYPT_XML_KEYINFO_TYPE : uint32_t
    {
        CRYPT_XML_KEYINFO_TYPE_KEYNAME = 0x1,
        CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 0x2,
        CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 0x3,
        CRYPT_XML_KEYINFO_TYPE_X509DATA = 0x4,
        CRYPT_XML_KEYINFO_TYPE_CUSTOM = 0x5,
    };
    enum class CRYPT_XML_KEY_VALUE_TYPE : uint32_t
    {
        CRYPT_XML_KEY_VALUE_TYPE_DSA = 0x1,
        CRYPT_XML_KEY_VALUE_TYPE_RSA = 0x2,
        CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 0x3,
        CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 0x4,
    };
    enum class CRYPT_XML_PROPERTY_ID : int32_t
    {
        CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1,
        CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2,
        CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3,
        CRYPT_XML_PROPERTY_DOC_DECLARATION = 4,
        CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5,
    };
    enum class CRYPT_XML_STATUS_ERROR_STATUS : uint32_t
    {
        CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 0x1,
        CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 0x2,
        CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 0x5,
        CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 0x8,
        CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 0x10000,
        CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 0x20000,
    };
    enum class CRYPT_XML_STATUS_INFO_STATUS : uint32_t
    {
        CRYPT_XML_STATUS_INTERNAL_REFERENCE = 0x1,
        CRYPT_XML_STATUS_KEY_AVAILABLE = 0x2,
        CRYPT_XML_STATUS_DIGESTING = 0x4,
        CRYPT_XML_STATUS_DIGEST_VALID = 0x8,
        CRYPT_XML_STATUS_SIGNATURE_VALID = 0x10000,
        CRYPT_XML_STATUS_OPENED_TO_ENCODE = 0x80000000,
    };
    enum class CRYPT_XML_TRANSFORM_FLAGS : uint32_t
    {
        CRYPT_XML_TRANSFORM_ON_STREAM = 0x1,
        CRYPT_XML_TRANSFORM_ON_NODESET = 0x2,
        CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 0x3,
    };
    enum class CRYPT_XML_X509DATA_TYPE : uint32_t
    {
        CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 0x1,
        CRYPT_XML_X509DATA_TYPE_SKI = 0x2,
        CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 0x3,
        CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 0x4,
        CRYPT_XML_X509DATA_TYPE_CRL = 0x5,
        CRYPT_XML_X509DATA_TYPE_CUSTOM = 0x6,
    };
    enum class CTL_MODIFY_REQUEST_OPERATION : uint32_t
    {
        CTL_MODIFY_REQUEST_ADD_TRUSTED = 0x3,
        CTL_MODIFY_REQUEST_ADD_NOT_TRUSTED = 0x1,
        CTL_MODIFY_REQUEST_REMOVE = 0x2,
    };
    enum class CertKeyType : uint32_t
    {
        KeyTypeOther = 0x0,
        KeyTypeVirtualSmartCard = 0x1,
        KeyTypePhysicalSmartCard = 0x2,
        KeyTypePassport = 0x3,
        KeyTypePassportRemote = 0x4,
        KeyTypePassportSmartCard = 0x5,
        KeyTypeHardware = 0x6,
        KeyTypeSoftware = 0x7,
        KeyTypeSelfSigned = 0x8,
    };
    enum class DSAFIPSVERSION_ENUM : int32_t
    {
        DSA_FIPS186_2 = 0,
        DSA_FIPS186_3 = 1,
    };
    enum class Direction : int32_t
    {
        DirectionEncrypt = 1,
        DirectionDecrypt = 2,
    };
    enum class ECC_CURVE_ALG_ID_ENUM : int32_t
    {
        BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0,
    };
    enum class ECC_CURVE_TYPE_ENUM : int32_t
    {
        BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1,
        BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2,
        BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3,
    };
    enum class HASHALGORITHM_ENUM : int32_t
    {
        DSA_HASH_ALGORITHM_SHA1 = 0,
        DSA_HASH_ALGORITHM_SHA256 = 1,
        DSA_HASH_ALGORITHM_SHA512 = 2,
    };
    enum class HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE : uint32_t
    {
        AUTHTYPE_CLIENT = 0x1,
        AUTHTYPE_SERVER = 0x2,
    };
    enum class HandleType : int32_t
    {
        Asymmetric = 1,
        Symmetric = 2,
        Transform = 3,
        Hash = 4,
    };
    enum class MSCEPSetupProperty : int32_t
    {
        ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0,
        ENUM_CEPSETUPPROP_USECHALLENGE = 1,
        ENUM_CEPSETUPPROP_RANAME_CN = 2,
        ENUM_CEPSETUPPROP_RANAME_EMAIL = 3,
        ENUM_CEPSETUPPROP_RANAME_COMPANY = 4,
        ENUM_CEPSETUPPROP_RANAME_DEPT = 5,
        ENUM_CEPSETUPPROP_RANAME_CITY = 6,
        ENUM_CEPSETUPPROP_RANAME_STATE = 7,
        ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8,
        ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9,
        ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10,
        ENUM_CEPSETUPPROP_CAINFORMATION = 11,
        ENUM_CEPSETUPPROP_MSCEPURL = 12,
        ENUM_CEPSETUPPROP_CHALLENGEURL = 13,
    };
    enum class NCRYPT_ALGORITHM_NAME_CLASS : uint32_t
    {
        NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 0x3,
        NCRYPT_SECRET_AGREEMENT_INTERFACE = 0x4,
        NCRYPT_SIGNATURE_INTERFACE = 0x5,
    };
    enum class NCRYPT_FLAGS : uint32_t
    {
        BCRYPT_PAD_NONE = 0x1,
        BCRYPT_PAD_OAEP = 0x4,
        BCRYPT_PAD_PKCS1 = 0x2,
        BCRYPT_PAD_PSS = 0x8,
        NCRYPT_SILENT_FLAG = 0x40,
        NCRYPT_NO_PADDING_FLAG = 0x1,
        NCRYPT_PAD_OAEP_FLAG = 0x4,
        NCRYPT_PAD_PKCS1_FLAG = 0x2,
        NCRYPT_REGISTER_NOTIFY_FLAG = 0x1,
        NCRYPT_UNREGISTER_NOTIFY_FLAG = 0x2,
        NCRYPT_MACHINE_KEY_FLAG = 0x20,
        NCRYPT_UNPROTECT_NO_DECRYPT = 0x1,
        NCRYPT_OVERWRITE_KEY_FLAG = 0x80,
        NCRYPT_NO_KEY_VALIDATION = 0x8,
        NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 0x200,
        NCRYPT_PAD_PSS_FLAG = 0x8,
        NCRYPT_PERSIST_FLAG = 0x80000000,
        NCRYPT_PERSIST_ONLY_FLAG = 0x40000000,
    };
    enum class NCRYPT_OPERATION : uint32_t
    {
        NCRYPT_CIPHER_OPERATION = 0x1,
        NCRYPT_HASH_OPERATION = 0x2,
        NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 0x4,
        NCRYPT_SECRET_AGREEMENT_OPERATION = 0x8,
        NCRYPT_SIGNATURE_OPERATION = 0x10,
    };
    enum class PaddingMode : int32_t
    {
        None = 1,
        PKCS7 = 2,
        Zeros = 3,
        ANSIX923 = 4,
        ISO10126 = 5,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct BCRYPT_ALGORITHM_IDENTIFIER;
    struct BCRYPT_ALG_HANDLE;
    struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;
    struct BCRYPT_DH_KEY_BLOB;
    struct BCRYPT_DH_PARAMETER_HEADER;
    struct BCRYPT_DSA_KEY_BLOB;
    struct BCRYPT_DSA_KEY_BLOB_V2;
    struct BCRYPT_DSA_PARAMETER_HEADER;
    struct BCRYPT_DSA_PARAMETER_HEADER_V2;
    struct BCRYPT_ECCFULLKEY_BLOB;
    struct BCRYPT_ECCKEY_BLOB;
    struct BCRYPT_ECC_CURVE_NAMES;
    struct BCRYPT_INTERFACE_VERSION;
    struct BCRYPT_KEY_BLOB;
    struct BCRYPT_KEY_DATA_BLOB_HEADER;
    struct BCRYPT_KEY_HANDLE;
    struct BCRYPT_KEY_LENGTHS_STRUCT;
    struct BCRYPT_MULTI_HASH_OPERATION;
    struct BCRYPT_MULTI_OBJECT_LENGTH_STRUCT;
    struct BCRYPT_OAEP_PADDING_INFO;
    struct BCRYPT_OID;
    struct BCRYPT_OID_LIST;
    struct BCRYPT_PKCS1_PADDING_INFO;
    struct BCRYPT_PROVIDER_NAME;
    struct BCRYPT_PSS_PADDING_INFO;
    struct BCRYPT_RSAKEY_BLOB;
    struct BCryptBuffer;
    struct BCryptBufferDesc;
    struct CCertSrvSetup;
    struct CCertSrvSetupKeyInformation;
    struct CCertificateEnrollmentPolicyServerSetup;
    struct CCertificateEnrollmentServerSetup;
    struct CERTIFICATE_CHAIN_BLOB;
    struct CERT_ACCESS_DESCRIPTION;
    struct CERT_ALT_NAME_ENTRY;
    struct CERT_ALT_NAME_INFO;
    struct CERT_AUTHORITY_INFO_ACCESS;
    struct CERT_AUTHORITY_KEY_ID2_INFO;
    struct CERT_AUTHORITY_KEY_ID_INFO;
    struct CERT_BASIC_CONSTRAINTS2_INFO;
    struct CERT_BASIC_CONSTRAINTS_INFO;
    struct CERT_BIOMETRIC_DATA;
    struct CERT_BIOMETRIC_EXT_INFO;
    struct CERT_CHAIN;
    struct CERT_CHAIN_CONTEXT;
    struct CERT_CHAIN_ELEMENT;
    struct CERT_CHAIN_ENGINE_CONFIG;
    struct CERT_CHAIN_FIND_BY_ISSUER_PARA;
    struct CERT_CHAIN_PARA;
    struct CERT_CHAIN_POLICY_PARA;
    struct CERT_CHAIN_POLICY_STATUS;
    struct CERT_CONTEXT;
    struct CERT_CREATE_CONTEXT_PARA;
    struct CERT_CRL_CONTEXT_PAIR;
    struct CERT_DH_PARAMETERS;
    struct CERT_DSS_PARAMETERS;
    struct CERT_ECC_SIGNATURE;
    struct CERT_EXTENSION;
    struct CERT_EXTENSIONS;
    struct CERT_FORTEZZA_DATA_PROP;
    struct CERT_GENERAL_SUBTREE;
    struct CERT_HASHED_URL;
    struct CERT_ID;
    struct CERT_INFO;
    struct CERT_ISSUER_SERIAL_NUMBER;
    struct CERT_KEYGEN_REQUEST_INFO;
    struct CERT_KEY_ATTRIBUTES_INFO;
    struct CERT_KEY_CONTEXT;
    struct CERT_KEY_USAGE_RESTRICTION_INFO;
    struct CERT_LDAP_STORE_OPENED_PARA;
    struct CERT_LOGOTYPE_AUDIO;
    struct CERT_LOGOTYPE_AUDIO_INFO;
    struct CERT_LOGOTYPE_DATA;
    struct CERT_LOGOTYPE_DETAILS;
    struct CERT_LOGOTYPE_EXT_INFO;
    struct CERT_LOGOTYPE_IMAGE;
    struct CERT_LOGOTYPE_IMAGE_INFO;
    struct CERT_LOGOTYPE_INFO;
    struct CERT_LOGOTYPE_REFERENCE;
    struct CERT_NAME_CONSTRAINTS_INFO;
    struct CERT_NAME_INFO;
    struct CERT_NAME_VALUE;
    struct CERT_OR_CRL_BLOB;
    struct CERT_OR_CRL_BUNDLE;
    struct CERT_OTHER_LOGOTYPE_INFO;
    struct CERT_OTHER_NAME;
    struct CERT_PAIR;
    struct CERT_PHYSICAL_STORE_INFO;
    struct CERT_POLICIES_INFO;
    struct CERT_POLICY95_QUALIFIER1;
    struct CERT_POLICY_CONSTRAINTS_INFO;
    struct CERT_POLICY_ID;
    struct CERT_POLICY_INFO;
    struct CERT_POLICY_MAPPING;
    struct CERT_POLICY_MAPPINGS_INFO;
    struct CERT_POLICY_QUALIFIER_INFO;
    struct CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
    struct CERT_POLICY_QUALIFIER_USER_NOTICE;
    struct CERT_PRIVATE_KEY_VALIDITY;
    struct CERT_PUBLIC_KEY_INFO;
    struct CERT_QC_STATEMENT;
    struct CERT_QC_STATEMENTS_EXT_INFO;
    struct CERT_RDN;
    struct CERT_RDN_ATTR;
    struct CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
    struct CERT_REGISTRY_STORE_ROAMING_PARA;
    struct CERT_REQUEST_INFO;
    struct CERT_REVOCATION_CHAIN_PARA;
    struct CERT_REVOCATION_CRL_INFO;
    struct CERT_REVOCATION_INFO;
    struct CERT_REVOCATION_PARA;
    struct CERT_REVOCATION_STATUS;
    struct CERT_SELECTUI_INPUT;
    struct CERT_SELECT_CHAIN_PARA;
    struct CERT_SELECT_CRITERIA;
    struct CERT_SELECT_STRUCT_A;
    struct CERT_SELECT_STRUCT_W;
    struct CERT_SERVER_OCSP_RESPONSE_CONTEXT;
    struct CERT_SERVER_OCSP_RESPONSE_OPEN_PARA;
    struct CERT_SIGNED_CONTENT_INFO;
    struct CERT_SIMPLE_CHAIN;
    struct CERT_STORE_PROV_FIND_INFO;
    struct CERT_STORE_PROV_INFO;
    struct CERT_STRONG_SIGN_PARA;
    struct CERT_STRONG_SIGN_SERIALIZED_INFO;
    struct CERT_SUPPORTED_ALGORITHM_INFO;
    struct CERT_SYSTEM_STORE_INFO;
    struct CERT_SYSTEM_STORE_RELOCATE_PARA;
    struct CERT_TEMPLATE_EXT;
    struct CERT_TPM_SPECIFICATION_INFO;
    struct CERT_TRUST_LIST_INFO;
    struct CERT_TRUST_STATUS;
    struct CERT_USAGE_MATCH;
    struct CERT_VERIFY_CERTIFICATE_TRUST;
    struct CERT_VIEWPROPERTIES_STRUCT_A;
    struct CERT_VIEWPROPERTIES_STRUCT_W;
    struct CERT_X942_DH_PARAMETERS;
    struct CERT_X942_DH_VALIDATION_PARAMS;
    struct CLAIMLIST;
    struct CMC_ADD_ATTRIBUTES_INFO;
    struct CMC_ADD_EXTENSIONS_INFO;
    struct CMC_DATA_INFO;
    struct CMC_PEND_INFO;
    struct CMC_RESPONSE_INFO;
    struct CMC_STATUS_INFO;
    struct CMC_TAGGED_ATTRIBUTE;
    struct CMC_TAGGED_CERT_REQUEST;
    struct CMC_TAGGED_CONTENT_INFO;
    struct CMC_TAGGED_OTHER_MSG;
    struct CMC_TAGGED_REQUEST;
    struct CMFLTR;
    struct CMOID;
    struct CMSCEPSetup;
    struct CMSG_CMS_RECIPIENT_INFO;
    struct CMSG_CMS_SIGNER_INFO;
    struct CMSG_CNG_CONTENT_DECRYPT_INFO;
    struct CMSG_CONTENT_ENCRYPT_INFO;
    struct CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
    struct CMSG_CTRL_DECRYPT_PARA;
    struct CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
    struct CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
    struct CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
    struct CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
    struct CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
    struct CMSG_ENCRYPTED_ENCODE_INFO;
    struct CMSG_ENVELOPED_ENCODE_INFO;
    struct CMSG_HASHED_ENCODE_INFO;
    struct CMSG_KEY_AGREE_ENCRYPT_INFO;
    struct CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
    struct CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
    struct CMSG_KEY_AGREE_RECIPIENT_INFO;
    struct CMSG_KEY_TRANS_ENCRYPT_INFO;
    struct CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
    struct CMSG_KEY_TRANS_RECIPIENT_INFO;
    struct CMSG_MAIL_LIST_ENCRYPT_INFO;
    struct CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
    struct CMSG_MAIL_LIST_RECIPIENT_INFO;
    struct CMSG_RC2_AUX_INFO;
    struct CMSG_RC4_AUX_INFO;
    struct CMSG_RECIPIENT_ENCODE_INFO;
    struct CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
    struct CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
    struct CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
    struct CMSG_SIGNED_ENCODE_INFO;
    struct CMSG_SIGNER_ENCODE_INFO;
    struct CMSG_SIGNER_INFO;
    struct CMSG_SP3_COMPATIBLE_AUX_INFO;
    struct CMSG_STREAM_INFO;
    struct CMS_DH_KEY_INFO;
    struct CMS_KEY_INFO;
    struct CPS_URLS;
    struct CRL_CONTEXT;
    struct CRL_DIST_POINT;
    struct CRL_DIST_POINTS_INFO;
    struct CRL_DIST_POINT_NAME;
    struct CRL_ENTRY;
    struct CRL_FIND_ISSUED_FOR_PARA;
    struct CRL_INFO;
    struct CRL_ISSUING_DIST_POINT;
    struct CRL_REVOCATION_INFO;
    struct CROSS_CERT_DIST_POINTS_INFO;
    struct CRYPTNET_URL_CACHE_FLUSH_INFO;
    struct CRYPTNET_URL_CACHE_PRE_FETCH_INFO;
    struct CRYPTNET_URL_CACHE_RESPONSE_INFO;
    struct CRYPTOAPI_BLOB;
    struct CRYPTPROTECT_PROMPTSTRUCT;
    struct CRYPTUI_CERT_MGR_STRUCT;
    struct CRYPTUI_INITDIALOG_STRUCT;
    struct CRYPTUI_VIEWCERTIFICATE_STRUCTA;
    struct CRYPTUI_VIEWCERTIFICATE_STRUCTW;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO;
    struct CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO;
    struct CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO;
    struct CRYPTUI_WIZ_EXPORT_INFO;
    struct CRYPTUI_WIZ_IMPORT_SRC_INFO;
    struct CRYPT_3DES_KEY_STATE;
    struct CRYPT_AES_128_KEY_STATE;
    struct CRYPT_AES_256_KEY_STATE;
    struct CRYPT_ALGORITHM_IDENTIFIER;
    struct CRYPT_ASYNC_RETRIEVAL_COMPLETION;
    struct CRYPT_ATTRIBUTE;
    struct CRYPT_ATTRIBUTES;
    struct CRYPT_ATTRIBUTE_TYPE_VALUE;
    struct CRYPT_BIT_BLOB;
    struct CRYPT_BLOB_ARRAY;
    struct CRYPT_CONTENT_INFO;
    struct CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
    struct CRYPT_CONTEXTS;
    struct CRYPT_CONTEXT_CONFIG;
    struct CRYPT_CONTEXT_FUNCTIONS;
    struct CRYPT_CONTEXT_FUNCTION_CONFIG;
    struct CRYPT_CONTEXT_FUNCTION_PROVIDERS;
    struct CRYPT_CREDENTIALS;
    struct CRYPT_CSP_PROVIDER;
    struct CRYPT_DECODE_PARA;
    struct CRYPT_DECRYPT_MESSAGE_PARA;
    struct CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
    struct CRYPT_DES_KEY_STATE;
    struct CRYPT_ECC_CMS_SHARED_INFO;
    struct CRYPT_ECC_PRIVATE_KEY_INFO;
    struct CRYPT_ENCODE_PARA;
    struct CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
    struct CRYPT_ENCRYPT_MESSAGE_PARA;
    struct CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
    struct CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;
    struct CRYPT_HASH_INFO;
    struct CRYPT_HASH_MESSAGE_PARA;
    struct CRYPT_IMAGE_REF;
    struct CRYPT_IMAGE_REG;
    struct CRYPT_INTERFACE_REG;
    struct CRYPT_KEY_PROV_INFO;
    struct CRYPT_KEY_PROV_PARAM;
    struct CRYPT_KEY_SIGN_MESSAGE_PARA;
    struct CRYPT_KEY_VERIFY_MESSAGE_PARA;
    struct CRYPT_MASK_GEN_ALGORITHM;
    struct CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;
    struct CRYPT_OBJID_TABLE;
    struct CRYPT_OID_FUNC_ENTRY;
    struct CRYPT_OID_INFO;
    struct CRYPT_PASSWORD_CREDENTIALSA;
    struct CRYPT_PASSWORD_CREDENTIALSW;
    struct CRYPT_PKCS12_PBE_PARAMS;
    struct CRYPT_PKCS8_EXPORT_PARAMS;
    struct CRYPT_PKCS8_IMPORT_PARAMS;
    struct CRYPT_PRIVATE_KEY_INFO;
    struct CRYPT_PROPERTY_REF;
    struct CRYPT_PROVIDERS;
    struct CRYPT_PROVIDER_REF;
    struct CRYPT_PROVIDER_REFS;
    struct CRYPT_PROVIDER_REG;
    struct CRYPT_PSOURCE_ALGORITHM;
    struct CRYPT_RC2_CBC_PARAMETERS;
    struct CRYPT_RC4_KEY_STATE;
    struct CRYPT_RETRIEVE_AUX_INFO;
    struct CRYPT_RSAES_OAEP_PARAMETERS;
    struct CRYPT_RSA_SSA_PSS_PARAMETERS;
    struct CRYPT_SEQUENCE_OF_ANY;
    struct CRYPT_SIGN_MESSAGE_PARA;
    struct CRYPT_SMART_CARD_ROOT_INFO;
    struct CRYPT_SMIME_CAPABILITIES;
    struct CRYPT_SMIME_CAPABILITY;
    struct CRYPT_TIMESTAMP_ACCURACY;
    struct CRYPT_TIMESTAMP_CONTEXT;
    struct CRYPT_TIMESTAMP_INFO;
    struct CRYPT_TIMESTAMP_PARA;
    struct CRYPT_TIMESTAMP_REQUEST;
    struct CRYPT_TIMESTAMP_RESPONSE;
    struct CRYPT_TIME_STAMP_REQUEST_INFO;
    struct CRYPT_URL_ARRAY;
    struct CRYPT_URL_INFO;
    struct CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;
    struct CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO;
    struct CRYPT_VERIFY_MESSAGE_PARA;
    struct CRYPT_X942_OTHER_INFO;
    struct CRYPT_XML_ALGORITHM;
    struct CRYPT_XML_ALGORITHM_INFO;
    struct CRYPT_XML_BLOB;
    struct CRYPT_XML_CRYPTOGRAPHIC_INTERFACE;
    struct CRYPT_XML_DATA_BLOB;
    struct CRYPT_XML_DATA_PROVIDER;
    struct CRYPT_XML_DOC_CTXT;
    struct CRYPT_XML_ISSUER_SERIAL;
    struct CRYPT_XML_KEYINFO_PARAM;
    struct CRYPT_XML_KEY_DSA_KEY_VALUE;
    struct CRYPT_XML_KEY_ECDSA_KEY_VALUE;
    struct CRYPT_XML_KEY_INFO;
    struct CRYPT_XML_KEY_INFO_ITEM;
    struct CRYPT_XML_KEY_RSA_KEY_VALUE;
    struct CRYPT_XML_KEY_VALUE;
    struct CRYPT_XML_OBJECT;
    struct CRYPT_XML_PROPERTY;
    struct CRYPT_XML_REFERENCE;
    struct CRYPT_XML_REFERENCES;
    struct CRYPT_XML_SIGNATURE;
    struct CRYPT_XML_SIGNED_INFO;
    struct CRYPT_XML_STATUS;
    struct CRYPT_XML_TRANSFORM_CHAIN_CONFIG;
    struct CRYPT_XML_TRANSFORM_INFO;
    struct CRYPT_XML_X509DATA;
    struct CRYPT_XML_X509DATA_ITEM;
    struct CTL_ANY_SUBJECT_INFO;
    struct CTL_CONTEXT;
    struct CTL_ENTRY;
    struct CTL_FIND_SUBJECT_PARA;
    struct CTL_FIND_USAGE_PARA;
    struct CTL_INFO;
    struct CTL_MODIFY_REQUEST;
    struct CTL_USAGE;
    struct CTL_USAGE_MATCH;
    struct CTL_VERIFY_USAGE_PARA;
    struct CTL_VERIFY_USAGE_STATUS;
    struct DSSSEED;
    struct ENDPOINTADDRESS;
    struct ENDPOINTADDRESS2;
    struct EV_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct EV_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct GENERIC_XML_TOKEN;
    struct HCERTCHAINENGINE;
    struct HCRYPTASYNC;
    struct HMAC_Info;
    struct HTTPSPolicyCallbackData;
    struct INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS;
    struct INFORMATIONCARD_CRYPTO_HANDLE;
    struct INFORMATIONCARD_HASH_CRYPTO_PARAMETERS;
    struct INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS;
    struct INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS;
    struct KEY_TYPE_SUBTYPE;
    struct NCRYPT_ALLOC_PARA;
    struct NCRYPT_CIPHER_PADDING_INFO;
    struct NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE;
    struct NCRYPT_EXPORTED_ISOLATED_KEY_HEADER;
    struct NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES;
    struct NCRYPT_KEY_ACCESS_POLICY_BLOB;
    struct NCRYPT_KEY_ATTEST_PADDING_INFO;
    struct NCRYPT_KEY_BLOB_HEADER;
    struct NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO;
    struct NCRYPT_PCP_RAW_POLICYDIGEST;
    struct NCRYPT_PCP_TPM_FW_VERSION_INFO;
    struct NCRYPT_PLATFORM_ATTEST_PADDING_INFO;
    struct NCRYPT_PROTECT_STREAM_INFO;
    struct NCRYPT_PROTECT_STREAM_INFO_EX;
    struct NCRYPT_SUPPORTED_LENGTHS;
    struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER;
    struct NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT;
    struct NCRYPT_UI_POLICY;
    struct NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
    struct NCRYPT_VSM_KEY_ATTESTATION_STATEMENT;
    struct NCryptAlgorithmName;
    struct NCryptKeyName;
    struct NCryptProviderName;
    struct OCSP_BASIC_RESPONSE_ENTRY;
    struct OCSP_BASIC_RESPONSE_INFO;
    struct OCSP_BASIC_REVOKED_INFO;
    struct OCSP_BASIC_SIGNED_RESPONSE_INFO;
    struct OCSP_CERT_ID;
    struct OCSP_REQUEST_ENTRY;
    struct OCSP_REQUEST_INFO;
    struct OCSP_RESPONSE_INFO;
    struct OCSP_SIGNATURE_INFO;
    struct OCSP_SIGNED_REQUEST_INFO;
    struct PKCS12_PBES2_EXPORT_PARAMS;
    struct POLICY_ELEMENT;
    struct PRIVKEYVER3;
    struct PROV_ENUMALGS;
    struct PROV_ENUMALGS_EX;
    struct PUBKEY;
    struct PUBKEYVER3;
    struct PUBLICKEYSTRUC;
    struct RECIPIENTPOLICY;
    struct RECIPIENTPOLICY2;
    struct ROOT_INFO_LUID;
    struct RSAPUBKEY;
    struct SCHANNEL_ALG;
    struct SSL_ECCKEY_BLOB;
    struct SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA;
    struct SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS;
    struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT;
    struct ICertSrvSetup;
    struct ICertSrvSetupKeyInformation;
    struct ICertSrvSetupKeyInformationCollection;
    struct ICertificateEnrollmentPolicyServerSetup;
    struct ICertificateEnrollmentServerSetup;
    struct IMSCEPSetup;
#pragma endregion forward_declarations

#pragma region delegates
    using PFN_NCRYPT_ALLOC = void* __stdcall(size_t);
    using PFN_NCRYPT_FREE = void __stdcall(void*);
    using PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB, uint8_t*, uint32_t*, void*);
    using PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB*, uint8_t*, uint32_t*, void*);
    using PCRYPT_RESOLVE_HCRYPTPROV_FUNC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_PRIVATE_KEY_INFO*, size_t*, void*);
    using PFN_CRYPT_ALLOC = void* __stdcall(size_t);
    using PFN_CRYPT_FREE = void __stdcall(void*);
    using PFN_CRYPT_ENUM_OID_FUNC = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, uint32_t, uint32_t*, Windows::Win32::Foundation::PWSTR*, uint8_t**, uint32_t*, void*);
    using PFN_CRYPT_ENUM_OID_INFO = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_OID_INFO*, void*);
    using PFN_CMSG_STREAM_OUTPUT = Windows::Win32::Foundation::BOOL __stdcall(void*, uint8_t*, uint32_t, Windows::Win32::Foundation::BOOL);
    using PFN_CMSG_ALLOC = void* __stdcall(size_t);
    using PFN_CMSG_FREE = void __stdcall(void*);
    using PFN_CMSG_GEN_ENCRYPT_KEY = Windows::Win32::Foundation::BOOL __stdcall(size_t*, Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, void*, Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, Windows::Win32::Security::Cryptography::PFN_CMSG_ALLOC*, size_t*, uint8_t**, uint32_t*);
    using PFN_CMSG_EXPORT_ENCRYPT_KEY = Windows::Win32::Foundation::BOOL __stdcall(size_t, size_t, Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, uint8_t*, uint32_t*);
    using PFN_CMSG_IMPORT_ENCRYPT_KEY = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint32_t, Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, uint8_t*, uint32_t, size_t*);
    using PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_EXPORT_KEY_TRANS = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, Windows::Win32::Security::Cryptography::CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO*, Windows::Win32::Security::Cryptography::CMSG_KEY_TRANS_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_EXPORT_KEY_AGREE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, Windows::Win32::Security::Cryptography::CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO*, Windows::Win32::Security::Cryptography::CMSG_KEY_AGREE_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_EXPORT_MAIL_LIST = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CONTENT_ENCRYPT_INFO*, Windows::Win32::Security::Cryptography::CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO*, Windows::Win32::Security::Cryptography::CMSG_MAIL_LIST_ENCRYPT_INFO*, uint32_t, void*);
    using PFN_CMSG_IMPORT_KEY_TRANS = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::Cryptography::CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, uint32_t, void*, size_t*);
    using PFN_CMSG_IMPORT_KEY_AGREE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::Cryptography::CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, uint32_t, void*, size_t*);
    using PFN_CMSG_IMPORT_MAIL_LIST = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, Windows::Win32::Security::Cryptography::CMSG_CTRL_MAIL_LIST_DECRYPT_PARA*, uint32_t, void*, size_t*);
    using PFN_CMSG_CNG_IMPORT_KEY_TRANS = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CNG_CONTENT_DECRYPT_INFO*, Windows::Win32::Security::Cryptography::CMSG_CTRL_KEY_TRANS_DECRYPT_PARA*, uint32_t, void*);
    using PFN_CMSG_CNG_IMPORT_KEY_AGREE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CNG_CONTENT_DECRYPT_INFO*, Windows::Win32::Security::Cryptography::CMSG_CTRL_KEY_AGREE_DECRYPT_PARA*, uint32_t, void*);
    using PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CMSG_CNG_CONTENT_DECRYPT_INFO*, uint32_t, void*);
    using PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Security::Cryptography::CERT_QUERY_ENCODING_TYPE, size_t, Windows::Win32::Security::Cryptography::CERT_OPEN_STORE_FLAGS, void*, void*, Windows::Win32::Security::Cryptography::CERT_STORE_PROV_INFO*);
    using PFN_CERT_STORE_PROV_CLOSE = void __stdcall(void*, uint32_t);
    using PFN_CERT_STORE_PROV_READ_CERT = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, uint32_t, Windows::Win32::Security::Cryptography::CERT_CONTEXT**);
    using PFN_CERT_STORE_PROV_WRITE_CERT = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_DELETE_CERT = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_READ_CRL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, uint32_t, Windows::Win32::Security::Cryptography::CRL_CONTEXT**);
    using PFN_CERT_STORE_PROV_WRITE_CRL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_DELETE_CRL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_READ_CTL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, uint32_t, Windows::Win32::Security::Cryptography::CTL_CONTEXT**);
    using PFN_CERT_STORE_PROV_WRITE_CTL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_DELETE_CTL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, uint32_t);
    using PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_CONTROL = Windows::Win32::Foundation::BOOL __stdcall(void*, uint32_t, uint32_t, void*);
    using PFN_CERT_STORE_PROV_FIND_CERT = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_STORE_PROV_FIND_INFO*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, uint32_t, void**, Windows::Win32::Security::Cryptography::CERT_CONTEXT**);
    using PFN_CERT_STORE_PROV_FREE_FIND_CERT = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, void*, uint32_t);
    using PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_CONTEXT*, uint32_t, uint32_t, void*, uint32_t*);
    using PFN_CERT_STORE_PROV_FIND_CRL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_STORE_PROV_FIND_INFO*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, uint32_t, void**, Windows::Win32::Security::Cryptography::CRL_CONTEXT**);
    using PFN_CERT_STORE_PROV_FREE_FIND_CRL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, void*, uint32_t);
    using PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, uint32_t, uint32_t, void*, uint32_t*);
    using PFN_CERT_STORE_PROV_FIND_CTL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_STORE_PROV_FIND_INFO*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, uint32_t, void**, Windows::Win32::Security::Cryptography::CTL_CONTEXT**);
    using PFN_CERT_STORE_PROV_FREE_FIND_CTL = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, void*, uint32_t);
    using PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CTL_CONTEXT*, uint32_t, uint32_t, void*, uint32_t*);
    using PFN_CERT_CREATE_CONTEXT_SORT_FUNC = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, uint32_t, uint32_t, void*);
    using PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, uint32_t, void*, void*);
    using PFN_CERT_ENUM_SYSTEM_STORE = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CERT_SYSTEM_STORE_FLAGS, Windows::Win32::Security::Cryptography::CERT_SYSTEM_STORE_INFO*, void*, void*);
    using PFN_CERT_ENUM_PHYSICAL_STORE = Windows::Win32::Foundation::BOOL __stdcall(void*, uint32_t, Windows::Win32::Foundation::PWSTR, Windows::Win32::Security::Cryptography::CERT_PHYSICAL_STORE_INFO*, void*, void*);
    using PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, void**, Windows::Win32::Foundation::PWSTR*);
    using PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint32_t, Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, void*, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint8_t*, uint32_t, uint8_t*, uint32_t*);
    using PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER*, void*, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint8_t*, uint32_t, uint8_t*, uint32_t);
    using PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint32_t, Windows::Win32::Foundation::PSTR, uint32_t, void*, Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, uint32_t*);
    using PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE, uint32_t, Windows::Win32::Foundation::PSTR, uint32_t, void*, Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, uint32_t*);
    using PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO*, uint32_t, void*, Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE*);
    using PFN_IMPORT_PRIV_KEY_FUNC = Windows::Win32::Foundation::BOOL __stdcall(size_t, Windows::Win32::Security::Cryptography::CRYPT_PRIVATE_KEY_INFO*, uint32_t, void*);
    using PFN_EXPORT_PRIV_KEY_FUNC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint32_t, Windows::Win32::Foundation::PSTR, uint32_t, void*, Windows::Win32::Security::Cryptography::CRYPT_PRIVATE_KEY_INFO*, uint32_t*);
    using PFN_CRYPT_GET_SIGNER_CERTIFICATE = Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall(void*, uint32_t, Windows::Win32::Security::Cryptography::CERT_INFO*, void*);
    using PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = void __stdcall(Windows::Win32::Foundation::PSTR, void*);
    using PFN_FREE_ENCODED_OBJECT_FUNC = void __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Security::Cryptography::CRYPT_BLOB_ARRAY*, void*);
    using PFN_CRYPT_CANCEL_RETRIEVAL = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, void*);
    using PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = void __stdcall(void*, uint32_t, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, void*);
    using PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::HCRYPTASYNC);
    using PFN_CRYPT_ENUM_KEYID_PROP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB*, uint32_t, void*, void*, uint32_t, uint32_t*, void**, uint32_t*);
    using PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CERT_CONTEXT*, void*);
    using PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK = void __stdcall(Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT*, Windows::Win32::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, Windows::Win32::Security::Cryptography::CRL_CONTEXT*, void*, uint32_t);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB**, uint32_t);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB*, uint32_t, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB*, uint8_t**, uint32_t*, Windows::Win32::Foundation::PWSTR*, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB**);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE = void __stdcall(Windows::Win32::Security::Cryptography::CRYPT_OBJECT_LOCATOR_RELEASE_REASON, void*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD = void __stdcall(void*, Windows::Win32::Foundation::PWSTR);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE = void __stdcall(void*, uint8_t*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER = void __stdcall(void*, Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB*);
    using PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH*, void*, uint32_t*, Windows::Win32::Security::Cryptography::CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE**, void**);
    using PFN_CERT_IS_WEAK_HASH = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Foundation::PWSTR, uint32_t, Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT*, Windows::Win32::Foundation::FILETIME*, Windows::Win32::Foundation::PWSTR);
    using PFNCryptStreamOutputCallback = int32_t __stdcall(void*, uint8_t*, size_t, Windows::Win32::Foundation::BOOL);
    using PFNCryptStreamOutputCallbackEx = int32_t __stdcall(void*, uint8_t*, size_t, Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE, Windows::Win32::Foundation::BOOL);
    using PFN_CRYPT_XML_WRITE_CALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint8_t*, uint32_t);
    using PFN_CRYPT_XML_DATA_PROVIDER_READ = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint8_t*, uint32_t, uint32_t*);
    using PFN_CRYPT_XML_DATA_PROVIDER_CLOSE = Windows::Win32::Foundation::HRESULT __stdcall(void*);
    using PFN_CRYPT_XML_CREATE_TRANSFORM = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM*, Windows::Win32::Security::Cryptography::CRYPT_XML_DATA_PROVIDER*, Windows::Win32::Security::Cryptography::CRYPT_XML_DATA_PROVIDER*);
    using PFN_CRYPT_XML_ENUM_ALG_INFO = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*, void*);
    using CryptXmlDllGetInterface = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*, Windows::Win32::Security::Cryptography::CRYPT_XML_CRYPTOGRAPHIC_INTERFACE*);
    using CryptXmlDllEncodeAlgorithm = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO*, Windows::Win32::Security::Cryptography::CRYPT_XML_CHARSET, void*, Windows::Win32::Security::Cryptography::PFN_CRYPT_XML_WRITE_CALLBACK*);
    using CryptXmlDllCreateDigest = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM*, uint32_t*, void**);
    using CryptXmlDllDigestData = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint8_t*, uint32_t);
    using CryptXmlDllFinalizeDigest = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint8_t*, uint32_t);
    using CryptXmlDllCloseDigest = Windows::Win32::Foundation::HRESULT __stdcall(void*);
    using CryptXmlDllSignData = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM*, size_t, uint32_t, uint8_t*, uint32_t, uint8_t*, uint32_t, uint32_t*);
    using CryptXmlDllVerifySignature = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM*, Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE, uint8_t*, uint32_t, uint8_t*, uint32_t);
    using CryptXmlDllGetAlgorithmInfo = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM*, Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO**);
    using CryptXmlDllEncodeKeyValue = Windows::Win32::Foundation::HRESULT __stdcall(size_t, Windows::Win32::Security::Cryptography::CRYPT_XML_CHARSET, void*, Windows::Win32::Security::Cryptography::PFN_CRYPT_XML_WRITE_CALLBACK*);
    using CryptXmlDllCreateKey = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CRYPT_XML_BLOB*, Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE*);
    using PFNCMFILTERPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CERT_CONTEXT*, Windows::Win32::Foundation::LPARAM, uint32_t, uint32_t);
    using PFNCMHOOKPROC = uint32_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using PFNTRUSTHELPER = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Security::Cryptography::CERT_CONTEXT*, Windows::Win32::Foundation::LPARAM, Windows::Win32::Foundation::BOOL, uint8_t*);
    using PFNCFILTERPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Security::Cryptography::CERT_CONTEXT*, Windows::Win32::Foundation::BOOL*, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
