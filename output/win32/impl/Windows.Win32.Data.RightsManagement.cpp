// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Data_RightsManagement_2_H
#define WIN32_Windows_Win32_Data_RightsManagement_2_H
#include "win32/Windows.Win32.Data.RightsManagement.h"
#include "win32/impl/Windows.Win32.Data.RightsManagement.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Data::RightsManagement
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetGlobalOptions(win32::Windows::Win32::Data::RightsManagement::DRMGLOBALOPTIONS eGlobalOptions, void* pvdata, uint32_t dwlen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(eGlobalOptions);
        ORBIT_TRACK_PARAM(pvdata);
        ORBIT_TRACK_PARAM(dwlen);

        auto win32_impl_result = g_api_table.DRMSetGlobalOptions(eGlobalOptions, pvdata, dwlen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetClientVersion(win32::Windows::Win32::Data::RightsManagement::DRM_CLIENT_VERSION_INFO* pDRMClientVersionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDRMClientVersionInfo);

        auto win32_impl_result = g_api_table.DRMGetClientVersion(pDRMClientVersionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMInitEnvironment(win32::Windows::Win32::Data::RightsManagement::DRMSECURITYPROVIDERTYPE eSecurityProviderType, win32::Windows::Win32::Data::RightsManagement::DRMSPECTYPE eSpecification, win32::Windows::Win32::Foundation::PWSTR wszSecurityProvider, win32::Windows::Win32::Foundation::PWSTR wszManifestCredentials, win32::Windows::Win32::Foundation::PWSTR wszMachineCredentials, uint32_t* phEnv, uint32_t* phDefaultLibrary) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(eSecurityProviderType);
        ORBIT_TRACK_PARAM(eSpecification);
        ORBIT_TRACK_PARAM(wszSecurityProvider);
        ORBIT_TRACK_PARAM(wszManifestCredentials);
        ORBIT_TRACK_PARAM(wszMachineCredentials);
        ORBIT_TRACK_PARAM(phEnv);
        ORBIT_TRACK_PARAM(phDefaultLibrary);

        auto win32_impl_result = g_api_table.DRMInitEnvironment(eSecurityProviderType, eSpecification, wszSecurityProvider, wszManifestCredentials, wszMachineCredentials, phEnv, phDefaultLibrary);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMLoadLibrary(uint32_t hEnv, win32::Windows::Win32::Data::RightsManagement::DRMSPECTYPE eSpecification, win32::Windows::Win32::Foundation::PWSTR wszLibraryProvider, win32::Windows::Win32::Foundation::PWSTR wszCredentials, uint32_t* phLibrary) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(eSpecification);
        ORBIT_TRACK_PARAM(wszLibraryProvider);
        ORBIT_TRACK_PARAM(wszCredentials);
        ORBIT_TRACK_PARAM(phLibrary);

        auto win32_impl_result = g_api_table.DRMLoadLibrary(hEnv, eSpecification, wszLibraryProvider, wszCredentials, phLibrary);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateEnablingPrincipal(uint32_t hEnv, uint32_t hLibrary, win32::Windows::Win32::Foundation::PWSTR wszObject, win32::Windows::Win32::Data::RightsManagement::DRMID* pidPrincipal, win32::Windows::Win32::Foundation::PWSTR wszCredentials, uint32_t* phEnablingPrincipal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(hLibrary);
        ORBIT_TRACK_PARAM(wszObject);
        ORBIT_TRACK_PARAM(pidPrincipal);
        ORBIT_TRACK_PARAM(wszCredentials);
        ORBIT_TRACK_PARAM(phEnablingPrincipal);

        auto win32_impl_result = g_api_table.DRMCreateEnablingPrincipal(hEnv, hLibrary, wszObject, pidPrincipal, wszCredentials, phEnablingPrincipal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCloseHandle(uint32_t handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.DRMCloseHandle(handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCloseEnvironmentHandle(uint32_t hEnv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);

        auto win32_impl_result = g_api_table.DRMCloseEnvironmentHandle(hEnv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDuplicateHandle(uint32_t hToCopy, uint32_t* phCopy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hToCopy);
        ORBIT_TRACK_PARAM(phCopy);

        auto win32_impl_result = g_api_table.DRMDuplicateHandle(hToCopy, phCopy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDuplicateEnvironmentHandle(uint32_t hToCopy, uint32_t* phCopy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hToCopy);
        ORBIT_TRACK_PARAM(phCopy);

        auto win32_impl_result = g_api_table.DRMDuplicateEnvironmentHandle(hToCopy, phCopy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMRegisterRevocationList(uint32_t hEnv, win32::Windows::Win32::Foundation::PWSTR wszRevocationList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(wszRevocationList);

        auto win32_impl_result = g_api_table.DRMRegisterRevocationList(hEnv, wszRevocationList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCheckSecurity(uint32_t hEnv, uint32_t cLevel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(cLevel);

        auto win32_impl_result = g_api_table.DRMCheckSecurity(hEnv, cLevel);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMRegisterContent(win32::Windows::Win32::Foundation::BOOL fRegister) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fRegister);

        auto win32_impl_result = g_api_table.DRMRegisterContent(fRegister);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMEncrypt(uint32_t hCryptoProvider, uint32_t iPosition, uint32_t cNumInBytes, uint8_t* pbInData, uint32_t* pcNumOutBytes, uint8_t* pbOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptoProvider);
        ORBIT_TRACK_PARAM(iPosition);
        ORBIT_TRACK_PARAM(cNumInBytes);
        ORBIT_TRACK_PARAM(pbInData);
        ORBIT_TRACK_PARAM(pcNumOutBytes);
        ORBIT_TRACK_PARAM(pbOutData);

        auto win32_impl_result = g_api_table.DRMEncrypt(hCryptoProvider, iPosition, cNumInBytes, pbInData, pcNumOutBytes, pbOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDecrypt(uint32_t hCryptoProvider, uint32_t iPosition, uint32_t cNumInBytes, uint8_t* pbInData, uint32_t* pcNumOutBytes, uint8_t* pbOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptoProvider);
        ORBIT_TRACK_PARAM(iPosition);
        ORBIT_TRACK_PARAM(cNumInBytes);
        ORBIT_TRACK_PARAM(pbInData);
        ORBIT_TRACK_PARAM(pcNumOutBytes);
        ORBIT_TRACK_PARAM(pbOutData);

        auto win32_impl_result = g_api_table.DRMDecrypt(hCryptoProvider, iPosition, cNumInBytes, pbInData, pcNumOutBytes, pbOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateBoundLicense(uint32_t hEnv, win32::Windows::Win32::Data::RightsManagement::DRMBOUNDLICENSEPARAMS* pParams, win32::Windows::Win32::Foundation::PWSTR wszLicenseChain, uint32_t* phBoundLicense, uint32_t* phErrorLog) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(pParams);
        ORBIT_TRACK_PARAM(wszLicenseChain);
        ORBIT_TRACK_PARAM(phBoundLicense);
        ORBIT_TRACK_PARAM(phErrorLog);

        auto win32_impl_result = g_api_table.DRMCreateBoundLicense(hEnv, pParams, wszLicenseChain, phBoundLicense, phErrorLog);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateEnablingBitsDecryptor(uint32_t hBoundLicense, win32::Windows::Win32::Foundation::PWSTR wszRight, uint32_t hAuxLib, win32::Windows::Win32::Foundation::PWSTR wszAuxPlug, uint32_t* phDecryptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBoundLicense);
        ORBIT_TRACK_PARAM(wszRight);
        ORBIT_TRACK_PARAM(hAuxLib);
        ORBIT_TRACK_PARAM(wszAuxPlug);
        ORBIT_TRACK_PARAM(phDecryptor);

        auto win32_impl_result = g_api_table.DRMCreateEnablingBitsDecryptor(hBoundLicense, wszRight, hAuxLib, wszAuxPlug, phDecryptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateEnablingBitsEncryptor(uint32_t hBoundLicense, win32::Windows::Win32::Foundation::PWSTR wszRight, uint32_t hAuxLib, win32::Windows::Win32::Foundation::PWSTR wszAuxPlug, uint32_t* phEncryptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBoundLicense);
        ORBIT_TRACK_PARAM(wszRight);
        ORBIT_TRACK_PARAM(hAuxLib);
        ORBIT_TRACK_PARAM(wszAuxPlug);
        ORBIT_TRACK_PARAM(phEncryptor);

        auto win32_impl_result = g_api_table.DRMCreateEnablingBitsEncryptor(hBoundLicense, wszRight, hAuxLib, wszAuxPlug, phEncryptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMAttest(uint32_t hEnablingPrincipal, win32::Windows::Win32::Foundation::PWSTR wszData, win32::Windows::Win32::Data::RightsManagement::DRMATTESTTYPE eType, uint32_t* pcAttestedBlob, win32::Windows::Win32::Foundation::PWSTR wszAttestedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnablingPrincipal);
        ORBIT_TRACK_PARAM(wszData);
        ORBIT_TRACK_PARAM(eType);
        ORBIT_TRACK_PARAM(pcAttestedBlob);
        ORBIT_TRACK_PARAM(wszAttestedBlob);

        auto win32_impl_result = g_api_table.DRMAttest(hEnablingPrincipal, wszData, eType, pcAttestedBlob, wszAttestedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetTime(uint32_t hEnv, win32::Windows::Win32::Data::RightsManagement::DRMTIMETYPE eTimerIdType, win32::Windows::Win32::Foundation::SYSTEMTIME* poTimeObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(eTimerIdType);
        ORBIT_TRACK_PARAM(poTimeObject);

        auto win32_impl_result = g_api_table.DRMGetTime(hEnv, eTimerIdType, poTimeObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetInfo(uint32_t handle, win32::Windows::Win32::Foundation::PWSTR wszAttribute, win32::Windows::Win32::Data::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);
        ORBIT_TRACK_PARAM(wszAttribute);
        ORBIT_TRACK_PARAM(peEncoding);
        ORBIT_TRACK_PARAM(pcBuffer);
        ORBIT_TRACK_PARAM(pbBuffer);

        auto win32_impl_result = g_api_table.DRMGetInfo(handle, wszAttribute, peEncoding, pcBuffer, pbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetEnvironmentInfo(uint32_t handle, win32::Windows::Win32::Foundation::PWSTR wszAttribute, win32::Windows::Win32::Data::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);
        ORBIT_TRACK_PARAM(wszAttribute);
        ORBIT_TRACK_PARAM(peEncoding);
        ORBIT_TRACK_PARAM(pcBuffer);
        ORBIT_TRACK_PARAM(pbBuffer);

        auto win32_impl_result = g_api_table.DRMGetEnvironmentInfo(handle, wszAttribute, peEncoding, pcBuffer, pbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetProcAddress(uint32_t hLibrary, win32::Windows::Win32::Foundation::PWSTR wszProcName, win32::Windows::Win32::Foundation::FARPROC** ppfnProcAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLibrary);
        ORBIT_TRACK_PARAM(wszProcName);
        ORBIT_TRACK_PARAM(ppfnProcAddress);

        auto win32_impl_result = g_api_table.DRMGetProcAddress(hLibrary, wszProcName, ppfnProcAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetBoundLicenseObjectCount(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszSubObjectType, uint32_t* pcSubObjects) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszSubObjectType);
        ORBIT_TRACK_PARAM(pcSubObjects);

        auto win32_impl_result = g_api_table.DRMGetBoundLicenseObjectCount(hQueryRoot, wszSubObjectType, pcSubObjects);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetBoundLicenseObject(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszSubObjectType, uint32_t iWhich, uint32_t* phSubObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszSubObjectType);
        ORBIT_TRACK_PARAM(iWhich);
        ORBIT_TRACK_PARAM(phSubObject);

        auto win32_impl_result = g_api_table.DRMGetBoundLicenseObject(hQueryRoot, wszSubObjectType, iWhich, phSubObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetBoundLicenseAttributeCount(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszAttribute, uint32_t* pcAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszAttribute);
        ORBIT_TRACK_PARAM(pcAttributes);

        auto win32_impl_result = g_api_table.DRMGetBoundLicenseAttributeCount(hQueryRoot, wszAttribute, pcAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetBoundLicenseAttribute(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszAttribute, uint32_t iWhich, win32::Windows::Win32::Data::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszAttribute);
        ORBIT_TRACK_PARAM(iWhich);
        ORBIT_TRACK_PARAM(peEncoding);
        ORBIT_TRACK_PARAM(pcBuffer);
        ORBIT_TRACK_PARAM(pbBuffer);

        auto win32_impl_result = g_api_table.DRMGetBoundLicenseAttribute(hQueryRoot, wszAttribute, iWhich, peEncoding, pcBuffer, pbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateClientSession(win32::Windows::Win32::Data::RightsManagement::DRMCALLBACK* pfnCallback, uint32_t uCallbackVersion, win32::Windows::Win32::Foundation::PWSTR wszGroupIDProviderType, win32::Windows::Win32::Foundation::PWSTR wszGroupID, uint32_t* phClient) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnCallback);
        ORBIT_TRACK_PARAM(uCallbackVersion);
        ORBIT_TRACK_PARAM(wszGroupIDProviderType);
        ORBIT_TRACK_PARAM(wszGroupID);
        ORBIT_TRACK_PARAM(phClient);

        auto win32_impl_result = g_api_table.DRMCreateClientSession(pfnCallback, uCallbackVersion, wszGroupIDProviderType, wszGroupID, phClient);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMIsActivated(uint32_t hClient, uint32_t uFlags, win32::Windows::Win32::Data::RightsManagement::DRM_ACTSERV_INFO* pActServInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClient);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(pActServInfo);

        auto win32_impl_result = g_api_table.DRMIsActivated(hClient, uFlags, pActServInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMActivate(uint32_t hClient, uint32_t uFlags, uint32_t uLangID, win32::Windows::Win32::Data::RightsManagement::DRM_ACTSERV_INFO* pActServInfo, void* pvContext, win32::Windows::Win32::Foundation::HWND hParentWnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClient);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(uLangID);
        ORBIT_TRACK_PARAM(pActServInfo);
        ORBIT_TRACK_PARAM(pvContext);
        ORBIT_TRACK_PARAM(hParentWnd);

        auto win32_impl_result = g_api_table.DRMActivate(hClient, uFlags, uLangID, pActServInfo, pvContext, hParentWnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetServiceLocation(uint32_t hClient, uint32_t uServiceType, uint32_t uServiceLocation, win32::Windows::Win32::Foundation::PWSTR wszIssuanceLicense, uint32_t* puServiceURLLength, win32::Windows::Win32::Foundation::PWSTR wszServiceURL) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClient);
        ORBIT_TRACK_PARAM(uServiceType);
        ORBIT_TRACK_PARAM(uServiceLocation);
        ORBIT_TRACK_PARAM(wszIssuanceLicense);
        ORBIT_TRACK_PARAM(puServiceURLLength);
        ORBIT_TRACK_PARAM(wszServiceURL);

        auto win32_impl_result = g_api_table.DRMGetServiceLocation(hClient, uServiceType, uServiceLocation, wszIssuanceLicense, puServiceURLLength, wszServiceURL);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateLicenseStorageSession(uint32_t hEnv, uint32_t hDefaultLibrary, uint32_t hClient, uint32_t uFlags, win32::Windows::Win32::Foundation::PWSTR wszIssuanceLicense, uint32_t* phLicenseStorage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(hDefaultLibrary);
        ORBIT_TRACK_PARAM(hClient);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(wszIssuanceLicense);
        ORBIT_TRACK_PARAM(phLicenseStorage);

        auto win32_impl_result = g_api_table.DRMCreateLicenseStorageSession(hEnv, hDefaultLibrary, hClient, uFlags, wszIssuanceLicense, phLicenseStorage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMAddLicense(uint32_t hLicenseStorage, uint32_t uFlags, win32::Windows::Win32::Foundation::PWSTR wszLicense) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLicenseStorage);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(wszLicense);

        auto win32_impl_result = g_api_table.DRMAddLicense(hLicenseStorage, uFlags, wszLicense);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMAcquireAdvisories(uint32_t hLicenseStorage, win32::Windows::Win32::Foundation::PWSTR wszLicense, win32::Windows::Win32::Foundation::PWSTR wszURL, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLicenseStorage);
        ORBIT_TRACK_PARAM(wszLicense);
        ORBIT_TRACK_PARAM(wszURL);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.DRMAcquireAdvisories(hLicenseStorage, wszLicense, wszURL, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMEnumerateLicense(uint32_t hSession, uint32_t uFlags, uint32_t uIndex, win32::Windows::Win32::Foundation::BOOL* pfSharedFlag, uint32_t* puCertificateDataLen, win32::Windows::Win32::Foundation::PWSTR wszCertificateData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSession);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(pfSharedFlag);
        ORBIT_TRACK_PARAM(puCertificateDataLen);
        ORBIT_TRACK_PARAM(wszCertificateData);

        auto win32_impl_result = g_api_table.DRMEnumerateLicense(hSession, uFlags, uIndex, pfSharedFlag, puCertificateDataLen, wszCertificateData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMAcquireLicense(uint32_t hSession, uint32_t uFlags, win32::Windows::Win32::Foundation::PWSTR wszGroupIdentityCredential, win32::Windows::Win32::Foundation::PWSTR wszRequestedRights, win32::Windows::Win32::Foundation::PWSTR wszCustomData, win32::Windows::Win32::Foundation::PWSTR wszURL, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSession);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(wszGroupIdentityCredential);
        ORBIT_TRACK_PARAM(wszRequestedRights);
        ORBIT_TRACK_PARAM(wszCustomData);
        ORBIT_TRACK_PARAM(wszURL);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.DRMAcquireLicense(hSession, uFlags, wszGroupIdentityCredential, wszRequestedRights, wszCustomData, wszURL, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDeleteLicense(uint32_t hSession, win32::Windows::Win32::Foundation::PWSTR wszLicenseId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSession);
        ORBIT_TRACK_PARAM(wszLicenseId);

        auto win32_impl_result = g_api_table.DRMDeleteLicense(hSession, wszLicenseId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCloseSession(uint32_t hSession) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSession);

        auto win32_impl_result = g_api_table.DRMCloseSession(hSession);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDuplicateSession(uint32_t hSessionIn, uint32_t* phSessionOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSessionIn);
        ORBIT_TRACK_PARAM(phSessionOut);

        auto win32_impl_result = g_api_table.DRMDuplicateSession(hSessionIn, phSessionOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetSecurityProvider(uint32_t uFlags, uint32_t* puTypeLen, win32::Windows::Win32::Foundation::PWSTR wszType, uint32_t* puPathLen, win32::Windows::Win32::Foundation::PWSTR wszPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(puTypeLen);
        ORBIT_TRACK_PARAM(wszType);
        ORBIT_TRACK_PARAM(puPathLen);
        ORBIT_TRACK_PARAM(wszPath);

        auto win32_impl_result = g_api_table.DRMGetSecurityProvider(uFlags, puTypeLen, wszType, puPathLen, wszPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMEncode(win32::Windows::Win32::Foundation::PWSTR wszAlgID, uint32_t uDataLen, uint8_t* pbDecodedData, uint32_t* puEncodedStringLen, win32::Windows::Win32::Foundation::PWSTR wszEncodedString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszAlgID);
        ORBIT_TRACK_PARAM(uDataLen);
        ORBIT_TRACK_PARAM(pbDecodedData);
        ORBIT_TRACK_PARAM(puEncodedStringLen);
        ORBIT_TRACK_PARAM(wszEncodedString);

        auto win32_impl_result = g_api_table.DRMEncode(wszAlgID, uDataLen, pbDecodedData, puEncodedStringLen, wszEncodedString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDecode(win32::Windows::Win32::Foundation::PWSTR wszAlgID, win32::Windows::Win32::Foundation::PWSTR wszEncodedString, uint32_t* puDecodedDataLen, uint8_t* pbDecodedData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszAlgID);
        ORBIT_TRACK_PARAM(wszEncodedString);
        ORBIT_TRACK_PARAM(puDecodedDataLen);
        ORBIT_TRACK_PARAM(pbDecodedData);

        auto win32_impl_result = g_api_table.DRMDecode(wszAlgID, wszEncodedString, puDecodedDataLen, pbDecodedData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMConstructCertificateChain(uint32_t cCertificates, win32::Windows::Win32::Foundation::PWSTR* rgwszCertificates, uint32_t* pcChain, win32::Windows::Win32::Foundation::PWSTR wszChain) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cCertificates);
        ORBIT_TRACK_PARAM(rgwszCertificates);
        ORBIT_TRACK_PARAM(pcChain);
        ORBIT_TRACK_PARAM(wszChain);

        auto win32_impl_result = g_api_table.DRMConstructCertificateChain(cCertificates, rgwszCertificates, pcChain, wszChain);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMParseUnboundLicense(win32::Windows::Win32::Foundation::PWSTR wszCertificate, uint32_t* phQueryRoot) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszCertificate);
        ORBIT_TRACK_PARAM(phQueryRoot);

        auto win32_impl_result = g_api_table.DRMParseUnboundLicense(wszCertificate, phQueryRoot);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCloseQueryHandle(uint32_t hQuery) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQuery);

        auto win32_impl_result = g_api_table.DRMCloseQueryHandle(hQuery);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUnboundLicenseObjectCount(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszSubObjectType, uint32_t* pcSubObjects) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszSubObjectType);
        ORBIT_TRACK_PARAM(pcSubObjects);

        auto win32_impl_result = g_api_table.DRMGetUnboundLicenseObjectCount(hQueryRoot, wszSubObjectType, pcSubObjects);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUnboundLicenseObject(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszSubObjectType, uint32_t iIndex, uint32_t* phSubQuery) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszSubObjectType);
        ORBIT_TRACK_PARAM(iIndex);
        ORBIT_TRACK_PARAM(phSubQuery);

        auto win32_impl_result = g_api_table.DRMGetUnboundLicenseObject(hQueryRoot, wszSubObjectType, iIndex, phSubQuery);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUnboundLicenseAttributeCount(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszAttributeType, uint32_t* pcAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszAttributeType);
        ORBIT_TRACK_PARAM(pcAttributes);

        auto win32_impl_result = g_api_table.DRMGetUnboundLicenseAttributeCount(hQueryRoot, wszAttributeType, pcAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUnboundLicenseAttribute(uint32_t hQueryRoot, win32::Windows::Win32::Foundation::PWSTR wszAttributeType, uint32_t iWhich, win32::Windows::Win32::Data::RightsManagement::DRMENCODINGTYPE* peEncoding, uint32_t* pcBuffer, uint8_t* pbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hQueryRoot);
        ORBIT_TRACK_PARAM(wszAttributeType);
        ORBIT_TRACK_PARAM(iWhich);
        ORBIT_TRACK_PARAM(peEncoding);
        ORBIT_TRACK_PARAM(pcBuffer);
        ORBIT_TRACK_PARAM(pbBuffer);

        auto win32_impl_result = g_api_table.DRMGetUnboundLicenseAttribute(hQueryRoot, wszAttributeType, iWhich, peEncoding, pcBuffer, pbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetCertificateChainCount(win32::Windows::Win32::Foundation::PWSTR wszChain, uint32_t* pcCertCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszChain);
        ORBIT_TRACK_PARAM(pcCertCount);

        auto win32_impl_result = g_api_table.DRMGetCertificateChainCount(wszChain, pcCertCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDeconstructCertificateChain(win32::Windows::Win32::Foundation::PWSTR wszChain, uint32_t iWhich, uint32_t* pcCert, win32::Windows::Win32::Foundation::PWSTR wszCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszChain);
        ORBIT_TRACK_PARAM(iWhich);
        ORBIT_TRACK_PARAM(pcCert);
        ORBIT_TRACK_PARAM(wszCert);

        auto win32_impl_result = g_api_table.DRMDeconstructCertificateChain(wszChain, iWhich, pcCert, wszCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMVerify(win32::Windows::Win32::Foundation::PWSTR wszData, uint32_t* pcAttestedData, win32::Windows::Win32::Foundation::PWSTR wszAttestedData, win32::Windows::Win32::Data::RightsManagement::DRMATTESTTYPE* peType, uint32_t* pcPrincipal, win32::Windows::Win32::Foundation::PWSTR wszPrincipal, uint32_t* pcManifest, win32::Windows::Win32::Foundation::PWSTR wszManifest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszData);
        ORBIT_TRACK_PARAM(pcAttestedData);
        ORBIT_TRACK_PARAM(wszAttestedData);
        ORBIT_TRACK_PARAM(peType);
        ORBIT_TRACK_PARAM(pcPrincipal);
        ORBIT_TRACK_PARAM(wszPrincipal);
        ORBIT_TRACK_PARAM(pcManifest);
        ORBIT_TRACK_PARAM(wszManifest);

        auto win32_impl_result = g_api_table.DRMVerify(wszData, pcAttestedData, wszAttestedData, peType, pcPrincipal, wszPrincipal, pcManifest, wszManifest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateUser(win32::Windows::Win32::Foundation::PWSTR wszUserName, win32::Windows::Win32::Foundation::PWSTR wszUserId, win32::Windows::Win32::Foundation::PWSTR wszUserIdType, uint32_t* phUser) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszUserName);
        ORBIT_TRACK_PARAM(wszUserId);
        ORBIT_TRACK_PARAM(wszUserIdType);
        ORBIT_TRACK_PARAM(phUser);

        auto win32_impl_result = g_api_table.DRMCreateUser(wszUserName, wszUserId, wszUserIdType, phUser);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateRight(win32::Windows::Win32::Foundation::PWSTR wszRightName, win32::Windows::Win32::Foundation::SYSTEMTIME* pstFrom, win32::Windows::Win32::Foundation::SYSTEMTIME* pstUntil, uint32_t cExtendedInfo, win32::Windows::Win32::Foundation::PWSTR* pwszExtendedInfoName, win32::Windows::Win32::Foundation::PWSTR* pwszExtendedInfoValue, uint32_t* phRight) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszRightName);
        ORBIT_TRACK_PARAM(pstFrom);
        ORBIT_TRACK_PARAM(pstUntil);
        ORBIT_TRACK_PARAM(cExtendedInfo);
        ORBIT_TRACK_PARAM(pwszExtendedInfoName);
        ORBIT_TRACK_PARAM(pwszExtendedInfoValue);
        ORBIT_TRACK_PARAM(phRight);

        auto win32_impl_result = g_api_table.DRMCreateRight(wszRightName, pstFrom, pstUntil, cExtendedInfo, pwszExtendedInfoName, pwszExtendedInfoValue, phRight);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMCreateIssuanceLicense(win32::Windows::Win32::Foundation::SYSTEMTIME* pstTimeFrom, win32::Windows::Win32::Foundation::SYSTEMTIME* pstTimeUntil, win32::Windows::Win32::Foundation::PWSTR wszReferralInfoName, win32::Windows::Win32::Foundation::PWSTR wszReferralInfoURL, uint32_t hOwner, win32::Windows::Win32::Foundation::PWSTR wszIssuanceLicense, uint32_t hBoundLicense, uint32_t* phIssuanceLicense) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pstTimeFrom);
        ORBIT_TRACK_PARAM(pstTimeUntil);
        ORBIT_TRACK_PARAM(wszReferralInfoName);
        ORBIT_TRACK_PARAM(wszReferralInfoURL);
        ORBIT_TRACK_PARAM(hOwner);
        ORBIT_TRACK_PARAM(wszIssuanceLicense);
        ORBIT_TRACK_PARAM(hBoundLicense);
        ORBIT_TRACK_PARAM(phIssuanceLicense);

        auto win32_impl_result = g_api_table.DRMCreateIssuanceLicense(pstTimeFrom, pstTimeUntil, wszReferralInfoName, wszReferralInfoURL, hOwner, wszIssuanceLicense, hBoundLicense, phIssuanceLicense);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMAddRightWithUser(uint32_t hIssuanceLicense, uint32_t hRight, uint32_t hUser) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(hRight);
        ORBIT_TRACK_PARAM(hUser);

        auto win32_impl_result = g_api_table.DRMAddRightWithUser(hIssuanceLicense, hRight, hUser);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMClearAllRights(uint32_t hIssuanceLicense) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);

        auto win32_impl_result = g_api_table.DRMClearAllRights(hIssuanceLicense);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetMetaData(uint32_t hIssuanceLicense, win32::Windows::Win32::Foundation::PWSTR wszContentId, win32::Windows::Win32::Foundation::PWSTR wszContentIdType, win32::Windows::Win32::Foundation::PWSTR wszSKUId, win32::Windows::Win32::Foundation::PWSTR wszSKUIdType, win32::Windows::Win32::Foundation::PWSTR wszContentType, win32::Windows::Win32::Foundation::PWSTR wszContentName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(wszContentId);
        ORBIT_TRACK_PARAM(wszContentIdType);
        ORBIT_TRACK_PARAM(wszSKUId);
        ORBIT_TRACK_PARAM(wszSKUIdType);
        ORBIT_TRACK_PARAM(wszContentType);
        ORBIT_TRACK_PARAM(wszContentName);

        auto win32_impl_result = g_api_table.DRMSetMetaData(hIssuanceLicense, wszContentId, wszContentIdType, wszSKUId, wszSKUIdType, wszContentType, wszContentName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetUsagePolicy(uint32_t hIssuanceLicense, win32::Windows::Win32::Data::RightsManagement::DRM_USAGEPOLICY_TYPE eUsagePolicyType, win32::Windows::Win32::Foundation::BOOL fDelete, win32::Windows::Win32::Foundation::BOOL fExclusion, win32::Windows::Win32::Foundation::PWSTR wszName, win32::Windows::Win32::Foundation::PWSTR wszMinVersion, win32::Windows::Win32::Foundation::PWSTR wszMaxVersion, win32::Windows::Win32::Foundation::PWSTR wszPublicKey, win32::Windows::Win32::Foundation::PWSTR wszDigestAlgorithm, uint8_t* pbDigest, uint32_t cbDigest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(eUsagePolicyType);
        ORBIT_TRACK_PARAM(fDelete);
        ORBIT_TRACK_PARAM(fExclusion);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(wszMinVersion);
        ORBIT_TRACK_PARAM(wszMaxVersion);
        ORBIT_TRACK_PARAM(wszPublicKey);
        ORBIT_TRACK_PARAM(wszDigestAlgorithm);
        ORBIT_TRACK_PARAM(pbDigest);
        ORBIT_TRACK_PARAM(cbDigest);

        auto win32_impl_result = g_api_table.DRMSetUsagePolicy(hIssuanceLicense, eUsagePolicyType, fDelete, fExclusion, wszName, wszMinVersion, wszMaxVersion, wszPublicKey, wszDigestAlgorithm, pbDigest, cbDigest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetRevocationPoint(uint32_t hIssuanceLicense, win32::Windows::Win32::Foundation::BOOL fDelete, win32::Windows::Win32::Foundation::PWSTR wszId, win32::Windows::Win32::Foundation::PWSTR wszIdType, win32::Windows::Win32::Foundation::PWSTR wszURL, win32::Windows::Win32::Foundation::SYSTEMTIME* pstFrequency, win32::Windows::Win32::Foundation::PWSTR wszName, win32::Windows::Win32::Foundation::PWSTR wszPublicKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(fDelete);
        ORBIT_TRACK_PARAM(wszId);
        ORBIT_TRACK_PARAM(wszIdType);
        ORBIT_TRACK_PARAM(wszURL);
        ORBIT_TRACK_PARAM(pstFrequency);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(wszPublicKey);

        auto win32_impl_result = g_api_table.DRMSetRevocationPoint(hIssuanceLicense, fDelete, wszId, wszIdType, wszURL, pstFrequency, wszName, wszPublicKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetApplicationSpecificData(uint32_t hIssuanceLicense, win32::Windows::Win32::Foundation::BOOL fDelete, win32::Windows::Win32::Foundation::PWSTR wszName, win32::Windows::Win32::Foundation::PWSTR wszValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(fDelete);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(wszValue);

        auto win32_impl_result = g_api_table.DRMSetApplicationSpecificData(hIssuanceLicense, fDelete, wszName, wszValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetNameAndDescription(uint32_t hIssuanceLicense, win32::Windows::Win32::Foundation::BOOL fDelete, uint32_t lcid, win32::Windows::Win32::Foundation::PWSTR wszName, win32::Windows::Win32::Foundation::PWSTR wszDescription) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(fDelete);
        ORBIT_TRACK_PARAM(lcid);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(wszDescription);

        auto win32_impl_result = g_api_table.DRMSetNameAndDescription(hIssuanceLicense, fDelete, lcid, wszName, wszDescription);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMSetIntervalTime(uint32_t hIssuanceLicense, uint32_t cDays) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(cDays);

        auto win32_impl_result = g_api_table.DRMSetIntervalTime(hIssuanceLicense, cDays);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetIssuanceLicenseTemplate(uint32_t hIssuanceLicense, uint32_t* puIssuanceLicenseTemplateLength, win32::Windows::Win32::Foundation::PWSTR wszIssuanceLicenseTemplate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(puIssuanceLicenseTemplateLength);
        ORBIT_TRACK_PARAM(wszIssuanceLicenseTemplate);

        auto win32_impl_result = g_api_table.DRMGetIssuanceLicenseTemplate(hIssuanceLicense, puIssuanceLicenseTemplateLength, wszIssuanceLicenseTemplate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetSignedIssuanceLicense(uint32_t hEnv, uint32_t hIssuanceLicense, uint32_t uFlags, uint8_t* pbSymKey, uint32_t cbSymKey, win32::Windows::Win32::Foundation::PWSTR wszSymKeyType, win32::Windows::Win32::Foundation::PWSTR wszClientLicensorCertificate, win32::Windows::Win32::Data::RightsManagement::DRMCALLBACK* pfnCallback, win32::Windows::Win32::Foundation::PWSTR wszURL, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(pbSymKey);
        ORBIT_TRACK_PARAM(cbSymKey);
        ORBIT_TRACK_PARAM(wszSymKeyType);
        ORBIT_TRACK_PARAM(wszClientLicensorCertificate);
        ORBIT_TRACK_PARAM(pfnCallback);
        ORBIT_TRACK_PARAM(wszURL);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.DRMGetSignedIssuanceLicense(hEnv, hIssuanceLicense, uFlags, pbSymKey, cbSymKey, wszSymKeyType, wszClientLicensorCertificate, pfnCallback, wszURL, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetSignedIssuanceLicenseEx(uint32_t hEnv, uint32_t hIssuanceLicense, uint32_t uFlags, uint8_t* pbSymKey, uint32_t cbSymKey, win32::Windows::Win32::Foundation::PWSTR wszSymKeyType, void* pvReserved, uint32_t hEnablingPrincipal, uint32_t hBoundLicenseCLC, win32::Windows::Win32::Data::RightsManagement::DRMCALLBACK* pfnCallback, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(pbSymKey);
        ORBIT_TRACK_PARAM(cbSymKey);
        ORBIT_TRACK_PARAM(wszSymKeyType);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(hEnablingPrincipal);
        ORBIT_TRACK_PARAM(hBoundLicenseCLC);
        ORBIT_TRACK_PARAM(pfnCallback);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.DRMGetSignedIssuanceLicenseEx(hEnv, hIssuanceLicense, uFlags, pbSymKey, cbSymKey, wszSymKeyType, pvReserved, hEnablingPrincipal, hBoundLicenseCLC, pfnCallback, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMClosePubHandle(uint32_t hPub) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPub);

        auto win32_impl_result = g_api_table.DRMClosePubHandle(hPub);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMDuplicatePubHandle(uint32_t hPubIn, uint32_t* phPubOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPubIn);
        ORBIT_TRACK_PARAM(phPubOut);

        auto win32_impl_result = g_api_table.DRMDuplicatePubHandle(hPubIn, phPubOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUserInfo(uint32_t hUser, uint32_t* puUserNameLength, win32::Windows::Win32::Foundation::PWSTR wszUserName, uint32_t* puUserIdLength, win32::Windows::Win32::Foundation::PWSTR wszUserId, uint32_t* puUserIdTypeLength, win32::Windows::Win32::Foundation::PWSTR wszUserIdType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hUser);
        ORBIT_TRACK_PARAM(puUserNameLength);
        ORBIT_TRACK_PARAM(wszUserName);
        ORBIT_TRACK_PARAM(puUserIdLength);
        ORBIT_TRACK_PARAM(wszUserId);
        ORBIT_TRACK_PARAM(puUserIdTypeLength);
        ORBIT_TRACK_PARAM(wszUserIdType);

        auto win32_impl_result = g_api_table.DRMGetUserInfo(hUser, puUserNameLength, wszUserName, puUserIdLength, wszUserId, puUserIdTypeLength, wszUserIdType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetRightInfo(uint32_t hRight, uint32_t* puRightNameLength, win32::Windows::Win32::Foundation::PWSTR wszRightName, win32::Windows::Win32::Foundation::SYSTEMTIME* pstFrom, win32::Windows::Win32::Foundation::SYSTEMTIME* pstUntil) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRight);
        ORBIT_TRACK_PARAM(puRightNameLength);
        ORBIT_TRACK_PARAM(wszRightName);
        ORBIT_TRACK_PARAM(pstFrom);
        ORBIT_TRACK_PARAM(pstUntil);

        auto win32_impl_result = g_api_table.DRMGetRightInfo(hRight, puRightNameLength, wszRightName, pstFrom, pstUntil);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetRightExtendedInfo(uint32_t hRight, uint32_t uIndex, uint32_t* puExtendedInfoNameLength, win32::Windows::Win32::Foundation::PWSTR wszExtendedInfoName, uint32_t* puExtendedInfoValueLength, win32::Windows::Win32::Foundation::PWSTR wszExtendedInfoValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRight);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(puExtendedInfoNameLength);
        ORBIT_TRACK_PARAM(wszExtendedInfoName);
        ORBIT_TRACK_PARAM(puExtendedInfoValueLength);
        ORBIT_TRACK_PARAM(wszExtendedInfoValue);

        auto win32_impl_result = g_api_table.DRMGetRightExtendedInfo(hRight, uIndex, puExtendedInfoNameLength, wszExtendedInfoName, puExtendedInfoValueLength, wszExtendedInfoValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUsers(uint32_t hIssuanceLicense, uint32_t uIndex, uint32_t* phUser) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(phUser);

        auto win32_impl_result = g_api_table.DRMGetUsers(hIssuanceLicense, uIndex, phUser);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUserRights(uint32_t hIssuanceLicense, uint32_t hUser, uint32_t uIndex, uint32_t* phRight) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(hUser);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(phRight);

        auto win32_impl_result = g_api_table.DRMGetUserRights(hIssuanceLicense, hUser, uIndex, phRight);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetMetaData(uint32_t hIssuanceLicense, uint32_t* puContentIdLength, win32::Windows::Win32::Foundation::PWSTR wszContentId, uint32_t* puContentIdTypeLength, win32::Windows::Win32::Foundation::PWSTR wszContentIdType, uint32_t* puSKUIdLength, win32::Windows::Win32::Foundation::PWSTR wszSKUId, uint32_t* puSKUIdTypeLength, win32::Windows::Win32::Foundation::PWSTR wszSKUIdType, uint32_t* puContentTypeLength, win32::Windows::Win32::Foundation::PWSTR wszContentType, uint32_t* puContentNameLength, win32::Windows::Win32::Foundation::PWSTR wszContentName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(puContentIdLength);
        ORBIT_TRACK_PARAM(wszContentId);
        ORBIT_TRACK_PARAM(puContentIdTypeLength);
        ORBIT_TRACK_PARAM(wszContentIdType);
        ORBIT_TRACK_PARAM(puSKUIdLength);
        ORBIT_TRACK_PARAM(wszSKUId);
        ORBIT_TRACK_PARAM(puSKUIdTypeLength);
        ORBIT_TRACK_PARAM(wszSKUIdType);
        ORBIT_TRACK_PARAM(puContentTypeLength);
        ORBIT_TRACK_PARAM(wszContentType);
        ORBIT_TRACK_PARAM(puContentNameLength);
        ORBIT_TRACK_PARAM(wszContentName);

        auto win32_impl_result = g_api_table.DRMGetMetaData(hIssuanceLicense, puContentIdLength, wszContentId, puContentIdTypeLength, wszContentIdType, puSKUIdLength, wszSKUId, puSKUIdTypeLength, wszSKUIdType, puContentTypeLength, wszContentType, puContentNameLength, wszContentName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetApplicationSpecificData(uint32_t hIssuanceLicense, uint32_t uIndex, uint32_t* puNameLength, win32::Windows::Win32::Foundation::PWSTR wszName, uint32_t* puValueLength, win32::Windows::Win32::Foundation::PWSTR wszValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(puNameLength);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(puValueLength);
        ORBIT_TRACK_PARAM(wszValue);

        auto win32_impl_result = g_api_table.DRMGetApplicationSpecificData(hIssuanceLicense, uIndex, puNameLength, wszName, puValueLength, wszValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetIssuanceLicenseInfo(uint32_t hIssuanceLicense, win32::Windows::Win32::Foundation::SYSTEMTIME* pstTimeFrom, win32::Windows::Win32::Foundation::SYSTEMTIME* pstTimeUntil, uint32_t uFlags, uint32_t* puDistributionPointNameLength, win32::Windows::Win32::Foundation::PWSTR wszDistributionPointName, uint32_t* puDistributionPointURLLength, win32::Windows::Win32::Foundation::PWSTR wszDistributionPointURL, uint32_t* phOwner, win32::Windows::Win32::Foundation::BOOL* pfOfficial) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(pstTimeFrom);
        ORBIT_TRACK_PARAM(pstTimeUntil);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(puDistributionPointNameLength);
        ORBIT_TRACK_PARAM(wszDistributionPointName);
        ORBIT_TRACK_PARAM(puDistributionPointURLLength);
        ORBIT_TRACK_PARAM(wszDistributionPointURL);
        ORBIT_TRACK_PARAM(phOwner);
        ORBIT_TRACK_PARAM(pfOfficial);

        auto win32_impl_result = g_api_table.DRMGetIssuanceLicenseInfo(hIssuanceLicense, pstTimeFrom, pstTimeUntil, uFlags, puDistributionPointNameLength, wszDistributionPointName, puDistributionPointURLLength, wszDistributionPointURL, phOwner, pfOfficial);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetRevocationPoint(uint32_t hIssuanceLicense, uint32_t* puIdLength, win32::Windows::Win32::Foundation::PWSTR wszId, uint32_t* puIdTypeLength, win32::Windows::Win32::Foundation::PWSTR wszIdType, uint32_t* puURLLength, win32::Windows::Win32::Foundation::PWSTR wszRL, win32::Windows::Win32::Foundation::SYSTEMTIME* pstFrequency, uint32_t* puNameLength, win32::Windows::Win32::Foundation::PWSTR wszName, uint32_t* puPublicKeyLength, win32::Windows::Win32::Foundation::PWSTR wszPublicKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(puIdLength);
        ORBIT_TRACK_PARAM(wszId);
        ORBIT_TRACK_PARAM(puIdTypeLength);
        ORBIT_TRACK_PARAM(wszIdType);
        ORBIT_TRACK_PARAM(puURLLength);
        ORBIT_TRACK_PARAM(wszRL);
        ORBIT_TRACK_PARAM(pstFrequency);
        ORBIT_TRACK_PARAM(puNameLength);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(puPublicKeyLength);
        ORBIT_TRACK_PARAM(wszPublicKey);

        auto win32_impl_result = g_api_table.DRMGetRevocationPoint(hIssuanceLicense, puIdLength, wszId, puIdTypeLength, wszIdType, puURLLength, wszRL, pstFrequency, puNameLength, wszName, puPublicKeyLength, wszPublicKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetUsagePolicy(uint32_t hIssuanceLicense, uint32_t uIndex, win32::Windows::Win32::Data::RightsManagement::DRM_USAGEPOLICY_TYPE* peUsagePolicyType, win32::Windows::Win32::Foundation::BOOL* pfExclusion, uint32_t* puNameLength, win32::Windows::Win32::Foundation::PWSTR wszName, uint32_t* puMinVersionLength, win32::Windows::Win32::Foundation::PWSTR wszMinVersion, uint32_t* puMaxVersionLength, win32::Windows::Win32::Foundation::PWSTR wszMaxVersion, uint32_t* puPublicKeyLength, win32::Windows::Win32::Foundation::PWSTR wszPublicKey, uint32_t* puDigestAlgorithmLength, win32::Windows::Win32::Foundation::PWSTR wszDigestAlgorithm, uint32_t* pcbDigest, uint8_t* pbDigest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(peUsagePolicyType);
        ORBIT_TRACK_PARAM(pfExclusion);
        ORBIT_TRACK_PARAM(puNameLength);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(puMinVersionLength);
        ORBIT_TRACK_PARAM(wszMinVersion);
        ORBIT_TRACK_PARAM(puMaxVersionLength);
        ORBIT_TRACK_PARAM(wszMaxVersion);
        ORBIT_TRACK_PARAM(puPublicKeyLength);
        ORBIT_TRACK_PARAM(wszPublicKey);
        ORBIT_TRACK_PARAM(puDigestAlgorithmLength);
        ORBIT_TRACK_PARAM(wszDigestAlgorithm);
        ORBIT_TRACK_PARAM(pcbDigest);
        ORBIT_TRACK_PARAM(pbDigest);

        auto win32_impl_result = g_api_table.DRMGetUsagePolicy(hIssuanceLicense, uIndex, peUsagePolicyType, pfExclusion, puNameLength, wszName, puMinVersionLength, wszMinVersion, puMaxVersionLength, wszMaxVersion, puPublicKeyLength, wszPublicKey, puDigestAlgorithmLength, wszDigestAlgorithm, pcbDigest, pbDigest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetNameAndDescription(uint32_t hIssuanceLicense, uint32_t uIndex, uint32_t* pulcid, uint32_t* puNameLength, win32::Windows::Win32::Foundation::PWSTR wszName, uint32_t* puDescriptionLength, win32::Windows::Win32::Foundation::PWSTR wszDescription) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(uIndex);
        ORBIT_TRACK_PARAM(pulcid);
        ORBIT_TRACK_PARAM(puNameLength);
        ORBIT_TRACK_PARAM(wszName);
        ORBIT_TRACK_PARAM(puDescriptionLength);
        ORBIT_TRACK_PARAM(wszDescription);

        auto win32_impl_result = g_api_table.DRMGetNameAndDescription(hIssuanceLicense, uIndex, pulcid, puNameLength, wszName, puDescriptionLength, wszDescription);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetOwnerLicense(uint32_t hIssuanceLicense, uint32_t* puOwnerLicenseLength, win32::Windows::Win32::Foundation::PWSTR wszOwnerLicense) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(puOwnerLicenseLength);
        ORBIT_TRACK_PARAM(wszOwnerLicense);

        auto win32_impl_result = g_api_table.DRMGetOwnerLicense(hIssuanceLicense, puOwnerLicenseLength, wszOwnerLicense);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMGetIntervalTime(uint32_t hIssuanceLicense, uint32_t* pcDays) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hIssuanceLicense);
        ORBIT_TRACK_PARAM(pcDays);

        auto win32_impl_result = g_api_table.DRMGetIntervalTime(hIssuanceLicense, pcDays);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMRepair() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.DRMRepair();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMRegisterProtectedWindow(uint32_t hEnv, win32::Windows::Win32::Foundation::HWND hwnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnv);
        ORBIT_TRACK_PARAM(hwnd);

        auto win32_impl_result = g_api_table.DRMRegisterProtectedWindow(hEnv, hwnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMIsWindowProtected(win32::Windows::Win32::Foundation::HWND hwnd, win32::Windows::Win32::Foundation::BOOL* pfProtected) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwnd);
        ORBIT_TRACK_PARAM(pfProtected);

        auto win32_impl_result = g_api_table.DRMIsWindowProtected(hwnd, pfProtected);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DRMAcquireIssuanceLicenseTemplate(uint32_t hClient, uint32_t uFlags, void* pvReserved, uint32_t cTemplates, win32::Windows::Win32::Foundation::PWSTR* pwszTemplateIds, win32::Windows::Win32::Foundation::PWSTR wszUrl, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClient);
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(cTemplates);
        ORBIT_TRACK_PARAM(pwszTemplateIds);
        ORBIT_TRACK_PARAM(wszUrl);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.DRMAcquireIssuanceLicenseTemplate(hClient, uFlags, pvReserved, cTemplates, pwszTemplateIds, wszUrl, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
