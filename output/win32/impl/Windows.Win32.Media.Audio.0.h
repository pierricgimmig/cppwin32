// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Media_Audio_0_H
#define WIN32_Windows_Win32_Media_Audio_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HWND;
    struct LPARAM;
    struct LRESULT;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::Media::Multimedia
{
    struct HDRVR;
}
WIN32_EXPORT namespace win32::Windows::Win32::Media::Audio
{
#pragma region enums
    enum class AMBISONICS_CHANNEL_ORDERING : int32_t
    {
        AMBISONICS_CHANNEL_ORDERING_ACN = 0,
    };
    enum class AMBISONICS_NORMALIZATION : int32_t
    {
        AMBISONICS_NORMALIZATION_SN3D = 0,
        AMBISONICS_NORMALIZATION_N3D = 1,
    };
    enum class AMBISONICS_TYPE : int32_t
    {
        AMBISONICS_TYPE_FULL3D = 0,
    };
    enum class AUDCLNT_SHAREMODE : int32_t
    {
        AUDCLNT_SHAREMODE_SHARED = 0,
        AUDCLNT_SHAREMODE_EXCLUSIVE = 1,
    };
    enum class AUDCLNT_STREAMOPTIONS : uint32_t
    {
        AUDCLNT_STREAMOPTIONS_NONE = 0x0,
        AUDCLNT_STREAMOPTIONS_RAW = 0x1,
        AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 0x2,
        AUDCLNT_STREAMOPTIONS_AMBISONICS = 0x4,
    };
    enum class AUDIOCLIENT_ACTIVATION_TYPE : int32_t
    {
        AUDIOCLIENT_ACTIVATION_TYPE_DEFAULT = 0,
        AUDIOCLIENT_ACTIVATION_TYPE_PROCESS_LOOPBACK = 1,
    };
    enum class AUDIO_DUCKING_OPTIONS : uint32_t
    {
        AUDIO_DUCKING_OPTIONS_DEFAULT = 0x0,
        AUDIO_DUCKING_OPTIONS_DO_NOT_DUCK_OTHER_STREAMS = 0x1,
    };
    enum class AUDIO_EFFECT_STATE : int32_t
    {
        AUDIO_EFFECT_STATE_OFF = 0,
        AUDIO_EFFECT_STATE_ON = 1,
    };
    enum class AUDIO_STREAM_CATEGORY : int32_t
    {
        AudioCategory_Other = 0,
        AudioCategory_ForegroundOnlyMedia = 1,
        AudioCategory_Communications = 3,
        AudioCategory_Alerts = 4,
        AudioCategory_SoundEffects = 5,
        AudioCategory_GameEffects = 6,
        AudioCategory_GameMedia = 7,
        AudioCategory_GameChat = 8,
        AudioCategory_Speech = 9,
        AudioCategory_Movie = 10,
        AudioCategory_Media = 11,
        AudioCategory_FarFieldSpeech = 12,
        AudioCategory_UniformSpeech = 13,
        AudioCategory_VoiceTyping = 14,
    };
    enum class AudioObjectType : uint32_t
    {
        AudioObjectType_None = 0x0,
        AudioObjectType_Dynamic = 0x1,
        AudioObjectType_FrontLeft = 0x2,
        AudioObjectType_FrontRight = 0x4,
        AudioObjectType_FrontCenter = 0x8,
        AudioObjectType_LowFrequency = 0x10,
        AudioObjectType_SideLeft = 0x20,
        AudioObjectType_SideRight = 0x40,
        AudioObjectType_BackLeft = 0x80,
        AudioObjectType_BackRight = 0x100,
        AudioObjectType_TopFrontLeft = 0x200,
        AudioObjectType_TopFrontRight = 0x400,
        AudioObjectType_TopBackLeft = 0x800,
        AudioObjectType_TopBackRight = 0x1000,
        AudioObjectType_BottomFrontLeft = 0x2000,
        AudioObjectType_BottomFrontRight = 0x4000,
        AudioObjectType_BottomBackLeft = 0x8000,
        AudioObjectType_BottomBackRight = 0x10000,
        AudioObjectType_BackCenter = 0x20000,
    };
    enum class AudioSessionDisconnectReason : int32_t
    {
        DisconnectReasonDeviceRemoval = 0,
        DisconnectReasonServerShutdown = 1,
        DisconnectReasonFormatChanged = 2,
        DisconnectReasonSessionLogoff = 3,
        DisconnectReasonSessionDisconnected = 4,
        DisconnectReasonExclusiveModeOverride = 5,
    };
    enum class AudioSessionState : int32_t
    {
        AudioSessionStateInactive = 0,
        AudioSessionStateActive = 1,
        AudioSessionStateExpired = 2,
    };
    enum class AudioStateMonitorSoundLevel : int32_t
    {
        Muted = 0,
        Low = 1,
        Full = 2,
    };
    enum class ConnectorType : int32_t
    {
        Unknown_Connector = 0,
        Physical_Internal = 1,
        Physical_External = 2,
        Software_IO = 3,
        Software_Fixed = 4,
        Network = 5,
    };
    enum class DataFlow : int32_t
    {
        In = 0,
        Out = 1,
    };
    enum class EDataFlow : int32_t
    {
        eRender = 0,
        eCapture = 1,
        eAll = 2,
        EDataFlow_enum_count = 3,
    };
    enum class ERole : int32_t
    {
        eConsole = 0,
        eMultimedia = 1,
        eCommunications = 2,
        ERole_enum_count = 3,
    };
    enum class EndpointFormFactor : int32_t
    {
        RemoteNetworkDevice = 0,
        Speakers = 1,
        LineLevel = 2,
        Headphones = 3,
        Microphone = 4,
        Headset = 5,
        Handset = 6,
        UnknownDigitalPassthrough = 7,
        SPDIF = 8,
        DigitalAudioDisplayDevice = 9,
        UnknownFormFactor = 10,
        EndpointFormFactor_enum_count = 11,
    };
    enum class MIDI_WAVE_OPEN_TYPE : uint32_t
    {
        CALLBACK_TYPEMASK = 0x70000,
        CALLBACK_NULL = 0x0,
        CALLBACK_WINDOW = 0x10000,
        CALLBACK_TASK = 0x20000,
        CALLBACK_FUNCTION = 0x30000,
        CALLBACK_THREAD = 0x20000,
        CALLBACK_EVENT = 0x50000,
        WAVE_FORMAT_QUERY = 0x1,
        WAVE_ALLOWSYNC = 0x2,
        WAVE_MAPPED = 0x4,
        WAVE_FORMAT_DIRECT = 0x8,
        WAVE_FORMAT_DIRECT_QUERY = 0x9,
        WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 0x10,
        MIDI_IO_STATUS = 0x20,
    };
    enum class MIXERLINE_COMPONENTTYPE : uint32_t
    {
        MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 0x1,
        MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 0x5,
        MIXERLINE_COMPONENTTYPE_DST_LINE = 0x2,
        MIXERLINE_COMPONENTTYPE_DST_MONITOR = 0x3,
        MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 0x4,
        MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 0x6,
        MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0x0,
        MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 0x8,
        MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 0x7,
        MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 0x100a,
        MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 0x1009,
        MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 0x1005,
        MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 0x1001,
        MIXERLINE_COMPONENTTYPE_SRC_LINE = 0x1002,
        MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 0x1003,
        MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 0x1007,
        MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 0x1004,
        MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 0x1006,
        MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 0x1000,
        MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 0x1008,
    };
    enum class PROCESS_LOOPBACK_MODE : int32_t
    {
        PROCESS_LOOPBACK_MODE_INCLUDE_TARGET_PROCESS_TREE = 0,
        PROCESS_LOOPBACK_MODE_EXCLUDE_TARGET_PROCESS_TREE = 1,
    };
    enum class PartType : int32_t
    {
        Connector = 0,
        Subunit = 1,
    };
    enum class SPATIAL_AUDIO_STREAM_OPTIONS : uint32_t
    {
        SPATIAL_AUDIO_STREAM_OPTIONS_NONE = 0x0,
        SPATIAL_AUDIO_STREAM_OPTIONS_OFFLOAD = 0x1,
    };
    enum class SpatialAudioHrtfDirectivityType : int32_t
    {
        SpatialAudioHrtfDirectivity_OmniDirectional = 0,
        SpatialAudioHrtfDirectivity_Cardioid = 1,
        SpatialAudioHrtfDirectivity_Cone = 2,
    };
    enum class SpatialAudioHrtfDistanceDecayType : int32_t
    {
        SpatialAudioHrtfDistanceDecay_NaturalDecay = 0,
        SpatialAudioHrtfDistanceDecay_CustomDecay = 1,
    };
    enum class SpatialAudioHrtfEnvironmentType : int32_t
    {
        SpatialAudioHrtfEnvironment_Small = 0,
        SpatialAudioHrtfEnvironment_Medium = 1,
        SpatialAudioHrtfEnvironment_Large = 2,
        SpatialAudioHrtfEnvironment_Outdoors = 3,
        SpatialAudioHrtfEnvironment_Average = 4,
    };
    enum class SpatialAudioMetadataCopyMode : int32_t
    {
        SpatialAudioMetadataCopy_Overwrite = 0,
        SpatialAudioMetadataCopy_Append = 1,
        SpatialAudioMetadataCopy_AppendMergeWithLast = 2,
        SpatialAudioMetadataCopy_AppendMergeWithFirst = 3,
    };
    enum class SpatialAudioMetadataWriterOverflowMode : int32_t
    {
        SpatialAudioMetadataWriterOverflow_Fail = 0,
        SpatialAudioMetadataWriterOverflow_MergeWithNew = 1,
        SpatialAudioMetadataWriterOverflow_MergeWithLast = 2,
    };
    enum class _AUDCLNT_BUFFERFLAGS : int32_t
    {
        AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 1,
        AUDCLNT_BUFFERFLAGS_SILENT = 2,
        AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR = 4,
    };
    enum class __MIDL___MIDL_itf_mmdeviceapi_0000_0008_0002 : int32_t
    {
        AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_DEFAULT = 0,
        AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_USER = 1,
        AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_VOLATILE = 2,
        AUDIO_SYSTEMEFFECTS_PROPERTYSTORE_TYPE_ENUM_COUNT = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACMDRIVERDETAILSA;
    struct ACMDRIVERDETAILSW;
    struct ACMDRVFORMATSUGGEST;
    struct ACMDRVSTREAMHEADER;
    struct ACMDRVSTREAMINSTANCE;
    struct ACMDRVSTREAMSIZE;
    struct ACMFILTERCHOOSEA;
    struct ACMFILTERCHOOSEW;
    struct ACMFILTERDETAILSA;
    struct ACMFILTERDETAILSW;
    struct ACMFILTERTAGDETAILSA;
    struct ACMFILTERTAGDETAILSW;
    struct ACMFORMATCHOOSEA;
    struct ACMFORMATCHOOSEW;
    struct ACMFORMATDETAILSA;
    struct ACMFORMATTAGDETAILSA;
    struct ACMFORMATTAGDETAILSW;
    struct ACMSTREAMHEADER;
    struct AMBISONICS_PARAMS;
    struct AUDIOCLIENT_ACTIVATION_PARAMS;
    struct AUDIOCLIENT_PROCESS_LOOPBACK_PARAMS;
    struct AUDIO_EFFECT;
    struct AUDIO_VOLUME_NOTIFICATION_DATA;
    struct AUXCAPS2A;
    struct AUXCAPS2W;
    struct AUXCAPSA;
    struct AUXCAPSW;
    struct AudioClient3ActivationParams;
    struct AudioClientProperties;
    struct AudioExtensionParams;
    struct DIRECTX_AUDIO_ACTIVATION_PARAMS;
    struct DeviceTopology;
    struct ECHOWAVEFILTER;
    struct HACMDRIVER;
    struct HACMDRIVERID;
    struct HACMOBJ;
    struct HACMSTREAM;
    struct HMIDI;
    struct HMIDIIN;
    struct HMIDIOUT;
    struct HMIDISTRM;
    struct HMIXER;
    struct HMIXEROBJ;
    struct HTASK;
    struct HWAVE;
    struct HWAVEIN;
    struct HWAVEOUT;
    struct MIDIEVENT;
    struct MIDIHDR;
    struct MIDIINCAPS2A;
    struct MIDIINCAPS2W;
    struct MIDIINCAPSA;
    struct MIDIINCAPSW;
    struct MIDIOUTCAPS2A;
    struct MIDIOUTCAPS2W;
    struct MIDIOUTCAPSA;
    struct MIDIOUTCAPSW;
    struct MIDIPROPTEMPO;
    struct MIDIPROPTIMEDIV;
    struct MIDISTRMBUFFVER;
    struct MIXERCAPS2A;
    struct MIXERCAPS2W;
    struct MIXERCAPSA;
    struct MIXERCAPSW;
    struct MIXERCONTROLA;
    struct MIXERCONTROLDETAILS;
    struct MIXERCONTROLDETAILS_BOOLEAN;
    struct MIXERCONTROLDETAILS_LISTTEXTA;
    struct MIXERCONTROLDETAILS_LISTTEXTW;
    struct MIXERCONTROLDETAILS_SIGNED;
    struct MIXERCONTROLDETAILS_UNSIGNED;
    struct MIXERCONTROLW;
    struct MIXERLINEA;
    struct MIXERLINECONTROLSA;
    struct MIXERLINECONTROLSW;
    struct MIXERLINEW;
    struct MMDeviceEnumerator;
    struct PCMWAVEFORMAT;
    struct SpatialAudioClientActivationParams;
    struct SpatialAudioHrtfActivationParams;
    struct SpatialAudioHrtfActivationParams2;
    struct SpatialAudioHrtfDirectivity;
    struct SpatialAudioHrtfDirectivityCardioid;
    struct SpatialAudioHrtfDirectivityCone;
    union SpatialAudioHrtfDirectivityUnion;
    struct SpatialAudioHrtfDistanceDecay;
    struct SpatialAudioMetadataItemsInfo;
    struct SpatialAudioObjectRenderStreamActivationParams;
    struct SpatialAudioObjectRenderStreamActivationParams2;
    struct SpatialAudioObjectRenderStreamForMetadataActivationParams;
    struct SpatialAudioObjectRenderStreamForMetadataActivationParams2;
    struct VOLUMEWAVEFILTER;
    struct WAVEFILTER;
    struct WAVEFORMAT;
    struct WAVEFORMATEX;
    struct WAVEFORMATEXTENSIBLE;
    struct WAVEHDR;
    struct WAVEINCAPS2A;
    struct WAVEINCAPS2W;
    struct WAVEINCAPSA;
    struct WAVEINCAPSW;
    struct WAVEOUTCAPS2A;
    struct WAVEOUTCAPS2W;
    struct WAVEOUTCAPSA;
    struct WAVEOUTCAPSW;
    struct tACMDRVOPENDESCA;
    struct tACMDRVOPENDESCW;
    struct tACMFORMATDETAILSW;
    struct IActivateAudioInterfaceAsyncOperation;
    struct IActivateAudioInterfaceCompletionHandler;
    struct IAudioAmbisonicsControl;
    struct IAudioAutoGainControl;
    struct IAudioBass;
    struct IAudioCaptureClient;
    struct IAudioChannelConfig;
    struct IAudioClient;
    struct IAudioClient2;
    struct IAudioClient3;
    struct IAudioClientDuckingControl;
    struct IAudioClock;
    struct IAudioClock2;
    struct IAudioClockAdjustment;
    struct IAudioEffectsChangedNotificationClient;
    struct IAudioEffectsManager;
    struct IAudioFormatEnumerator;
    struct IAudioInputSelector;
    struct IAudioLoudness;
    struct IAudioMidrange;
    struct IAudioMute;
    struct IAudioOutputSelector;
    struct IAudioPeakMeter;
    struct IAudioRenderClient;
    struct IAudioSessionControl;
    struct IAudioSessionControl2;
    struct IAudioSessionEnumerator;
    struct IAudioSessionEvents;
    struct IAudioSessionManager;
    struct IAudioSessionManager2;
    struct IAudioSessionNotification;
    struct IAudioStateMonitor;
    struct IAudioStreamVolume;
    struct IAudioSystemEffectsPropertyChangeNotificationClient;
    struct IAudioSystemEffectsPropertyStore;
    struct IAudioTreble;
    struct IAudioVolumeDuckNotification;
    struct IAudioVolumeLevel;
    struct IChannelAudioVolume;
    struct IConnector;
    struct IControlChangeNotify;
    struct IControlInterface;
    struct IDeviceSpecificProperty;
    struct IDeviceTopology;
    struct IMMDevice;
    struct IMMDeviceActivator;
    struct IMMDeviceCollection;
    struct IMMDeviceEnumerator;
    struct IMMEndpoint;
    struct IMMNotificationClient;
    struct IMessageFilter;
    struct IPart;
    struct IPartsList;
    struct IPerChannelDbLevel;
    struct ISimpleAudioVolume;
    struct ISpatialAudioClient;
    struct ISpatialAudioClient2;
    struct ISpatialAudioMetadataClient;
    struct ISpatialAudioMetadataCopier;
    struct ISpatialAudioMetadataItems;
    struct ISpatialAudioMetadataItemsBuffer;
    struct ISpatialAudioMetadataReader;
    struct ISpatialAudioMetadataWriter;
    struct ISpatialAudioObject;
    struct ISpatialAudioObjectBase;
    struct ISpatialAudioObjectForHrtf;
    struct ISpatialAudioObjectForMetadataCommands;
    struct ISpatialAudioObjectForMetadataItems;
    struct ISpatialAudioObjectRenderStream;
    struct ISpatialAudioObjectRenderStreamBase;
    struct ISpatialAudioObjectRenderStreamForHrtf;
    struct ISpatialAudioObjectRenderStreamForMetadata;
    struct ISpatialAudioObjectRenderStreamNotify;
    struct ISubunit;
#pragma endregion forward_declarations

#pragma region delegates
    using LPWAVECALLBACK = void __stdcall(Windows::Win32::Media::Multimedia::HDRVR, uint32_t, size_t, size_t, size_t);
    using LPMIDICALLBACK = void __stdcall(Windows::Win32::Media::Multimedia::HDRVR, uint32_t, size_t, size_t, size_t);
    using PAudioStateMonitorCallback = void __stdcall(Windows::Win32::Media::Audio::IAudioStateMonitor*, void*);
    using ACMDRIVERENUMCB = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, size_t, uint32_t);
    using LPACMDRIVERPROC = Windows::Win32::Foundation::LRESULT __stdcall(size_t, Windows::Win32::Media::Audio::HACMDRIVERID, uint32_t, Windows::Win32::Foundation::LPARAM, Windows::Win32::Foundation::LPARAM);
    using ACMFORMATTAGENUMCBA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFORMATTAGDETAILSA*, size_t, uint32_t);
    using ACMFORMATTAGENUMCBW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFORMATTAGDETAILSW*, size_t, uint32_t);
    using ACMFORMATENUMCBA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFORMATDETAILSA*, size_t, uint32_t);
    using ACMFORMATENUMCBW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::tACMFORMATDETAILSW*, size_t, uint32_t);
    using ACMFORMATCHOOSEHOOKPROCA = uint32_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using ACMFORMATCHOOSEHOOKPROCW = uint32_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using ACMFILTERTAGENUMCBA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFILTERTAGDETAILSA*, size_t, uint32_t);
    using ACMFILTERTAGENUMCBW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFILTERTAGDETAILSW*, size_t, uint32_t);
    using ACMFILTERENUMCBA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFILTERDETAILSA*, size_t, uint32_t);
    using ACMFILTERENUMCBW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Media::Audio::HACMDRIVERID, Windows::Win32::Media::Audio::ACMFILTERDETAILSW*, size_t, uint32_t);
    using ACMFILTERCHOOSEHOOKPROCA = uint32_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using ACMFILTERCHOOSEHOOKPROCW = uint32_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
