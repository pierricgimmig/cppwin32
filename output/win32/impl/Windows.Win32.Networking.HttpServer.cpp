// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Networking_HttpServer_2_H
#define WIN32_Windows_Win32_Networking_HttpServer_2_H
#include "win32/Windows.Win32.Networking.HttpServer.h"
#include "win32/impl/Windows.Win32.Networking.HttpServer.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Networking::HttpServer
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_HttpInitialize(win32::Windows::Win32::Networking::HttpServer::HTTPAPI_VERSION Version, win32::Windows::Win32::Networking::HttpServer::HTTP_INITIALIZE Flags, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.HttpInitialize(Version, Flags, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpTerminate(win32::Windows::Win32::Networking::HttpServer::HTTP_INITIALIZE Flags, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.HttpTerminate(Flags, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCreateHttpHandle(win32::Windows::Win32::Foundation::HANDLE* RequestQueueHandle, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.HttpCreateHttpHandle(RequestQueueHandle, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCreateRequestQueue(win32::Windows::Win32::Networking::HttpServer::HTTPAPI_VERSION Version, win32::Windows::Win32::Foundation::PWSTR Name, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* SecurityAttributes, uint32_t Flags, win32::Windows::Win32::Foundation::HANDLE* RequestQueueHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(Name);
        ORBIT_TRACK_PARAM(SecurityAttributes);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(RequestQueueHandle);

        auto win32_impl_result = g_api_table.HttpCreateRequestQueue(Version, Name, SecurityAttributes, Flags, RequestQueueHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCloseRequestQueue(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);

        auto win32_impl_result = g_api_table.HttpCloseRequestQueue(RequestQueueHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSetRequestQueueProperty(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t Reserved1, void* Reserved2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(Property);
        ORBIT_TRACK_PARAM(PropertyInformation);
        ORBIT_TRACK_PARAM(PropertyInformationLength);
        ORBIT_TRACK_PARAM(Reserved1);
        ORBIT_TRACK_PARAM(Reserved2);

        auto win32_impl_result = g_api_table.HttpSetRequestQueueProperty(RequestQueueHandle, Property, PropertyInformation, PropertyInformationLength, Reserved1, Reserved2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpQueryRequestQueueProperty(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t Reserved1, uint32_t* ReturnLength, void* Reserved2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(Property);
        ORBIT_TRACK_PARAM(PropertyInformation);
        ORBIT_TRACK_PARAM(PropertyInformationLength);
        ORBIT_TRACK_PARAM(Reserved1);
        ORBIT_TRACK_PARAM(ReturnLength);
        ORBIT_TRACK_PARAM(Reserved2);

        auto win32_impl_result = g_api_table.HttpQueryRequestQueueProperty(RequestQueueHandle, Property, PropertyInformation, PropertyInformationLength, Reserved1, ReturnLength, Reserved2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSetRequestProperty(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t Id, win32::Windows::Win32::Networking::HttpServer::HTTP_REQUEST_PROPERTY PropertyId, void* Input, uint32_t InputPropertySize, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(Id);
        ORBIT_TRACK_PARAM(PropertyId);
        ORBIT_TRACK_PARAM(Input);
        ORBIT_TRACK_PARAM(InputPropertySize);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpSetRequestProperty(RequestQueueHandle, Id, PropertyId, Input, InputPropertySize, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpShutdownRequestQueue(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);

        auto win32_impl_result = g_api_table.HttpShutdownRequestQueue(RequestQueueHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpReceiveClientCertificate(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t ConnectionId, uint32_t Flags, win32::Windows::Win32::Networking::HttpServer::HTTP_SSL_CLIENT_CERT_INFO* SslClientCertInfo, uint32_t SslClientCertInfoSize, uint32_t* BytesReceived, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(ConnectionId);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(SslClientCertInfo);
        ORBIT_TRACK_PARAM(SslClientCertInfoSize);
        ORBIT_TRACK_PARAM(BytesReceived);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpReceiveClientCertificate(RequestQueueHandle, ConnectionId, Flags, SslClientCertInfo, SslClientCertInfoSize, BytesReceived, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCreateServerSession(win32::Windows::Win32::Networking::HttpServer::HTTPAPI_VERSION Version, uint64_t* ServerSessionId, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(ServerSessionId);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.HttpCreateServerSession(Version, ServerSessionId, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCloseServerSession(uint64_t ServerSessionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerSessionId);

        auto win32_impl_result = g_api_table.HttpCloseServerSession(ServerSessionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpQueryServerSessionProperty(uint64_t ServerSessionId, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerSessionId);
        ORBIT_TRACK_PARAM(Property);
        ORBIT_TRACK_PARAM(PropertyInformation);
        ORBIT_TRACK_PARAM(PropertyInformationLength);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.HttpQueryServerSessionProperty(ServerSessionId, Property, PropertyInformation, PropertyInformationLength, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSetServerSessionProperty(uint64_t ServerSessionId, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerSessionId);
        ORBIT_TRACK_PARAM(Property);
        ORBIT_TRACK_PARAM(PropertyInformation);
        ORBIT_TRACK_PARAM(PropertyInformationLength);

        auto win32_impl_result = g_api_table.HttpSetServerSessionProperty(ServerSessionId, Property, PropertyInformation, PropertyInformationLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpAddUrl(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Foundation::PWSTR FullyQualifiedUrl, void* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(FullyQualifiedUrl);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.HttpAddUrl(RequestQueueHandle, FullyQualifiedUrl, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpRemoveUrl(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Foundation::PWSTR FullyQualifiedUrl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(FullyQualifiedUrl);

        auto win32_impl_result = g_api_table.HttpRemoveUrl(RequestQueueHandle, FullyQualifiedUrl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCreateUrlGroup(uint64_t ServerSessionId, uint64_t* pUrlGroupId, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerSessionId);
        ORBIT_TRACK_PARAM(pUrlGroupId);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.HttpCreateUrlGroup(ServerSessionId, pUrlGroupId, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCloseUrlGroup(uint64_t UrlGroupId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UrlGroupId);

        auto win32_impl_result = g_api_table.HttpCloseUrlGroup(UrlGroupId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpAddUrlToUrlGroup(uint64_t UrlGroupId, win32::Windows::Win32::Foundation::PWSTR pFullyQualifiedUrl, uint64_t UrlContext, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UrlGroupId);
        ORBIT_TRACK_PARAM(pFullyQualifiedUrl);
        ORBIT_TRACK_PARAM(UrlContext);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.HttpAddUrlToUrlGroup(UrlGroupId, pFullyQualifiedUrl, UrlContext, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpRemoveUrlFromUrlGroup(uint64_t UrlGroupId, win32::Windows::Win32::Foundation::PWSTR pFullyQualifiedUrl, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UrlGroupId);
        ORBIT_TRACK_PARAM(pFullyQualifiedUrl);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.HttpRemoveUrlFromUrlGroup(UrlGroupId, pFullyQualifiedUrl, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSetUrlGroupProperty(uint64_t UrlGroupId, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UrlGroupId);
        ORBIT_TRACK_PARAM(Property);
        ORBIT_TRACK_PARAM(PropertyInformation);
        ORBIT_TRACK_PARAM(PropertyInformationLength);

        auto win32_impl_result = g_api_table.HttpSetUrlGroupProperty(UrlGroupId, Property, PropertyInformation, PropertyInformationLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpQueryUrlGroupProperty(uint64_t UrlGroupId, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVER_PROPERTY Property, void* PropertyInformation, uint32_t PropertyInformationLength, uint32_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UrlGroupId);
        ORBIT_TRACK_PARAM(Property);
        ORBIT_TRACK_PARAM(PropertyInformation);
        ORBIT_TRACK_PARAM(PropertyInformationLength);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.HttpQueryUrlGroupProperty(UrlGroupId, Property, PropertyInformation, PropertyInformationLength, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpPrepareUrl(void* Reserved, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR Url, win32::Windows::Win32::Foundation::PWSTR* PreparedUrl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Url);
        ORBIT_TRACK_PARAM(PreparedUrl);

        auto win32_impl_result = g_api_table.HttpPrepareUrl(Reserved, Flags, Url, PreparedUrl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpReceiveHttpRequest(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t RequestId, win32::Windows::Win32::Networking::HttpServer::HTTP_RECEIVE_HTTP_REQUEST_FLAGS Flags, win32::Windows::Win32::Networking::HttpServer::HTTP_REQUEST_V2* RequestBuffer, uint32_t RequestBufferLength, uint32_t* BytesReturned, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(RequestBuffer);
        ORBIT_TRACK_PARAM(RequestBufferLength);
        ORBIT_TRACK_PARAM(BytesReturned);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpReceiveHttpRequest(RequestQueueHandle, RequestId, Flags, RequestBuffer, RequestBufferLength, BytesReturned, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpReceiveRequestEntityBody(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, void* EntityBuffer, uint32_t EntityBufferLength, uint32_t* BytesReturned, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(EntityBuffer);
        ORBIT_TRACK_PARAM(EntityBufferLength);
        ORBIT_TRACK_PARAM(BytesReturned);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpReceiveRequestEntityBody(RequestQueueHandle, RequestId, Flags, EntityBuffer, EntityBufferLength, BytesReturned, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSendHttpResponse(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, win32::Windows::Win32::Networking::HttpServer::HTTP_RESPONSE_V2* HttpResponse, win32::Windows::Win32::Networking::HttpServer::HTTP_CACHE_POLICY* CachePolicy, uint32_t* BytesSent, void* Reserved1, uint32_t Reserved2, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Networking::HttpServer::HTTP_LOG_DATA* LogData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(HttpResponse);
        ORBIT_TRACK_PARAM(CachePolicy);
        ORBIT_TRACK_PARAM(BytesSent);
        ORBIT_TRACK_PARAM(Reserved1);
        ORBIT_TRACK_PARAM(Reserved2);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(LogData);

        auto win32_impl_result = g_api_table.HttpSendHttpResponse(RequestQueueHandle, RequestId, Flags, HttpResponse, CachePolicy, BytesSent, Reserved1, Reserved2, Overlapped, LogData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSendResponseEntityBody(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t RequestId, uint32_t Flags, uint16_t EntityChunkCount, win32::Windows::Win32::Networking::HttpServer::HTTP_DATA_CHUNK* EntityChunks, uint32_t* BytesSent, void* Reserved1, uint32_t Reserved2, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Networking::HttpServer::HTTP_LOG_DATA* LogData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(EntityChunkCount);
        ORBIT_TRACK_PARAM(EntityChunks);
        ORBIT_TRACK_PARAM(BytesSent);
        ORBIT_TRACK_PARAM(Reserved1);
        ORBIT_TRACK_PARAM(Reserved2);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(LogData);

        auto win32_impl_result = g_api_table.HttpSendResponseEntityBody(RequestQueueHandle, RequestId, Flags, EntityChunkCount, EntityChunks, BytesSent, Reserved1, Reserved2, Overlapped, LogData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpDeclarePush(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t RequestId, win32::Windows::Win32::Networking::HttpServer::HTTP_VERB Verb, win32::Windows::Win32::Foundation::PWSTR Path, win32::Windows::Win32::Foundation::PSTR Query, win32::Windows::Win32::Networking::HttpServer::HTTP_REQUEST_HEADERS* Headers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(Verb);
        ORBIT_TRACK_PARAM(Path);
        ORBIT_TRACK_PARAM(Query);
        ORBIT_TRACK_PARAM(Headers);

        auto win32_impl_result = g_api_table.HttpDeclarePush(RequestQueueHandle, RequestId, Verb, Path, Query, Headers);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpWaitForDisconnect(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t ConnectionId, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(ConnectionId);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpWaitForDisconnect(RequestQueueHandle, ConnectionId, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpWaitForDisconnectEx(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t ConnectionId, uint32_t Reserved, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(ConnectionId);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpWaitForDisconnectEx(RequestQueueHandle, ConnectionId, Reserved, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpCancelHttpRequest(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t RequestId, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpCancelHttpRequest(RequestQueueHandle, RequestId, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpWaitForDemandStart(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpWaitForDemandStart(RequestQueueHandle, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HttpIsFeatureSupported(win32::Windows::Win32::Networking::HttpServer::HTTP_FEATURE_ID FeatureId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FeatureId);

        auto win32_impl_result = g_api_table.HttpIsFeatureSupported(FeatureId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpDelegateRequestEx(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Foundation::HANDLE DelegateQueueHandle, uint64_t RequestId, uint64_t DelegateUrlGroupId, uint32_t PropertyInfoSetSize, win32::Windows::Win32::Networking::HttpServer::HTTP_DELEGATE_REQUEST_PROPERTY_INFO* PropertyInfoSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(DelegateQueueHandle);
        ORBIT_TRACK_PARAM(RequestId);
        ORBIT_TRACK_PARAM(DelegateUrlGroupId);
        ORBIT_TRACK_PARAM(PropertyInfoSetSize);
        ORBIT_TRACK_PARAM(PropertyInfoSet);

        auto win32_impl_result = g_api_table.HttpDelegateRequestEx(RequestQueueHandle, DelegateQueueHandle, RequestId, DelegateUrlGroupId, PropertyInfoSetSize, PropertyInfoSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpFindUrlGroupId(win32::Windows::Win32::Foundation::PWSTR FullyQualifiedUrl, win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, uint64_t* UrlGroupId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FullyQualifiedUrl);
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(UrlGroupId);

        auto win32_impl_result = g_api_table.HttpFindUrlGroupId(FullyQualifiedUrl, RequestQueueHandle, UrlGroupId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpFlushResponseCache(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Foundation::PWSTR UrlPrefix, uint32_t Flags, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(UrlPrefix);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpFlushResponseCache(RequestQueueHandle, UrlPrefix, Flags, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpAddFragmentToCache(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Foundation::PWSTR UrlPrefix, win32::Windows::Win32::Networking::HttpServer::HTTP_DATA_CHUNK* DataChunk, win32::Windows::Win32::Networking::HttpServer::HTTP_CACHE_POLICY* CachePolicy, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(UrlPrefix);
        ORBIT_TRACK_PARAM(DataChunk);
        ORBIT_TRACK_PARAM(CachePolicy);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpAddFragmentToCache(RequestQueueHandle, UrlPrefix, DataChunk, CachePolicy, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpReadFragmentFromCache(win32::Windows::Win32::Foundation::HANDLE RequestQueueHandle, win32::Windows::Win32::Foundation::PWSTR UrlPrefix, win32::Windows::Win32::Networking::HttpServer::HTTP_BYTE_RANGE* ByteRange, void* Buffer, uint32_t BufferLength, uint32_t* BytesRead, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RequestQueueHandle);
        ORBIT_TRACK_PARAM(UrlPrefix);
        ORBIT_TRACK_PARAM(ByteRange);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(BytesRead);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpReadFragmentFromCache(RequestQueueHandle, UrlPrefix, ByteRange, Buffer, BufferLength, BytesRead, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpSetServiceConfiguration(win32::Windows::Win32::Foundation::HANDLE ServiceHandle, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVICE_CONFIG_ID ConfigId, void* pConfigInformation, uint32_t ConfigInformationLength, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceHandle);
        ORBIT_TRACK_PARAM(ConfigId);
        ORBIT_TRACK_PARAM(pConfigInformation);
        ORBIT_TRACK_PARAM(ConfigInformationLength);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.HttpSetServiceConfiguration(ServiceHandle, ConfigId, pConfigInformation, ConfigInformationLength, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpUpdateServiceConfiguration(win32::Windows::Win32::Foundation::HANDLE Handle, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVICE_CONFIG_ID ConfigId, void* ConfigInfo, uint32_t ConfigInfoLength, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(ConfigId);
        ORBIT_TRACK_PARAM(ConfigInfo);
        ORBIT_TRACK_PARAM(ConfigInfoLength);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.HttpUpdateServiceConfiguration(Handle, ConfigId, ConfigInfo, ConfigInfoLength, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpDeleteServiceConfiguration(win32::Windows::Win32::Foundation::HANDLE ServiceHandle, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVICE_CONFIG_ID ConfigId, void* pConfigInformation, uint32_t ConfigInformationLength, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceHandle);
        ORBIT_TRACK_PARAM(ConfigId);
        ORBIT_TRACK_PARAM(pConfigInformation);
        ORBIT_TRACK_PARAM(ConfigInformationLength);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.HttpDeleteServiceConfiguration(ServiceHandle, ConfigId, pConfigInformation, ConfigInformationLength, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpQueryServiceConfiguration(win32::Windows::Win32::Foundation::HANDLE ServiceHandle, win32::Windows::Win32::Networking::HttpServer::HTTP_SERVICE_CONFIG_ID ConfigId, void* pInput, uint32_t InputLength, void* pOutput, uint32_t OutputLength, uint32_t* pReturnLength, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceHandle);
        ORBIT_TRACK_PARAM(ConfigId);
        ORBIT_TRACK_PARAM(pInput);
        ORBIT_TRACK_PARAM(InputLength);
        ORBIT_TRACK_PARAM(pOutput);
        ORBIT_TRACK_PARAM(OutputLength);
        ORBIT_TRACK_PARAM(pReturnLength);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.HttpQueryServiceConfiguration(ServiceHandle, ConfigId, pInput, InputLength, pOutput, OutputLength, pReturnLength, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_HttpGetExtension(win32::Windows::Win32::Networking::HttpServer::HTTPAPI_VERSION Version, uint32_t Extension, void* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(Extension);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.HttpGetExtension(Version, Extension, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
