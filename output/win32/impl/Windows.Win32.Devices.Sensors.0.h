// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Sensors_0_H
#define WIN32_Windows_Win32_Devices_Sensors_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Sensors
{
#pragma region enums
    enum class ACTIVITY_STATE : int32_t
    {
        ActivityState_Unknown = 1,
        ActivityState_Stationary = 2,
        ActivityState_Fidgeting = 4,
        ActivityState_Walking = 8,
        ActivityState_Running = 16,
        ActivityState_InVehicle = 32,
        ActivityState_Biking = 64,
        ActivityState_Idle = 128,
        ActivityState_Max = 256,
        ActivityState_Force_Dword = -1,
    };
    enum class ACTIVITY_STATE_COUNT : int32_t
    {
        ActivityStateCount = 8,
    };
    enum class AXIS : int32_t
    {
        AXIS_X = 0,
        AXIS_Y = 1,
        AXIS_Z = 2,
        AXIS_MAX = 3,
    };
    enum class ELEVATION_CHANGE_MODE : int32_t
    {
        ElevationChangeMode_Unknown = 0,
        ElevationChangeMode_Elevator = 1,
        ElevationChangeMode_Stepping = 2,
        ElevationChangeMode_Max = 3,
        ElevationChangeMode_Force_Dword = -1,
    };
    enum class HUMAN_PRESENCE_DETECTION_TYPE : int32_t
    {
        HumanPresenceDetectionType_VendorDefinedNonBiometric = 1,
        HumanPresenceDetectionType_VendorDefinedBiometric = 2,
        HumanPresenceDetectionType_FacialBiometric = 4,
        HumanPresenceDetectionType_AudioBiometric = 8,
        HumanPresenceDetectionType_Force_Dword = -1,
    };
    enum class HUMAN_PRESENCE_DETECTION_TYPE_COUNT : int32_t
    {
        HumanPresenceDetectionTypeCount = 4,
    };
    enum class LOCATION_DESIRED_ACCURACY : int32_t
    {
        LOCATION_DESIRED_ACCURACY_DEFAULT = 0,
        LOCATION_DESIRED_ACCURACY_HIGH = 1,
    };
    enum class LOCATION_POSITION_SOURCE : int32_t
    {
        LOCATION_POSITION_SOURCE_CELLULAR = 0,
        LOCATION_POSITION_SOURCE_SATELLITE = 1,
        LOCATION_POSITION_SOURCE_WIFI = 2,
        LOCATION_POSITION_SOURCE_IPADDRESS = 3,
        LOCATION_POSITION_SOURCE_UNKNOWN = 4,
    };
    enum class MAGNETOMETER_ACCURACY : int32_t
    {
        MagnetometerAccuracy_Unknown = 0,
        MagnetometerAccuracy_Unreliable = 1,
        MagnetometerAccuracy_Approximate = 2,
        MagnetometerAccuracy_High = 3,
    };
    enum class MagnetometerAccuracy : int32_t
    {
        MAGNETOMETER_ACCURACY_UNKNOWN = 0,
        MAGNETOMETER_ACCURACY_UNRELIABLE = 1,
        MAGNETOMETER_ACCURACY_APPROXIMATE = 2,
        MAGNETOMETER_ACCURACY_HIGH = 3,
    };
    enum class PEDOMETER_STEP_TYPE : int32_t
    {
        PedometerStepType_Unknown = 1,
        PedometerStepType_Walking = 2,
        PedometerStepType_Running = 4,
        PedometerStepType_Max = 8,
        PedometerStepType_Force_Dword = -1,
    };
    enum class PEDOMETER_STEP_TYPE_COUNT : int32_t
    {
        PedometerStepTypeCount = 3,
    };
    enum class PROXIMITY_TYPE : int32_t
    {
        ProximityType_ObjectProximity = 0,
        ProximityType_HumanProximity = 1,
        ProximityType_Force_Dword = -1,
    };
    enum class SENSOR_CONNECTION_TYPES : int32_t
    {
        SensorConnectionType_Integrated = 0,
        SensorConnectionType_Attached = 1,
        SensorConnectionType_External = 2,
    };
    enum class SENSOR_STATE : int32_t
    {
        SensorState_Initializing = 0,
        SensorState_Idle = 1,
        SensorState_Active = 2,
        SensorState_Error = 3,
    };
    enum class SIMPLE_DEVICE_ORIENTATION : int32_t
    {
        SimpleDeviceOrientation_NotRotated = 0,
        SimpleDeviceOrientation_Rotated90DegreesCounterclockwise = 1,
        SimpleDeviceOrientation_Rotated180DegreesCounterclockwise = 2,
        SimpleDeviceOrientation_Rotated270DegreesCounterclockwise = 3,
        SimpleDeviceOrientation_Faceup = 4,
        SimpleDeviceOrientation_Facedown = 5,
    };
    enum class SensorConnectionType : int32_t
    {
        SENSOR_CONNECTION_TYPE_PC_INTEGRATED = 0,
        SENSOR_CONNECTION_TYPE_PC_ATTACHED = 1,
        SENSOR_CONNECTION_TYPE_PC_EXTERNAL = 2,
    };
    enum class SensorState : int32_t
    {
        SENSOR_STATE_MIN = 0,
        SENSOR_STATE_READY = 0,
        SENSOR_STATE_NOT_AVAILABLE = 1,
        SENSOR_STATE_NO_DATA = 2,
        SENSOR_STATE_INITIALIZING = 3,
        SENSOR_STATE_ACCESS_DENIED = 4,
        SENSOR_STATE_ERROR = 5,
        SENSOR_STATE_MAX = 5,
    };
    enum class SimpleDeviceOrientation : int32_t
    {
        SIMPLE_DEVICE_ORIENTATION_NOT_ROTATED = 0,
        SIMPLE_DEVICE_ORIENTATION_ROTATED_90 = 1,
        SIMPLE_DEVICE_ORIENTATION_ROTATED_180 = 2,
        SIMPLE_DEVICE_ORIENTATION_ROTATED_270 = 3,
        SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_UP = 4,
        SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_DOWN = 5,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct MATRIX3X3;
    struct QUATERNION;
    struct SENSOR_COLLECTION_LIST;
    struct SENSOR_PROPERTY_LIST;
    struct SENSOR_VALUE_PAIR;
    struct Sensor;
    struct SensorCollection;
    struct SensorDataReport;
    struct SensorManager;
    struct VEC3D;
    struct ILocationPermissions;
    struct ISensor;
    struct ISensorCollection;
    struct ISensorDataReport;
    struct ISensorEvents;
    struct ISensorManager;
    struct ISensorManagerEvents;
#pragma endregion forward_declarations

#pragma region delegates
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
