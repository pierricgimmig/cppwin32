// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_NetManagement_0_H
#define WIN32_Windows_Win32_NetworkManagement_NetManagement_0_H
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::NetManagement
{
#pragma region enums
    enum class AF_OP : uint32_t
    {
        AF_OP_PRINT = 0x1,
        AF_OP_COMM = 0x2,
        AF_OP_SERVER = 0x4,
        AF_OP_ACCOUNTS = 0x8,
    };
    enum class BIND_FLAGS1 : int32_t
    {
        NCN_ADD = 1,
        NCN_REMOVE = 2,
        NCN_UPDATE = 4,
        NCN_ENABLE = 16,
        NCN_DISABLE = 32,
        NCN_BINDING_PATH = 256,
        NCN_PROPERTYCHANGE = 512,
        NCN_NET = 65536,
        NCN_NETTRANS = 131072,
        NCN_NETCLIENT = 262144,
        NCN_NETSERVICE = 524288,
    };
    enum class COMPONENT_CHARACTERISTICS : int32_t
    {
        NCF_VIRTUAL = 1,
        NCF_SOFTWARE_ENUMERATED = 2,
        NCF_PHYSICAL = 4,
        NCF_HIDDEN = 8,
        NCF_NO_SERVICE = 16,
        NCF_NOT_USER_REMOVABLE = 32,
        NCF_MULTIPORT_INSTANCED_ADAPTER = 64,
        NCF_HAS_UI = 128,
        NCF_SINGLE_INSTANCE = 256,
        NCF_FILTER = 1024,
        NCF_DONTEXPOSELOWER = 4096,
        NCF_HIDE_BINDING = 8192,
        NCF_NDIS_PROTOCOL = 16384,
        NCF_FIXED_BINDING = 131072,
        NCF_LW_FILTER = 262144,
    };
    enum class DEFAULT_PAGES : int32_t
    {
        DPP_ADVANCED = 1,
    };
    enum class DSREG_JOIN_TYPE : int32_t
    {
        DSREG_UNKNOWN_JOIN = 0,
        DSREG_DEVICE_JOIN = 1,
        DSREG_WORKPLACE_JOIN = 2,
    };
    enum class ENUM_BINDING_PATHS_FLAGS : int32_t
    {
        EBP_ABOVE = 1,
        EBP_BELOW = 2,
    };
    enum class FORCE_LEVEL_FLAGS : uint32_t
    {
        USE_NOFORCE = 0x0,
        USE_FORCE = 0x1,
        USE_LOTS_OF_FORCE = 0x2,
    };
    enum class MSA_INFO_LEVEL : int32_t
    {
        MsaInfoLevel0 = 0,
        MsaInfoLevelMax = 1,
    };
    enum class MSA_INFO_STATE : int32_t
    {
        MsaInfoNotExist = 1,
        MsaInfoNotService = 2,
        MsaInfoCannotInstall = 3,
        MsaInfoCanInstall = 4,
        MsaInfoInstalled = 5,
    };
    enum class NCPNP_RECONFIG_LAYER : int32_t
    {
        NCRL_NDIS = 1,
        NCRL_TDI = 2,
    };
    enum class NCRP_FLAGS : int32_t
    {
        NCRP_QUERY_PROPERTY_UI = 1,
        NCRP_SHOW_PROPERTY_UI = 2,
    };
    enum class NETSETUP_JOIN_STATUS : int32_t
    {
        NetSetupUnknownStatus = 0,
        NetSetupUnjoined = 1,
        NetSetupWorkgroupName = 2,
        NetSetupDomainName = 3,
    };
    enum class NETSETUP_NAME_TYPE : int32_t
    {
        NetSetupUnknown = 0,
        NetSetupMachine = 1,
        NetSetupWorkgroup = 2,
        NetSetupDomain = 3,
        NetSetupNonExistentDomain = 4,
        NetSetupDnsMachine = 5,
    };
    enum class NETSETUP_PROVISION : uint32_t
    {
        NETSETUP_PROVISION_DOWNLEVEL_PRIV_SUPPORT = 0x1,
        NETSETUP_PROVISION_REUSE_ACCOUNT = 0x2,
        NETSETUP_PROVISION_USE_DEFAULT_PASSWORD = 0x4,
        NETSETUP_PROVISION_SKIP_ACCOUNT_SEARCH = 0x8,
        NETSETUP_PROVISION_ROOT_CA_CERTS = 0x10,
    };
    enum class NETWORK_INSTALL_TIME : int32_t
    {
        NSF_PRIMARYINSTALL = 1,
        NSF_POSTSYSINSTALL = 2,
    };
    enum class NETWORK_UPGRADE_TYPE : int32_t
    {
        NSF_WIN16_UPGRADE = 16,
        NSF_WIN95_UPGRADE = 32,
        NSF_WINNT_WKS_UPGRADE = 64,
        NSF_WINNT_SVR_UPGRADE = 128,
        NSF_WINNT_SBS_UPGRADE = 256,
        NSF_COMPONENT_UPDATE = 512,
    };
    enum class NET_COMPUTER_NAME_TYPE : int32_t
    {
        NetPrimaryComputerName = 0,
        NetAlternateComputerNames = 1,
        NetAllComputerNames = 2,
        NetComputerNameTypeMax = 3,
    };
    enum class NET_JOIN_DOMAIN_JOIN_OPTIONS : uint32_t
    {
        NETSETUP_JOIN_DOMAIN = 0x1,
        NETSETUP_ACCT_CREATE = 0x2,
        NETSETUP_WIN9X_UPGRADE = 0x10,
        NETSETUP_DOMAIN_JOIN_IF_JOINED = 0x20,
        NETSETUP_JOIN_UNSECURE = 0x40,
        NETSETUP_MACHINE_PWD_PASSED = 0x80,
        NETSETUP_DEFER_SPN_SET = 0x100,
        NETSETUP_JOIN_DC_ACCOUNT = 0x200,
        NETSETUP_JOIN_WITH_NEW_NAME = 0x400,
        NETSETUP_JOIN_READONLY = 0x800,
        NETSETUP_AMBIGUOUS_DC = 0x1000,
        NETSETUP_NO_NETLOGON_CACHE = 0x2000,
        NETSETUP_DONT_CONTROL_SERVICES = 0x4000,
        NETSETUP_SET_MACHINE_NAME = 0x8000,
        NETSETUP_FORCE_SPN_SET = 0x10000,
        NETSETUP_NO_ACCT_REUSE = 0x20000,
        NETSETUP_IGNORE_UNSUPPORTED_FLAGS = 0x10000000,
    };
    enum class NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS : int32_t
    {
        SUPPORTS_REMOTE_ADMIN_PROTOCOL = 2,
        SUPPORTS_RPC = 4,
        SUPPORTS_SAM_PROTOCOL = 8,
        SUPPORTS_UNICODE = 16,
        SUPPORTS_LOCAL = 32,
    };
    enum class NET_REQUEST_PROVISION_OPTIONS : uint32_t
    {
        NETSETUP_PROVISION_ONLINE_CALLER = 0x40000000,
    };
    enum class NET_SERVER_TYPE : uint32_t
    {
        SV_TYPE_WORKSTATION = 0x1,
        SV_TYPE_SERVER = 0x2,
        SV_TYPE_SQLSERVER = 0x4,
        SV_TYPE_DOMAIN_CTRL = 0x8,
        SV_TYPE_DOMAIN_BAKCTRL = 0x10,
        SV_TYPE_TIME_SOURCE = 0x20,
        SV_TYPE_AFP = 0x40,
        SV_TYPE_NOVELL = 0x80,
        SV_TYPE_DOMAIN_MEMBER = 0x100,
        SV_TYPE_PRINTQ_SERVER = 0x200,
        SV_TYPE_DIALIN_SERVER = 0x400,
        SV_TYPE_XENIX_SERVER = 0x800,
        SV_TYPE_SERVER_UNIX = 0x800,
        SV_TYPE_NT = 0x1000,
        SV_TYPE_WFW = 0x2000,
        SV_TYPE_SERVER_MFPN = 0x4000,
        SV_TYPE_SERVER_NT = 0x8000,
        SV_TYPE_POTENTIAL_BROWSER = 0x10000,
        SV_TYPE_BACKUP_BROWSER = 0x20000,
        SV_TYPE_MASTER_BROWSER = 0x40000,
        SV_TYPE_DOMAIN_MASTER = 0x80000,
        SV_TYPE_SERVER_OSF = 0x100000,
        SV_TYPE_SERVER_VMS = 0x200000,
        SV_TYPE_WINDOWS = 0x400000,
        SV_TYPE_DFS = 0x800000,
        SV_TYPE_CLUSTER_NT = 0x1000000,
        SV_TYPE_TERMINALSERVER = 0x2000000,
        SV_TYPE_CLUSTER_VS_NT = 0x4000000,
        SV_TYPE_DCE = 0x10000000,
        SV_TYPE_ALTERNATE_XPORT = 0x20000000,
        SV_TYPE_LOCAL_LIST_ONLY = 0x40000000,
        SV_TYPE_DOMAIN_ENUM = 0x80000000,
        SV_TYPE_ALL = 0xffffffff,
    };
    enum class NET_USER_ENUM_FILTER_FLAGS : uint32_t
    {
        FILTER_TEMP_DUPLICATE_ACCOUNT = 0x1,
        FILTER_NORMAL_ACCOUNT = 0x2,
        FILTER_INTERDOMAIN_TRUST_ACCOUNT = 0x8,
        FILTER_WORKSTATION_TRUST_ACCOUNT = 0x10,
        FILTER_SERVER_TRUST_ACCOUNT = 0x20,
    };
    enum class NET_VALIDATE_PASSWORD_TYPE : int32_t
    {
        NetValidateAuthentication = 1,
        NetValidatePasswordChange = 2,
        NetValidatePasswordReset = 3,
    };
    enum class OBO_TOKEN_TYPE : int32_t
    {
        OBO_USER = 1,
        OBO_COMPONENT = 2,
        OBO_SOFTWARE = 3,
    };
    enum class SERVER_INFO_HIDDEN : uint32_t
    {
        SV_VISIBLE = 0x0,
        SV_HIDDEN = 0x1,
    };
    enum class SERVER_INFO_SECURITY : uint32_t
    {
        SV_SHARESECURITY = 0x0,
        SV_USERSECURITY = 0x1,
    };
    enum class SUPPORTS_BINDING_INTERFACE_FLAGS : int32_t
    {
        NCF_LOWER = 1,
        NCF_UPPER = 2,
    };
    enum class TRANSPORT_TYPE : int32_t
    {
        UseTransportType_None = 0,
        UseTransportType_Wsk = 1,
        UseTransportType_Quic = 2,
    };
    enum class USER_ACCOUNT_FLAGS : uint32_t
    {
        UF_SCRIPT = 0x1,
        UF_ACCOUNTDISABLE = 0x2,
        UF_HOMEDIR_REQUIRED = 0x8,
        UF_PASSWD_NOTREQD = 0x20,
        UF_PASSWD_CANT_CHANGE = 0x40,
        UF_LOCKOUT = 0x10,
        UF_DONT_EXPIRE_PASSWD = 0x10000,
        UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 0x80,
        UF_NOT_DELEGATED = 0x100000,
        UF_SMARTCARD_REQUIRED = 0x40000,
        UF_USE_DES_KEY_ONLY = 0x200000,
        UF_DONT_REQUIRE_PREAUTH = 0x400000,
        UF_TRUSTED_FOR_DELEGATION = 0x80000,
        UF_PASSWORD_EXPIRED = 0x800000,
        UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 0x1000000,
    };
    enum class USER_MODALS_ROLES : uint32_t
    {
        UAS_ROLE_STANDALONE = 0x0,
        UAS_ROLE_MEMBER = 0x1,
        UAS_ROLE_BACKUP = 0x2,
        UAS_ROLE_PRIMARY = 0x3,
    };
    enum class USER_PRIV : uint32_t
    {
        USER_PRIV_GUEST = 0x0,
        USER_PRIV_USER = 0x1,
        USER_PRIV_ADMIN = 0x2,
    };
    enum class USE_INFO_ASG_TYPE : uint32_t
    {
        USE_WILDCARD = 0xffffffff,
        USE_DISKDEV = 0x0,
        USE_SPOOLDEV = 0x1,
        USE_IPC = 0x3,
    };
    enum class tagRASCON_IPUI_FLAGS : int32_t
    {
        RCUIF_VPN = 1,
        RCUIF_DEMAND_DIAL = 2,
        RCUIF_NOT_ADMIN = 4,
        RCUIF_USE_IPv4_STATICADDRESS = 8,
        RCUIF_USE_IPv4_NAME_SERVERS = 16,
        RCUIF_USE_IPv4_REMOTE_GATEWAY = 32,
        RCUIF_USE_IPv4_EXPLICIT_METRIC = 64,
        RCUIF_USE_HEADER_COMPRESSION = 128,
        RCUIF_USE_DISABLE_REGISTER_DNS = 256,
        RCUIF_USE_PRIVATE_DNS_SUFFIX = 512,
        RCUIF_ENABLE_NBT = 1024,
        RCUIF_USE_IPv6_STATICADDRESS = 2048,
        RCUIF_USE_IPv6_NAME_SERVERS = 4096,
        RCUIF_USE_IPv6_REMOTE_GATEWAY = 8192,
        RCUIF_USE_IPv6_EXPLICIT_METRIC = 16384,
        RCUIF_DISABLE_CLASS_BASED_ROUTE = 32768,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACCESS_INFO_0;
    struct ACCESS_INFO_1;
    struct ACCESS_INFO_1002;
    struct ACCESS_LIST;
    struct ADMIN_OTHER_INFO;
    struct AE_ACCLIM;
    struct AE_ACLMOD;
    struct AE_CLOSEFILE;
    struct AE_CONNREJ;
    struct AE_CONNSTART;
    struct AE_CONNSTOP;
    struct AE_GENERIC;
    struct AE_LOCKOUT;
    struct AE_NETLOGOFF;
    struct AE_NETLOGON;
    struct AE_RESACCESS;
    struct AE_RESACCESSREJ;
    struct AE_SERVICESTAT;
    struct AE_SESSLOGOFF;
    struct AE_SESSLOGON;
    struct AE_SESSPWERR;
    struct AE_SRVSTATUS;
    struct AE_UASMOD;
    struct AT_ENUM;
    struct AT_INFO;
    struct AUDIT_ENTRY;
    struct CONFIG_INFO_0;
    struct DSREG_JOIN_INFO;
    struct DSREG_USER_INFO;
    struct ERRLOG_OTHER_INFO;
    struct ERROR_LOG;
    struct FLAT_STRING;
    struct GROUP_INFO_0;
    struct GROUP_INFO_1;
    struct GROUP_INFO_1002;
    struct GROUP_INFO_1005;
    struct GROUP_INFO_2;
    struct GROUP_INFO_3;
    struct GROUP_USERS_INFO_0;
    struct GROUP_USERS_INFO_1;
    struct HARDWARE_ADDRESS;
    struct HLOG;
    struct LOCALGROUP_INFO_0;
    struct LOCALGROUP_INFO_1;
    struct LOCALGROUP_INFO_1002;
    struct LOCALGROUP_MEMBERS_INFO_0;
    struct LOCALGROUP_MEMBERS_INFO_1;
    struct LOCALGROUP_MEMBERS_INFO_2;
    struct LOCALGROUP_MEMBERS_INFO_3;
    struct LOCALGROUP_USERS_INFO_0;
    struct MPR_PROTOCOL_0;
    struct MSA_INFO_0;
    struct MSG_INFO_0;
    struct MSG_INFO_1;
    struct NETLOGON_INFO_1;
    struct NETLOGON_INFO_2;
    struct NETLOGON_INFO_3;
    struct NETLOGON_INFO_4;
    struct NETSETUP_PROVISIONING_PARAMS;
    struct NETWORK_NAME;
    struct NET_DISPLAY_GROUP;
    struct NET_DISPLAY_MACHINE;
    struct NET_DISPLAY_USER;
    struct NET_VALIDATE_AUTHENTICATION_INPUT_ARG;
    struct NET_VALIDATE_OUTPUT_ARG;
    struct NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG;
    struct NET_VALIDATE_PASSWORD_HASH;
    struct NET_VALIDATE_PASSWORD_RESET_INPUT_ARG;
    struct NET_VALIDATE_PERSISTED_FIELDS;
    struct NetProvisioning;
    struct OBO_TOKEN;
    struct PRINT_OTHER_INFO;
    struct RASCON_IPUI;
    struct REPL_EDIR_INFO_0;
    struct REPL_EDIR_INFO_1;
    struct REPL_EDIR_INFO_1000;
    struct REPL_EDIR_INFO_1001;
    struct REPL_EDIR_INFO_2;
    struct REPL_IDIR_INFO_0;
    struct REPL_IDIR_INFO_1;
    struct REPL_INFO_0;
    struct REPL_INFO_1000;
    struct REPL_INFO_1001;
    struct REPL_INFO_1002;
    struct REPL_INFO_1003;
    struct RTR_INFO_BLOCK_HEADER;
    struct RTR_TOC_ENTRY;
    struct SERVER_INFO_100;
    struct SERVER_INFO_1005;
    struct SERVER_INFO_101;
    struct SERVER_INFO_1010;
    struct SERVER_INFO_1016;
    struct SERVER_INFO_1017;
    struct SERVER_INFO_1018;
    struct SERVER_INFO_102;
    struct SERVER_INFO_103;
    struct SERVER_INFO_1107;
    struct SERVER_INFO_1501;
    struct SERVER_INFO_1502;
    struct SERVER_INFO_1503;
    struct SERVER_INFO_1506;
    struct SERVER_INFO_1509;
    struct SERVER_INFO_1510;
    struct SERVER_INFO_1511;
    struct SERVER_INFO_1512;
    struct SERVER_INFO_1513;
    struct SERVER_INFO_1514;
    struct SERVER_INFO_1515;
    struct SERVER_INFO_1516;
    struct SERVER_INFO_1518;
    struct SERVER_INFO_1520;
    struct SERVER_INFO_1521;
    struct SERVER_INFO_1522;
    struct SERVER_INFO_1523;
    struct SERVER_INFO_1524;
    struct SERVER_INFO_1525;
    struct SERVER_INFO_1528;
    struct SERVER_INFO_1529;
    struct SERVER_INFO_1530;
    struct SERVER_INFO_1533;
    struct SERVER_INFO_1534;
    struct SERVER_INFO_1535;
    struct SERVER_INFO_1536;
    struct SERVER_INFO_1537;
    struct SERVER_INFO_1538;
    struct SERVER_INFO_1539;
    struct SERVER_INFO_1540;
    struct SERVER_INFO_1541;
    struct SERVER_INFO_1542;
    struct SERVER_INFO_1543;
    struct SERVER_INFO_1544;
    struct SERVER_INFO_1545;
    struct SERVER_INFO_1546;
    struct SERVER_INFO_1547;
    struct SERVER_INFO_1548;
    struct SERVER_INFO_1549;
    struct SERVER_INFO_1550;
    struct SERVER_INFO_1552;
    struct SERVER_INFO_1553;
    struct SERVER_INFO_1554;
    struct SERVER_INFO_1555;
    struct SERVER_INFO_1556;
    struct SERVER_INFO_1557;
    struct SERVER_INFO_1560;
    struct SERVER_INFO_1561;
    struct SERVER_INFO_1562;
    struct SERVER_INFO_1563;
    struct SERVER_INFO_1564;
    struct SERVER_INFO_1565;
    struct SERVER_INFO_1566;
    struct SERVER_INFO_1567;
    struct SERVER_INFO_1568;
    struct SERVER_INFO_1569;
    struct SERVER_INFO_1570;
    struct SERVER_INFO_1571;
    struct SERVER_INFO_1572;
    struct SERVER_INFO_1573;
    struct SERVER_INFO_1574;
    struct SERVER_INFO_1575;
    struct SERVER_INFO_1576;
    struct SERVER_INFO_1577;
    struct SERVER_INFO_1578;
    struct SERVER_INFO_1579;
    struct SERVER_INFO_1580;
    struct SERVER_INFO_1581;
    struct SERVER_INFO_1582;
    struct SERVER_INFO_1583;
    struct SERVER_INFO_1584;
    struct SERVER_INFO_1585;
    struct SERVER_INFO_1586;
    struct SERVER_INFO_1587;
    struct SERVER_INFO_1588;
    struct SERVER_INFO_1590;
    struct SERVER_INFO_1591;
    struct SERVER_INFO_1592;
    struct SERVER_INFO_1593;
    struct SERVER_INFO_1594;
    struct SERVER_INFO_1595;
    struct SERVER_INFO_1596;
    struct SERVER_INFO_1597;
    struct SERVER_INFO_1598;
    struct SERVER_INFO_1599;
    struct SERVER_INFO_1600;
    struct SERVER_INFO_1601;
    struct SERVER_INFO_1602;
    struct SERVER_INFO_402;
    struct SERVER_INFO_403;
    struct SERVER_INFO_502;
    struct SERVER_INFO_503;
    struct SERVER_INFO_598;
    struct SERVER_INFO_599;
    struct SERVER_TRANSPORT_INFO_0;
    struct SERVER_TRANSPORT_INFO_1;
    struct SERVER_TRANSPORT_INFO_2;
    struct SERVER_TRANSPORT_INFO_3;
    struct SERVICE_INFO_0;
    struct SERVICE_INFO_1;
    struct SERVICE_INFO_2;
    struct SMB_COMPRESSION_INFO;
    struct SMB_TREE_CONNECT_PARAMETERS;
    struct SMB_USE_OPTION_COMPRESSION_PARAMETERS;
    struct STD_ALERT;
    struct TIME_OF_DAY_INFO;
    struct TRANSPORT_INFO;
    struct USER_INFO_0;
    struct USER_INFO_1;
    struct USER_INFO_10;
    struct USER_INFO_1003;
    struct USER_INFO_1005;
    struct USER_INFO_1006;
    struct USER_INFO_1007;
    struct USER_INFO_1008;
    struct USER_INFO_1009;
    struct USER_INFO_1010;
    struct USER_INFO_1011;
    struct USER_INFO_1012;
    struct USER_INFO_1013;
    struct USER_INFO_1014;
    struct USER_INFO_1017;
    struct USER_INFO_1018;
    struct USER_INFO_1020;
    struct USER_INFO_1023;
    struct USER_INFO_1024;
    struct USER_INFO_1025;
    struct USER_INFO_1051;
    struct USER_INFO_1052;
    struct USER_INFO_1053;
    struct USER_INFO_11;
    struct USER_INFO_2;
    struct USER_INFO_20;
    struct USER_INFO_21;
    struct USER_INFO_22;
    struct USER_INFO_23;
    struct USER_INFO_24;
    struct USER_INFO_3;
    struct USER_INFO_4;
    struct USER_MODALS_INFO_0;
    struct USER_MODALS_INFO_1;
    struct USER_MODALS_INFO_1001;
    struct USER_MODALS_INFO_1002;
    struct USER_MODALS_INFO_1003;
    struct USER_MODALS_INFO_1004;
    struct USER_MODALS_INFO_1005;
    struct USER_MODALS_INFO_1006;
    struct USER_MODALS_INFO_1007;
    struct USER_MODALS_INFO_2;
    struct USER_MODALS_INFO_3;
    struct USER_OTHER_INFO;
    struct USE_INFO_0;
    struct USE_INFO_1;
    struct USE_INFO_2;
    struct USE_INFO_3;
    struct USE_INFO_4;
    struct USE_INFO_5;
    struct USE_OPTION_DEFERRED_CONNECTION_PARAMETERS;
    struct USE_OPTION_GENERIC;
    struct USE_OPTION_PROPERTIES;
    struct USE_OPTION_TRANSPORT_PARAMETERS;
    struct WKSTA_INFO_100;
    struct WKSTA_INFO_101;
    struct WKSTA_INFO_1010;
    struct WKSTA_INFO_1011;
    struct WKSTA_INFO_1012;
    struct WKSTA_INFO_1013;
    struct WKSTA_INFO_1018;
    struct WKSTA_INFO_102;
    struct WKSTA_INFO_1023;
    struct WKSTA_INFO_1027;
    struct WKSTA_INFO_1028;
    struct WKSTA_INFO_1032;
    struct WKSTA_INFO_1033;
    struct WKSTA_INFO_1041;
    struct WKSTA_INFO_1042;
    struct WKSTA_INFO_1043;
    struct WKSTA_INFO_1044;
    struct WKSTA_INFO_1045;
    struct WKSTA_INFO_1046;
    struct WKSTA_INFO_1047;
    struct WKSTA_INFO_1048;
    struct WKSTA_INFO_1049;
    struct WKSTA_INFO_1050;
    struct WKSTA_INFO_1051;
    struct WKSTA_INFO_1052;
    struct WKSTA_INFO_1053;
    struct WKSTA_INFO_1054;
    struct WKSTA_INFO_1055;
    struct WKSTA_INFO_1056;
    struct WKSTA_INFO_1057;
    struct WKSTA_INFO_1058;
    struct WKSTA_INFO_1059;
    struct WKSTA_INFO_1060;
    struct WKSTA_INFO_1061;
    struct WKSTA_INFO_1062;
    struct WKSTA_INFO_302;
    struct WKSTA_INFO_402;
    struct WKSTA_INFO_502;
    struct WKSTA_TRANSPORT_INFO_0;
    struct WKSTA_USER_INFO_0;
    struct WKSTA_USER_INFO_1;
    struct WKSTA_USER_INFO_1101;
    struct IEnumNetCfgBindingInterface;
    struct IEnumNetCfgBindingPath;
    struct IEnumNetCfgComponent;
    struct INetCfg;
    struct INetCfgBindingInterface;
    struct INetCfgBindingPath;
    struct INetCfgClass;
    struct INetCfgClassSetup;
    struct INetCfgClassSetup2;
    struct INetCfgComponent;
    struct INetCfgComponentBindings;
    struct INetCfgComponentControl;
    struct INetCfgComponentNotifyBinding;
    struct INetCfgComponentNotifyGlobal;
    struct INetCfgComponentPropertyUi;
    struct INetCfgComponentSetup;
    struct INetCfgComponentSysPrep;
    struct INetCfgComponentUpperEdge;
    struct INetCfgLock;
    struct INetCfgPnpReconfigCallback;
    struct INetCfgSysPrep;
    struct INetLanConnectionUiInfo;
    struct INetRasConnectionIpUiInfo;
    struct IProvisioningDomain;
    struct IProvisioningProfileWireless;
#pragma endregion forward_declarations

#pragma region delegates
    using WORKERFUNCTION = void __stdcall(void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
