// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_IpHelper_2_H
#define WIN32_Windows_Win32_NetworkManagement_IpHelper_2_H
#include "win32/Windows.Win32.NetworkManagement.IpHelper.h"
#include "win32/impl/Windows.Win32.NetworkManagement.IpHelper.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::IpHelper
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIfEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IF_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetIfEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIfEntry2Ex(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IF_ENTRY_LEVEL Level, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IF_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetIfEntry2Ex(Level, Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIfTable2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IF_TABLE2** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIfTable2(Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIfTable2Ex(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IF_TABLE_LEVEL Level, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IF_TABLE2** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIfTable2Ex(Level, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIfStackTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IFSTACK_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIfStackTable(Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetInvertedIfStackTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_INVERTEDIFSTACK_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetInvertedIfStackTable(Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpInterfaceEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPINTERFACE_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetIpInterfaceEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpInterfaceTable(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPINTERFACE_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIpInterfaceTable(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeIpInterfaceEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPINTERFACE_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        g_api_table.InitializeIpInterfaceEntry(Row);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NotifyIpInterfaceChange(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::PIPINTERFACE_CHANGE_CALLBACK* Callback, void* CallerContext, win32::Windows::Win32::Foundation::BOOLEAN InitialNotification, win32::Windows::Win32::Foundation::HANDLE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(InitialNotification);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.NotifyIpInterfaceChange(Family, Callback, CallerContext, InitialNotification, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetIpInterfaceEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPINTERFACE_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.SetIpInterfaceEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpNetworkConnectionBandwidthEstimates(uint32_t InterfaceIndex, uint16_t AddressFamily, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES* BandwidthEstimates) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceIndex);
        ORBIT_TRACK_PARAM(AddressFamily);
        ORBIT_TRACK_PARAM(BandwidthEstimates);

        auto win32_impl_result = g_api_table.GetIpNetworkConnectionBandwidthEstimates(InterfaceIndex, AddressFamily, BandwidthEstimates);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CreateUnicastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.CreateUnicastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_DeleteUnicastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.DeleteUnicastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetUnicastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetUnicastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetUnicastIpAddressTable(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetUnicastIpAddressTable(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeUnicastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        g_api_table.InitializeUnicastIpAddressEntry(Row);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NotifyUnicastIpAddressChange(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::PUNICAST_IPADDRESS_CHANGE_CALLBACK* Callback, void* CallerContext, win32::Windows::Win32::Foundation::BOOLEAN InitialNotification, win32::Windows::Win32::Foundation::HANDLE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(InitialNotification);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.NotifyUnicastIpAddressChange(Family, Callback, CallerContext, InitialNotification, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NotifyStableUnicastIpAddressTable(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_TABLE** Table, win32::Windows::Win32::NetworkManagement::IpHelper::PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK* CallerCallback, void* CallerContext, win32::Windows::Win32::Foundation::HANDLE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);
        ORBIT_TRACK_PARAM(CallerCallback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.NotifyStableUnicastIpAddressTable(Family, Table, CallerCallback, CallerContext, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetUnicastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.SetUnicastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CreateAnycastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_ANYCASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.CreateAnycastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_DeleteAnycastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_ANYCASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.DeleteAnycastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetAnycastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_ANYCASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetAnycastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetAnycastIpAddressTable(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_ANYCASTIPADDRESS_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetAnycastIpAddressTable(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetMulticastIpAddressEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_MULTICASTIPADDRESS_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetMulticastIpAddressEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetMulticastIpAddressTable(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_MULTICASTIPADDRESS_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetMulticastIpAddressTable(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CreateIpForwardEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.CreateIpForwardEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_DeleteIpForwardEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.DeleteIpForwardEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetBestRoute2(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, uint32_t InterfaceIndex, win32::Windows::Win32::Networking::WinSock::SOCKADDR_INET* SourceAddress, win32::Windows::Win32::Networking::WinSock::SOCKADDR_INET* DestinationAddress, uint32_t AddressSortOptions, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2* BestRoute, win32::Windows::Win32::Networking::WinSock::SOCKADDR_INET* BestSourceAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(InterfaceIndex);
        ORBIT_TRACK_PARAM(SourceAddress);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(AddressSortOptions);
        ORBIT_TRACK_PARAM(BestRoute);
        ORBIT_TRACK_PARAM(BestSourceAddress);

        auto win32_impl_result = g_api_table.GetBestRoute2(InterfaceLuid, InterfaceIndex, SourceAddress, DestinationAddress, AddressSortOptions, BestRoute, BestSourceAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpForwardEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetIpForwardEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpForwardTable2(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_TABLE2** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIpForwardTable2(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeIpForwardEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        g_api_table.InitializeIpForwardEntry(Row);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NotifyRouteChange2(uint16_t AddressFamily, win32::Windows::Win32::NetworkManagement::IpHelper::PIPFORWARD_CHANGE_CALLBACK* Callback, void* CallerContext, win32::Windows::Win32::Foundation::BOOLEAN InitialNotification, win32::Windows::Win32::Foundation::HANDLE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AddressFamily);
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(InitialNotification);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.NotifyRouteChange2(AddressFamily, Callback, CallerContext, InitialNotification, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetIpForwardEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2* Route) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Route);

        auto win32_impl_result = g_api_table.SetIpForwardEntry2(Route);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_FlushIpPathTable(uint16_t Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.FlushIpPathTable(Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpPathEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPPATH_ROW* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetIpPathEntry(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpPathTable(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPPATH_TABLE** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIpPathTable(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CreateIpNetEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNET_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.CreateIpNetEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_DeleteIpNetEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNET_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.DeleteIpNetEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_FlushIpNetTable2(uint16_t Family, uint32_t InterfaceIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(InterfaceIndex);

        auto win32_impl_result = g_api_table.FlushIpNetTable2(Family, InterfaceIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpNetEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNET_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.GetIpNetEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetIpNetTable2(uint16_t Family, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNET_TABLE2** Table) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Table);

        auto win32_impl_result = g_api_table.GetIpNetTable2(Family, Table);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ResolveIpNetEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNET_ROW2* Row, win32::Windows::Win32::Networking::WinSock::SOCKADDR_INET* SourceAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);
        ORBIT_TRACK_PARAM(SourceAddress);

        auto win32_impl_result = g_api_table.ResolveIpNetEntry2(Row, SourceAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetIpNetEntry2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNET_ROW2* Row) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);

        auto win32_impl_result = g_api_table.SetIpNetEntry2(Row);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NotifyTeredoPortChange(win32::Windows::Win32::NetworkManagement::IpHelper::PTEREDO_PORT_CHANGE_CALLBACK* Callback, void* CallerContext, win32::Windows::Win32::Foundation::BOOLEAN InitialNotification, win32::Windows::Win32::Foundation::HANDLE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(InitialNotification);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.NotifyTeredoPortChange(Callback, CallerContext, InitialNotification, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetTeredoPort(uint16_t* Port) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Port);

        auto win32_impl_result = g_api_table.GetTeredoPort(Port);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CancelMibChangeNotify2(win32::Windows::Win32::Foundation::HANDLE NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.CancelMibChangeNotify2(NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_FreeMibTable(void* Memory) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Memory);

        g_api_table.FreeMibTable(Memory);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_CreateSortedAddressPairs(win32::Windows::Win32::Networking::WinSock::SOCKADDR_IN6* SourceAddressList, uint32_t SourceAddressCount, win32::Windows::Win32::Networking::WinSock::SOCKADDR_IN6* DestinationAddressList, uint32_t DestinationAddressCount, uint32_t AddressSortOptions, win32::Windows::Win32::Networking::WinSock::SOCKADDR_IN6_PAIR** SortedAddressPairList, uint32_t* SortedAddressPairCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SourceAddressList);
        ORBIT_TRACK_PARAM(SourceAddressCount);
        ORBIT_TRACK_PARAM(DestinationAddressList);
        ORBIT_TRACK_PARAM(DestinationAddressCount);
        ORBIT_TRACK_PARAM(AddressSortOptions);
        ORBIT_TRACK_PARAM(SortedAddressPairList);
        ORBIT_TRACK_PARAM(SortedAddressPairCount);

        auto win32_impl_result = g_api_table.CreateSortedAddressPairs(SourceAddressList, SourceAddressCount, DestinationAddressList, DestinationAddressCount, AddressSortOptions, SortedAddressPairList, SortedAddressPairCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertCompartmentGuidToId(::win32::guid* CompartmentGuid, uint32_t* CompartmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompartmentGuid);
        ORBIT_TRACK_PARAM(CompartmentId);

        auto win32_impl_result = g_api_table.ConvertCompartmentGuidToId(CompartmentGuid, CompartmentId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertCompartmentIdToGuid(uint32_t CompartmentId, ::win32::guid* CompartmentGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompartmentId);
        ORBIT_TRACK_PARAM(CompartmentGuid);

        auto win32_impl_result = g_api_table.ConvertCompartmentIdToGuid(CompartmentId, CompartmentGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceNameToLuidA(win32::Windows::Win32::Foundation::PSTR InterfaceName, win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceName);
        ORBIT_TRACK_PARAM(InterfaceLuid);

        auto win32_impl_result = g_api_table.ConvertInterfaceNameToLuidA(InterfaceName, InterfaceLuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceNameToLuidW(win32::Windows::Win32::Foundation::PWSTR InterfaceName, win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceName);
        ORBIT_TRACK_PARAM(InterfaceLuid);

        auto win32_impl_result = g_api_table.ConvertInterfaceNameToLuidW(InterfaceName, InterfaceLuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceLuidToNameA(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, win32::Windows::Win32::Foundation::PSTR InterfaceName, size_t Length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(InterfaceName);
        ORBIT_TRACK_PARAM(Length);

        auto win32_impl_result = g_api_table.ConvertInterfaceLuidToNameA(InterfaceLuid, InterfaceName, Length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceLuidToNameW(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, win32::Windows::Win32::Foundation::PWSTR InterfaceName, size_t Length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(InterfaceName);
        ORBIT_TRACK_PARAM(Length);

        auto win32_impl_result = g_api_table.ConvertInterfaceLuidToNameW(InterfaceLuid, InterfaceName, Length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceLuidToIndex(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, uint32_t* InterfaceIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(InterfaceIndex);

        auto win32_impl_result = g_api_table.ConvertInterfaceLuidToIndex(InterfaceLuid, InterfaceIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceIndexToLuid(uint32_t InterfaceIndex, win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceIndex);
        ORBIT_TRACK_PARAM(InterfaceLuid);

        auto win32_impl_result = g_api_table.ConvertInterfaceIndexToLuid(InterfaceIndex, InterfaceLuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceLuidToAlias(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, win32::Windows::Win32::Foundation::PWSTR InterfaceAlias, size_t Length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(InterfaceAlias);
        ORBIT_TRACK_PARAM(Length);

        auto win32_impl_result = g_api_table.ConvertInterfaceLuidToAlias(InterfaceLuid, InterfaceAlias, Length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceAliasToLuid(win32::Windows::Win32::Foundation::PWSTR InterfaceAlias, win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceAlias);
        ORBIT_TRACK_PARAM(InterfaceLuid);

        auto win32_impl_result = g_api_table.ConvertInterfaceAliasToLuid(InterfaceAlias, InterfaceLuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceLuidToGuid(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, ::win32::guid* InterfaceGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(InterfaceGuid);

        auto win32_impl_result = g_api_table.ConvertInterfaceLuidToGuid(InterfaceLuid, InterfaceGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertInterfaceGuidToLuid(::win32::guid* InterfaceGuid, win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceGuid);
        ORBIT_TRACK_PARAM(InterfaceLuid);

        auto win32_impl_result = g_api_table.ConvertInterfaceGuidToLuid(InterfaceGuid, InterfaceLuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_if_nametoindex(win32::Windows::Win32::Foundation::PSTR InterfaceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceName);

        auto win32_impl_result = g_api_table.if_nametoindex(InterfaceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_if_indextoname(uint32_t InterfaceIndex, win32::Windows::Win32::Foundation::PSTR InterfaceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceIndex);
        ORBIT_TRACK_PARAM(InterfaceName);

        auto win32_impl_result = g_api_table.if_indextoname(InterfaceIndex, InterfaceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCurrentThreadCompartmentId() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentThreadCompartmentId();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetCurrentThreadCompartmentId(uint32_t CompartmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompartmentId);

        auto win32_impl_result = g_api_table.SetCurrentThreadCompartmentId(CompartmentId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_GetCurrentThreadCompartmentScope(uint32_t* CompartmentScope, uint32_t* CompartmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompartmentScope);
        ORBIT_TRACK_PARAM(CompartmentId);

        g_api_table.GetCurrentThreadCompartmentScope(CompartmentScope, CompartmentId);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetCurrentThreadCompartmentScope(uint32_t CompartmentScope) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompartmentScope);

        auto win32_impl_result = g_api_table.SetCurrentThreadCompartmentScope(CompartmentScope);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetJobCompartmentId(win32::Windows::Win32::Foundation::HANDLE JobHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(JobHandle);

        auto win32_impl_result = g_api_table.GetJobCompartmentId(JobHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetJobCompartmentId(win32::Windows::Win32::Foundation::HANDLE JobHandle, uint32_t CompartmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(JobHandle);
        ORBIT_TRACK_PARAM(CompartmentId);

        auto win32_impl_result = g_api_table.SetJobCompartmentId(JobHandle, CompartmentId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetSessionCompartmentId(uint32_t SessionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionId);

        auto win32_impl_result = g_api_table.GetSessionCompartmentId(SessionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetSessionCompartmentId(uint32_t SessionId, uint32_t CompartmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SessionId);
        ORBIT_TRACK_PARAM(CompartmentId);

        auto win32_impl_result = g_api_table.SetSessionCompartmentId(SessionId, CompartmentId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDefaultCompartmentId() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetDefaultCompartmentId();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetNetworkInformation(::win32::guid* NetworkGuid, uint32_t* CompartmentId, uint32_t* SiteId, win32::Windows::Win32::Foundation::PWSTR NetworkName, uint32_t Length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NetworkGuid);
        ORBIT_TRACK_PARAM(CompartmentId);
        ORBIT_TRACK_PARAM(SiteId);
        ORBIT_TRACK_PARAM(NetworkName);
        ORBIT_TRACK_PARAM(Length);

        auto win32_impl_result = g_api_table.GetNetworkInformation(NetworkGuid, CompartmentId, SiteId, NetworkName, Length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetNetworkInformation(::win32::guid* NetworkGuid, uint32_t CompartmentId, win32::Windows::Win32::Foundation::PWSTR NetworkName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NetworkGuid);
        ORBIT_TRACK_PARAM(CompartmentId);
        ORBIT_TRACK_PARAM(NetworkName);

        auto win32_impl_result = g_api_table.SetNetworkInformation(NetworkGuid, CompartmentId, NetworkName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertLengthToIpv4Mask(uint32_t MaskLength, uint32_t* Mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MaskLength);
        ORBIT_TRACK_PARAM(Mask);

        auto win32_impl_result = g_api_table.ConvertLengthToIpv4Mask(MaskLength, Mask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_ConvertIpv4MaskToLength(uint32_t Mask, uint8_t* MaskLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Mask);
        ORBIT_TRACK_PARAM(MaskLength);

        auto win32_impl_result = g_api_table.ConvertIpv4MaskToLength(Mask, MaskLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetDnsSettings(win32::Windows::Win32::NetworkManagement::IpHelper::DNS_SETTINGS* Settings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Settings);

        auto win32_impl_result = g_api_table.GetDnsSettings(Settings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_FreeDnsSettings(win32::Windows::Win32::NetworkManagement::IpHelper::DNS_SETTINGS* Settings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Settings);

        g_api_table.FreeDnsSettings(Settings);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetDnsSettings(win32::Windows::Win32::NetworkManagement::IpHelper::DNS_SETTINGS* Settings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Settings);

        auto win32_impl_result = g_api_table.SetDnsSettings(Settings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetInterfaceDnsSettings(::win32::guid Interface, win32::Windows::Win32::NetworkManagement::IpHelper::DNS_INTERFACE_SETTINGS* Settings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Interface);
        ORBIT_TRACK_PARAM(Settings);

        auto win32_impl_result = g_api_table.GetInterfaceDnsSettings(Interface, Settings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_FreeInterfaceDnsSettings(win32::Windows::Win32::NetworkManagement::IpHelper::DNS_INTERFACE_SETTINGS* Settings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Settings);

        g_api_table.FreeInterfaceDnsSettings(Settings);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_SetInterfaceDnsSettings(::win32::guid Interface, win32::Windows::Win32::NetworkManagement::IpHelper::DNS_INTERFACE_SETTINGS* Settings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Interface);
        ORBIT_TRACK_PARAM(Settings);

        auto win32_impl_result = g_api_table.SetInterfaceDnsSettings(Interface, Settings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetNetworkConnectivityHint(win32::Windows::Win32::Networking::WinSock::NL_NETWORK_CONNECTIVITY_HINT* ConnectivityHint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConnectivityHint);

        auto win32_impl_result = g_api_table.GetNetworkConnectivityHint(ConnectivityHint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_GetNetworkConnectivityHintForInterface(uint32_t InterfaceIndex, win32::Windows::Win32::Networking::WinSock::NL_NETWORK_CONNECTIVITY_HINT* ConnectivityHint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceIndex);
        ORBIT_TRACK_PARAM(ConnectivityHint);

        auto win32_impl_result = g_api_table.GetNetworkConnectivityHintForInterface(InterfaceIndex, ConnectivityHint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NotifyNetworkConnectivityHintChange(win32::Windows::Win32::NetworkManagement::IpHelper::PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK* Callback, void* CallerContext, win32::Windows::Win32::Foundation::BOOLEAN InitialNotification, win32::Windows::Win32::Foundation::HANDLE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(InitialNotification);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.NotifyNetworkConnectivityHintChange(Callback, CallerContext, InitialNotification, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle __stdcall ORBIT_IMPL_IcmpCreateFile() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.IcmpCreateFile();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle __stdcall ORBIT_IMPL_Icmp6CreateFile() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.Icmp6CreateFile();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IcmpCloseHandle(win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle IcmpHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IcmpHandle);

        auto win32_impl_result = g_api_table.IcmpCloseHandle(IcmpHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IcmpSendEcho(win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle IcmpHandle, uint32_t DestinationAddress, void* RequestData, uint16_t RequestSize, win32::Windows::Win32::NetworkManagement::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IcmpHandle);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(RequestData);
        ORBIT_TRACK_PARAM(RequestSize);
        ORBIT_TRACK_PARAM(RequestOptions);
        ORBIT_TRACK_PARAM(ReplyBuffer);
        ORBIT_TRACK_PARAM(ReplySize);
        ORBIT_TRACK_PARAM(Timeout);

        auto win32_impl_result = g_api_table.IcmpSendEcho(IcmpHandle, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IcmpSendEcho2(win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle IcmpHandle, win32::Windows::Win32::Foundation::HANDLE Event, win32::Windows::Win32::System::WindowsProgramming::PIO_APC_ROUTINE* ApcRoutine, void* ApcContext, uint32_t DestinationAddress, void* RequestData, uint16_t RequestSize, win32::Windows::Win32::NetworkManagement::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IcmpHandle);
        ORBIT_TRACK_PARAM(Event);
        ORBIT_TRACK_PARAM(ApcRoutine);
        ORBIT_TRACK_PARAM(ApcContext);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(RequestData);
        ORBIT_TRACK_PARAM(RequestSize);
        ORBIT_TRACK_PARAM(RequestOptions);
        ORBIT_TRACK_PARAM(ReplyBuffer);
        ORBIT_TRACK_PARAM(ReplySize);
        ORBIT_TRACK_PARAM(Timeout);

        auto win32_impl_result = g_api_table.IcmpSendEcho2(IcmpHandle, Event, ApcRoutine, ApcContext, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IcmpSendEcho2Ex(win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle IcmpHandle, win32::Windows::Win32::Foundation::HANDLE Event, win32::Windows::Win32::System::WindowsProgramming::PIO_APC_ROUTINE* ApcRoutine, void* ApcContext, uint32_t SourceAddress, uint32_t DestinationAddress, void* RequestData, uint16_t RequestSize, win32::Windows::Win32::NetworkManagement::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IcmpHandle);
        ORBIT_TRACK_PARAM(Event);
        ORBIT_TRACK_PARAM(ApcRoutine);
        ORBIT_TRACK_PARAM(ApcContext);
        ORBIT_TRACK_PARAM(SourceAddress);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(RequestData);
        ORBIT_TRACK_PARAM(RequestSize);
        ORBIT_TRACK_PARAM(RequestOptions);
        ORBIT_TRACK_PARAM(ReplyBuffer);
        ORBIT_TRACK_PARAM(ReplySize);
        ORBIT_TRACK_PARAM(Timeout);

        auto win32_impl_result = g_api_table.IcmpSendEcho2Ex(IcmpHandle, Event, ApcRoutine, ApcContext, SourceAddress, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_Icmp6SendEcho2(win32::Windows::Win32::NetworkManagement::IpHelper::IcmpHandle IcmpHandle, win32::Windows::Win32::Foundation::HANDLE Event, win32::Windows::Win32::System::WindowsProgramming::PIO_APC_ROUTINE* ApcRoutine, void* ApcContext, win32::Windows::Win32::Networking::WinSock::SOCKADDR_IN6* SourceAddress, win32::Windows::Win32::Networking::WinSock::SOCKADDR_IN6* DestinationAddress, void* RequestData, uint16_t RequestSize, win32::Windows::Win32::NetworkManagement::IpHelper::ip_option_information* RequestOptions, void* ReplyBuffer, uint32_t ReplySize, uint32_t Timeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IcmpHandle);
        ORBIT_TRACK_PARAM(Event);
        ORBIT_TRACK_PARAM(ApcRoutine);
        ORBIT_TRACK_PARAM(ApcContext);
        ORBIT_TRACK_PARAM(SourceAddress);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(RequestData);
        ORBIT_TRACK_PARAM(RequestSize);
        ORBIT_TRACK_PARAM(RequestOptions);
        ORBIT_TRACK_PARAM(ReplyBuffer);
        ORBIT_TRACK_PARAM(ReplySize);
        ORBIT_TRACK_PARAM(Timeout);

        auto win32_impl_result = g_api_table.Icmp6SendEcho2(IcmpHandle, Event, ApcRoutine, ApcContext, SourceAddress, DestinationAddress, RequestData, RequestSize, RequestOptions, ReplyBuffer, ReplySize, Timeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IcmpParseReplies(void* ReplyBuffer, uint32_t ReplySize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ReplyBuffer);
        ORBIT_TRACK_PARAM(ReplySize);

        auto win32_impl_result = g_api_table.IcmpParseReplies(ReplyBuffer, ReplySize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_Icmp6ParseReplies(void* ReplyBuffer, uint32_t ReplySize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ReplyBuffer);
        ORBIT_TRACK_PARAM(ReplySize);

        auto win32_impl_result = g_api_table.Icmp6ParseReplies(ReplyBuffer, ReplySize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetNumberOfInterfaces(uint32_t* pdwNumIf) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pdwNumIf);

        auto win32_impl_result = g_api_table.GetNumberOfInterfaces(pdwNumIf);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIfEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IFROW* pIfRow) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIfRow);

        auto win32_impl_result = g_api_table.GetIfEntry(pIfRow);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIfTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IFTABLE* pIfTable, uint32_t* pdwSize, win32::Windows::Win32::Foundation::BOOL bOrder) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIfTable);
        ORBIT_TRACK_PARAM(pdwSize);
        ORBIT_TRACK_PARAM(bOrder);

        auto win32_impl_result = g_api_table.GetIfTable(pIfTable, pdwSize, bOrder);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIpAddrTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPADDRTABLE* pIpAddrTable, uint32_t* pdwSize, win32::Windows::Win32::Foundation::BOOL bOrder) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIpAddrTable);
        ORBIT_TRACK_PARAM(pdwSize);
        ORBIT_TRACK_PARAM(bOrder);

        auto win32_impl_result = g_api_table.GetIpAddrTable(pIpAddrTable, pdwSize, bOrder);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIpNetTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNETTABLE* IpNetTable, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IpNetTable);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetIpNetTable(IpNetTable, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIpForwardTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARDTABLE* pIpForwardTable, uint32_t* pdwSize, win32::Windows::Win32::Foundation::BOOL bOrder) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIpForwardTable);
        ORBIT_TRACK_PARAM(pdwSize);
        ORBIT_TRACK_PARAM(bOrder);

        auto win32_impl_result = g_api_table.GetIpForwardTable(pIpForwardTable, pdwSize, bOrder);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcpTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPTABLE* TcpTable, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TcpTable);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetTcpTable(TcpTable, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetExtendedTcpTable(void* pTcpTable, uint32_t* pdwSize, win32::Windows::Win32::Foundation::BOOL bOrder, uint32_t ulAf, win32::Windows::Win32::NetworkManagement::IpHelper::TCP_TABLE_CLASS TableClass, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTcpTable);
        ORBIT_TRACK_PARAM(pdwSize);
        ORBIT_TRACK_PARAM(bOrder);
        ORBIT_TRACK_PARAM(ulAf);
        ORBIT_TRACK_PARAM(TableClass);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.GetExtendedTcpTable(pTcpTable, pdwSize, bOrder, ulAf, TableClass, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetOwnerModuleFromTcpEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPROW_OWNER_MODULE* pTcpEntry, win32::Windows::Win32::NetworkManagement::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTcpEntry);
        ORBIT_TRACK_PARAM(Class);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(pdwSize);

        auto win32_impl_result = g_api_table.GetOwnerModuleFromTcpEntry(pTcpEntry, Class, pBuffer, pdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUdpTable(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDPTABLE* UdpTable, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UdpTable);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetUdpTable(UdpTable, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetExtendedUdpTable(void* pUdpTable, uint32_t* pdwSize, win32::Windows::Win32::Foundation::BOOL bOrder, uint32_t ulAf, win32::Windows::Win32::NetworkManagement::IpHelper::UDP_TABLE_CLASS TableClass, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pUdpTable);
        ORBIT_TRACK_PARAM(pdwSize);
        ORBIT_TRACK_PARAM(bOrder);
        ORBIT_TRACK_PARAM(ulAf);
        ORBIT_TRACK_PARAM(TableClass);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.GetExtendedUdpTable(pUdpTable, pdwSize, bOrder, ulAf, TableClass, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetOwnerModuleFromUdpEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDPROW_OWNER_MODULE* pUdpEntry, win32::Windows::Win32::NetworkManagement::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pUdpEntry);
        ORBIT_TRACK_PARAM(Class);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(pdwSize);

        auto win32_impl_result = g_api_table.GetOwnerModuleFromUdpEntry(pUdpEntry, Class, pBuffer, pdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcpTable2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPTABLE2* TcpTable, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TcpTable);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetTcpTable2(TcpTable, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcp6Table(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCP6TABLE* TcpTable, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TcpTable);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetTcp6Table(TcpTable, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcp6Table2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCP6TABLE2* TcpTable, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TcpTable);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetTcp6Table2(TcpTable, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetPerTcpConnectionEStats(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPROW_LH* Row, win32::Windows::Win32::NetworkManagement::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint8_t* Ros, uint32_t RosVersion, uint32_t RosSize, uint8_t* Rod, uint32_t RodVersion, uint32_t RodSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);
        ORBIT_TRACK_PARAM(EstatsType);
        ORBIT_TRACK_PARAM(Rw);
        ORBIT_TRACK_PARAM(RwVersion);
        ORBIT_TRACK_PARAM(RwSize);
        ORBIT_TRACK_PARAM(Ros);
        ORBIT_TRACK_PARAM(RosVersion);
        ORBIT_TRACK_PARAM(RosSize);
        ORBIT_TRACK_PARAM(Rod);
        ORBIT_TRACK_PARAM(RodVersion);
        ORBIT_TRACK_PARAM(RodSize);

        auto win32_impl_result = g_api_table.GetPerTcpConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Ros, RosVersion, RosSize, Rod, RodVersion, RodSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetPerTcpConnectionEStats(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPROW_LH* Row, win32::Windows::Win32::NetworkManagement::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint32_t Offset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);
        ORBIT_TRACK_PARAM(EstatsType);
        ORBIT_TRACK_PARAM(Rw);
        ORBIT_TRACK_PARAM(RwVersion);
        ORBIT_TRACK_PARAM(RwSize);
        ORBIT_TRACK_PARAM(Offset);

        auto win32_impl_result = g_api_table.SetPerTcpConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Offset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetPerTcp6ConnectionEStats(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCP6ROW* Row, win32::Windows::Win32::NetworkManagement::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint8_t* Ros, uint32_t RosVersion, uint32_t RosSize, uint8_t* Rod, uint32_t RodVersion, uint32_t RodSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);
        ORBIT_TRACK_PARAM(EstatsType);
        ORBIT_TRACK_PARAM(Rw);
        ORBIT_TRACK_PARAM(RwVersion);
        ORBIT_TRACK_PARAM(RwSize);
        ORBIT_TRACK_PARAM(Ros);
        ORBIT_TRACK_PARAM(RosVersion);
        ORBIT_TRACK_PARAM(RosSize);
        ORBIT_TRACK_PARAM(Rod);
        ORBIT_TRACK_PARAM(RodVersion);
        ORBIT_TRACK_PARAM(RodSize);

        auto win32_impl_result = g_api_table.GetPerTcp6ConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Ros, RosVersion, RosSize, Rod, RodVersion, RodSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetPerTcp6ConnectionEStats(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCP6ROW* Row, win32::Windows::Win32::NetworkManagement::IpHelper::TCP_ESTATS_TYPE EstatsType, uint8_t* Rw, uint32_t RwVersion, uint32_t RwSize, uint32_t Offset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Row);
        ORBIT_TRACK_PARAM(EstatsType);
        ORBIT_TRACK_PARAM(Rw);
        ORBIT_TRACK_PARAM(RwVersion);
        ORBIT_TRACK_PARAM(RwSize);
        ORBIT_TRACK_PARAM(Offset);

        auto win32_impl_result = g_api_table.SetPerTcp6ConnectionEStats(Row, EstatsType, Rw, RwVersion, RwSize, Offset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetOwnerModuleFromTcp6Entry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCP6ROW_OWNER_MODULE* pTcpEntry, win32::Windows::Win32::NetworkManagement::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTcpEntry);
        ORBIT_TRACK_PARAM(Class);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(pdwSize);

        auto win32_impl_result = g_api_table.GetOwnerModuleFromTcp6Entry(pTcpEntry, Class, pBuffer, pdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUdp6Table(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDP6TABLE* Udp6Table, uint32_t* SizePointer, win32::Windows::Win32::Foundation::BOOL Order) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Udp6Table);
        ORBIT_TRACK_PARAM(SizePointer);
        ORBIT_TRACK_PARAM(Order);

        auto win32_impl_result = g_api_table.GetUdp6Table(Udp6Table, SizePointer, Order);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetOwnerModuleFromUdp6Entry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDP6ROW_OWNER_MODULE* pUdpEntry, win32::Windows::Win32::NetworkManagement::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pUdpEntry);
        ORBIT_TRACK_PARAM(Class);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(pdwSize);

        auto win32_impl_result = g_api_table.GetOwnerModuleFromUdp6Entry(pUdpEntry, Class, pBuffer, pdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetOwnerModuleFromPidAndInfo(uint32_t ulPid, uint64_t* pInfo, win32::Windows::Win32::NetworkManagement::IpHelper::TCPIP_OWNER_MODULE_INFO_CLASS Class, void* pBuffer, uint32_t* pdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ulPid);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(Class);
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(pdwSize);

        auto win32_impl_result = g_api_table.GetOwnerModuleFromPidAndInfo(ulPid, pInfo, Class, pBuffer, pdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIpStatistics(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPSTATS_LH* Statistics) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);

        auto win32_impl_result = g_api_table.GetIpStatistics(Statistics);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIcmpStatistics(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_ICMP* Statistics) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);

        auto win32_impl_result = g_api_table.GetIcmpStatistics(Statistics);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcpStatistics(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPSTATS_LH* Statistics) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);

        auto win32_impl_result = g_api_table.GetTcpStatistics(Statistics);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUdpStatistics(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDPSTATS* Stats) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Stats);

        auto win32_impl_result = g_api_table.GetUdpStatistics(Stats);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIpStatisticsEx(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPSTATS_LH* Statistics, uint32_t Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.SetIpStatisticsEx(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIpStatisticsEx(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPSTATS_LH* Statistics, win32::Windows::Win32::NetworkManagement::IpHelper::ADDRESS_FAMILY Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.GetIpStatisticsEx(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIcmpStatisticsEx(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_ICMP_EX_XPSP1* Statistics, uint32_t Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.GetIcmpStatisticsEx(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcpStatisticsEx(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPSTATS_LH* Statistics, win32::Windows::Win32::NetworkManagement::IpHelper::ADDRESS_FAMILY Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.GetTcpStatisticsEx(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUdpStatisticsEx(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDPSTATS* Statistics, win32::Windows::Win32::NetworkManagement::IpHelper::ADDRESS_FAMILY Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.GetUdpStatisticsEx(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTcpStatisticsEx2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPSTATS2* Statistics, win32::Windows::Win32::NetworkManagement::IpHelper::ADDRESS_FAMILY Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.GetTcpStatisticsEx2(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUdpStatisticsEx2(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_UDPSTATS2* Statistics, win32::Windows::Win32::NetworkManagement::IpHelper::ADDRESS_FAMILY Family) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Statistics);
        ORBIT_TRACK_PARAM(Family);

        auto win32_impl_result = g_api_table.GetUdpStatisticsEx2(Statistics, Family);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIfEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IFROW* pIfRow) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIfRow);

        auto win32_impl_result = g_api_table.SetIfEntry(pIfRow);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateIpForwardEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARDROW* pRoute) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRoute);

        auto win32_impl_result = g_api_table.CreateIpForwardEntry(pRoute);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIpForwardEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARDROW* pRoute) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRoute);

        auto win32_impl_result = g_api_table.SetIpForwardEntry(pRoute);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteIpForwardEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARDROW* pRoute) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRoute);

        auto win32_impl_result = g_api_table.DeleteIpForwardEntry(pRoute);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIpStatistics(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPSTATS_LH* pIpStats) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIpStats);

        auto win32_impl_result = g_api_table.SetIpStatistics(pIpStats);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIpTTL(uint32_t nTTL) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nTTL);

        auto win32_impl_result = g_api_table.SetIpTTL(nTTL);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateIpNetEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNETROW_LH* pArpEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pArpEntry);

        auto win32_impl_result = g_api_table.CreateIpNetEntry(pArpEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIpNetEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNETROW_LH* pArpEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pArpEntry);

        auto win32_impl_result = g_api_table.SetIpNetEntry(pArpEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteIpNetEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPNETROW_LH* pArpEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pArpEntry);

        auto win32_impl_result = g_api_table.DeleteIpNetEntry(pArpEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_FlushIpNetTable(uint32_t dwIfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwIfIndex);

        auto win32_impl_result = g_api_table.FlushIpNetTable(dwIfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateProxyArpEntry(uint32_t dwAddress, uint32_t dwMask, uint32_t dwIfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwAddress);
        ORBIT_TRACK_PARAM(dwMask);
        ORBIT_TRACK_PARAM(dwIfIndex);

        auto win32_impl_result = g_api_table.CreateProxyArpEntry(dwAddress, dwMask, dwIfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteProxyArpEntry(uint32_t dwAddress, uint32_t dwMask, uint32_t dwIfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwAddress);
        ORBIT_TRACK_PARAM(dwMask);
        ORBIT_TRACK_PARAM(dwIfIndex);

        auto win32_impl_result = g_api_table.DeleteProxyArpEntry(dwAddress, dwMask, dwIfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetTcpEntry(win32::Windows::Win32::NetworkManagement::IpHelper::MIB_TCPROW_LH* pTcpRow) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTcpRow);

        auto win32_impl_result = g_api_table.SetTcpEntry(pTcpRow);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetInterfaceInfo(win32::Windows::Win32::NetworkManagement::IpHelper::IP_INTERFACE_INFO* pIfTable, uint32_t* dwOutBufLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIfTable);
        ORBIT_TRACK_PARAM(dwOutBufLen);

        auto win32_impl_result = g_api_table.GetInterfaceInfo(pIfTable, dwOutBufLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetUniDirectionalAdapterInfo(win32::Windows::Win32::NetworkManagement::IpHelper::IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* pIPIfInfo, uint32_t* dwOutBufLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIPIfInfo);
        ORBIT_TRACK_PARAM(dwOutBufLen);

        auto win32_impl_result = g_api_table.GetUniDirectionalAdapterInfo(pIPIfInfo, dwOutBufLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NhpAllocateAndGetInterfaceInfoFromStack(win32::Windows::Win32::NetworkManagement::IpHelper::ip_interface_name_info_w2ksp1** ppTable, uint32_t* pdwCount, win32::Windows::Win32::Foundation::BOOL bOrder, win32::Windows::Win32::Foundation::HANDLE hHeap, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppTable);
        ORBIT_TRACK_PARAM(pdwCount);
        ORBIT_TRACK_PARAM(bOrder);
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NhpAllocateAndGetInterfaceInfoFromStack(ppTable, pdwCount, bOrder, hHeap, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetBestInterface(uint32_t dwDestAddr, uint32_t* pdwBestIfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDestAddr);
        ORBIT_TRACK_PARAM(pdwBestIfIndex);

        auto win32_impl_result = g_api_table.GetBestInterface(dwDestAddr, pdwBestIfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetBestInterfaceEx(win32::Windows::Win32::Networking::WinSock::SOCKADDR* pDestAddr, uint32_t* pdwBestIfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDestAddr);
        ORBIT_TRACK_PARAM(pdwBestIfIndex);

        auto win32_impl_result = g_api_table.GetBestInterfaceEx(pDestAddr, pdwBestIfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetBestRoute(uint32_t dwDestAddr, uint32_t dwSourceAddr, win32::Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARDROW* pBestRoute) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDestAddr);
        ORBIT_TRACK_PARAM(dwSourceAddr);
        ORBIT_TRACK_PARAM(pBestRoute);

        auto win32_impl_result = g_api_table.GetBestRoute(dwDestAddr, dwSourceAddr, pBestRoute);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NotifyAddrChange(win32::Windows::Win32::Foundation::HANDLE* Handle, win32::Windows::Win32::System::IO::OVERLAPPED* overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(overlapped);

        auto win32_impl_result = g_api_table.NotifyAddrChange(Handle, overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NotifyRouteChange(win32::Windows::Win32::Foundation::HANDLE* Handle, win32::Windows::Win32::System::IO::OVERLAPPED* overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(overlapped);

        auto win32_impl_result = g_api_table.NotifyRouteChange(Handle, overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CancelIPChangeNotify(win32::Windows::Win32::System::IO::OVERLAPPED* notifyOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(notifyOverlapped);

        auto win32_impl_result = g_api_table.CancelIPChangeNotify(notifyOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetAdapterIndex(win32::Windows::Win32::Foundation::PWSTR AdapterName, uint32_t* IfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AdapterName);
        ORBIT_TRACK_PARAM(IfIndex);

        auto win32_impl_result = g_api_table.GetAdapterIndex(AdapterName, IfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIPAddress(uint32_t Address, uint32_t IpMask, uint32_t IfIndex, uint32_t* NTEContext, uint32_t* NTEInstance) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(IpMask);
        ORBIT_TRACK_PARAM(IfIndex);
        ORBIT_TRACK_PARAM(NTEContext);
        ORBIT_TRACK_PARAM(NTEInstance);

        auto win32_impl_result = g_api_table.AddIPAddress(Address, IpMask, IfIndex, NTEContext, NTEInstance);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteIPAddress(uint32_t NTEContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NTEContext);

        auto win32_impl_result = g_api_table.DeleteIPAddress(NTEContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::WIN32_ERROR __stdcall ORBIT_IMPL_GetNetworkParams(win32::Windows::Win32::NetworkManagement::IpHelper::FIXED_INFO_W2KSP1* pFixedInfo, uint32_t* pOutBufLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pFixedInfo);
        ORBIT_TRACK_PARAM(pOutBufLen);

        auto win32_impl_result = g_api_table.GetNetworkParams(pFixedInfo, pOutBufLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetAdaptersInfo(win32::Windows::Win32::NetworkManagement::IpHelper::IP_ADAPTER_INFO* AdapterInfo, uint32_t* SizePointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AdapterInfo);
        ORBIT_TRACK_PARAM(SizePointer);

        auto win32_impl_result = g_api_table.GetAdaptersInfo(AdapterInfo, SizePointer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::NetworkManagement::IpHelper::IP_ADAPTER_ORDER_MAP* __stdcall ORBIT_IMPL_GetAdapterOrderMap() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetAdapterOrderMap();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetAdaptersAddresses(win32::Windows::Win32::NetworkManagement::IpHelper::ADDRESS_FAMILY Family, win32::Windows::Win32::NetworkManagement::IpHelper::GET_ADAPTERS_ADDRESSES_FLAGS Flags, void* Reserved, win32::Windows::Win32::NetworkManagement::IpHelper::IP_ADAPTER_ADDRESSES_LH* AdapterAddresses, uint32_t* SizePointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Family);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(AdapterAddresses);
        ORBIT_TRACK_PARAM(SizePointer);

        auto win32_impl_result = g_api_table.GetAdaptersAddresses(Family, Flags, Reserved, AdapterAddresses, SizePointer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetPerAdapterInfo(uint32_t IfIndex, win32::Windows::Win32::NetworkManagement::IpHelper::IP_PER_ADAPTER_INFO_W2KSP1* pPerAdapterInfo, uint32_t* pOutBufLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfIndex);
        ORBIT_TRACK_PARAM(pPerAdapterInfo);
        ORBIT_TRACK_PARAM(pOutBufLen);

        auto win32_impl_result = g_api_table.GetPerAdapterInfo(IfIndex, pPerAdapterInfo, pOutBufLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetInterfaceActiveTimestampCapabilities(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, win32::Windows::Win32::NetworkManagement::IpHelper::INTERFACE_TIMESTAMP_CAPABILITIES* TimestampCapabilites) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(TimestampCapabilites);

        auto win32_impl_result = g_api_table.GetInterfaceActiveTimestampCapabilities(InterfaceLuid, TimestampCapabilites);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetInterfaceSupportedTimestampCapabilities(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, win32::Windows::Win32::NetworkManagement::IpHelper::INTERFACE_TIMESTAMP_CAPABILITIES* TimestampCapabilites) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(TimestampCapabilites);

        auto win32_impl_result = g_api_table.GetInterfaceSupportedTimestampCapabilities(InterfaceLuid, TimestampCapabilites);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CaptureInterfaceHardwareCrossTimestamp(win32::Windows::Win32::NetworkManagement::IpHelper::NET_LUID_LH* InterfaceLuid, win32::Windows::Win32::NetworkManagement::IpHelper::INTERFACE_HARDWARE_CROSSTIMESTAMP* CrossTimestamp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceLuid);
        ORBIT_TRACK_PARAM(CrossTimestamp);

        auto win32_impl_result = g_api_table.CaptureInterfaceHardwareCrossTimestamp(InterfaceLuid, CrossTimestamp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RegisterInterfaceTimestampConfigChange(win32::Windows::Win32::NetworkManagement::IpHelper::PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK* Callback, void* CallerContext, win32::Windows::Win32::NetworkManagement::IpHelper::HIFTIMESTAMPCHANGE* NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(CallerContext);
        ORBIT_TRACK_PARAM(NotificationHandle);

        auto win32_impl_result = g_api_table.RegisterInterfaceTimestampConfigChange(Callback, CallerContext, NotificationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_UnregisterInterfaceTimestampConfigChange(win32::Windows::Win32::NetworkManagement::IpHelper::HIFTIMESTAMPCHANGE NotificationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NotificationHandle);

        g_api_table.UnregisterInterfaceTimestampConfigChange(NotificationHandle);
        
    }

    uint32_t __stdcall ORBIT_IMPL_IpReleaseAddress(win32::Windows::Win32::NetworkManagement::IpHelper::IP_ADAPTER_INDEX_MAP* AdapterInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AdapterInfo);

        auto win32_impl_result = g_api_table.IpReleaseAddress(AdapterInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IpRenewAddress(win32::Windows::Win32::NetworkManagement::IpHelper::IP_ADAPTER_INDEX_MAP* AdapterInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AdapterInfo);

        auto win32_impl_result = g_api_table.IpRenewAddress(AdapterInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SendARP(uint32_t DestIP, uint32_t SrcIP, void* pMacAddr, uint32_t* PhyAddrLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DestIP);
        ORBIT_TRACK_PARAM(SrcIP);
        ORBIT_TRACK_PARAM(pMacAddr);
        ORBIT_TRACK_PARAM(PhyAddrLen);

        auto win32_impl_result = g_api_table.SendARP(DestIP, SrcIP, pMacAddr, PhyAddrLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetRTTAndHopCount(uint32_t DestIpAddress, uint32_t* HopCount, uint32_t MaxHops, uint32_t* RTT) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DestIpAddress);
        ORBIT_TRACK_PARAM(HopCount);
        ORBIT_TRACK_PARAM(MaxHops);
        ORBIT_TRACK_PARAM(RTT);

        auto win32_impl_result = g_api_table.GetRTTAndHopCount(DestIpAddress, HopCount, MaxHops, RTT);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFriendlyIfIndex(uint32_t IfIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfIndex);

        auto win32_impl_result = g_api_table.GetFriendlyIfIndex(IfIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EnableRouter(win32::Windows::Win32::Foundation::HANDLE* pHandle, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHandle);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.EnableRouter(pHandle, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_UnenableRouter(win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped, uint32_t* lpdwEnableCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOverlapped);
        ORBIT_TRACK_PARAM(lpdwEnableCount);

        auto win32_impl_result = g_api_table.UnenableRouter(pOverlapped, lpdwEnableCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DisableMediaSense(win32::Windows::Win32::Foundation::HANDLE* pHandle, win32::Windows::Win32::System::IO::OVERLAPPED* pOverLapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHandle);
        ORBIT_TRACK_PARAM(pOverLapped);

        auto win32_impl_result = g_api_table.DisableMediaSense(pHandle, pOverLapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RestoreMediaSense(win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped, uint32_t* lpdwEnableCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOverlapped);
        ORBIT_TRACK_PARAM(lpdwEnableCount);

        auto win32_impl_result = g_api_table.RestoreMediaSense(pOverlapped, lpdwEnableCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIpErrorString(uint32_t ErrorCode, win32::Windows::Win32::Foundation::PWSTR Buffer, uint32_t* Size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ErrorCode);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(Size);

        auto win32_impl_result = g_api_table.GetIpErrorString(ErrorCode, Buffer, Size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResolveNeighbor(win32::Windows::Win32::Networking::WinSock::SOCKADDR* NetworkAddress, void* PhysicalAddress, uint32_t* PhysicalAddressLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NetworkAddress);
        ORBIT_TRACK_PARAM(PhysicalAddress);
        ORBIT_TRACK_PARAM(PhysicalAddressLength);

        auto win32_impl_result = g_api_table.ResolveNeighbor(NetworkAddress, PhysicalAddress, PhysicalAddressLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreatePersistentTcpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartPort);
        ORBIT_TRACK_PARAM(NumberOfPorts);
        ORBIT_TRACK_PARAM(Token);

        auto win32_impl_result = g_api_table.CreatePersistentTcpPortReservation(StartPort, NumberOfPorts, Token);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreatePersistentUdpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartPort);
        ORBIT_TRACK_PARAM(NumberOfPorts);
        ORBIT_TRACK_PARAM(Token);

        auto win32_impl_result = g_api_table.CreatePersistentUdpPortReservation(StartPort, NumberOfPorts, Token);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeletePersistentTcpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartPort);
        ORBIT_TRACK_PARAM(NumberOfPorts);

        auto win32_impl_result = g_api_table.DeletePersistentTcpPortReservation(StartPort, NumberOfPorts);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeletePersistentUdpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartPort);
        ORBIT_TRACK_PARAM(NumberOfPorts);

        auto win32_impl_result = g_api_table.DeletePersistentUdpPortReservation(StartPort, NumberOfPorts);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LookupPersistentTcpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartPort);
        ORBIT_TRACK_PARAM(NumberOfPorts);
        ORBIT_TRACK_PARAM(Token);

        auto win32_impl_result = g_api_table.LookupPersistentTcpPortReservation(StartPort, NumberOfPorts, Token);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LookupPersistentUdpPortReservation(uint16_t StartPort, uint16_t NumberOfPorts, uint64_t* Token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartPort);
        ORBIT_TRACK_PARAM(NumberOfPorts);
        ORBIT_TRACK_PARAM(Token);

        auto win32_impl_result = g_api_table.LookupPersistentUdpPortReservation(StartPort, NumberOfPorts, Token);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfCreateInterface(uint32_t dwName, win32::Windows::Win32::NetworkManagement::IpHelper::PFFORWARD_ACTION inAction, win32::Windows::Win32::NetworkManagement::IpHelper::PFFORWARD_ACTION outAction, win32::Windows::Win32::Foundation::BOOL bUseLog, win32::Windows::Win32::Foundation::BOOL bMustBeUnique, void** ppInterface) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwName);
        ORBIT_TRACK_PARAM(inAction);
        ORBIT_TRACK_PARAM(outAction);
        ORBIT_TRACK_PARAM(bUseLog);
        ORBIT_TRACK_PARAM(bMustBeUnique);
        ORBIT_TRACK_PARAM(ppInterface);

        auto win32_impl_result = g_api_table.PfCreateInterface(dwName, inAction, outAction, bUseLog, bMustBeUnique, ppInterface);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfDeleteInterface(void* pInterface) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);

        auto win32_impl_result = g_api_table.PfDeleteInterface(pInterface);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfAddFiltersToInterface(void* ih, uint32_t cInFilters, win32::Windows::Win32::NetworkManagement::IpHelper::PF_FILTER_DESCRIPTOR* pfiltIn, uint32_t cOutFilters, win32::Windows::Win32::NetworkManagement::IpHelper::PF_FILTER_DESCRIPTOR* pfiltOut, void** pfHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ih);
        ORBIT_TRACK_PARAM(cInFilters);
        ORBIT_TRACK_PARAM(pfiltIn);
        ORBIT_TRACK_PARAM(cOutFilters);
        ORBIT_TRACK_PARAM(pfiltOut);
        ORBIT_TRACK_PARAM(pfHandle);

        auto win32_impl_result = g_api_table.PfAddFiltersToInterface(ih, cInFilters, pfiltIn, cOutFilters, pfiltOut, pfHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfRemoveFiltersFromInterface(void* ih, uint32_t cInFilters, win32::Windows::Win32::NetworkManagement::IpHelper::PF_FILTER_DESCRIPTOR* pfiltIn, uint32_t cOutFilters, win32::Windows::Win32::NetworkManagement::IpHelper::PF_FILTER_DESCRIPTOR* pfiltOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ih);
        ORBIT_TRACK_PARAM(cInFilters);
        ORBIT_TRACK_PARAM(pfiltIn);
        ORBIT_TRACK_PARAM(cOutFilters);
        ORBIT_TRACK_PARAM(pfiltOut);

        auto win32_impl_result = g_api_table.PfRemoveFiltersFromInterface(ih, cInFilters, pfiltIn, cOutFilters, pfiltOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfRemoveFilterHandles(void* pInterface, uint32_t cFilters, void** pvHandles) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(cFilters);
        ORBIT_TRACK_PARAM(pvHandles);

        auto win32_impl_result = g_api_table.PfRemoveFilterHandles(pInterface, cFilters, pvHandles);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfUnBindInterface(void* pInterface) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);

        auto win32_impl_result = g_api_table.PfUnBindInterface(pInterface);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfBindInterfaceToIndex(void* pInterface, uint32_t dwIndex, win32::Windows::Win32::NetworkManagement::IpHelper::PFADDRESSTYPE pfatLinkType, uint8_t* LinkIPAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pfatLinkType);
        ORBIT_TRACK_PARAM(LinkIPAddress);

        auto win32_impl_result = g_api_table.PfBindInterfaceToIndex(pInterface, dwIndex, pfatLinkType, LinkIPAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfBindInterfaceToIPAddress(void* pInterface, win32::Windows::Win32::NetworkManagement::IpHelper::PFADDRESSTYPE pfatType, uint8_t* IPAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(pfatType);
        ORBIT_TRACK_PARAM(IPAddress);

        auto win32_impl_result = g_api_table.PfBindInterfaceToIPAddress(pInterface, pfatType, IPAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfRebindFilters(void* pInterface, win32::Windows::Win32::NetworkManagement::IpHelper::PF_LATEBIND_INFO* pLateBindInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(pLateBindInfo);

        auto win32_impl_result = g_api_table.PfRebindFilters(pInterface, pLateBindInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfAddGlobalFilterToInterface(void* pInterface, win32::Windows::Win32::NetworkManagement::IpHelper::GLOBAL_FILTER gfFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(gfFilter);

        auto win32_impl_result = g_api_table.PfAddGlobalFilterToInterface(pInterface, gfFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfRemoveGlobalFilterFromInterface(void* pInterface, win32::Windows::Win32::NetworkManagement::IpHelper::GLOBAL_FILTER gfFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(gfFilter);

        auto win32_impl_result = g_api_table.PfRemoveGlobalFilterFromInterface(pInterface, gfFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfMakeLog(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.PfMakeLog(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfSetLogBuffer(uint8_t* pbBuffer, uint32_t dwSize, uint32_t dwThreshold, uint32_t dwEntries, uint32_t* pdwLoggedEntries, uint32_t* pdwLostEntries, uint32_t* pdwSizeUsed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbBuffer);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(dwThreshold);
        ORBIT_TRACK_PARAM(dwEntries);
        ORBIT_TRACK_PARAM(pdwLoggedEntries);
        ORBIT_TRACK_PARAM(pdwLostEntries);
        ORBIT_TRACK_PARAM(pdwSizeUsed);

        auto win32_impl_result = g_api_table.PfSetLogBuffer(pbBuffer, dwSize, dwThreshold, dwEntries, pdwLoggedEntries, pdwLostEntries, pdwSizeUsed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfDeleteLog() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.PfDeleteLog();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfGetInterfaceStatistics(void* pInterface, win32::Windows::Win32::NetworkManagement::IpHelper::PF_INTERFACE_STATS* ppfStats, uint32_t* pdwBufferSize, win32::Windows::Win32::Foundation::BOOL fResetCounters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterface);
        ORBIT_TRACK_PARAM(ppfStats);
        ORBIT_TRACK_PARAM(pdwBufferSize);
        ORBIT_TRACK_PARAM(fResetCounters);

        auto win32_impl_result = g_api_table.PfGetInterfaceStatistics(pInterface, ppfStats, pdwBufferSize, fResetCounters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PfTestPacket(void* pInInterface, void* pOutInterface, uint32_t cBytes, uint8_t* pbPacket, win32::Windows::Win32::NetworkManagement::IpHelper::PFFORWARD_ACTION* ppAction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInInterface);
        ORBIT_TRACK_PARAM(pOutInterface);
        ORBIT_TRACK_PARAM(cBytes);
        ORBIT_TRACK_PARAM(pbPacket);
        ORBIT_TRACK_PARAM(ppAction);

        auto win32_impl_result = g_api_table.PfTestPacket(pInInterface, pOutInterface, cBytes, pbPacket, ppAction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
