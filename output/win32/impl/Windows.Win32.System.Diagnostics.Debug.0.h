// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Diagnostics_Debug_0_H
#define WIN32_Windows_Win32_System_Diagnostics_Debug_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HANDLE;
    struct HRESULT;
    struct NTSTATUS;
    struct PSTR;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Diagnostics::Debug
{
#pragma region enums
    enum class ADDRESS_MODE : int32_t
    {
        AddrMode1616 = 0,
        AddrMode1632 = 1,
        AddrModeReal = 2,
        AddrModeFlat = 3,
    };
    enum class APPLICATION_NODE_EVENT_FILTER : int32_t
    {
        FILTER_EXCLUDE_NOTHING = 0,
        FILTER_EXCLUDE_ANONYMOUS_CODE = 1,
        FILTER_EXCLUDE_EVAL_CODE = 2,
    };
    enum class BREAKPOINT_STATE : int32_t
    {
        BREAKPOINT_DELETED = 0,
        BREAKPOINT_DISABLED = 1,
        BREAKPOINT_ENABLED = 2,
    };
    enum class BREAKREASON : int32_t
    {
        BREAKREASON_STEP = 0,
        BREAKREASON_BREAKPOINT = 1,
        BREAKREASON_DEBUGGER_BLOCK = 2,
        BREAKREASON_HOST_INITIATED = 3,
        BREAKREASON_LANGUAGE_INITIATED = 4,
        BREAKREASON_DEBUGGER_HALT = 5,
        BREAKREASON_ERROR = 6,
        BREAKREASON_JIT = 7,
        BREAKREASON_MUTATION_BREAKPOINT = 8,
    };
    enum class BREAKRESUME_ACTION : int32_t
    {
        BREAKRESUMEACTION_ABORT = 0,
        BREAKRESUMEACTION_CONTINUE = 1,
        BREAKRESUMEACTION_STEP_INTO = 2,
        BREAKRESUMEACTION_STEP_OVER = 3,
        BREAKRESUMEACTION_STEP_OUT = 4,
        BREAKRESUMEACTION_IGNORE = 5,
        BREAKRESUMEACTION_STEP_DOCUMENT = 6,
    };
    enum class BUGCHECK_ERROR : uint32_t
    {
        HARDWARE_PROFILE_UNDOCKED_STRING = 0x40010001,
        HARDWARE_PROFILE_DOCKED_STRING = 0x40010002,
        HARDWARE_PROFILE_UNKNOWN_STRING = 0x40010003,
        WINDOWS_NT_BANNER = 0x4000007e,
        WINDOWS_NT_CSD_STRING = 0x40000087,
        WINDOWS_NT_INFO_STRING = 0x40000088,
        WINDOWS_NT_MP_STRING = 0x40000089,
        THREAD_TERMINATE_HELD_MUTEX = 0x4000008a,
        WINDOWS_NT_INFO_STRING_PLURAL = 0x4000009d,
        WINDOWS_NT_RC_STRING = 0x4000009e,
        APC_INDEX_MISMATCH = 0x1,
        DEVICE_QUEUE_NOT_BUSY = 0x2,
        INVALID_AFFINITY_SET = 0x3,
        INVALID_DATA_ACCESS_TRAP = 0x4,
        INVALID_PROCESS_ATTACH_ATTEMPT = 0x5,
        INVALID_PROCESS_DETACH_ATTEMPT = 0x6,
        INVALID_SOFTWARE_INTERRUPT = 0x7,
        IRQL_NOT_DISPATCH_LEVEL = 0x8,
        IRQL_NOT_GREATER_OR_EQUAL = 0x9,
        IRQL_NOT_LESS_OR_EQUAL = 0xa,
        NO_EXCEPTION_HANDLING_SUPPORT = 0xb,
        MAXIMUM_WAIT_OBJECTS_EXCEEDED = 0xc,
        MUTEX_LEVEL_NUMBER_VIOLATION = 0xd,
        NO_USER_MODE_CONTEXT = 0xe,
        SPIN_LOCK_ALREADY_OWNED = 0xf,
        SPIN_LOCK_NOT_OWNED = 0x10,
        THREAD_NOT_MUTEX_OWNER = 0x11,
        TRAP_CAUSE_UNKNOWN = 0x12,
        EMPTY_THREAD_REAPER_LIST = 0x13,
        CREATE_DELETE_LOCK_NOT_LOCKED = 0x14,
        LAST_CHANCE_CALLED_FROM_KMODE = 0x15,
        CID_HANDLE_CREATION = 0x16,
        CID_HANDLE_DELETION = 0x17,
        REFERENCE_BY_POINTER = 0x18,
        BAD_POOL_HEADER = 0x19,
        MEMORY_MANAGEMENT = 0x1a,
        PFN_SHARE_COUNT = 0x1b,
        PFN_REFERENCE_COUNT = 0x1c,
        NO_SPIN_LOCK_AVAILABLE = 0x1d,
        KMODE_EXCEPTION_NOT_HANDLED = 0x1e,
        SHARED_RESOURCE_CONV_ERROR = 0x1f,
        KERNEL_APC_PENDING_DURING_EXIT = 0x20,
        QUOTA_UNDERFLOW = 0x21,
        FILE_SYSTEM = 0x22,
        FAT_FILE_SYSTEM = 0x23,
        NTFS_FILE_SYSTEM = 0x24,
        NPFS_FILE_SYSTEM = 0x25,
        CDFS_FILE_SYSTEM = 0x26,
        RDR_FILE_SYSTEM = 0x27,
        CORRUPT_ACCESS_TOKEN = 0x28,
        SECURITY_SYSTEM = 0x29,
        INCONSISTENT_IRP = 0x2a,
        PANIC_STACK_SWITCH = 0x2b,
        PORT_DRIVER_INTERNAL = 0x2c,
        SCSI_DISK_DRIVER_INTERNAL = 0x2d,
        DATA_BUS_ERROR = 0x2e,
        INSTRUCTION_BUS_ERROR = 0x2f,
        SET_OF_INVALID_CONTEXT = 0x30,
        PHASE0_INITIALIZATION_FAILED = 0x31,
        PHASE1_INITIALIZATION_FAILED = 0x32,
        UNEXPECTED_INITIALIZATION_CALL = 0x33,
        CACHE_MANAGER = 0x34,
        NO_MORE_IRP_STACK_LOCATIONS = 0x35,
        DEVICE_REFERENCE_COUNT_NOT_ZERO = 0x36,
        FLOPPY_INTERNAL_ERROR = 0x37,
        SERIAL_DRIVER_INTERNAL = 0x38,
        SYSTEM_EXIT_OWNED_MUTEX = 0x39,
        SYSTEM_UNWIND_PREVIOUS_USER = 0x3a,
        SYSTEM_SERVICE_EXCEPTION = 0x3b,
        INTERRUPT_UNWIND_ATTEMPTED = 0x3c,
        INTERRUPT_EXCEPTION_NOT_HANDLED = 0x3d,
        MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED = 0x3e,
        NO_MORE_SYSTEM_PTES = 0x3f,
        TARGET_MDL_TOO_SMALL = 0x40,
        MUST_SUCCEED_POOL_EMPTY = 0x41,
        ATDISK_DRIVER_INTERNAL = 0x42,
        NO_SUCH_PARTITION = 0x43,
        MULTIPLE_IRP_COMPLETE_REQUESTS = 0x44,
        INSUFFICIENT_SYSTEM_MAP_REGS = 0x45,
        DEREF_UNKNOWN_LOGON_SESSION = 0x46,
        REF_UNKNOWN_LOGON_SESSION = 0x47,
        CANCEL_STATE_IN_COMPLETED_IRP = 0x48,
        PAGE_FAULT_WITH_INTERRUPTS_OFF = 0x49,
        IRQL_GT_ZERO_AT_SYSTEM_SERVICE = 0x4a,
        STREAMS_INTERNAL_ERROR = 0x4b,
        FATAL_UNHANDLED_HARD_ERROR = 0x4c,
        NO_PAGES_AVAILABLE = 0x4d,
        PFN_LIST_CORRUPT = 0x4e,
        NDIS_INTERNAL_ERROR = 0x4f,
        PAGE_FAULT_IN_NONPAGED_AREA = 0x50,
        PAGE_FAULT_IN_NONPAGED_AREA_M = 0x10000050,
        REGISTRY_ERROR = 0x51,
        MAILSLOT_FILE_SYSTEM = 0x52,
        NO_BOOT_DEVICE = 0x53,
        LM_SERVER_INTERNAL_ERROR = 0x54,
        DATA_COHERENCY_EXCEPTION = 0x55,
        INSTRUCTION_COHERENCY_EXCEPTION = 0x56,
        XNS_INTERNAL_ERROR = 0x57,
        VOLMGRX_INTERNAL_ERROR = 0x58,
        PINBALL_FILE_SYSTEM = 0x59,
        CRITICAL_SERVICE_FAILED = 0x5a,
        SET_ENV_VAR_FAILED = 0x5b,
        HAL_INITIALIZATION_FAILED = 0x5c,
        UNSUPPORTED_PROCESSOR = 0x5d,
        OBJECT_INITIALIZATION_FAILED = 0x5e,
        SECURITY_INITIALIZATION_FAILED = 0x5f,
        PROCESS_INITIALIZATION_FAILED = 0x60,
        HAL1_INITIALIZATION_FAILED = 0x61,
        OBJECT1_INITIALIZATION_FAILED = 0x62,
        SECURITY1_INITIALIZATION_FAILED = 0x63,
        SYMBOLIC_INITIALIZATION_FAILED = 0x64,
        MEMORY1_INITIALIZATION_FAILED = 0x65,
        CACHE_INITIALIZATION_FAILED = 0x66,
        CONFIG_INITIALIZATION_FAILED = 0x67,
        FILE_INITIALIZATION_FAILED = 0x68,
        IO1_INITIALIZATION_FAILED = 0x69,
        LPC_INITIALIZATION_FAILED = 0x6a,
        PROCESS1_INITIALIZATION_FAILED = 0x6b,
        REFMON_INITIALIZATION_FAILED = 0x6c,
        SESSION1_INITIALIZATION_FAILED = 0x6d,
        BOOTPROC_INITIALIZATION_FAILED = 0x6e,
        VSL_INITIALIZATION_FAILED = 0x6f,
        SOFT_RESTART_FATAL_ERROR = 0x70,
        ASSIGN_DRIVE_LETTERS_FAILED = 0x72,
        CONFIG_LIST_FAILED = 0x73,
        BAD_SYSTEM_CONFIG_INFO = 0x74,
        CANNOT_WRITE_CONFIGURATION = 0x75,
        PROCESS_HAS_LOCKED_PAGES = 0x76,
        KERNEL_STACK_INPAGE_ERROR = 0x77,
        PHASE0_EXCEPTION = 0x78,
        MISMATCHED_HAL = 0x79,
        KERNEL_DATA_INPAGE_ERROR = 0x7a,
        INACCESSIBLE_BOOT_DEVICE = 0x7b,
        BUGCODE_NDIS_DRIVER = 0x7c,
        INSTALL_MORE_MEMORY = 0x7d,
        SYSTEM_THREAD_EXCEPTION_NOT_HANDLED = 0x7e,
        SYSTEM_THREAD_EXCEPTION_NOT_HANDLED_M = 0x1000007e,
        UNEXPECTED_KERNEL_MODE_TRAP = 0x7f,
        UNEXPECTED_KERNEL_MODE_TRAP_M = 0x1000007f,
        NMI_HARDWARE_FAILURE = 0x80,
        SPIN_LOCK_INIT_FAILURE = 0x81,
        DFS_FILE_SYSTEM = 0x82,
        OFS_FILE_SYSTEM = 0x83,
        RECOM_DRIVER = 0x84,
        SETUP_FAILURE = 0x85,
        AUDIT_FAILURE = 0x86,
        MBR_CHECKSUM_MISMATCH = 0x8b,
        KERNEL_MODE_EXCEPTION_NOT_HANDLED = 0x8e,
        KERNEL_MODE_EXCEPTION_NOT_HANDLED_M = 0x1000008e,
        PP0_INITIALIZATION_FAILED = 0x8f,
        PP1_INITIALIZATION_FAILED = 0x90,
        WIN32K_INIT_OR_RIT_FAILURE = 0x91,
        UP_DRIVER_ON_MP_SYSTEM = 0x92,
        INVALID_KERNEL_HANDLE = 0x93,
        KERNEL_STACK_LOCKED_AT_EXIT = 0x94,
        PNP_INTERNAL_ERROR = 0x95,
        INVALID_WORK_QUEUE_ITEM = 0x96,
        BOUND_IMAGE_UNSUPPORTED = 0x97,
        END_OF_NT_EVALUATION_PERIOD = 0x98,
        INVALID_REGION_OR_SEGMENT = 0x99,
        SYSTEM_LICENSE_VIOLATION = 0x9a,
        UDFS_FILE_SYSTEM = 0x9b,
        MACHINE_CHECK_EXCEPTION = 0x9c,
        USER_MODE_HEALTH_MONITOR = 0x9e,
        DRIVER_POWER_STATE_FAILURE = 0x9f,
        INTERNAL_POWER_ERROR = 0xa0,
        PCI_BUS_DRIVER_INTERNAL = 0xa1,
        MEMORY_IMAGE_CORRUPT = 0xa2,
        ACPI_DRIVER_INTERNAL = 0xa3,
        CNSS_FILE_SYSTEM_FILTER = 0xa4,
        ACPI_BIOS_ERROR = 0xa5,
        FP_EMULATION_ERROR = 0xa6,
        BAD_EXHANDLE = 0xa7,
        BOOTING_IN_SAFEMODE_MINIMAL = 0xa8,
        BOOTING_IN_SAFEMODE_NETWORK = 0xa9,
        BOOTING_IN_SAFEMODE_DSREPAIR = 0xaa,
        SESSION_HAS_VALID_POOL_ON_EXIT = 0xab,
        HAL_MEMORY_ALLOCATION = 0xac,
        VIDEO_DRIVER_DEBUG_REPORT_REQUEST = 0x400000ad,
        BGI_DETECTED_VIOLATION = 0xb1,
        VIDEO_DRIVER_INIT_FAILURE = 0xb4,
        BOOTLOG_LOADED = 0xb5,
        BOOTLOG_NOT_LOADED = 0xb6,
        BOOTLOG_ENABLED = 0xb7,
        ATTEMPTED_SWITCH_FROM_DPC = 0xb8,
        CHIPSET_DETECTED_ERROR = 0xb9,
        SESSION_HAS_VALID_VIEWS_ON_EXIT = 0xba,
        NETWORK_BOOT_INITIALIZATION_FAILED = 0xbb,
        NETWORK_BOOT_DUPLICATE_ADDRESS = 0xbc,
        INVALID_HIBERNATED_STATE = 0xbd,
        ATTEMPTED_WRITE_TO_READONLY_MEMORY = 0xbe,
        MUTEX_ALREADY_OWNED = 0xbf,
        PCI_CONFIG_SPACE_ACCESS_FAILURE = 0xc0,
        SPECIAL_POOL_DETECTED_MEMORY_CORRUPTION = 0xc1,
        BAD_POOL_CALLER = 0xc2,
        SYSTEM_IMAGE_BAD_SIGNATURE = 0xc3,
        DRIVER_VERIFIER_DETECTED_VIOLATION = 0xc4,
        DRIVER_CORRUPTED_EXPOOL = 0xc5,
        DRIVER_CAUGHT_MODIFYING_FREED_POOL = 0xc6,
        TIMER_OR_DPC_INVALID = 0xc7,
        IRQL_UNEXPECTED_VALUE = 0xc8,
        DRIVER_VERIFIER_IOMANAGER_VIOLATION = 0xc9,
        PNP_DETECTED_FATAL_ERROR = 0xca,
        DRIVER_LEFT_LOCKED_PAGES_IN_PROCESS = 0xcb,
        PAGE_FAULT_IN_FREED_SPECIAL_POOL = 0xcc,
        PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 0xcd,
        DRIVER_UNLOADED_WITHOUT_CANCELLING_PENDING_OPERATIONS = 0xce,
        TERMINAL_SERVER_DRIVER_MADE_INCORRECT_MEMORY_REFERENCE = 0xcf,
        DRIVER_CORRUPTED_MMPOOL = 0xd0,
        DRIVER_IRQL_NOT_LESS_OR_EQUAL = 0xd1,
        BUGCODE_ID_DRIVER = 0xd2,
        DRIVER_PORTION_MUST_BE_NONPAGED = 0xd3,
        SYSTEM_SCAN_AT_RAISED_IRQL_CAUGHT_IMPROPER_DRIVER_UNLOAD = 0xd4,
        DRIVER_PAGE_FAULT_IN_FREED_SPECIAL_POOL = 0xd5,
        DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION = 0xd6,
        DRIVER_PAGE_FAULT_BEYOND_END_OF_ALLOCATION_M = 0x100000d6,
        DRIVER_UNMAPPING_INVALID_VIEW = 0xd7,
        DRIVER_USED_EXCESSIVE_PTES = 0xd8,
        LOCKED_PAGES_TRACKER_CORRUPTION = 0xd9,
        SYSTEM_PTE_MISUSE = 0xda,
        DRIVER_CORRUPTED_SYSPTES = 0xdb,
        DRIVER_INVALID_STACK_ACCESS = 0xdc,
        POOL_CORRUPTION_IN_FILE_AREA = 0xde,
        IMPERSONATING_WORKER_THREAD = 0xdf,
        ACPI_BIOS_FATAL_ERROR = 0xe0,
        WORKER_THREAD_RETURNED_AT_BAD_IRQL = 0xe1,
        MANUALLY_INITIATED_CRASH = 0xe2,
        RESOURCE_NOT_OWNED = 0xe3,
        WORKER_INVALID = 0xe4,
        POWER_FAILURE_SIMULATE = 0xe5,
        DRIVER_VERIFIER_DMA_VIOLATION = 0xe6,
        INVALID_FLOATING_POINT_STATE = 0xe7,
        INVALID_CANCEL_OF_FILE_OPEN = 0xe8,
        ACTIVE_EX_WORKER_THREAD_TERMINATION = 0xe9,
        SAVER_UNSPECIFIED = 0xf000,
        SAVER_BLANKSCREEN = 0xf002,
        SAVER_INPUT = 0xf003,
        SAVER_WATCHDOG = 0xf004,
        SAVER_STARTNOTVISIBLE = 0xf005,
        SAVER_NAVIGATIONMODEL = 0xf006,
        SAVER_OUTOFMEMORY = 0xf007,
        SAVER_GRAPHICS = 0xf008,
        SAVER_NAVSERVERTIMEOUT = 0xf009,
        SAVER_CHROMEPROCESSCRASH = 0xf00a,
        SAVER_NOTIFICATIONDISMISSAL = 0xf00b,
        SAVER_SPEECHDISMISSAL = 0xf00c,
        SAVER_CALLDISMISSAL = 0xf00d,
        SAVER_APPBARDISMISSAL = 0xf00e,
        SAVER_RILADAPTATIONCRASH = 0xf00f,
        SAVER_APPLISTUNREACHABLE = 0xf010,
        SAVER_REPORTNOTIFICATIONFAILURE = 0xf011,
        SAVER_UNEXPECTEDSHUTDOWN = 0xf012,
        SAVER_RPCFAILURE = 0xf013,
        SAVER_AUXILIARYFULLDUMP = 0xf014,
        SAVER_ACCOUNTPROVSVCINITFAILURE = 0xf015,
        SAVER_MTBFCOMMANDTIMEOUT = 0x315,
        SAVER_MTBFCOMMANDHANG = 0xf101,
        SAVER_MTBFPASSBUGCHECK = 0xf102,
        SAVER_MTBFIOERROR = 0xf103,
        SAVER_RENDERTHREADHANG = 0xf200,
        SAVER_RENDERMOBILEUIOOM = 0xf201,
        SAVER_DEVICEUPDATEUNSPECIFIED = 0xf300,
        SAVER_AUDIODRIVERHANG = 0xf400,
        SAVER_BATTERYPULLOUT = 0xf500,
        SAVER_MEDIACORETESTHANG = 0xf600,
        SAVER_RESOURCEMANAGEMENT = 0xf700,
        SAVER_CAPTURESERVICE = 0xf800,
        SAVER_WAITFORSHELLREADY = 0xf900,
        SAVER_NONRESPONSIVEPROCESS = 0x194,
        SAVER_SICKAPPLICATION = 0x8866,
        THREAD_STUCK_IN_DEVICE_DRIVER = 0xea,
        THREAD_STUCK_IN_DEVICE_DRIVER_M = 0x100000ea,
        DIRTY_MAPPED_PAGES_CONGESTION = 0xeb,
        SESSION_HAS_VALID_SPECIAL_POOL_ON_EXIT = 0xec,
        UNMOUNTABLE_BOOT_VOLUME = 0xed,
        CRITICAL_PROCESS_DIED = 0xef,
        STORAGE_MINIPORT_ERROR = 0xf0,
        SCSI_VERIFIER_DETECTED_VIOLATION = 0xf1,
        HARDWARE_INTERRUPT_STORM = 0xf2,
        DISORDERLY_SHUTDOWN = 0xf3,
        CRITICAL_OBJECT_TERMINATION = 0xf4,
        FLTMGR_FILE_SYSTEM = 0xf5,
        PCI_VERIFIER_DETECTED_VIOLATION = 0xf6,
        DRIVER_OVERRAN_STACK_BUFFER = 0xf7,
        RAMDISK_BOOT_INITIALIZATION_FAILED = 0xf8,
        DRIVER_RETURNED_STATUS_REPARSE_FOR_VOLUME_OPEN = 0xf9,
        HTTP_DRIVER_CORRUPTED = 0xfa,
        RECURSIVE_MACHINE_CHECK = 0xfb,
        ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY = 0xfc,
        DIRTY_NOWRITE_PAGES_CONGESTION = 0xfd,
        BUGCODE_USB_DRIVER = 0xfe,
        BC_BLUETOOTH_VERIFIER_FAULT = 0xbfe,
        BC_BTHMINI_VERIFIER_FAULT = 0xbff,
        RESERVE_QUEUE_OVERFLOW = 0xff,
        LOADER_BLOCK_MISMATCH = 0x100,
        CLOCK_WATCHDOG_TIMEOUT = 0x101,
        DPC_WATCHDOG_TIMEOUT = 0x102,
        MUP_FILE_SYSTEM = 0x103,
        AGP_INVALID_ACCESS = 0x104,
        AGP_GART_CORRUPTION = 0x105,
        AGP_ILLEGALLY_REPROGRAMMED = 0x106,
        KERNEL_EXPAND_STACK_ACTIVE = 0x107,
        THIRD_PARTY_FILE_SYSTEM_FAILURE = 0x108,
        CRITICAL_STRUCTURE_CORRUPTION = 0x109,
        APP_TAGGING_INITIALIZATION_FAILED = 0x10a,
        DFSC_FILE_SYSTEM = 0x10b,
        FSRTL_EXTRA_CREATE_PARAMETER_VIOLATION = 0x10c,
        WDF_VIOLATION = 0x10d,
        VIDEO_MEMORY_MANAGEMENT_INTERNAL = 0x10e,
        DRIVER_INVALID_CRUNTIME_PARAMETER = 0x110,
        RECURSIVE_NMI = 0x111,
        MSRPC_STATE_VIOLATION = 0x112,
        VIDEO_DXGKRNL_FATAL_ERROR = 0x113,
        VIDEO_SHADOW_DRIVER_FATAL_ERROR = 0x114,
        AGP_INTERNAL = 0x115,
        VIDEO_TDR_FAILURE = 0x116,
        VIDEO_TDR_TIMEOUT_DETECTED = 0x117,
        NTHV_GUEST_ERROR = 0x118,
        VIDEO_SCHEDULER_INTERNAL_ERROR = 0x119,
        EM_INITIALIZATION_ERROR = 0x11a,
        DRIVER_RETURNED_HOLDING_CANCEL_LOCK = 0x11b,
        ATTEMPTED_WRITE_TO_CM_PROTECTED_STORAGE = 0x11c,
        EVENT_TRACING_FATAL_ERROR = 0x11d,
        TOO_MANY_RECURSIVE_FAULTS = 0x11e,
        INVALID_DRIVER_HANDLE = 0x11f,
        BITLOCKER_FATAL_ERROR = 0x120,
        DRIVER_VIOLATION = 0x121,
        WHEA_INTERNAL_ERROR = 0x122,
        CRYPTO_SELF_TEST_FAILURE = 0x123,
        WHEA_UNCORRECTABLE_ERROR = 0x124,
        NMR_INVALID_STATE = 0x125,
        NETIO_INVALID_POOL_CALLER = 0x126,
        PAGE_NOT_ZERO = 0x127,
        WORKER_THREAD_RETURNED_WITH_BAD_IO_PRIORITY = 0x128,
        WORKER_THREAD_RETURNED_WITH_BAD_PAGING_IO_PRIORITY = 0x129,
        MUI_NO_VALID_SYSTEM_LANGUAGE = 0x12a,
        FAULTY_HARDWARE_CORRUPTED_PAGE = 0x12b,
        EXFAT_FILE_SYSTEM = 0x12c,
        VOLSNAP_OVERLAPPED_TABLE_ACCESS = 0x12d,
        INVALID_MDL_RANGE = 0x12e,
        VHD_BOOT_INITIALIZATION_FAILED = 0x12f,
        DYNAMIC_ADD_PROCESSOR_MISMATCH = 0x130,
        INVALID_EXTENDED_PROCESSOR_STATE = 0x131,
        RESOURCE_OWNER_POINTER_INVALID = 0x132,
        DPC_WATCHDOG_VIOLATION = 0x133,
        DRIVE_EXTENDER = 0x134,
        REGISTRY_FILTER_DRIVER_EXCEPTION = 0x135,
        VHD_BOOT_HOST_VOLUME_NOT_ENOUGH_SPACE = 0x136,
        WIN32K_HANDLE_MANAGER = 0x137,
        GPIO_CONTROLLER_DRIVER_ERROR = 0x138,
        KERNEL_SECURITY_CHECK_FAILURE = 0x139,
        KERNEL_MODE_HEAP_CORRUPTION = 0x13a,
        PASSIVE_INTERRUPT_ERROR = 0x13b,
        INVALID_IO_BOOST_STATE = 0x13c,
        CRITICAL_INITIALIZATION_FAILURE = 0x13d,
        ERRATA_WORKAROUND_UNSUCCESSFUL = 0x13e,
        REGISTRY_CALLBACK_DRIVER_EXCEPTION = 0x13f,
        STORAGE_DEVICE_ABNORMALITY_DETECTED = 0x140,
        VIDEO_ENGINE_TIMEOUT_DETECTED = 0x141,
        VIDEO_TDR_APPLICATION_BLOCKED = 0x142,
        PROCESSOR_DRIVER_INTERNAL = 0x143,
        BUGCODE_USB3_DRIVER = 0x144,
        SECURE_BOOT_VIOLATION = 0x145,
        NDIS_NET_BUFFER_LIST_INFO_ILLEGALLY_TRANSFERRED = 0x146,
        ABNORMAL_RESET_DETECTED = 0x147,
        IO_OBJECT_INVALID = 0x148,
        REFS_FILE_SYSTEM = 0x149,
        KERNEL_WMI_INTERNAL = 0x14a,
        SOC_SUBSYSTEM_FAILURE = 0x14b,
        FATAL_ABNORMAL_RESET_ERROR = 0x14c,
        EXCEPTION_SCOPE_INVALID = 0x14d,
        SOC_CRITICAL_DEVICE_REMOVED = 0x14e,
        PDC_WATCHDOG_TIMEOUT = 0x14f,
        TCPIP_AOAC_NIC_ACTIVE_REFERENCE_LEAK = 0x150,
        UNSUPPORTED_INSTRUCTION_MODE = 0x151,
        INVALID_PUSH_LOCK_FLAGS = 0x152,
        KERNEL_LOCK_ENTRY_LEAKED_ON_THREAD_TERMINATION = 0x153,
        UNEXPECTED_STORE_EXCEPTION = 0x154,
        OS_DATA_TAMPERING = 0x155,
        WINSOCK_DETECTED_HUNG_CLOSESOCKET_LIVEDUMP = 0x156,
        KERNEL_THREAD_PRIORITY_FLOOR_VIOLATION = 0x157,
        ILLEGAL_IOMMU_PAGE_FAULT = 0x158,
        HAL_ILLEGAL_IOMMU_PAGE_FAULT = 0x159,
        SDBUS_INTERNAL_ERROR = 0x15a,
        WORKER_THREAD_RETURNED_WITH_SYSTEM_PAGE_PRIORITY_ACTIVE = 0x15b,
        PDC_WATCHDOG_TIMEOUT_LIVEDUMP = 0x15c,
        SOC_SUBSYSTEM_FAILURE_LIVEDUMP = 0x15d,
        BUGCODE_NDIS_DRIVER_LIVE_DUMP = 0x15e,
        CONNECTED_STANDBY_WATCHDOG_TIMEOUT_LIVEDUMP = 0x15f,
        WIN32K_ATOMIC_CHECK_FAILURE = 0x160,
        LIVE_SYSTEM_DUMP = 0x161,
        KERNEL_AUTO_BOOST_INVALID_LOCK_RELEASE = 0x162,
        WORKER_THREAD_TEST_CONDITION = 0x163,
        WIN32K_CRITICAL_FAILURE = 0x164,
        CLUSTER_CSV_STATUS_IO_TIMEOUT_LIVEDUMP = 0x165,
        CLUSTER_RESOURCE_CALL_TIMEOUT_LIVEDUMP = 0x166,
        CLUSTER_CSV_SNAPSHOT_DEVICE_INFO_TIMEOUT_LIVEDUMP = 0x167,
        CLUSTER_CSV_STATE_TRANSITION_TIMEOUT_LIVEDUMP = 0x168,
        CLUSTER_CSV_VOLUME_ARRIVAL_LIVEDUMP = 0x169,
        CLUSTER_CSV_VOLUME_REMOVAL_LIVEDUMP = 0x16a,
        CLUSTER_CSV_CLUSTER_WATCHDOG_LIVEDUMP = 0x16b,
        INVALID_RUNDOWN_PROTECTION_FLAGS = 0x16c,
        INVALID_SLOT_ALLOCATOR_FLAGS = 0x16d,
        ERESOURCE_INVALID_RELEASE = 0x16e,
        CLUSTER_CSV_STATE_TRANSITION_INTERVAL_TIMEOUT_LIVEDUMP = 0x16f,
        CLUSTER_CSV_CLUSSVC_DISCONNECT_WATCHDOG = 0x170,
        CRYPTO_LIBRARY_INTERNAL_ERROR = 0x171,
        COREMSGCALL_INTERNAL_ERROR = 0x173,
        COREMSG_INTERNAL_ERROR = 0x174,
        PREVIOUS_FATAL_ABNORMAL_RESET_ERROR = 0x175,
        ELAM_DRIVER_DETECTED_FATAL_ERROR = 0x178,
        CLUSTER_CLUSPORT_STATUS_IO_TIMEOUT_LIVEDUMP = 0x179,
        PROFILER_CONFIGURATION_ILLEGAL = 0x17b,
        PDC_LOCK_WATCHDOG_LIVEDUMP = 0x17c,
        PDC_UNEXPECTED_REVOCATION_LIVEDUMP = 0x17d,
        MICROCODE_REVISION_MISMATCH = 0x17e,
        HYPERGUARD_INITIALIZATION_FAILURE = 0x17f,
        WVR_LIVEDUMP_REPLICATION_IOCONTEXT_TIMEOUT = 0x180,
        WVR_LIVEDUMP_STATE_TRANSITION_TIMEOUT = 0x181,
        WVR_LIVEDUMP_RECOVERY_IOCONTEXT_TIMEOUT = 0x182,
        WVR_LIVEDUMP_APP_IO_TIMEOUT = 0x183,
        WVR_LIVEDUMP_MANUALLY_INITIATED = 0x184,
        WVR_LIVEDUMP_STATE_FAILURE = 0x185,
        WVR_LIVEDUMP_CRITICAL_ERROR = 0x186,
        VIDEO_DWMINIT_TIMEOUT_FALLBACK_BDD = 0x187,
        CLUSTER_CSVFS_LIVEDUMP = 0x188,
        BAD_OBJECT_HEADER = 0x189,
        SILO_CORRUPT = 0x18a,
        SECURE_KERNEL_ERROR = 0x18b,
        HYPERGUARD_VIOLATION = 0x18c,
        SECURE_FAULT_UNHANDLED = 0x18d,
        KERNEL_PARTITION_REFERENCE_VIOLATION = 0x18e,
        SYNTHETIC_EXCEPTION_UNHANDLED = 0x18f,
        WIN32K_CRITICAL_FAILURE_LIVEDUMP = 0x190,
        PF_DETECTED_CORRUPTION = 0x191,
        KERNEL_AUTO_BOOST_LOCK_ACQUISITION_WITH_RAISED_IRQL = 0x192,
        VIDEO_DXGKRNL_LIVEDUMP = 0x193,
        KERNEL_STORAGE_SLOT_IN_USE = 0x199,
        SMB_SERVER_LIVEDUMP = 0x195,
        LOADER_ROLLBACK_DETECTED = 0x196,
        WIN32K_SECURITY_FAILURE = 0x197,
        UFX_LIVEDUMP = 0x198,
        WORKER_THREAD_RETURNED_WHILE_ATTACHED_TO_SILO = 0x19a,
        TTM_FATAL_ERROR = 0x19b,
        WIN32K_POWER_WATCHDOG_TIMEOUT = 0x19c,
        CLUSTER_SVHDX_LIVEDUMP = 0x19d,
        BUGCODE_NETADAPTER_DRIVER = 0x19e,
        PDC_PRIVILEGE_CHECK_LIVEDUMP = 0x19f,
        TTM_WATCHDOG_TIMEOUT = 0x1a0,
        WIN32K_CALLOUT_WATCHDOG_LIVEDUMP = 0x1a1,
        WIN32K_CALLOUT_WATCHDOG_BUGCHECK = 0x1a2,
        CALL_HAS_NOT_RETURNED_WATCHDOG_TIMEOUT_LIVEDUMP = 0x1a3,
        DRIPS_SW_HW_DIVERGENCE_LIVEDUMP = 0x1a4,
        USB_DRIPS_BLOCKER_SURPRISE_REMOVAL_LIVEDUMP = 0x1a5,
        BLUETOOTH_ERROR_RECOVERY_LIVEDUMP = 0x1a6,
        SMB_REDIRECTOR_LIVEDUMP = 0x1a7,
        VIDEO_DXGKRNL_BLACK_SCREEN_LIVEDUMP = 0x1a8,
        DIRECTED_FX_TRANSITION_LIVEDUMP = 0x1a9,
        EXCEPTION_ON_INVALID_STACK = 0x1aa,
        UNWIND_ON_INVALID_STACK = 0x1ab,
        VIDEO_MINIPORT_FAILED_LIVEDUMP = 0x1b0,
        VIDEO_MINIPORT_BLACK_SCREEN_LIVEDUMP = 0x1b8,
        DRIVER_VERIFIER_DETECTED_VIOLATION_LIVEDUMP = 0x1c4,
        IO_THREADPOOL_DEADLOCK_LIVEDUMP = 0x1c5,
        FAST_ERESOURCE_PRECONDITION_VIOLATION = 0x1c6,
        STORE_DATA_STRUCTURE_CORRUPTION = 0x1c7,
        MANUALLY_INITIATED_POWER_BUTTON_HOLD = 0x1c8,
        USER_MODE_HEALTH_MONITOR_LIVEDUMP = 0x1c9,
        SYNTHETIC_WATCHDOG_TIMEOUT = 0x1ca,
        INVALID_SILO_DETACH = 0x1cb,
        EXRESOURCE_TIMEOUT_LIVEDUMP = 0x1cc,
        INVALID_CALLBACK_STACK_ADDRESS = 0x1cd,
        INVALID_KERNEL_STACK_ADDRESS = 0x1ce,
        HARDWARE_WATCHDOG_TIMEOUT = 0x1cf,
        ACPI_FIRMWARE_WATCHDOG_TIMEOUT = 0x1d0,
        TELEMETRY_ASSERTS_LIVEDUMP = 0x1d1,
        WORKER_THREAD_INVALID_STATE = 0x1d2,
        WFP_INVALID_OPERATION = 0x1d3,
        UCMUCSI_LIVEDUMP = 0x1d4,
        DRIVER_PNP_WATCHDOG = 0x1d5,
        WORKER_THREAD_RETURNED_WITH_NON_DEFAULT_WORKLOAD_CLASS = 0x1d6,
        EFS_FATAL_ERROR = 0x1d7,
        UCMUCSI_FAILURE = 0x1d8,
        HAL_IOMMU_INTERNAL_ERROR = 0x1d9,
        HAL_BLOCKED_PROCESSOR_INTERNAL_ERROR = 0x1da,
        IPI_WATCHDOG_TIMEOUT = 0x1db,
        DMA_COMMON_BUFFER_VECTOR_ERROR = 0x1dc,
        BUGCODE_MBBADAPTER_DRIVER = 0x1dd,
        BUGCODE_WIFIADAPTER_DRIVER = 0x1de,
        PROCESSOR_START_TIMEOUT = 0x1df,
        INVALID_ALTERNATE_SYSTEM_CALL_HANDLER_REGISTRATION = 0x1e0,
        DEVICE_DIAGNOSTIC_LOG_LIVEDUMP = 0x1e1,
        AZURE_DEVICE_FW_DUMP = 0x1e2,
        BREAKAWAY_CABLE_TRANSITION = 0x1e3,
        VIDEO_DXGKRNL_SYSMM_FATAL_ERROR = 0x1e4,
        DRIVER_VERIFIER_TRACKING_LIVE_DUMP = 0x1e5,
        CRASHDUMP_WATCHDOG_TIMEOUT = 0x1e6,
        REGISTRY_LIVE_DUMP = 0x1e7,
        INVALID_THREAD_AFFINITY_STATE = 0x1e8,
        ILLEGAL_ATS_INITIALIZATION = 0x1e9,
        SECURE_PCI_CONFIG_SPACE_ACCESS_VIOLATION = 0x1ea,
        DAM_WATCHDOG_TIMEOUT = 0x1eb,
        XBOX_VMCTRL_CS_TIMEOUT = 0x356,
        XBOX_CORRUPTED_IMAGE = 0x357,
        XBOX_INVERTED_FUNCTION_TABLE_OVERFLOW = 0x358,
        XBOX_CORRUPTED_IMAGE_BASE = 0x359,
        XBOX_XDS_WATCHDOG_TIMEOUT = 0x35a,
        XBOX_SHUTDOWN_WATCHDOG_TIMEOUT = 0x35b,
        XBOX_360_SYSTEM_CRASH = 0x360,
        XBOX_360_SYSTEM_CRASH_RESERVED = 0x420,
        XBOX_SECURITY_FAILUE = 0x421,
        KERNEL_CFG_INIT_FAILURE = 0x422,
        MANUALLY_INITIATED_POWER_BUTTON_HOLD_LIVE_DUMP = 0x11c8,
        HYPERVISOR_ERROR = 0x20001,
        WINLOGON_FATAL_ERROR = 0xc000021a,
        MANUALLY_INITIATED_CRASH1 = 0xdeaddead,
        BUGCHECK_CONTEXT_MODIFIER = 0x80000000,
    };
    enum class CallingConventionKind : int32_t
    {
        CallingConventionUnknown = 0,
        CallingConventionCDecl = 1,
        CallingConventionFastCall = 2,
        CallingConventionStdCall = 3,
        CallingConventionSysCall = 4,
        CallingConventionThisCall = 5,
    };
    enum class DBGKD_MAJOR_TYPES : int32_t
    {
        DBGKD_MAJOR_NT = 0,
        DBGKD_MAJOR_XBOX = 1,
        DBGKD_MAJOR_BIG = 2,
        DBGKD_MAJOR_EXDI = 3,
        DBGKD_MAJOR_NTBD = 4,
        DBGKD_MAJOR_EFI = 5,
        DBGKD_MAJOR_TNT = 6,
        DBGKD_MAJOR_SINGULARITY = 7,
        DBGKD_MAJOR_HYPERVISOR = 8,
        DBGKD_MAJOR_MIDORI = 9,
        DBGKD_MAJOR_CE = 10,
        DBGKD_MAJOR_COUNT = 11,
    };
    enum class DBGPROP_ATTRIB_FLAGS : uint32_t
    {
        DBGPROP_ATTRIB_NO_ATTRIB = 0x0,
        DBGPROP_ATTRIB_VALUE_IS_INVALID = 0x8,
        DBGPROP_ATTRIB_VALUE_IS_EXPANDABLE = 0x10,
        DBGPROP_ATTRIB_VALUE_IS_FAKE = 0x20,
        DBGPROP_ATTRIB_VALUE_IS_METHOD = 0x100,
        DBGPROP_ATTRIB_VALUE_IS_EVENT = 0x200,
        DBGPROP_ATTRIB_VALUE_IS_RAW_STRING = 0x400,
        DBGPROP_ATTRIB_VALUE_READONLY = 0x800,
        DBGPROP_ATTRIB_ACCESS_PUBLIC = 0x1000,
        DBGPROP_ATTRIB_ACCESS_PRIVATE = 0x2000,
        DBGPROP_ATTRIB_ACCESS_PROTECTED = 0x4000,
        DBGPROP_ATTRIB_ACCESS_FINAL = 0x8000,
        DBGPROP_ATTRIB_STORAGE_GLOBAL = 0x10000,
        DBGPROP_ATTRIB_STORAGE_STATIC = 0x20000,
        DBGPROP_ATTRIB_STORAGE_FIELD = 0x40000,
        DBGPROP_ATTRIB_STORAGE_VIRTUAL = 0x80000,
        DBGPROP_ATTRIB_TYPE_IS_CONSTANT = 0x100000,
        DBGPROP_ATTRIB_TYPE_IS_SYNCHRONIZED = 0x200000,
        DBGPROP_ATTRIB_TYPE_IS_VOLATILE = 0x400000,
        DBGPROP_ATTRIB_HAS_EXTENDED_ATTRIBS = 0x800000,
        DBGPROP_ATTRIB_FRAME_INTRYBLOCK = 0x1000000,
        DBGPROP_ATTRIB_FRAME_INCATCHBLOCK = 0x2000000,
        DBGPROP_ATTRIB_FRAME_INFINALLYBLOCK = 0x4000000,
        DBGPROP_ATTRIB_VALUE_IS_RETURN_VALUE = 0x8000000,
        DBGPROP_ATTRIB_VALUE_PENDING_MUTATION = 0x10000000,
    };
    enum class DBGPROP_INFO : uint32_t
    {
        DBGPROP_INFO_NAME = 0x1,
        DBGPROP_INFO_TYPE = 0x2,
        DBGPROP_INFO_VALUE = 0x4,
        DBGPROP_INFO_FULLNAME = 0x20,
        DBGPROP_INFO_ATTRIBUTES = 0x8,
        DBGPROP_INFO_DEBUGPROP = 0x10,
        DBGPROP_INFO_BEAUTIFY = 0x2000000,
        DBGPROP_INFO_CALLTOSTRING = 0x4000000,
        DBGPROP_INFO_AUTOEXPAND = 0x8000000,
    };
    enum class DEBUG_EVENT_CODE : uint32_t
    {
        CREATE_PROCESS_DEBUG_EVENT = 0x3,
        CREATE_THREAD_DEBUG_EVENT = 0x2,
        EXCEPTION_DEBUG_EVENT = 0x1,
        EXIT_PROCESS_DEBUG_EVENT = 0x5,
        EXIT_THREAD_DEBUG_EVENT = 0x4,
        LOAD_DLL_DEBUG_EVENT = 0x6,
        OUTPUT_DEBUG_STRING_EVENT = 0x8,
        RIP_EVENT = 0x9,
        UNLOAD_DLL_DEBUG_EVENT = 0x7,
    };
    enum class DEBUG_EVENT_INFO_TYPE : int32_t
    {
        DEIT_GENERAL = 0,
        DEIT_ASMJS_IN_DEBUGGING = 1,
        DEIT_ASMJS_SUCCEEDED = 2,
        DEIT_ASMJS_FAILED = 3,
    };
    enum class DEBUG_STACKFRAME_TYPE : int32_t
    {
        DST_SCRIPT_FRAME = 0,
        DST_INTERNAL_FRAME = 1,
        DST_INVOCATION_FRAME = 2,
    };
    enum class DOCUMENTNAMETYPE : int32_t
    {
        DOCUMENTNAMETYPE_APPNODE = 0,
        DOCUMENTNAMETYPE_TITLE = 1,
        DOCUMENTNAMETYPE_FILE_TAIL = 2,
        DOCUMENTNAMETYPE_URL = 3,
        DOCUMENTNAMETYPE_UNIQUE_TITLE = 4,
        DOCUMENTNAMETYPE_SOURCE_MAP_URL = 5,
    };
    enum class ERRORRESUMEACTION : int32_t
    {
        ERRORRESUMEACTION_ReexecuteErrorStatement = 0,
        ERRORRESUMEACTION_AbortCallAndReturnErrorToCaller = 1,
        ERRORRESUMEACTION_SkipErrorStatement = 2,
    };
    enum class EXT_TDOP : int32_t
    {
        EXT_TDOP_COPY = 0,
        EXT_TDOP_RELEASE = 1,
        EXT_TDOP_SET_FROM_EXPR = 2,
        EXT_TDOP_SET_FROM_U64_EXPR = 3,
        EXT_TDOP_GET_FIELD = 4,
        EXT_TDOP_EVALUATE = 5,
        EXT_TDOP_GET_TYPE_NAME = 6,
        EXT_TDOP_OUTPUT_TYPE_NAME = 7,
        EXT_TDOP_OUTPUT_SIMPLE_VALUE = 8,
        EXT_TDOP_OUTPUT_FULL_VALUE = 9,
        EXT_TDOP_HAS_FIELD = 10,
        EXT_TDOP_GET_FIELD_OFFSET = 11,
        EXT_TDOP_GET_ARRAY_ELEMENT = 12,
        EXT_TDOP_GET_DEREFERENCE = 13,
        EXT_TDOP_GET_TYPE_SIZE = 14,
        EXT_TDOP_OUTPUT_TYPE_DEFINITION = 15,
        EXT_TDOP_GET_POINTER_TO = 16,
        EXT_TDOP_SET_FROM_TYPE_ID_AND_U64 = 17,
        EXT_TDOP_SET_PTR_FROM_TYPE_ID_AND_U64 = 18,
        EXT_TDOP_COUNT = 19,
    };
    enum class EX_PROP_INFO_FLAGS : int32_t
    {
        EX_PROP_INFO_ID = 256,
        EX_PROP_INFO_NTYPE = 512,
        EX_PROP_INFO_NVALUE = 1024,
        EX_PROP_INFO_LOCKBYTES = 2048,
        EX_PROP_INFO_DEBUGEXTPROP = 4096,
    };
    enum class ErrorClass : int32_t
    {
        ErrorClassWarning = 0,
        ErrorClassError = 1,
    };
    enum class FACILITY_CODE : uint32_t
    {
        FACILITY_NULL = 0x0,
        FACILITY_RPC = 0x1,
        FACILITY_DISPATCH = 0x2,
        FACILITY_STORAGE = 0x3,
        FACILITY_ITF = 0x4,
        FACILITY_WIN32 = 0x7,
        FACILITY_WINDOWS = 0x8,
        FACILITY_SSPI = 0x9,
        FACILITY_SECURITY = 0x9,
        FACILITY_CONTROL = 0xa,
        FACILITY_CERT = 0xb,
        FACILITY_INTERNET = 0xc,
        FACILITY_MEDIASERVER = 0xd,
        FACILITY_MSMQ = 0xe,
        FACILITY_SETUPAPI = 0xf,
        FACILITY_SCARD = 0x10,
        FACILITY_COMPLUS = 0x11,
        FACILITY_AAF = 0x12,
        FACILITY_URT = 0x13,
        FACILITY_ACS = 0x14,
        FACILITY_DPLAY = 0x15,
        FACILITY_UMI = 0x16,
        FACILITY_SXS = 0x17,
        FACILITY_WINDOWS_CE = 0x18,
        FACILITY_HTTP = 0x19,
        FACILITY_USERMODE_COMMONLOG = 0x1a,
        FACILITY_WER = 0x1b,
        FACILITY_USERMODE_FILTER_MANAGER = 0x1f,
        FACILITY_BACKGROUNDCOPY = 0x20,
        FACILITY_CONFIGURATION = 0x21,
        FACILITY_WIA = 0x21,
        FACILITY_STATE_MANAGEMENT = 0x22,
        FACILITY_METADIRECTORY = 0x23,
        FACILITY_WINDOWSUPDATE = 0x24,
        FACILITY_DIRECTORYSERVICE = 0x25,
        FACILITY_GRAPHICS = 0x26,
        FACILITY_SHELL = 0x27,
        FACILITY_NAP = 0x27,
        FACILITY_TPM_SERVICES = 0x28,
        FACILITY_TPM_SOFTWARE = 0x29,
        FACILITY_UI = 0x2a,
        FACILITY_XAML = 0x2b,
        FACILITY_ACTION_QUEUE = 0x2c,
        FACILITY_PLA = 0x30,
        FACILITY_WINDOWS_SETUP = 0x30,
        FACILITY_FVE = 0x31,
        FACILITY_FWP = 0x32,
        FACILITY_WINRM = 0x33,
        FACILITY_NDIS = 0x34,
        FACILITY_USERMODE_HYPERVISOR = 0x35,
        FACILITY_CMI = 0x36,
        FACILITY_USERMODE_VIRTUALIZATION = 0x37,
        FACILITY_USERMODE_VOLMGR = 0x38,
        FACILITY_BCD = 0x39,
        FACILITY_USERMODE_VHD = 0x3a,
        FACILITY_USERMODE_HNS = 0x3b,
        FACILITY_SDIAG = 0x3c,
        FACILITY_WEBSERVICES = 0x3d,
        FACILITY_WINPE = 0x3d,
        FACILITY_WPN = 0x3e,
        FACILITY_WINDOWS_STORE = 0x3f,
        FACILITY_INPUT = 0x40,
        FACILITY_QUIC = 0x41,
        FACILITY_EAP = 0x42,
        FACILITY_IORING = 0x46,
        FACILITY_WINDOWS_DEFENDER = 0x50,
        FACILITY_OPC = 0x51,
        FACILITY_XPS = 0x52,
        FACILITY_MBN = 0x54,
        FACILITY_POWERSHELL = 0x54,
        FACILITY_RAS = 0x53,
        FACILITY_P2P_INT = 0x62,
        FACILITY_P2P = 0x63,
        FACILITY_DAF = 0x64,
        FACILITY_BLUETOOTH_ATT = 0x65,
        FACILITY_AUDIO = 0x66,
        FACILITY_STATEREPOSITORY = 0x67,
        FACILITY_VISUALCPP = 0x6d,
        FACILITY_SCRIPT = 0x70,
        FACILITY_PARSE = 0x71,
        FACILITY_BLB = 0x78,
        FACILITY_BLB_CLI = 0x79,
        FACILITY_WSBAPP = 0x7a,
        FACILITY_BLBUI = 0x80,
        FACILITY_USN = 0x81,
        FACILITY_USERMODE_VOLSNAP = 0x82,
        FACILITY_TIERING = 0x83,
        FACILITY_WSB_ONLINE = 0x85,
        FACILITY_ONLINE_ID = 0x86,
        FACILITY_DEVICE_UPDATE_AGENT = 0x87,
        FACILITY_DRVSERVICING = 0x88,
        FACILITY_DLS = 0x99,
        FACILITY_DELIVERY_OPTIMIZATION = 0xd0,
        FACILITY_USERMODE_SPACES = 0xe7,
        FACILITY_USER_MODE_SECURITY_CORE = 0xe8,
        FACILITY_USERMODE_LICENSING = 0xea,
        FACILITY_SOS = 0xa0,
        FACILITY_OCP_UPDATE_AGENT = 0xad,
        FACILITY_DEBUGGERS = 0xb0,
        FACILITY_SPP = 0x100,
        FACILITY_RESTORE = 0x100,
        FACILITY_DMSERVER = 0x100,
        FACILITY_DEPLOYMENT_SERVICES_SERVER = 0x101,
        FACILITY_DEPLOYMENT_SERVICES_IMAGING = 0x102,
        FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 0x103,
        FACILITY_DEPLOYMENT_SERVICES_UTIL = 0x104,
        FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 0x105,
        FACILITY_DEPLOYMENT_SERVICES_PXE = 0x107,
        FACILITY_DEPLOYMENT_SERVICES_TFTP = 0x108,
        FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 0x110,
        FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 0x116,
        FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 0x121,
        FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 0x122,
        FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 0x125,
        FACILITY_HSP_SERVICES = 0x128,
        FACILITY_HSP_SOFTWARE = 0x129,
        FACILITY_LINGUISTIC_SERVICES = 0x131,
        FACILITY_AUDIOSTREAMING = 0x446,
        FACILITY_TTD = 0x5d2,
        FACILITY_ACCELERATOR = 0x600,
        FACILITY_WMAAECMA = 0x7cc,
        FACILITY_DIRECTMUSIC = 0x878,
        FACILITY_DIRECT3D10 = 0x879,
        FACILITY_DXGI = 0x87a,
        FACILITY_DXGI_DDI = 0x87b,
        FACILITY_DIRECT3D11 = 0x87c,
        FACILITY_DIRECT3D11_DEBUG = 0x87d,
        FACILITY_DIRECT3D12 = 0x87e,
        FACILITY_DIRECT3D12_DEBUG = 0x87f,
        FACILITY_DXCORE = 0x880,
        FACILITY_PRESENTATION = 0x881,
        FACILITY_LEAP = 0x888,
        FACILITY_AUDCLNT = 0x889,
        FACILITY_WINCODEC_DWRITE_DWM = 0x898,
        FACILITY_WINML = 0x890,
        FACILITY_DIRECT2D = 0x899,
        FACILITY_DEFRAG = 0x900,
        FACILITY_USERMODE_SDBUS = 0x901,
        FACILITY_JSCRIPT = 0x902,
        FACILITY_PIDGENX = 0xa01,
        FACILITY_EAS = 0x55,
        FACILITY_WEB = 0x375,
        FACILITY_WEB_SOCKET = 0x376,
        FACILITY_MOBILE = 0x701,
        FACILITY_SQLITE = 0x7af,
        FACILITY_SERVICE_FABRIC = 0x7b0,
        FACILITY_UTC = 0x7c5,
        FACILITY_WEP = 0x801,
        FACILITY_SYNCENGINE = 0x802,
        FACILITY_XBOX = 0x923,
        FACILITY_GAME = 0x924,
        FACILITY_PIX = 0xabc,
        FACILITY_NT_BIT = 0x10000000,
    };
    enum class FORMAT_MESSAGE_OPTIONS : uint32_t
    {
        FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100,
        FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x2000,
        FORMAT_MESSAGE_FROM_HMODULE = 0x800,
        FORMAT_MESSAGE_FROM_STRING = 0x400,
        FORMAT_MESSAGE_FROM_SYSTEM = 0x1000,
        FORMAT_MESSAGE_IGNORE_INSERTS = 0x200,
    };
    enum class IMAGEHLP_CBA_EVENT_SEVERITY : uint32_t
    {
        sevInfo = 0x0,
        sevProblem = 0x1,
        sevAttn = 0x2,
        sevFatal = 0x3,
    };
    enum class IMAGEHLP_EXTENDED_OPTIONS : int32_t
    {
        SYMOPT_EX_DISABLEACCESSTIMEUPDATE = 0,
        SYMOPT_EX_LASTVALIDDEBUGDIRECTORY = 1,
        SYMOPT_EX_NOIMPLICITPATTERNSEARCH = 2,
        SYMOPT_EX_NEVERLOADSYMBOLS = 3,
        SYMOPT_EX_MAX = 4,
    };
    enum class IMAGEHLP_GET_TYPE_INFO_FLAGS : uint32_t
    {
        IMAGEHLP_GET_TYPE_INFO_CHILDREN = 0x2,
        IMAGEHLP_GET_TYPE_INFO_UNCACHED = 0x1,
    };
    enum class IMAGEHLP_HD_TYPE : int32_t
    {
        hdBase = 0,
        hdSym = 1,
        hdSrc = 2,
        hdMax = 3,
    };
    enum class IMAGEHLP_SF_TYPE : int32_t
    {
        sfImage = 0,
        sfDbg = 1,
        sfPdb = 2,
        sfMpd = 3,
        sfMax = 4,
    };
    enum class IMAGEHLP_STATUS_REASON : int32_t
    {
        BindOutOfMemory = 0,
        BindRvaToVaFailed = 1,
        BindNoRoomInImage = 2,
        BindImportModuleFailed = 3,
        BindImportProcedureFailed = 4,
        BindImportModule = 5,
        BindImportProcedure = 6,
        BindForwarder = 7,
        BindForwarderNOT = 8,
        BindImageModified = 9,
        BindExpandFileHeaders = 10,
        BindImageComplete = 11,
        BindMismatchedSymbols = 12,
        BindSymbolsNotUpdated = 13,
        BindImportProcedure32 = 14,
        BindImportProcedure64 = 15,
        BindForwarder32 = 16,
        BindForwarder64 = 17,
        BindForwarderNOT32 = 18,
        BindForwarderNOT64 = 19,
    };
    enum class IMAGEHLP_SYMBOL_TYPE_INFO : int32_t
    {
        TI_GET_SYMTAG = 0,
        TI_GET_SYMNAME = 1,
        TI_GET_LENGTH = 2,
        TI_GET_TYPE = 3,
        TI_GET_TYPEID = 4,
        TI_GET_BASETYPE = 5,
        TI_GET_ARRAYINDEXTYPEID = 6,
        TI_FINDCHILDREN = 7,
        TI_GET_DATAKIND = 8,
        TI_GET_ADDRESSOFFSET = 9,
        TI_GET_OFFSET = 10,
        TI_GET_VALUE = 11,
        TI_GET_COUNT = 12,
        TI_GET_CHILDRENCOUNT = 13,
        TI_GET_BITPOSITION = 14,
        TI_GET_VIRTUALBASECLASS = 15,
        TI_GET_VIRTUALTABLESHAPEID = 16,
        TI_GET_VIRTUALBASEPOINTEROFFSET = 17,
        TI_GET_CLASSPARENTID = 18,
        TI_GET_NESTED = 19,
        TI_GET_SYMINDEX = 20,
        TI_GET_LEXICALPARENT = 21,
        TI_GET_ADDRESS = 22,
        TI_GET_THISADJUST = 23,
        TI_GET_UDTKIND = 24,
        TI_IS_EQUIV_TO = 25,
        TI_GET_CALLING_CONVENTION = 26,
        TI_IS_CLOSE_EQUIV_TO = 27,
        TI_GTIEX_REQS_VALID = 28,
        TI_GET_VIRTUALBASEOFFSET = 29,
        TI_GET_VIRTUALBASEDISPINDEX = 30,
        TI_GET_IS_REFERENCE = 31,
        TI_GET_INDIRECTVIRTUALBASECLASS = 32,
        TI_GET_VIRTUALBASETABLETYPE = 33,
        TI_GET_OBJECTPOINTERTYPE = 34,
        IMAGEHLP_SYMBOL_TYPE_INFO_MAX = 35,
    };
    enum class IMAGE_DEBUG_TYPE : uint32_t
    {
        IMAGE_DEBUG_TYPE_UNKNOWN = 0x0,
        IMAGE_DEBUG_TYPE_COFF = 0x1,
        IMAGE_DEBUG_TYPE_CODEVIEW = 0x2,
        IMAGE_DEBUG_TYPE_FPO = 0x3,
        IMAGE_DEBUG_TYPE_MISC = 0x4,
        IMAGE_DEBUG_TYPE_EXCEPTION = 0x5,
        IMAGE_DEBUG_TYPE_FIXUP = 0x6,
        IMAGE_DEBUG_TYPE_BORLAND = 0x9,
    };
    enum class IMAGE_DIRECTORY_ENTRY : uint32_t
    {
        IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 0x7,
        IMAGE_DIRECTORY_ENTRY_BASERELOC = 0x5,
        IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 0xb,
        IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 0xe,
        IMAGE_DIRECTORY_ENTRY_DEBUG = 0x6,
        IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 0xd,
        IMAGE_DIRECTORY_ENTRY_EXCEPTION = 0x3,
        IMAGE_DIRECTORY_ENTRY_EXPORT = 0x0,
        IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 0x8,
        IMAGE_DIRECTORY_ENTRY_IAT = 0xc,
        IMAGE_DIRECTORY_ENTRY_IMPORT = 0x1,
        IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 0xa,
        IMAGE_DIRECTORY_ENTRY_RESOURCE = 0x2,
        IMAGE_DIRECTORY_ENTRY_SECURITY = 0x4,
        IMAGE_DIRECTORY_ENTRY_TLS = 0x9,
    };
    enum class IMAGE_DLL_CHARACTERISTICS : uint16_t
    {
        IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 0x20,
        IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 0x40,
        IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 0x80,
        IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 0x100,
        IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 0x200,
        IMAGE_DLLCHARACTERISTICS_NO_SEH = 0x400,
        IMAGE_DLLCHARACTERISTICS_NO_BIND = 0x800,
        IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 0x1000,
        IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000,
        IMAGE_DLLCHARACTERISTICS_GUARD_CF = 0x4000,
        IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000,
        IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 0x1,
        IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 0x2,
        IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 0x4,
        IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 0x8,
        IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 0x10,
        IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 0x20,
    };
    enum class IMAGE_FILE_CHARACTERISTICS : uint16_t
    {
        IMAGE_FILE_RELOCS_STRIPPED = 0x1,
        IMAGE_FILE_EXECUTABLE_IMAGE = 0x2,
        IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,
        IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,
        IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x10,
        IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x20,
        IMAGE_FILE_BYTES_REVERSED_LO = 0x80,
        IMAGE_FILE_32BIT_MACHINE = 0x100,
        IMAGE_FILE_DEBUG_STRIPPED = 0x200,
        IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x400,
        IMAGE_FILE_NET_RUN_FROM_SWAP = 0x800,
        IMAGE_FILE_SYSTEM = 0x1000,
        IMAGE_FILE_DLL = 0x2000,
        IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,
        IMAGE_FILE_BYTES_REVERSED_HI = 0x8000,
    };
    enum class IMAGE_FILE_CHARACTERISTICS2 : uint32_t
    {
        IMAGE_FILE_RELOCS_STRIPPED2 = 0x1,
        IMAGE_FILE_EXECUTABLE_IMAGE2 = 0x2,
        IMAGE_FILE_LINE_NUMS_STRIPPED2 = 0x4,
        IMAGE_FILE_LOCAL_SYMS_STRIPPED2 = 0x8,
        IMAGE_FILE_AGGRESIVE_WS_TRIM2 = 0x10,
        IMAGE_FILE_LARGE_ADDRESS_AWARE2 = 0x20,
        IMAGE_FILE_BYTES_REVERSED_LO2 = 0x80,
        IMAGE_FILE_32BIT_MACHINE2 = 0x100,
        IMAGE_FILE_DEBUG_STRIPPED2 = 0x200,
        IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP2 = 0x400,
        IMAGE_FILE_NET_RUN_FROM_SWAP2 = 0x800,
        IMAGE_FILE_SYSTEM_2 = 0x1000,
        IMAGE_FILE_DLL_2 = 0x2000,
        IMAGE_FILE_UP_SYSTEM_ONLY_2 = 0x4000,
        IMAGE_FILE_BYTES_REVERSED_HI_2 = 0x8000,
    };
    enum class IMAGE_FILE_MACHINE : uint16_t
    {
        IMAGE_FILE_MACHINE_AXP64 = 0x284,
        IMAGE_FILE_MACHINE_I386 = 0x14c,
        IMAGE_FILE_MACHINE_IA64 = 0x200,
        IMAGE_FILE_MACHINE_AMD64 = 0x8664,
        IMAGE_FILE_MACHINE_UNKNOWN = 0x0,
        IMAGE_FILE_MACHINE_TARGET_HOST = 0x1,
        IMAGE_FILE_MACHINE_R3000 = 0x162,
        IMAGE_FILE_MACHINE_R4000 = 0x166,
        IMAGE_FILE_MACHINE_R10000 = 0x168,
        IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169,
        IMAGE_FILE_MACHINE_ALPHA = 0x184,
        IMAGE_FILE_MACHINE_SH3 = 0x1a2,
        IMAGE_FILE_MACHINE_SH3DSP = 0x1a3,
        IMAGE_FILE_MACHINE_SH3E = 0x1a4,
        IMAGE_FILE_MACHINE_SH4 = 0x1a6,
        IMAGE_FILE_MACHINE_SH5 = 0x1a8,
        IMAGE_FILE_MACHINE_ARM = 0x1c0,
        IMAGE_FILE_MACHINE_THUMB = 0x1c2,
        IMAGE_FILE_MACHINE_ARMNT = 0x1c4,
        IMAGE_FILE_MACHINE_AM33 = 0x1d3,
        IMAGE_FILE_MACHINE_POWERPC = 0x1f0,
        IMAGE_FILE_MACHINE_POWERPCFP = 0x1f1,
        IMAGE_FILE_MACHINE_MIPS16 = 0x266,
        IMAGE_FILE_MACHINE_ALPHA64 = 0x284,
        IMAGE_FILE_MACHINE_MIPSFPU = 0x366,
        IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,
        IMAGE_FILE_MACHINE_TRICORE = 0x520,
        IMAGE_FILE_MACHINE_CEF = 0xcef,
        IMAGE_FILE_MACHINE_EBC = 0xebc,
        IMAGE_FILE_MACHINE_M32R = 0x9041,
        IMAGE_FILE_MACHINE_ARM64 = 0xaa64,
        IMAGE_FILE_MACHINE_CEE = 0xc0ee,
    };
    enum class IMAGE_OPTIONAL_HEADER_MAGIC : uint16_t
    {
        IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x20b,
        IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b,
        IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b,
        IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107,
    };
    enum class IMAGE_SECTION_CHARACTERISTICS : uint32_t
    {
        IMAGE_SCN_TYPE_NO_PAD = 0x8,
        IMAGE_SCN_CNT_CODE = 0x20,
        IMAGE_SCN_CNT_INITIALIZED_DATA = 0x40,
        IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x80,
        IMAGE_SCN_LNK_OTHER = 0x100,
        IMAGE_SCN_LNK_INFO = 0x200,
        IMAGE_SCN_LNK_REMOVE = 0x800,
        IMAGE_SCN_LNK_COMDAT = 0x1000,
        IMAGE_SCN_NO_DEFER_SPEC_EXC = 0x4000,
        IMAGE_SCN_GPREL = 0x8000,
        IMAGE_SCN_MEM_FARDATA = 0x8000,
        IMAGE_SCN_MEM_PURGEABLE = 0x20000,
        IMAGE_SCN_MEM_16BIT = 0x20000,
        IMAGE_SCN_MEM_LOCKED = 0x40000,
        IMAGE_SCN_MEM_PRELOAD = 0x80000,
        IMAGE_SCN_ALIGN_1BYTES = 0x100000,
        IMAGE_SCN_ALIGN_2BYTES = 0x200000,
        IMAGE_SCN_ALIGN_4BYTES = 0x300000,
        IMAGE_SCN_ALIGN_8BYTES = 0x400000,
        IMAGE_SCN_ALIGN_16BYTES = 0x500000,
        IMAGE_SCN_ALIGN_32BYTES = 0x600000,
        IMAGE_SCN_ALIGN_64BYTES = 0x700000,
        IMAGE_SCN_ALIGN_128BYTES = 0x800000,
        IMAGE_SCN_ALIGN_256BYTES = 0x900000,
        IMAGE_SCN_ALIGN_512BYTES = 0xa00000,
        IMAGE_SCN_ALIGN_1024BYTES = 0xb00000,
        IMAGE_SCN_ALIGN_2048BYTES = 0xc00000,
        IMAGE_SCN_ALIGN_4096BYTES = 0xd00000,
        IMAGE_SCN_ALIGN_8192BYTES = 0xe00000,
        IMAGE_SCN_ALIGN_MASK = 0xf00000,
        IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000,
        IMAGE_SCN_MEM_DISCARDABLE = 0x2000000,
        IMAGE_SCN_MEM_NOT_CACHED = 0x4000000,
        IMAGE_SCN_MEM_NOT_PAGED = 0x8000000,
        IMAGE_SCN_MEM_SHARED = 0x10000000,
        IMAGE_SCN_MEM_EXECUTE = 0x20000000,
        IMAGE_SCN_MEM_READ = 0x40000000,
        IMAGE_SCN_MEM_WRITE = 0x80000000,
        IMAGE_SCN_SCALE_INDEX = 0x1,
    };
    enum class IMAGE_SUBSYSTEM : uint16_t
    {
        IMAGE_SUBSYSTEM_UNKNOWN = 0x0,
        IMAGE_SUBSYSTEM_NATIVE = 0x1,
        IMAGE_SUBSYSTEM_WINDOWS_GUI = 0x2,
        IMAGE_SUBSYSTEM_WINDOWS_CUI = 0x3,
        IMAGE_SUBSYSTEM_OS2_CUI = 0x5,
        IMAGE_SUBSYSTEM_POSIX_CUI = 0x7,
        IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 0x8,
        IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 0x9,
        IMAGE_SUBSYSTEM_EFI_APPLICATION = 0xa,
        IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 0xb,
        IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 0xc,
        IMAGE_SUBSYSTEM_EFI_ROM = 0xd,
        IMAGE_SUBSYSTEM_XBOX = 0xe,
        IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 0x10,
        IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 0x11,
    };
    enum class IPMI_OS_SEL_RECORD_TYPE : int32_t
    {
        IpmiOsSelRecordTypeWhea = 0,
        IpmiOsSelRecordTypeOther = 1,
        IpmiOsSelRecordTypeWheaErrorXpfMca = 2,
        IpmiOsSelRecordTypeWheaErrorPci = 3,
        IpmiOsSelRecordTypeWheaErrorNmi = 4,
        IpmiOsSelRecordTypeWheaErrorOther = 5,
        IpmiOsSelRecordTypeRaw = 6,
        IpmiOsSelRecordTypeDriver = 7,
        IpmiOsSelRecordTypeBugcheckRecovery = 8,
        IpmiOsSelRecordTypeBugcheckData = 9,
        IpmiOsSelRecordTypeMax = 10,
    };
    enum class IntrinsicKind : int32_t
    {
        IntrinsicVoid = 0,
        IntrinsicBool = 1,
        IntrinsicChar = 2,
        IntrinsicWChar = 3,
        IntrinsicInt = 4,
        IntrinsicUInt = 5,
        IntrinsicLong = 6,
        IntrinsicULong = 7,
        IntrinsicFloat = 8,
        IntrinsicHRESULT = 9,
        IntrinsicChar16 = 10,
        IntrinsicChar32 = 11,
    };
    enum class JS_PROPERTY_ATTRIBUTES : int32_t
    {
        JS_PROPERTY_ATTRIBUTE_NONE = 0,
        JS_PROPERTY_HAS_CHILDREN = 1,
        JS_PROPERTY_FAKE = 2,
        JS_PROPERTY_METHOD = 4,
        JS_PROPERTY_READONLY = 8,
        JS_PROPERTY_NATIVE_WINRT_POINTER = 16,
        JS_PROPERTY_FRAME_INTRYBLOCK = 32,
        JS_PROPERTY_FRAME_INCATCHBLOCK = 64,
        JS_PROPERTY_FRAME_INFINALLYBLOCK = 128,
    };
    enum class JS_PROPERTY_MEMBERS : int32_t
    {
        JS_PROPERTY_MEMBERS_ALL = 0,
        JS_PROPERTY_MEMBERS_ARGUMENTS = 1,
    };
    enum class JsDebugReadMemoryFlags : int32_t
    {
        None = 0,
        JsDebugAllowPartialRead = 1,
    };
    enum class LanguageKind : int32_t
    {
        LanguageUnknown = 0,
        LanguageC = 1,
        LanguageCPP = 2,
        LanguageAssembly = 3,
    };
    enum class LocationKind : int32_t
    {
        LocationMember = 0,
        LocationStatic = 1,
        LocationConstant = 2,
        LocationNone = 3,
    };
    enum class MINIDUMP_CALLBACK_TYPE : int32_t
    {
        ModuleCallback = 0,
        ThreadCallback = 1,
        ThreadExCallback = 2,
        IncludeThreadCallback = 3,
        IncludeModuleCallback = 4,
        MemoryCallback = 5,
        CancelCallback = 6,
        WriteKernelMinidumpCallback = 7,
        KernelMinidumpStatusCallback = 8,
        RemoveMemoryCallback = 9,
        IncludeVmRegionCallback = 10,
        IoStartCallback = 11,
        IoWriteAllCallback = 12,
        IoFinishCallback = 13,
        ReadMemoryFailureCallback = 14,
        SecondaryFlagsCallback = 15,
        IsProcessSnapshotCallback = 16,
        VmStartCallback = 17,
        VmQueryCallback = 18,
        VmPreReadCallback = 19,
        VmPostReadCallback = 20,
    };
    enum class MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE : int32_t
    {
        MiniHandleObjectInformationNone = 0,
        MiniThreadInformation1 = 1,
        MiniMutantInformation1 = 2,
        MiniMutantInformation2 = 3,
        MiniProcessInformation1 = 4,
        MiniProcessInformation2 = 5,
        MiniEventInformation1 = 6,
        MiniSectionInformation1 = 7,
        MiniSemaphoreInformation1 = 8,
        MiniHandleObjectInformationTypeMax = 9,
    };
    enum class MINIDUMP_MISC_INFO_FLAGS : uint32_t
    {
        MINIDUMP_MISC1_PROCESS_ID = 0x1,
        MINIDUMP_MISC1_PROCESS_TIMES = 0x2,
    };
    enum class MINIDUMP_SECONDARY_FLAGS : int32_t
    {
        MiniSecondaryWithoutPowerInfo = 1,
        MiniSecondaryValidFlags = 1,
    };
    enum class MINIDUMP_STREAM_TYPE : int32_t
    {
        UnusedStream = 0,
        ReservedStream0 = 1,
        ReservedStream1 = 2,
        ThreadListStream = 3,
        ModuleListStream = 4,
        MemoryListStream = 5,
        ExceptionStream = 6,
        SystemInfoStream = 7,
        ThreadExListStream = 8,
        Memory64ListStream = 9,
        CommentStreamA = 10,
        CommentStreamW = 11,
        HandleDataStream = 12,
        FunctionTableStream = 13,
        UnloadedModuleListStream = 14,
        MiscInfoStream = 15,
        MemoryInfoListStream = 16,
        ThreadInfoListStream = 17,
        HandleOperationListStream = 18,
        TokenStream = 19,
        JavaScriptDataStream = 20,
        SystemMemoryInfoStream = 21,
        ProcessVmCountersStream = 22,
        IptTraceStream = 23,
        ThreadNamesStream = 24,
        ceStreamNull = 32768,
        ceStreamSystemInfo = 32769,
        ceStreamException = 32770,
        ceStreamModuleList = 32771,
        ceStreamProcessList = 32772,
        ceStreamThreadList = 32773,
        ceStreamThreadContextList = 32774,
        ceStreamThreadCallStackList = 32775,
        ceStreamMemoryVirtualList = 32776,
        ceStreamMemoryPhysicalList = 32777,
        ceStreamBucketParameters = 32778,
        ceStreamProcessModuleMap = 32779,
        ceStreamDiagnosisList = 32780,
        LastReservedStream = 65535,
    };
    enum class MINIDUMP_THREAD_INFO_DUMP_FLAGS : uint32_t
    {
        MINIDUMP_THREAD_INFO_ERROR_THREAD = 0x1,
        MINIDUMP_THREAD_INFO_EXITED_THREAD = 0x4,
        MINIDUMP_THREAD_INFO_INVALID_CONTEXT = 0x10,
        MINIDUMP_THREAD_INFO_INVALID_INFO = 0x8,
        MINIDUMP_THREAD_INFO_INVALID_TEB = 0x20,
        MINIDUMP_THREAD_INFO_WRITING_THREAD = 0x2,
    };
    enum class MINIDUMP_TYPE : uint32_t
    {
        MiniDumpNormal = 0x0,
        MiniDumpWithDataSegs = 0x1,
        MiniDumpWithFullMemory = 0x2,
        MiniDumpWithHandleData = 0x4,
        MiniDumpFilterMemory = 0x8,
        MiniDumpScanMemory = 0x10,
        MiniDumpWithUnloadedModules = 0x20,
        MiniDumpWithIndirectlyReferencedMemory = 0x40,
        MiniDumpFilterModulePaths = 0x80,
        MiniDumpWithProcessThreadData = 0x100,
        MiniDumpWithPrivateReadWriteMemory = 0x200,
        MiniDumpWithoutOptionalData = 0x400,
        MiniDumpWithFullMemoryInfo = 0x800,
        MiniDumpWithThreadInfo = 0x1000,
        MiniDumpWithCodeSegs = 0x2000,
        MiniDumpWithoutAuxiliaryState = 0x4000,
        MiniDumpWithFullAuxiliaryState = 0x8000,
        MiniDumpWithPrivateWriteCopyMemory = 0x10000,
        MiniDumpIgnoreInaccessibleMemory = 0x20000,
        MiniDumpWithTokenInformation = 0x40000,
        MiniDumpWithModuleHeaders = 0x80000,
        MiniDumpFilterTriage = 0x100000,
        MiniDumpWithAvxXStateContext = 0x200000,
        MiniDumpWithIptTrace = 0x400000,
        MiniDumpScanInaccessiblePartialPages = 0x800000,
        MiniDumpFilterWriteCombinedMemory = 0x1000000,
        MiniDumpValidTypeFlags = 0x1ffffff,
    };
    enum class MODLOAD_DATA_TYPE : uint32_t
    {
        DBHHEADER_DEBUGDIRS = 0x1,
        DBHHEADER_CVMISC = 0x2,
    };
    enum class MODULE_WRITE_FLAGS : int32_t
    {
        ModuleWriteModule = 1,
        ModuleWriteDataSeg = 2,
        ModuleWriteMiscRecord = 4,
        ModuleWriteCvRecord = 8,
        ModuleReferencedByMemory = 16,
        ModuleWriteTlsData = 32,
        ModuleWriteCodeSegs = 64,
    };
    enum class ModelObjectKind : int32_t
    {
        ObjectPropertyAccessor = 0,
        ObjectContext = 1,
        ObjectTargetObject = 2,
        ObjectTargetObjectReference = 3,
        ObjectSynthetic = 4,
        ObjectNoValue = 5,
        ObjectError = 6,
        ObjectIntrinsic = 7,
        ObjectMethod = 8,
        ObjectKeyReference = 9,
    };
    enum class OBJECT_ATTRIB_FLAG : uint32_t
    {
        OBJECT_ATTRIB_NO_ATTRIB = 0x0,
        OBJECT_ATTRIB_NO_NAME = 0x1,
        OBJECT_ATTRIB_NO_TYPE = 0x2,
        OBJECT_ATTRIB_NO_VALUE = 0x4,
        OBJECT_ATTRIB_VALUE_IS_INVALID = 0x8,
        OBJECT_ATTRIB_VALUE_IS_OBJECT = 0x10,
        OBJECT_ATTRIB_VALUE_IS_ENUM = 0x20,
        OBJECT_ATTRIB_VALUE_IS_CUSTOM = 0x40,
        OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE = 0x70,
        OBJECT_ATTRIB_VALUE_HAS_CODE = 0x80,
        OBJECT_ATTRIB_TYPE_IS_OBJECT = 0x100,
        OBJECT_ATTRIB_TYPE_HAS_CODE = 0x200,
        OBJECT_ATTRIB_TYPE_IS_EXPANDABLE = 0x100,
        OBJECT_ATTRIB_SLOT_IS_CATEGORY = 0x400,
        OBJECT_ATTRIB_VALUE_READONLY = 0x800,
        OBJECT_ATTRIB_ACCESS_PUBLIC = 0x1000,
        OBJECT_ATTRIB_ACCESS_PRIVATE = 0x2000,
        OBJECT_ATTRIB_ACCESS_PROTECTED = 0x4000,
        OBJECT_ATTRIB_ACCESS_FINAL = 0x8000,
        OBJECT_ATTRIB_STORAGE_GLOBAL = 0x10000,
        OBJECT_ATTRIB_STORAGE_STATIC = 0x20000,
        OBJECT_ATTRIB_STORAGE_FIELD = 0x40000,
        OBJECT_ATTRIB_STORAGE_VIRTUAL = 0x80000,
        OBJECT_ATTRIB_TYPE_IS_CONSTANT = 0x100000,
        OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED = 0x200000,
        OBJECT_ATTRIB_TYPE_IS_VOLATILE = 0x400000,
        OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS = 0x800000,
        OBJECT_ATTRIB_IS_CLASS = 0x1000000,
        OBJECT_ATTRIB_IS_FUNCTION = 0x2000000,
        OBJECT_ATTRIB_IS_VARIABLE = 0x4000000,
        OBJECT_ATTRIB_IS_PROPERTY = 0x8000000,
        OBJECT_ATTRIB_IS_MACRO = 0x10000000,
        OBJECT_ATTRIB_IS_TYPE = 0x20000000,
        OBJECT_ATTRIB_IS_INHERITED = 0x40000000,
        OBJECT_ATTRIB_IS_INTERFACE = 0x80000000,
    };
    enum class OPEN_THREAD_WAIT_CHAIN_SESSION_FLAGS : uint32_t
    {
        WCT_ASYNC_OPEN_FLAG = 0x1,
    };
    enum class PROCESSOR_ARCHITECTURE : uint16_t
    {
        PROCESSOR_ARCHITECTURE_AMD64 = 0x9,
        PROCESSOR_ARCHITECTURE_IA64 = 0x6,
        PROCESSOR_ARCHITECTURE_INTEL = 0x0,
        PROCESSOR_ARCHITECTURE_ARM = 0x5,
        PROCESSOR_ARCHITECTURE_UNKNOWN = 0xffff,
    };
    enum class PROFILER_EVENT_MASK : uint32_t
    {
        PROFILER_EVENT_MASK_TRACE_SCRIPT_FUNCTION_CALL = 0x1,
        PROFILER_EVENT_MASK_TRACE_NATIVE_FUNCTION_CALL = 0x2,
        PROFILER_EVENT_MASK_TRACE_DOM_FUNCTION_CALL = 0x4,
        PROFILER_EVENT_MASK_TRACE_ALL = 0x3,
        PROFILER_EVENT_MASK_TRACE_ALL_WITH_DOM = 0x7,
    };
    enum class PROFILER_HEAP_ENUM_FLAGS : uint32_t
    {
        PROFILER_HEAP_ENUM_FLAGS_NONE = 0x0,
        PROFILER_HEAP_ENUM_FLAGS_STORE_RELATIONSHIP_FLAGS = 0x1,
        PROFILER_HEAP_ENUM_FLAGS_SUBSTRINGS = 0x2,
        PROFILER_HEAP_ENUM_FLAGS_RELATIONSHIP_SUBSTRINGS = 0x3,
    };
    enum class PROFILER_HEAP_OBJECT_FLAGS : uint32_t
    {
        PROFILER_HEAP_OBJECT_FLAGS_NEW_OBJECT = 0x1,
        PROFILER_HEAP_OBJECT_FLAGS_IS_ROOT = 0x2,
        PROFILER_HEAP_OBJECT_FLAGS_SITE_CLOSED = 0x4,
        PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL = 0x8,
        PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_UNKNOWN = 0x10,
        PROFILER_HEAP_OBJECT_FLAGS_EXTERNAL_DISPATCH = 0x20,
        PROFILER_HEAP_OBJECT_FLAGS_SIZE_APPROXIMATE = 0x40,
        PROFILER_HEAP_OBJECT_FLAGS_SIZE_UNAVAILABLE = 0x80,
        PROFILER_HEAP_OBJECT_FLAGS_NEW_STATE_UNAVAILABLE = 0x100,
        PROFILER_HEAP_OBJECT_FLAGS_WINRT_INSTANCE = 0x200,
        PROFILER_HEAP_OBJECT_FLAGS_WINRT_RUNTIMECLASS = 0x400,
        PROFILER_HEAP_OBJECT_FLAGS_WINRT_DELEGATE = 0x800,
        PROFILER_HEAP_OBJECT_FLAGS_WINRT_NAMESPACE = 0x1000,
    };
    enum class PROFILER_HEAP_OBJECT_OPTIONAL_INFO_TYPE : int32_t
    {
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_PROTOTYPE = 1,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_FUNCTION_NAME = 2,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SCOPE_LIST = 3,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INTERNAL_PROPERTY = 4,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_NAME_PROPERTIES = 5,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_INDEX_PROPERTIES = 6,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_ATTRIBUTES_SIZE = 7,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_ELEMENT_TEXT_CHILDREN_SIZE = 8,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_RELATIONSHIPS = 9,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WINRTEVENTS = 10,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_WEAKMAP_COLLECTION_LIST = 11,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAP_COLLECTION_LIST = 12,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_SET_COLLECTION_LIST = 13,
        PROFILER_HEAP_OBJECT_OPTIONAL_INFO_MAX_VALUE = 13,
    };
    enum class PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS : uint32_t
    {
        PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_NONE = 0x0,
        PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_GET_ACCESSOR = 0x10000,
        PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_IS_SET_ACCESSOR = 0x20000,
        PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_LET_VARIABLE = 0x40000,
        PROFILER_HEAP_OBJECT_RELATIONSHIP_FLAGS_CONST_VARIABLE = 0x80000,
    };
    enum class PROFILER_HEAP_SUMMARY_VERSION : int32_t
    {
        PROFILER_HEAP_SUMMARY_VERSION_1 = 1,
    };
    enum class PROFILER_RELATIONSHIP_INFO : int32_t
    {
        PROFILER_PROPERTY_TYPE_NUMBER = 1,
        PROFILER_PROPERTY_TYPE_STRING = 2,
        PROFILER_PROPERTY_TYPE_HEAP_OBJECT = 3,
        PROFILER_PROPERTY_TYPE_EXTERNAL_OBJECT = 4,
        PROFILER_PROPERTY_TYPE_BSTR = 5,
        PROFILER_PROPERTY_TYPE_SUBSTRING = 6,
    };
    enum class PROFILER_SCRIPT_TYPE : int32_t
    {
        PROFILER_SCRIPT_TYPE_USER = 0,
        PROFILER_SCRIPT_TYPE_DYNAMIC = 1,
        PROFILER_SCRIPT_TYPE_NATIVE = 2,
        PROFILER_SCRIPT_TYPE_DOM = 3,
    };
    enum class PROP_INFO_FLAGS : int32_t
    {
        PROP_INFO_NAME = 1,
        PROP_INFO_TYPE = 2,
        PROP_INFO_VALUE = 4,
        PROP_INFO_FULLNAME = 32,
        PROP_INFO_ATTRIBUTES = 8,
        PROP_INFO_DEBUGPROP = 16,
        PROP_INFO_AUTOEXPAND = 134217728,
    };
    enum class PointerKind : int32_t
    {
        PointerStandard = 0,
        PointerReference = 1,
        PointerRValueReference = 2,
        PointerCXHat = 3,
        PointerManagedReference = 4,
    };
    enum class PreferredFormat : int32_t
    {
        FormatNone = 0,
        FormatSingleCharacter = 1,
        FormatQuotedString = 2,
        FormatString = 3,
        FormatQuotedUnicodeString = 4,
        FormatUnicodeString = 5,
        FormatQuotedUTF8String = 6,
        FormatUTF8String = 7,
        FormatBSTRString = 8,
        FormatQuotedHString = 9,
        FormatHString = 10,
        FormatRaw = 11,
        FormatEnumNameOnly = 12,
        FormatEscapedStringWithQuote = 13,
        FormatUTF32String = 14,
        FormatQuotedUTF32String = 15,
    };
    enum class RIP_INFO_TYPE : uint32_t
    {
        SLE_ERROR = 0x1,
        SLE_MINORERROR = 0x2,
        SLE_WARNING = 0x3,
    };
    enum class RTL_VIRTUAL_UNWIND_HANDLER_TYPE : uint32_t
    {
        UNW_FLAG_NHANDLER = 0x0,
        UNW_FLAG_EHANDLER = 0x1,
        UNW_FLAG_UHANDLER = 0x2,
        UNW_FLAG_CHAININFO = 0x4,
    };
    enum class RawSearchFlags : int32_t
    {
        RawSearchNone = 0,
        RawSearchNoBases = 1,
    };
    enum class SCRIPTGCTYPE : int32_t
    {
        SCRIPTGCTYPE_NORMAL = 0,
        SCRIPTGCTYPE_EXHAUSTIVE = 1,
    };
    enum class SCRIPTLANGUAGEVERSION : int32_t
    {
        SCRIPTLANGUAGEVERSION_DEFAULT = 0,
        SCRIPTLANGUAGEVERSION_5_7 = 1,
        SCRIPTLANGUAGEVERSION_5_8 = 2,
        SCRIPTLANGUAGEVERSION_MAX = 255,
    };
    enum class SCRIPTSTATE : int32_t
    {
        SCRIPTSTATE_UNINITIALIZED = 0,
        SCRIPTSTATE_INITIALIZED = 5,
        SCRIPTSTATE_STARTED = 1,
        SCRIPTSTATE_CONNECTED = 2,
        SCRIPTSTATE_DISCONNECTED = 3,
        SCRIPTSTATE_CLOSED = 4,
    };
    enum class SCRIPTTHREADSTATE : int32_t
    {
        SCRIPTTHREADSTATE_NOTINSCRIPT = 0,
        SCRIPTTHREADSTATE_RUNNING = 1,
    };
    enum class SCRIPTTRACEINFO : int32_t
    {
        SCRIPTTRACEINFO_SCRIPTSTART = 0,
        SCRIPTTRACEINFO_SCRIPTEND = 1,
        SCRIPTTRACEINFO_COMCALLSTART = 2,
        SCRIPTTRACEINFO_COMCALLEND = 3,
        SCRIPTTRACEINFO_CREATEOBJSTART = 4,
        SCRIPTTRACEINFO_CREATEOBJEND = 5,
        SCRIPTTRACEINFO_GETOBJSTART = 6,
        SCRIPTTRACEINFO_GETOBJEND = 7,
    };
    enum class SCRIPTUICHANDLING : int32_t
    {
        SCRIPTUICHANDLING_ALLOW = 0,
        SCRIPTUICHANDLING_NOUIERROR = 1,
        SCRIPTUICHANDLING_NOUIDEFAULT = 2,
    };
    enum class SCRIPTUICITEM : int32_t
    {
        SCRIPTUICITEM_INPUTBOX = 1,
        SCRIPTUICITEM_MSGBOX = 2,
    };
    enum class SCRIPT_DEBUGGER_OPTIONS : int32_t
    {
        SDO_NONE = 0,
        SDO_ENABLE_FIRST_CHANCE_EXCEPTIONS = 1,
        SDO_ENABLE_WEB_WORKER_SUPPORT = 2,
        SDO_ENABLE_NONUSER_CODE_SUPPORT = 4,
        SDO_ENABLE_LIBRARY_STACK_FRAME = 8,
    };
    enum class SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND : int32_t
    {
        ETK_FIRST_CHANCE = 0,
        ETK_USER_UNHANDLED = 1,
        ETK_UNHANDLED = 2,
    };
    enum class SCRIPT_INVOCATION_CONTEXT_TYPE : int32_t
    {
        SICT_Event = 0,
        SICT_SetTimeout = 1,
        SICT_SetInterval = 2,
        SICT_SetImmediate = 3,
        SICT_RequestAnimationFrame = 4,
        SICT_ToString = 5,
        SICT_MutationObserverCheckpoint = 6,
        SICT_WWAExecUnsafeLocalFunction = 7,
        SICT_WWAExecAtPriority = 8,
    };
    enum class SYMBOL_INFO_FLAGS : uint32_t
    {
        SYMFLAG_CLR_TOKEN = 0x40000,
        SYMFLAG_CONSTANT = 0x100,
        SYMFLAG_EXPORT = 0x200,
        SYMFLAG_FORWARDER = 0x400,
        SYMFLAG_FRAMEREL = 0x20,
        SYMFLAG_FUNCTION = 0x800,
        SYMFLAG_ILREL = 0x10000,
        SYMFLAG_LOCAL = 0x80,
        SYMFLAG_METADATA = 0x20000,
        SYMFLAG_PARAMETER = 0x40,
        SYMFLAG_REGISTER = 0x8,
        SYMFLAG_REGREL = 0x10,
        SYMFLAG_SLOT = 0x8000,
        SYMFLAG_THUNK = 0x2000,
        SYMFLAG_TLSREL = 0x4000,
        SYMFLAG_VALUEPRESENT = 0x1,
        SYMFLAG_VIRTUAL = 0x1000,
    };
    enum class SYM_FIND_ID_OPTION : uint32_t
    {
        SSRVOPT_DWORD = 0x2,
        SSRVOPT_DWORDPTR = 0x4,
        SSRVOPT_GUIDPTR = 0x8,
    };
    enum class SYM_LOAD_FLAGS : uint32_t
    {
        SLMFLAG_NONE = 0x0,
        SLMFLAG_VIRTUAL = 0x1,
        SLMFLAG_ALT_INDEX = 0x2,
        SLMFLAG_NO_SYMBOLS = 0x4,
    };
    enum class SYM_SRV_STORE_FILE_FLAGS : uint32_t
    {
        SYMSTOREOPT_COMPRESS = 0x1,
        SYMSTOREOPT_OVERWRITE = 0x2,
        SYMSTOREOPT_PASS_IF_EXISTS = 0x40,
        SYMSTOREOPT_POINTER = 0x8,
        SYMSTOREOPT_RETURNINDEX = 0x4,
    };
    enum class SYM_TYPE : int32_t
    {
        SymNone = 0,
        SymCoff = 1,
        SymCv = 2,
        SymPdb = 3,
        SymExport = 4,
        SymDeferred = 5,
        SymSym = 6,
        SymDia = 7,
        SymVirtual = 8,
        NumSymTypes = 9,
    };
    enum class ScriptChangeKind : int32_t
    {
        ScriptRename = 0,
    };
    enum class ScriptDebugEvent : int32_t
    {
        ScriptDebugBreakpoint = 0,
        ScriptDebugStep = 1,
        ScriptDebugException = 2,
        ScriptDebugAsyncBreak = 3,
    };
    enum class ScriptDebugEventFilter : int32_t
    {
        ScriptDebugEventFilterEntry = 0,
        ScriptDebugEventFilterException = 1,
        ScriptDebugEventFilterUnhandledException = 2,
        ScriptDebugEventFilterAbort = 3,
    };
    enum class ScriptDebugState : int32_t
    {
        ScriptDebugNoDebugger = 0,
        ScriptDebugNotExecuting = 1,
        ScriptDebugExecuting = 2,
        ScriptDebugBreak = 3,
    };
    enum class ScriptExecutionKind : int32_t
    {
        ScriptExecutionNormal = 0,
        ScriptExecutionStepIn = 1,
        ScriptExecutionStepOut = 2,
        ScriptExecutionStepOver = 3,
    };
    enum class SignatureComparison : int32_t
    {
        Unrelated = 0,
        Ambiguous = 1,
        LessSpecific = 2,
        MoreSpecific = 3,
        Identical = 4,
    };
    enum class SymbolKind : int32_t
    {
        Symbol = 0,
        SymbolModule = 1,
        SymbolType = 2,
        SymbolField = 3,
        SymbolConstant = 4,
        SymbolData = 5,
        SymbolBaseClass = 6,
        SymbolPublic = 7,
        SymbolFunction = 8,
    };
    enum class SymbolSearchOptions : int32_t
    {
        SymbolSearchNone = 0,
        SymbolSearchCompletion = 1,
        SymbolSearchCaseInsensitive = 2,
    };
    enum class THREAD_ERROR_MODE : uint32_t
    {
        SEM_ALL_ERRORS = 0x0,
        SEM_FAILCRITICALERRORS = 0x1,
        SEM_NOGPFAULTERRORBOX = 0x2,
        SEM_NOOPENFILEERRORBOX = 0x8000,
        SEM_NOALIGNMENTFAULTEXCEPT = 0x4,
    };
    enum class THREAD_WRITE_FLAGS : int32_t
    {
        ThreadWriteThread = 1,
        ThreadWriteStack = 2,
        ThreadWriteContext = 4,
        ThreadWriteBackingStore = 8,
        ThreadWriteInstructionWindow = 16,
        ThreadWriteThreadData = 32,
        ThreadWriteThreadInfo = 64,
    };
    enum class TypeKind : int32_t
    {
        TypeUDT = 0,
        TypePointer = 1,
        TypeMemberPointer = 2,
        TypeArray = 3,
        TypeFunction = 4,
        TypeTypedef = 5,
        TypeEnum = 6,
        TypeIntrinsic = 7,
        TypeExtendedArray = 8,
    };
    enum class VER_PLATFORM : uint32_t
    {
        VER_PLATFORM_WIN32s = 0x0,
        VER_PLATFORM_WIN32_WINDOWS = 0x1,
        VER_PLATFORM_WIN32_NT = 0x2,
    };
    enum class VarArgsKind : int32_t
    {
        VarArgsNone = 0,
        VarArgsCStyle = 1,
    };
    enum class WAIT_CHAIN_THREAD_OPTIONS : uint32_t
    {
        WCT_OUT_OF_PROC_COM_FLAG = 0x2,
        WCT_OUT_OF_PROC_CS_FLAG = 0x4,
        WCT_OUT_OF_PROC_FLAG = 0x1,
    };
    enum class WCT_OBJECT_STATUS : int32_t
    {
        WctStatusNoAccess = 1,
        WctStatusRunning = 2,
        WctStatusBlocked = 3,
        WctStatusPidOnly = 4,
        WctStatusPidOnlyRpcss = 5,
        WctStatusOwned = 6,
        WctStatusNotOwned = 7,
        WctStatusAbandoned = 8,
        WctStatusUnknown = 9,
        WctStatusError = 10,
        WctStatusMax = 11,
    };
    enum class WCT_OBJECT_TYPE : int32_t
    {
        WctCriticalSectionType = 1,
        WctSendMessageType = 2,
        WctMutexType = 3,
        WctAlpcType = 4,
        WctComType = 5,
        WctThreadWaitType = 6,
        WctProcessWaitType = 7,
        WctThreadType = 8,
        WctComActivationType = 9,
        WctUnknownType = 10,
        WctSocketIoType = 11,
        WctSmbIoType = 12,
        WctMaxType = 13,
    };
    enum class WHEA_ERROR_SOURCE_STATE : int32_t
    {
        WheaErrSrcStateStopped = 1,
        WheaErrSrcStateStarted = 2,
        WheaErrSrcStateRemoved = 3,
        WheaErrSrcStateRemovePending = 4,
    };
    enum class WHEA_ERROR_SOURCE_TYPE : int32_t
    {
        WheaErrSrcTypeMCE = 0,
        WheaErrSrcTypeCMC = 1,
        WheaErrSrcTypeCPE = 2,
        WheaErrSrcTypeNMI = 3,
        WheaErrSrcTypePCIe = 4,
        WheaErrSrcTypeGeneric = 5,
        WheaErrSrcTypeINIT = 6,
        WheaErrSrcTypeBOOT = 7,
        WheaErrSrcTypeSCIGeneric = 8,
        WheaErrSrcTypeIPFMCA = 9,
        WheaErrSrcTypeIPFCMC = 10,
        WheaErrSrcTypeIPFCPE = 11,
        WheaErrSrcTypeGenericV2 = 12,
        WheaErrSrcTypeSCIGenericV2 = 13,
        WheaErrSrcTypeBMC = 14,
        WheaErrSrcTypePMEM = 15,
        WheaErrSrcTypeDeviceDriver = 16,
        WheaErrSrcTypeMax = 17,
    };
    enum class _DUMP_TYPES : int32_t
    {
        DUMP_TYPE_INVALID = -1,
        DUMP_TYPE_UNKNOWN = 0,
        DUMP_TYPE_FULL = 1,
        DUMP_TYPE_SUMMARY = 2,
        DUMP_TYPE_HEADER = 3,
        DUMP_TYPE_TRIAGE = 4,
        DUMP_TYPE_BITMAP_FULL = 5,
        DUMP_TYPE_BITMAP_KERNEL = 6,
        DUMP_TYPE_AUTOMATIC = 7,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ADDRESS;
    struct ADDRESS64;
    union AER_BRIDGE_DESCRIPTOR_FLAGS;
    union AER_ENDPOINT_DESCRIPTOR_FLAGS;
    union AER_ROOTPORT_DESCRIPTOR_FLAGS;
    struct API_VERSION;
    struct ArrayDimension;
    struct CDebugDocumentHelper;
    struct CONTEXT;
    union CPU_INFORMATION;
    struct CREATE_PROCESS_DEBUG_INFO;
    struct CREATE_THREAD_DEBUG_INFO;
    struct DBGHELP_DATA_REPORT_STRUCT;
    struct DBGKD_DEBUG_DATA_HEADER32;
    struct DBGKD_DEBUG_DATA_HEADER64;
    struct DBGKD_GET_VERSION32;
    struct DBGKD_GET_VERSION64;
    struct DEBUG_BREAKPOINT_PARAMETERS;
    struct DEBUG_CACHED_SYMBOL_INFO;
    struct DEBUG_CLIENT_CONTEXT;
    struct DEBUG_CREATE_PROCESS_OPTIONS;
    struct DEBUG_EVENT;
    struct DEBUG_EVENT_CONTEXT;
    struct DEBUG_EXCEPTION_FILTER_PARAMETERS;
    struct DEBUG_GET_TEXT_COMPLETIONS_IN;
    struct DEBUG_GET_TEXT_COMPLETIONS_OUT;
    struct DEBUG_HANDLE_DATA_BASIC;
    struct DEBUG_LAST_EVENT_INFO_BREAKPOINT;
    struct DEBUG_LAST_EVENT_INFO_EXCEPTION;
    struct DEBUG_LAST_EVENT_INFO_EXIT_PROCESS;
    struct DEBUG_LAST_EVENT_INFO_EXIT_THREAD;
    struct DEBUG_LAST_EVENT_INFO_LOAD_MODULE;
    struct DEBUG_LAST_EVENT_INFO_SERVICE_EXCEPTION;
    struct DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR;
    struct DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE;
    struct DEBUG_MODULE_AND_ID;
    struct DEBUG_MODULE_PARAMETERS;
    struct DEBUG_OFFSET_REGION;
    union DEBUG_PROCESSOR_IDENTIFICATION_ALL;
    struct DEBUG_PROCESSOR_IDENTIFICATION_ALPHA;
    struct DEBUG_PROCESSOR_IDENTIFICATION_AMD64;
    struct DEBUG_PROCESSOR_IDENTIFICATION_ARM;
    struct DEBUG_PROCESSOR_IDENTIFICATION_ARM64;
    struct DEBUG_PROCESSOR_IDENTIFICATION_IA64;
    struct DEBUG_PROCESSOR_IDENTIFICATION_X86;
    struct DEBUG_READ_USER_MINIDUMP_STREAM;
    struct DEBUG_REGISTER_DESCRIPTION;
    struct DEBUG_SPECIFIC_FILTER_PARAMETERS;
    struct DEBUG_STACK_FRAME;
    struct DEBUG_STACK_FRAME_EX;
    struct DEBUG_SYMBOL_ENTRY;
    struct DEBUG_SYMBOL_PARAMETERS;
    struct DEBUG_SYMBOL_SOURCE_ENTRY;
    struct DEBUG_THREAD_BASIC_INFORMATION;
    struct DEBUG_TYPED_DATA;
    struct DEBUG_VALUE;
    union DUMP_FILE_ATTRIBUTES;
    struct DUMP_HEADER32;
    struct DUMP_HEADER64;
    struct DebugHelper;
    struct DebugPropertyInfo;
    struct DebugStackFrameDescriptor;
    struct DebugStackFrameDescriptor64;
    struct DefaultDebugSessionProvider;
    struct EXCEPTION_DEBUG_INFO;
    struct EXCEPTION_POINTERS;
    struct EXCEPTION_RECORD;
    struct EXCEPTION_RECORD64;
    struct EXIT_PROCESS_DEBUG_INFO;
    struct EXIT_THREAD_DEBUG_INFO;
    struct EXTSTACKTRACE;
    struct EXTSTACKTRACE32;
    struct EXTSTACKTRACE64;
    struct EXT_API_VERSION;
    struct EXT_FIND_FILE;
    struct EXT_MATCH_PATTERN_A;
    struct EXT_TYPED_DATA;
    struct ExtendedDebugPropertyInfo;
    struct FIELD_INFO;
    struct FPO_DATA;
    struct GET_CONTEXT_EX;
    struct GET_CURRENT_PROCESS_ADDRESS;
    struct GET_CURRENT_THREAD_ADDRESS;
    struct GET_EXPRESSION_EX;
    struct GET_INPUT_LINE;
    struct GET_PEB_ADDRESS;
    struct GET_SET_SYMPATH;
    struct GET_TEB_ADDRESS;
    struct IMAGEHLP_CBA_EVENT;
    struct IMAGEHLP_CBA_EVENTW;
    struct IMAGEHLP_CBA_READ_MEMORY;
    struct IMAGEHLP_DEFERRED_SYMBOL_LOAD;
    struct IMAGEHLP_DEFERRED_SYMBOL_LOAD64;
    struct IMAGEHLP_DEFERRED_SYMBOL_LOADW64;
    struct IMAGEHLP_DUPLICATE_SYMBOL;
    struct IMAGEHLP_DUPLICATE_SYMBOL64;
    struct IMAGEHLP_GET_TYPE_INFO_PARAMS;
    struct IMAGEHLP_LINE;
    struct IMAGEHLP_LINE64;
    struct IMAGEHLP_LINEW;
    struct IMAGEHLP_LINEW64;
    struct IMAGEHLP_MODULE;
    struct IMAGEHLP_MODULE64;
    struct IMAGEHLP_MODULE64_EX;
    struct IMAGEHLP_MODULEW;
    struct IMAGEHLP_MODULEW64;
    struct IMAGEHLP_MODULEW64_EX;
    struct IMAGEHLP_STACK_FRAME;
    struct IMAGEHLP_SYMBOL;
    struct IMAGEHLP_SYMBOL64;
    struct IMAGEHLP_SYMBOL64_PACKAGE;
    struct IMAGEHLP_SYMBOLW;
    struct IMAGEHLP_SYMBOLW64;
    struct IMAGEHLP_SYMBOLW64_PACKAGE;
    struct IMAGEHLP_SYMBOLW_PACKAGE;
    struct IMAGEHLP_SYMBOL_PACKAGE;
    struct IMAGEHLP_SYMBOL_SRC;
    struct IMAGE_COFF_SYMBOLS_HEADER;
    struct IMAGE_DATA_DIRECTORY;
    struct IMAGE_DEBUG_DIRECTORY;
    struct IMAGE_DEBUG_INFORMATION;
    struct IMAGE_FILE_HEADER;
    struct IMAGE_FUNCTION_ENTRY;
    struct IMAGE_FUNCTION_ENTRY64;
    struct IMAGE_LOAD_CONFIG_DIRECTORY32;
    struct IMAGE_LOAD_CONFIG_DIRECTORY64;
    struct IMAGE_NT_HEADERS32;
    struct IMAGE_NT_HEADERS64;
    struct IMAGE_OPTIONAL_HEADER32;
    struct IMAGE_OPTIONAL_HEADER64;
    struct IMAGE_SECTION_HEADER;
    union INLINE_FRAME_CONTEXT;
    struct IOSPACE;
    struct IOSPACE32;
    struct IOSPACE64;
    struct IOSPACE_EX;
    struct IOSPACE_EX32;
    struct IOSPACE_EX64;
    struct IPMI_OS_SEL_RECORD;
    struct JsDebugPropertyInfo;
    struct KDDEBUGGER_DATA32;
    struct KDDEBUGGER_DATA64;
    struct KDHELP;
    struct KDHELP64;
    struct LDT_ENTRY;
    struct LOADED_IMAGE;
    struct LOAD_DLL_DEBUG_INFO;
    struct Location;
    struct MINIDUMP_CALLBACK_INFORMATION;
    struct MINIDUMP_CALLBACK_INPUT;
    struct MINIDUMP_CALLBACK_OUTPUT;
    struct MINIDUMP_DIRECTORY;
    struct MINIDUMP_EXCEPTION;
    struct MINIDUMP_EXCEPTION_INFORMATION;
    struct MINIDUMP_EXCEPTION_INFORMATION64;
    struct MINIDUMP_EXCEPTION_STREAM;
    struct MINIDUMP_FUNCTION_TABLE_DESCRIPTOR;
    struct MINIDUMP_FUNCTION_TABLE_STREAM;
    struct MINIDUMP_HANDLE_DATA_STREAM;
    struct MINIDUMP_HANDLE_DESCRIPTOR;
    struct MINIDUMP_HANDLE_DESCRIPTOR_2;
    struct MINIDUMP_HANDLE_OBJECT_INFORMATION;
    struct MINIDUMP_HANDLE_OPERATION_LIST;
    struct MINIDUMP_HEADER;
    struct MINIDUMP_INCLUDE_MODULE_CALLBACK;
    struct MINIDUMP_INCLUDE_THREAD_CALLBACK;
    struct MINIDUMP_IO_CALLBACK;
    struct MINIDUMP_LOCATION_DESCRIPTOR;
    struct MINIDUMP_LOCATION_DESCRIPTOR64;
    struct MINIDUMP_MEMORY64_LIST;
    struct MINIDUMP_MEMORY_DESCRIPTOR;
    struct MINIDUMP_MEMORY_DESCRIPTOR64;
    struct MINIDUMP_MEMORY_INFO;
    struct MINIDUMP_MEMORY_INFO_LIST;
    struct MINIDUMP_MEMORY_LIST;
    struct MINIDUMP_MISC_INFO;
    struct MINIDUMP_MISC_INFO_2;
    struct MINIDUMP_MISC_INFO_3;
    struct MINIDUMP_MISC_INFO_4;
    struct MINIDUMP_MISC_INFO_5;
    struct MINIDUMP_MODULE;
    struct MINIDUMP_MODULE_CALLBACK;
    struct MINIDUMP_MODULE_LIST;
    struct MINIDUMP_PROCESS_VM_COUNTERS_1;
    struct MINIDUMP_PROCESS_VM_COUNTERS_2;
    struct MINIDUMP_READ_MEMORY_FAILURE_CALLBACK;
    struct MINIDUMP_STRING;
    struct MINIDUMP_SYSTEM_BASIC_INFORMATION;
    struct MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION;
    struct MINIDUMP_SYSTEM_FILECACHE_INFORMATION;
    struct MINIDUMP_SYSTEM_INFO;
    struct MINIDUMP_SYSTEM_MEMORY_INFO_1;
    struct MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION;
    struct MINIDUMP_THREAD;
    struct MINIDUMP_THREAD_CALLBACK;
    struct MINIDUMP_THREAD_EX;
    struct MINIDUMP_THREAD_EX_CALLBACK;
    struct MINIDUMP_THREAD_EX_LIST;
    struct MINIDUMP_THREAD_INFO;
    struct MINIDUMP_THREAD_INFO_LIST;
    struct MINIDUMP_THREAD_LIST;
    struct MINIDUMP_THREAD_NAME;
    struct MINIDUMP_THREAD_NAME_LIST;
    struct MINIDUMP_TOKEN_INFO_HEADER;
    struct MINIDUMP_TOKEN_INFO_LIST;
    struct MINIDUMP_UNLOADED_MODULE;
    struct MINIDUMP_UNLOADED_MODULE_LIST;
    struct MINIDUMP_USER_RECORD;
    struct MINIDUMP_USER_STREAM;
    struct MINIDUMP_USER_STREAM_INFORMATION;
    struct MINIDUMP_VM_POST_READ_CALLBACK;
    struct MINIDUMP_VM_PRE_READ_CALLBACK;
    struct MINIDUMP_VM_QUERY_CALLBACK;
    struct MODLOAD_CVMISC;
    struct MODLOAD_DATA;
    struct MODLOAD_PDBGUID_PDBAGE;
    struct MODULE_TYPE_INFO;
    struct MachineDebugManager_DEBUG;
    struct MachineDebugManager_RETAIL;
    struct OMAP;
    struct OUTPUT_DEBUG_STRING_INFO;
    struct PHYSICAL;
    struct PHYSICAL_MEMORY_DESCRIPTOR32;
    struct PHYSICAL_MEMORY_DESCRIPTOR64;
    struct PHYSICAL_MEMORY_RUN32;
    struct PHYSICAL_MEMORY_RUN64;
    struct PHYSICAL_TO_VIRTUAL;
    struct PHYSICAL_WITH_FLAGS;
    struct POINTER_SEARCH_PHYSICAL;
    struct PROCESSORINFO;
    struct PROCESS_NAME_ENTRY;
    struct PROFILER_HEAP_OBJECT;
    struct PROFILER_HEAP_OBJECT_OPTIONAL_INFO;
    struct PROFILER_HEAP_OBJECT_RELATIONSHIP;
    struct PROFILER_HEAP_OBJECT_RELATIONSHIP_LIST;
    struct PROFILER_HEAP_OBJECT_SCOPE_LIST;
    struct PROFILER_HEAP_SUMMARY;
    struct PROFILER_PROPERTY_TYPE_SUBSTRING_INFO;
    struct ProcessDebugManager;
    struct READCONTROLSPACE;
    struct READCONTROLSPACE32;
    struct READCONTROLSPACE64;
    struct READ_WRITE_MSR;
    struct RIP_INFO;
    struct SEARCHMEMORY;
    struct SOURCEFILE;
    struct SOURCEFILEW;
    struct SRCCODEINFO;
    struct SRCCODEINFOW;
    struct STACKFRAME;
    struct STACKFRAME64;
    struct STACKFRAME_EX;
    struct STACK_SRC_INFO;
    struct STACK_SYM_FRAME_INFO;
    struct SYMBOL_INFO;
    struct SYMBOL_INFOW;
    struct SYMBOL_INFO_EX;
    struct SYMBOL_INFO_PACKAGE;
    struct SYMBOL_INFO_PACKAGEW;
    struct SYMSRV_EXTENDED_OUTPUT_DATA;
    struct SYMSRV_INDEX_INFO;
    struct SYMSRV_INDEX_INFOW;
    struct SYM_DUMP_PARAM;
    struct ScriptDebugEventInformation;
    struct ScriptDebugPosition;
    struct TEXT_DOCUMENT_ARRAY;
    struct TI_FINDCHILDREN_PARAMS;
    struct TRANSLATE_VIRTUAL_TO_PHYSICAL;
    struct UNLOAD_DLL_DEBUG_INFO;
    struct VIRTUAL_TO_PHYSICAL;
    struct WAITCHAIN_NODE_INFO;
    struct WDBGEXTS_CLR_DATA_INTERFACE;
    struct WDBGEXTS_DISASSEMBLE_BUFFER;
    struct WDBGEXTS_MODULE_IN_RANGE;
    struct WDBGEXTS_QUERY_INTERFACE;
    struct WDBGEXTS_THREAD_OS_INFO;
    struct WHEA_AER_BRIDGE_DESCRIPTOR;
    struct WHEA_AER_ENDPOINT_DESCRIPTOR;
    struct WHEA_AER_ROOTPORT_DESCRIPTOR;
    struct WHEA_DEVICE_DRIVER_DESCRIPTOR;
    struct WHEA_DRIVER_BUFFER_SET;
    struct WHEA_ERROR_SOURCE_CONFIGURATION_DD;
    struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER;
    struct WHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER_V1;
    struct WHEA_ERROR_SOURCE_DESCRIPTOR;
    struct WHEA_GENERIC_ERROR_DESCRIPTOR;
    struct WHEA_GENERIC_ERROR_DESCRIPTOR_V2;
    struct WHEA_IPF_CMC_DESCRIPTOR;
    struct WHEA_IPF_CPE_DESCRIPTOR;
    struct WHEA_IPF_MCA_DESCRIPTOR;
    struct WHEA_NOTIFICATION_DESCRIPTOR;
    union WHEA_NOTIFICATION_FLAGS;
    struct WHEA_PCI_SLOT_NUMBER;
    struct WHEA_XPF_CMC_DESCRIPTOR;
    struct WHEA_XPF_MCE_DESCRIPTOR;
    struct WHEA_XPF_MC_BANK_DESCRIPTOR;
    struct WHEA_XPF_NMI_DESCRIPTOR;
    struct WINDBG_EXTENSION_APIS;
    struct WINDBG_EXTENSION_APIS32;
    struct WINDBG_EXTENSION_APIS64;
    struct WINDBG_OLDKD_EXTENSION_APIS;
    struct WINDBG_OLD_EXTENSION_APIS;
    struct WOW64_CONTEXT;
    struct WOW64_DESCRIPTOR_TABLE_ENTRY;
    struct WOW64_FLOATING_SAVE_AREA;
    struct WOW64_LDT_ENTRY;
    union XPF_MCE_FLAGS;
    union XPF_MC_BANK_FLAGS;
    struct XSTATE_CONFIG_FEATURE_MSC_INFO;
    struct _GETSETBUSDATA;
    struct _IMAGEHLP_JIT_SYMBOL_MAP;
    struct __MIDL___MIDL_itf_jscript9diag_0000_0007_0001;
    struct AsyncIDebugApplicationNodeEvents;
    struct DebugBaseEventCallbacks;
    struct DebugBaseEventCallbacksWide;
    struct IActiveScript;
    struct IActiveScriptAuthor;
    struct IActiveScriptAuthorProcedure;
    struct IActiveScriptDebug32;
    struct IActiveScriptDebug64;
    struct IActiveScriptEncode;
    struct IActiveScriptError;
    struct IActiveScriptError64;
    struct IActiveScriptErrorDebug;
    struct IActiveScriptErrorDebug110;
    struct IActiveScriptGarbageCollector;
    struct IActiveScriptHostEncode;
    struct IActiveScriptParse32;
    struct IActiveScriptParse64;
    struct IActiveScriptParseProcedure2_32;
    struct IActiveScriptParseProcedure2_64;
    struct IActiveScriptParseProcedure32;
    struct IActiveScriptParseProcedure64;
    struct IActiveScriptParseProcedureOld32;
    struct IActiveScriptParseProcedureOld64;
    struct IActiveScriptProfilerCallback;
    struct IActiveScriptProfilerCallback2;
    struct IActiveScriptProfilerCallback3;
    struct IActiveScriptProfilerControl;
    struct IActiveScriptProfilerControl2;
    struct IActiveScriptProfilerControl3;
    struct IActiveScriptProfilerControl4;
    struct IActiveScriptProfilerControl5;
    struct IActiveScriptProfilerHeapEnum;
    struct IActiveScriptProperty;
    struct IActiveScriptSIPInfo;
    struct IActiveScriptSite;
    struct IActiveScriptSiteDebug32;
    struct IActiveScriptSiteDebug64;
    struct IActiveScriptSiteDebugEx;
    struct IActiveScriptSiteInterruptPoll;
    struct IActiveScriptSiteTraceInfo;
    struct IActiveScriptSiteUIControl;
    struct IActiveScriptSiteWindow;
    struct IActiveScriptStats;
    struct IActiveScriptStringCompare;
    struct IActiveScriptTraceInfo;
    struct IActiveScriptWinRTErrorDebug;
    struct IApplicationDebugger;
    struct IApplicationDebuggerUI;
    struct IBindEventHandler;
    struct ICodeAddressConcept;
    struct IComparableConcept;
    struct IDataModelConcept;
    struct IDataModelManager;
    struct IDataModelManager2;
    struct IDataModelNameBinder;
    struct IDataModelScript;
    struct IDataModelScriptClient;
    struct IDataModelScriptDebug;
    struct IDataModelScriptDebug2;
    struct IDataModelScriptDebugBreakpoint;
    struct IDataModelScriptDebugBreakpointEnumerator;
    struct IDataModelScriptDebugClient;
    struct IDataModelScriptDebugStack;
    struct IDataModelScriptDebugStackFrame;
    struct IDataModelScriptDebugVariableSetEnumerator;
    struct IDataModelScriptHostContext;
    struct IDataModelScriptManager;
    struct IDataModelScriptProvider;
    struct IDataModelScriptProviderEnumerator;
    struct IDataModelScriptTemplate;
    struct IDataModelScriptTemplateEnumerator;
    struct IDebugAdvanced;
    struct IDebugAdvanced2;
    struct IDebugAdvanced3;
    struct IDebugAdvanced4;
    struct IDebugApplication11032;
    struct IDebugApplication11064;
    struct IDebugApplication32;
    struct IDebugApplication64;
    struct IDebugApplicationNode;
    struct IDebugApplicationNode100;
    struct IDebugApplicationNodeEvents;
    struct IDebugApplicationThread;
    struct IDebugApplicationThread11032;
    struct IDebugApplicationThread11064;
    struct IDebugApplicationThread64;
    struct IDebugApplicationThreadEvents110;
    struct IDebugAsyncOperation;
    struct IDebugAsyncOperationCallBack;
    struct IDebugBreakpoint;
    struct IDebugBreakpoint2;
    struct IDebugBreakpoint3;
    struct IDebugClient;
    struct IDebugClient2;
    struct IDebugClient3;
    struct IDebugClient4;
    struct IDebugClient5;
    struct IDebugClient6;
    struct IDebugClient7;
    struct IDebugClient8;
    struct IDebugCodeContext;
    struct IDebugControl;
    struct IDebugControl2;
    struct IDebugControl3;
    struct IDebugControl4;
    struct IDebugControl5;
    struct IDebugControl6;
    struct IDebugControl7;
    struct IDebugCookie;
    struct IDebugDataSpaces;
    struct IDebugDataSpaces2;
    struct IDebugDataSpaces3;
    struct IDebugDataSpaces4;
    struct IDebugDocument;
    struct IDebugDocumentContext;
    struct IDebugDocumentHelper32;
    struct IDebugDocumentHelper64;
    struct IDebugDocumentHost;
    struct IDebugDocumentInfo;
    struct IDebugDocumentProvider;
    struct IDebugDocumentText;
    struct IDebugDocumentTextAuthor;
    struct IDebugDocumentTextEvents;
    struct IDebugDocumentTextExternalAuthor;
    struct IDebugEventCallbacks;
    struct IDebugEventCallbacksWide;
    struct IDebugEventContextCallbacks;
    struct IDebugExpression;
    struct IDebugExpressionCallBack;
    struct IDebugExpressionContext;
    struct IDebugExtendedProperty;
    struct IDebugFormatter;
    struct IDebugHelper;
    struct IDebugHost;
    struct IDebugHostBaseClass;
    struct IDebugHostConstant;
    struct IDebugHostContext;
    struct IDebugHostData;
    struct IDebugHostErrorSink;
    struct IDebugHostEvaluator;
    struct IDebugHostEvaluator2;
    struct IDebugHostExtensibility;
    struct IDebugHostField;
    struct IDebugHostMemory;
    struct IDebugHostMemory2;
    struct IDebugHostModule;
    struct IDebugHostModule2;
    struct IDebugHostModuleSignature;
    struct IDebugHostPublic;
    struct IDebugHostScriptHost;
    struct IDebugHostStatus;
    struct IDebugHostSymbol;
    struct IDebugHostSymbol2;
    struct IDebugHostSymbolEnumerator;
    struct IDebugHostSymbols;
    struct IDebugHostType;
    struct IDebugHostType2;
    struct IDebugHostTypeSignature;
    struct IDebugInputCallbacks;
    struct IDebugOutputCallbacks;
    struct IDebugOutputCallbacks2;
    struct IDebugOutputCallbacksWide;
    struct IDebugOutputStream;
    struct IDebugPlmClient;
    struct IDebugPlmClient2;
    struct IDebugPlmClient3;
    struct IDebugProperty;
    struct IDebugPropertyEnumType_All;
    struct IDebugPropertyEnumType_Arguments;
    struct IDebugPropertyEnumType_Locals;
    struct IDebugPropertyEnumType_LocalsPlusArgs;
    struct IDebugPropertyEnumType_Registers;
    struct IDebugRegisters;
    struct IDebugRegisters2;
    struct IDebugSessionProvider;
    struct IDebugStackFrame;
    struct IDebugStackFrame110;
    struct IDebugStackFrameSniffer;
    struct IDebugStackFrameSnifferEx32;
    struct IDebugStackFrameSnifferEx64;
    struct IDebugSymbolGroup;
    struct IDebugSymbolGroup2;
    struct IDebugSymbols;
    struct IDebugSymbols2;
    struct IDebugSymbols3;
    struct IDebugSymbols4;
    struct IDebugSymbols5;
    struct IDebugSyncOperation;
    struct IDebugSystemObjects;
    struct IDebugSystemObjects2;
    struct IDebugSystemObjects3;
    struct IDebugSystemObjects4;
    struct IDebugThreadCall32;
    struct IDebugThreadCall64;
    struct IDynamicConceptProviderConcept;
    struct IDynamicKeyProviderConcept;
    struct IEnumDebugApplicationNodes;
    struct IEnumDebugCodeContexts;
    struct IEnumDebugExpressionContexts;
    struct IEnumDebugExtendedPropertyInfo;
    struct IEnumDebugPropertyInfo;
    struct IEnumDebugStackFrames;
    struct IEnumDebugStackFrames64;
    struct IEnumJsStackFrames;
    struct IEnumRemoteDebugApplicationThreads;
    struct IEnumRemoteDebugApplications;
    struct IEquatableConcept;
    struct IHostDataModelAccess;
    struct IIndexableConcept;
    struct IIterableConcept;
    struct IJsDebug;
    struct IJsDebugBreakPoint;
    struct IJsDebugDataTarget;
    struct IJsDebugFrame;
    struct IJsDebugProcess;
    struct IJsDebugProperty;
    struct IJsDebugStackWalker;
    struct IJsEnumDebugProperty;
    struct IKeyEnumerator;
    struct IKeyStore;
    struct IMachineDebugManager;
    struct IMachineDebugManagerCookie;
    struct IMachineDebugManagerEvents;
    struct IModelIterator;
    struct IModelKeyReference;
    struct IModelKeyReference2;
    struct IModelMethod;
    struct IModelObject;
    struct IModelPropertyAccessor;
    struct IObjectSafety;
    struct IPerPropertyBrowsing2;
    struct IPreferredRuntimeTypeConcept;
    struct IProcessDebugManager32;
    struct IProcessDebugManager64;
    struct IProvideExpressionContexts;
    struct IRawEnumerator;
    struct IRemoteDebugApplication;
    struct IRemoteDebugApplication110;
    struct IRemoteDebugApplicationEvents;
    struct IRemoteDebugApplicationThread;
    struct IRemoteDebugCriticalErrorEvent110;
    struct IRemoteDebugInfoEvent110;
    struct IScriptEntry;
    struct IScriptInvocationContext;
    struct IScriptNode;
    struct IScriptScriptlet;
    struct ISimpleConnectionPoint;
    struct IStringDisplayableConcept;
    struct ITridentEventSink;
    struct IWebAppDiagnosticsObjectInitialization;
    struct IWebAppDiagnosticsSetup;
    struct IWebApplicationActivation;
    struct IWebApplicationAuthoringMode;
    struct IWebApplicationHost;
    struct IWebApplicationNavigationEvents;
    struct IWebApplicationScriptEvents;
    struct IWebApplicationUIEvents;
    struct IWebApplicationUpdateEvents;
#pragma endregion forward_declarations

#pragma region delegates
    using PDEBUG_EXTENSION_INITIALIZE = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t*, uint32_t*);
    using PDEBUG_EXTENSION_UNINITIALIZE = void __stdcall();
    using PDEBUG_EXTENSION_CANUNLOAD = Windows::Win32::Foundation::HRESULT __stdcall();
    using PDEBUG_EXTENSION_UNLOAD = void __stdcall();
    using PDEBUG_EXTENSION_NOTIFY = void __stdcall(uint32_t, uint64_t);
    using PDEBUG_EXTENSION_CALL = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::IDebugClient*, Windows::Win32::Foundation::PSTR);
    using PDEBUG_EXTENSION_KNOWN_STRUCT = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, uint64_t, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, uint32_t*);
    using PDEBUG_EXTENSION_KNOWN_STRUCT_EX = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::IDebugClient*, uint32_t, uint64_t, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, uint32_t*);
    using PDEBUG_EXTENSION_QUERY_VALUE_NAMES = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::IDebugClient*, uint32_t, Windows::Win32::Foundation::PWSTR, uint32_t, uint32_t*);
    using PDEBUG_EXTENSION_PROVIDE_VALUE = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::IDebugClient*, uint32_t, Windows::Win32::Foundation::PWSTR, uint64_t*, uint64_t*, uint32_t*, uint32_t*);
    using PDEBUG_STACK_PROVIDER_BEGINTHREADSTACKRECONSTRUCTION = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, void*, uint32_t);
    using PDEBUG_STACK_PROVIDER_RECONSTRUCTSTACK = Windows::Win32::Foundation::HRESULT __stdcall(uint32_t, Windows::Win32::System::Diagnostics::Debug::DEBUG_STACK_FRAME_EX*, uint32_t, Windows::Win32::System::Diagnostics::Debug::STACK_SYM_FRAME_INFO**, uint32_t*);
    using PDEBUG_STACK_PROVIDER_FREESTACKSYMFRAMES = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::STACK_SYM_FRAME_INFO*);
    using PDEBUG_STACK_PROVIDER_ENDTHREADSTACKRECONSTRUCTION = Windows::Win32::Foundation::HRESULT __stdcall();
    using PWINDBG_OUTPUT_ROUTINE = void __stdcall(Windows::Win32::Foundation::PSTR);
    using PWINDBG_GET_EXPRESSION = size_t __stdcall(Windows::Win32::Foundation::PSTR);
    using PWINDBG_GET_EXPRESSION32 = uint32_t __stdcall(Windows::Win32::Foundation::PSTR);
    using PWINDBG_GET_EXPRESSION64 = uint64_t __stdcall(Windows::Win32::Foundation::PSTR);
    using PWINDBG_GET_SYMBOL = void __stdcall(void*, Windows::Win32::Foundation::PSTR, size_t*);
    using PWINDBG_GET_SYMBOL32 = void __stdcall(uint32_t, Windows::Win32::Foundation::PSTR, uint32_t*);
    using PWINDBG_GET_SYMBOL64 = void __stdcall(uint64_t, Windows::Win32::Foundation::PSTR, uint64_t*);
    using PWINDBG_DISASM = uint32_t __stdcall(size_t*, Windows::Win32::Foundation::PSTR, uint32_t);
    using PWINDBG_DISASM32 = uint32_t __stdcall(uint32_t*, Windows::Win32::Foundation::PSTR, uint32_t);
    using PWINDBG_DISASM64 = uint32_t __stdcall(uint64_t*, Windows::Win32::Foundation::PSTR, uint32_t);
    using PWINDBG_CHECK_CONTROL_C = uint32_t __stdcall();
    using PWINDBG_READ_PROCESS_MEMORY_ROUTINE = uint32_t __stdcall(size_t, void*, uint32_t, uint32_t*);
    using PWINDBG_READ_PROCESS_MEMORY_ROUTINE32 = uint32_t __stdcall(uint32_t, void*, uint32_t, uint32_t*);
    using PWINDBG_READ_PROCESS_MEMORY_ROUTINE64 = uint32_t __stdcall(uint64_t, void*, uint32_t, uint32_t*);
    using PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE = uint32_t __stdcall(size_t, void*, uint32_t, uint32_t*);
    using PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE32 = uint32_t __stdcall(uint32_t, void*, uint32_t, uint32_t*);
    using PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE64 = uint32_t __stdcall(uint64_t, void*, uint32_t, uint32_t*);
    using PWINDBG_GET_THREAD_CONTEXT_ROUTINE = uint32_t __stdcall(uint32_t, Windows::Win32::System::Diagnostics::Debug::CONTEXT*, uint32_t);
    using PWINDBG_SET_THREAD_CONTEXT_ROUTINE = uint32_t __stdcall(uint32_t, Windows::Win32::System::Diagnostics::Debug::CONTEXT*, uint32_t);
    using PWINDBG_IOCTL_ROUTINE = uint32_t __stdcall(uint16_t, void*, uint32_t);
    using PWINDBG_OLDKD_READ_PHYSICAL_MEMORY = uint32_t __stdcall(uint64_t, void*, uint32_t, uint32_t*);
    using PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY = uint32_t __stdcall(uint64_t, void*, uint32_t, uint32_t*);
    using PWINDBG_STACKTRACE_ROUTINE = uint32_t __stdcall(uint32_t, uint32_t, uint32_t, Windows::Win32::System::Diagnostics::Debug::EXTSTACKTRACE*, uint32_t);
    using PWINDBG_STACKTRACE_ROUTINE32 = uint32_t __stdcall(uint32_t, uint32_t, uint32_t, Windows::Win32::System::Diagnostics::Debug::EXTSTACKTRACE32*, uint32_t);
    using PWINDBG_STACKTRACE_ROUTINE64 = uint32_t __stdcall(uint64_t, uint64_t, uint64_t, Windows::Win32::System::Diagnostics::Debug::EXTSTACKTRACE64*, uint32_t);
    using PWINDBG_OLD_EXTENSION_ROUTINE = void __stdcall(uint32_t, Windows::Win32::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS*, Windows::Win32::Foundation::PSTR);
    using PWINDBG_EXTENSION_ROUTINE = void __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR);
    using PWINDBG_EXTENSION_ROUTINE32 = void __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR);
    using PWINDBG_EXTENSION_ROUTINE64 = void __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, uint64_t, uint32_t, Windows::Win32::Foundation::PSTR);
    using PWINDBG_OLDKD_EXTENSION_ROUTINE = void __stdcall(uint32_t, Windows::Win32::System::Diagnostics::Debug::WINDBG_OLDKD_EXTENSION_APIS*, Windows::Win32::Foundation::PSTR);
    using PWINDBG_EXTENSION_DLL_INIT = void __stdcall(Windows::Win32::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS*, uint16_t, uint16_t);
    using PWINDBG_EXTENSION_DLL_INIT32 = void __stdcall(Windows::Win32::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS32*, uint16_t, uint16_t);
    using PWINDBG_EXTENSION_DLL_INIT64 = void __stdcall(Windows::Win32::System::Diagnostics::Debug::WINDBG_EXTENSION_APIS64*, uint16_t, uint16_t);
    using PWINDBG_CHECK_VERSION = uint32_t __stdcall();
    using PWINDBG_EXTENSION_API_VERSION = Windows::Win32::System::Diagnostics::Debug::EXT_API_VERSION* __stdcall();
    using PSYM_DUMP_FIELD_CALLBACK = uint32_t __stdcall(Windows::Win32::System::Diagnostics::Debug::FIELD_INFO*, void*);
    using PVECTORED_EXCEPTION_HANDLER = int32_t __stdcall(Windows::Win32::System::Diagnostics::Debug::EXCEPTION_POINTERS*);
    using LPTOP_LEVEL_EXCEPTION_FILTER = int32_t __stdcall(Windows::Win32::System::Diagnostics::Debug::EXCEPTION_POINTERS*);
    using PWAITCHAINCALLBACK = void __stdcall(void*, size_t, uint32_t, uint32_t*, Windows::Win32::System::Diagnostics::Debug::WAITCHAIN_NODE_INFO*, int32_t*);
    using PCOGETCALLSTATE = Windows::Win32::Foundation::HRESULT __stdcall(int32_t, uint32_t*);
    using PCOGETACTIVATIONSTATE = Windows::Win32::Foundation::HRESULT __stdcall(::win32::guid, uint32_t, uint32_t*);
    using MINIDUMP_CALLBACK_ROUTINE = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::System::Diagnostics::Debug::MINIDUMP_CALLBACK_INPUT*, Windows::Win32::System::Diagnostics::Debug::MINIDUMP_CALLBACK_OUTPUT*);
    using RegisterAuthoringClientFunctionType = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::IWebApplicationAuthoringMode*, Windows::Win32::System::Diagnostics::Debug::IWebApplicationHost*);
    using UnregisterAuthoringClientFunctionType = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Diagnostics::Debug::IWebApplicationHost*);
    using PIMAGEHLP_STATUS_ROUTINE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::IMAGEHLP_STATUS_REASON, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, size_t, size_t);
    using PIMAGEHLP_STATUS_ROUTINE32 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::IMAGEHLP_STATUS_REASON, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, uint32_t, size_t);
    using PIMAGEHLP_STATUS_ROUTINE64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::IMAGEHLP_STATUS_REASON, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, uint64_t, size_t);
    using DIGEST_FUNCTION = Windows::Win32::Foundation::BOOL __stdcall(void*, uint8_t*, uint32_t);
    using PFIND_DEBUG_FILE_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::PSTR, void*);
    using PFIND_DEBUG_FILE_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::PWSTR, void*);
    using PFINDFILEINPATHCALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, void*);
    using PFINDFILEINPATHCALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, void*);
    using PFIND_EXE_FILE_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::PSTR, void*);
    using PFIND_EXE_FILE_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::PWSTR, void*);
    using PENUMDIRTREE_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, void*);
    using PENUMDIRTREE_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, void*);
    using PREAD_PROCESS_MEMORY_ROUTINE64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint64_t, void*, uint32_t, uint32_t*);
    using PFUNCTION_TABLE_ACCESS_ROUTINE64 = void* __stdcall(Windows::Win32::Foundation::HANDLE, uint64_t);
    using PGET_MODULE_BASE_ROUTINE64 = uint64_t __stdcall(Windows::Win32::Foundation::HANDLE, uint64_t);
    using PTRANSLATE_ADDRESS_ROUTINE64 = uint64_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::System::Diagnostics::Debug::ADDRESS64*);
    using PSYM_ENUMMODULES_CALLBACK64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint64_t, void*);
    using PSYM_ENUMMODULES_CALLBACKW64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, uint64_t, void*);
    using PENUMLOADED_MODULES_CALLBACK64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint64_t, uint32_t, void*);
    using PENUMLOADED_MODULES_CALLBACKW64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, uint64_t, uint32_t, void*);
    using PSYM_ENUMSYMBOLS_CALLBACK64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint64_t, uint32_t, void*);
    using PSYM_ENUMSYMBOLS_CALLBACK64W = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, uint64_t, uint32_t, void*);
    using PSYMBOL_REGISTERED_CALLBACK64 = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, uint64_t, uint64_t);
    using PSYMBOL_FUNCENTRY_CALLBACK = void* __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, void*);
    using PSYMBOL_FUNCENTRY_CALLBACK64 = void* __stdcall(Windows::Win32::Foundation::HANDLE, uint64_t, uint64_t);
    using PSYM_ENUMSOURCEFILES_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::SOURCEFILE*, void*);
    using PSYM_ENUMSOURCEFILES_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::SOURCEFILEW*, void*);
    using PSYM_ENUMLINES_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::SRCCODEINFO*, void*);
    using PSYM_ENUMLINES_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::SRCCODEINFOW*, void*);
    using PENUMSOURCEFILETOKENSCALLBACK = Windows::Win32::Foundation::BOOL __stdcall(void*, size_t);
    using PSYM_ENUMPROCESSES_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, void*);
    using PSYM_ENUMERATESYMBOLS_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::SYMBOL_INFO*, uint32_t, void*);
    using PSYM_ENUMERATESYMBOLS_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::SYMBOL_INFOW*, uint32_t, void*);
    using SYMADDSOURCESTREAM = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint64_t, Windows::Win32::Foundation::PSTR, uint8_t*, size_t);
    using SYMADDSOURCESTREAMA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint64_t, Windows::Win32::Foundation::PSTR, uint8_t*, size_t);
    using PDBGHELP_CREATE_USER_DUMP_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, void**, uint32_t*, void*);
    using PSYMBOLSERVERPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERPROCA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERPROCW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR);
    using PSYMBOLSERVERBYINDEXPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERBYINDEXPROCA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERBYINDEXPROCW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR);
    using PSYMBOLSERVEROPENPROC = Windows::Win32::Foundation::BOOL __stdcall();
    using PSYMBOLSERVERCLOSEPROC = Windows::Win32::Foundation::BOOL __stdcall();
    using PSYMBOLSERVERSETOPTIONSPROC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint64_t);
    using PSYMBOLSERVERSETOPTIONSWPROC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint64_t);
    using PSYMBOLSERVERCALLBACKPROC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint64_t, uint64_t);
    using PSYMBOLSERVERGETOPTIONSPROC = size_t __stdcall();
    using PSYMBOLSERVERPINGPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERPINGPROCA = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERPINGPROCW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR);
    using PSYMBOLSERVERGETVERSION = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::Diagnostics::Debug::API_VERSION*);
    using PSYMBOLSERVERDELTANAME = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, void*, uint32_t, uint32_t, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR, size_t);
    using PSYMBOLSERVERDELTANAMEW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, void*, uint32_t, uint32_t, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, size_t);
    using PSYMBOLSERVERGETSUPPLEMENT = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, size_t);
    using PSYMBOLSERVERGETSUPPLEMENTW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, size_t);
    using PSYMBOLSERVERSTORESUPPLEMENT = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, size_t, uint32_t);
    using PSYMBOLSERVERSTORESUPPLEMENTW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, size_t, uint32_t);
    using PSYMBOLSERVERGETINDEXSTRING = Windows::Win32::Foundation::BOOL __stdcall(void*, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR, size_t);
    using PSYMBOLSERVERGETINDEXSTRINGW = Windows::Win32::Foundation::BOOL __stdcall(void*, uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, size_t);
    using PSYMBOLSERVERSTOREFILE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PSTR, size_t, uint32_t);
    using PSYMBOLSERVERSTOREFILEW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, size_t, uint32_t);
    using PSYMBOLSERVERISSTORE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR);
    using PSYMBOLSERVERISSTOREW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR);
    using PSYMBOLSERVERVERSION = uint32_t __stdcall();
    using PSYMBOLSERVERMESSAGEPROC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint64_t, uint64_t);
    using PSYMBOLSERVERWEXPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, void*, uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, Windows::Win32::System::Diagnostics::Debug::SYMSRV_EXTENDED_OUTPUT_DATA*);
    using PSYMBOLSERVERPINGPROCWEX = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR);
    using PSYMBOLSERVERGETOPTIONDATAPROC = Windows::Win32::Foundation::BOOL __stdcall(size_t, uint64_t*);
    using PSYMBOLSERVERSETHTTPAUTHHEADER = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR);
    using LPCALL_BACK_USER_INTERRUPT_ROUTINE = uint32_t __stdcall();
    using WHEA_ERROR_SOURCE_INITIALIZE_DEVICE_DRIVER = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint32_t);
    using WHEA_ERROR_SOURCE_UNINITIALIZE_DEVICE_DRIVER = void __stdcall(void*);
    using WHEA_ERROR_SOURCE_CORRECT_DEVICE_DRIVER = Windows::Win32::Foundation::NTSTATUS __stdcall(void*, uint32_t*);
    using PREAD_PROCESS_MEMORY_ROUTINE = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, void*, uint32_t, uint32_t*);
    using PFUNCTION_TABLE_ACCESS_ROUTINE = void* __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
    using PGET_MODULE_BASE_ROUTINE = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
    using PTRANSLATE_ADDRESS_ROUTINE = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::System::Diagnostics::Debug::ADDRESS*);
    using PSYM_ENUMMODULES_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint32_t, void*);
    using PSYM_ENUMSYMBOLS_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint32_t, uint32_t, void*);
    using PSYM_ENUMSYMBOLS_CALLBACKW = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PWSTR, uint32_t, uint32_t, void*);
    using PENUMLOADED_MODULES_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint32_t, uint32_t, void*);
    using PSYMBOL_REGISTERED_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, void*, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
