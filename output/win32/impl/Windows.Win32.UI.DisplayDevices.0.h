// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UI_DisplayDevices_0_H
#define WIN32_Windows_Win32_UI_DisplayDevices_0_H
WIN32_EXPORT namespace win32::Windows::Win32::UI::DisplayDevices
{
#pragma region enums
    enum class DISPLAYCONFIG_DEVICE_INFO_TYPE : int32_t
    {
        DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
        DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
        DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
        DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
        DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
        DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
        DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
        DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
        DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9,
        DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10,
        DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11,
        DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 12,
        DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 13,
        DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_MODE_INFO_TYPE : int32_t
    {
        DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
        DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
        DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
        DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_PIXELFORMAT : int32_t
    {
        DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
        DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
        DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
        DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
        DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
        DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_ROTATION : int32_t
    {
        DISPLAYCONFIG_ROTATION_IDENTITY = 1,
        DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
        DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
        DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
        DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_SCALING : int32_t
    {
        DISPLAYCONFIG_SCALING_IDENTITY = 1,
        DISPLAYCONFIG_SCALING_CENTERED = 2,
        DISPLAYCONFIG_SCALING_STRETCHED = 3,
        DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
        DISPLAYCONFIG_SCALING_CUSTOM = 5,
        DISPLAYCONFIG_SCALING_PREFERRED = 128,
        DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_SCANLINE_ORDERING : int32_t
    {
        DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
        DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
        DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
        DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
        DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
        DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_TOPOLOGY_ID : int32_t
    {
        DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1,
        DISPLAYCONFIG_TOPOLOGY_CLONE = 2,
        DISPLAYCONFIG_TOPOLOGY_EXTEND = 4,
        DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8,
        DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1,
    };
    enum class DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY : int32_t
    {
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 18,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648,
        DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct BLENDOBJ;
    struct BRUSHOBJ;
    struct CIECHROMA;
    struct CLIPLINE;
    struct CLIPOBJ;
    struct COLORINFO;
    struct DEVHTADJDATA;
    struct DEVHTINFO;
    struct DEVINFO;
    struct DISPLAYCONFIG_2DREGION;
    struct DISPLAYCONFIG_ADAPTER_NAME;
    struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO;
    struct DISPLAYCONFIG_DEVICE_INFO_HEADER;
    struct DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
    struct DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION;
    struct DISPLAYCONFIG_MODE_INFO;
    struct DISPLAYCONFIG_PATH_INFO;
    struct DISPLAYCONFIG_PATH_SOURCE_INFO;
    struct DISPLAYCONFIG_PATH_TARGET_INFO;
    struct DISPLAYCONFIG_RATIONAL;
    struct DISPLAYCONFIG_SDR_WHITE_LEVEL;
    struct DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
    struct DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION;
    struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
    struct DISPLAYCONFIG_SOURCE_DEVICE_NAME;
    struct DISPLAYCONFIG_SOURCE_MODE;
    struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;
    struct DISPLAYCONFIG_TARGET_BASE_TYPE;
    struct DISPLAYCONFIG_TARGET_DEVICE_NAME;
    struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
    struct DISPLAYCONFIG_TARGET_MODE;
    struct DISPLAYCONFIG_TARGET_PREFERRED_MODE;
    struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
    struct DRIVEROBJ;
    struct DRVENABLEDATA;
    struct DRVFN;
    struct ENGSAFESEMAPHORE;
    struct ENG_TIME_FIELDS;
    struct ENUMRECTS;
    struct FD_DEVICEMETRICS;
    struct FD_GLYPHATTR;
    struct FD_GLYPHSET;
    struct FD_KERNINGPAIR;
    struct FD_XFORM;
    struct FONTDIFF;
    struct FONTINFO;
    struct FONTOBJ;
    struct FONTSIM;
    struct GAMMARAMP;
    struct GDIINFO;
    struct GLYPHBITS;
    struct GLYPHDATA;
    union GLYPHDEF;
    struct GLYPHPOS;
    struct HSEMAPHORE;
    struct HSURF;
    struct IFIEXTRA;
    struct IFIMETRICS;
    struct LINEATTRS;
    struct PALOBJ;
    struct PATHDATA;
    struct PATHOBJ;
    struct PERBANDINFO;
    struct RUN;
    struct STROBJ;
    struct SURFOBJ;
    struct TYPE1_FONT;
    struct VIDEOPARAMETERS;
    struct WCRUN;
    struct WNDOBJ;
    struct XFORML;
    struct XLATEOBJ;
#pragma endregion forward_declarations

#pragma region delegates
    using PFN_DrvQueryGlyphAttrs = Windows::Win32::UI::DisplayDevices::FD_GLYPHATTR* __stdcall(Windows::Win32::UI::DisplayDevices::FONTOBJ*, uint32_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
