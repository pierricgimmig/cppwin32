// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Usb_2_H
#define WIN32_Windows_Win32_Devices_Usb_2_H
#include "win32/Windows.Win32.Devices.Usb.h"
#include "win32/impl/Windows.Win32.Devices.Usb.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Usb
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_Initialize(win32::Windows::Win32::Foundation::HANDLE DeviceHandle, void** InterfaceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DeviceHandle);
        ORBIT_TRACK_PARAM(InterfaceHandle);

        auto win32_impl_result = g_api_table.WinUsb_Initialize(DeviceHandle, InterfaceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_Free(void* InterfaceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);

        auto win32_impl_result = g_api_table.WinUsb_Free(InterfaceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetAssociatedInterface(void* InterfaceHandle, uint8_t AssociatedInterfaceIndex, void** AssociatedInterfaceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(AssociatedInterfaceIndex);
        ORBIT_TRACK_PARAM(AssociatedInterfaceHandle);

        auto win32_impl_result = g_api_table.WinUsb_GetAssociatedInterface(InterfaceHandle, AssociatedInterfaceIndex, AssociatedInterfaceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetDescriptor(void* InterfaceHandle, uint8_t DescriptorType, uint8_t Index, uint16_t LanguageID, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(DescriptorType);
        ORBIT_TRACK_PARAM(Index);
        ORBIT_TRACK_PARAM(LanguageID);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(LengthTransferred);

        auto win32_impl_result = g_api_table.WinUsb_GetDescriptor(InterfaceHandle, DescriptorType, Index, LanguageID, Buffer, BufferLength, LengthTransferred);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_QueryInterfaceSettings(void* InterfaceHandle, uint8_t AlternateInterfaceNumber, win32::Windows::Win32::Devices::Usb::USB_INTERFACE_DESCRIPTOR* UsbAltInterfaceDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(AlternateInterfaceNumber);
        ORBIT_TRACK_PARAM(UsbAltInterfaceDescriptor);

        auto win32_impl_result = g_api_table.WinUsb_QueryInterfaceSettings(InterfaceHandle, AlternateInterfaceNumber, UsbAltInterfaceDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_QueryDeviceInformation(void* InterfaceHandle, uint32_t InformationType, uint32_t* BufferLength, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(InformationType);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.WinUsb_QueryDeviceInformation(InterfaceHandle, InformationType, BufferLength, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_SetCurrentAlternateSetting(void* InterfaceHandle, uint8_t SettingNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(SettingNumber);

        auto win32_impl_result = g_api_table.WinUsb_SetCurrentAlternateSetting(InterfaceHandle, SettingNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetCurrentAlternateSetting(void* InterfaceHandle, uint8_t* SettingNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(SettingNumber);

        auto win32_impl_result = g_api_table.WinUsb_GetCurrentAlternateSetting(InterfaceHandle, SettingNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_QueryPipe(void* InterfaceHandle, uint8_t AlternateInterfaceNumber, uint8_t PipeIndex, win32::Windows::Win32::Devices::Usb::WINUSB_PIPE_INFORMATION* PipeInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(AlternateInterfaceNumber);
        ORBIT_TRACK_PARAM(PipeIndex);
        ORBIT_TRACK_PARAM(PipeInformation);

        auto win32_impl_result = g_api_table.WinUsb_QueryPipe(InterfaceHandle, AlternateInterfaceNumber, PipeIndex, PipeInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_QueryPipeEx(void* InterfaceHandle, uint8_t AlternateSettingNumber, uint8_t PipeIndex, win32::Windows::Win32::Devices::Usb::WINUSB_PIPE_INFORMATION_EX* PipeInformationEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(AlternateSettingNumber);
        ORBIT_TRACK_PARAM(PipeIndex);
        ORBIT_TRACK_PARAM(PipeInformationEx);

        auto win32_impl_result = g_api_table.WinUsb_QueryPipeEx(InterfaceHandle, AlternateSettingNumber, PipeIndex, PipeInformationEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_SetPipePolicy(void* InterfaceHandle, uint8_t PipeID, uint32_t PolicyType, uint32_t ValueLength, void* Value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);
        ORBIT_TRACK_PARAM(PolicyType);
        ORBIT_TRACK_PARAM(ValueLength);
        ORBIT_TRACK_PARAM(Value);

        auto win32_impl_result = g_api_table.WinUsb_SetPipePolicy(InterfaceHandle, PipeID, PolicyType, ValueLength, Value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetPipePolicy(void* InterfaceHandle, uint8_t PipeID, uint32_t PolicyType, uint32_t* ValueLength, void* Value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);
        ORBIT_TRACK_PARAM(PolicyType);
        ORBIT_TRACK_PARAM(ValueLength);
        ORBIT_TRACK_PARAM(Value);

        auto win32_impl_result = g_api_table.WinUsb_GetPipePolicy(InterfaceHandle, PipeID, PolicyType, ValueLength, Value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_ReadPipe(void* InterfaceHandle, uint8_t PipeID, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(LengthTransferred);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_ReadPipe(InterfaceHandle, PipeID, Buffer, BufferLength, LengthTransferred, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_WritePipe(void* InterfaceHandle, uint8_t PipeID, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(LengthTransferred);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_WritePipe(InterfaceHandle, PipeID, Buffer, BufferLength, LengthTransferred, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_ControlTransfer(void* InterfaceHandle, win32::Windows::Win32::Devices::Usb::WINUSB_SETUP_PACKET SetupPacket, uint8_t* Buffer, uint32_t BufferLength, uint32_t* LengthTransferred, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(SetupPacket);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(LengthTransferred);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_ControlTransfer(InterfaceHandle, SetupPacket, Buffer, BufferLength, LengthTransferred, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_ResetPipe(void* InterfaceHandle, uint8_t PipeID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);

        auto win32_impl_result = g_api_table.WinUsb_ResetPipe(InterfaceHandle, PipeID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_AbortPipe(void* InterfaceHandle, uint8_t PipeID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);

        auto win32_impl_result = g_api_table.WinUsb_AbortPipe(InterfaceHandle, PipeID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_FlushPipe(void* InterfaceHandle, uint8_t PipeID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);

        auto win32_impl_result = g_api_table.WinUsb_FlushPipe(InterfaceHandle, PipeID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_SetPowerPolicy(void* InterfaceHandle, uint32_t PolicyType, uint32_t ValueLength, void* Value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PolicyType);
        ORBIT_TRACK_PARAM(ValueLength);
        ORBIT_TRACK_PARAM(Value);

        auto win32_impl_result = g_api_table.WinUsb_SetPowerPolicy(InterfaceHandle, PolicyType, ValueLength, Value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetPowerPolicy(void* InterfaceHandle, uint32_t PolicyType, uint32_t* ValueLength, void* Value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PolicyType);
        ORBIT_TRACK_PARAM(ValueLength);
        ORBIT_TRACK_PARAM(Value);

        auto win32_impl_result = g_api_table.WinUsb_GetPowerPolicy(InterfaceHandle, PolicyType, ValueLength, Value);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetOverlappedResult(void* InterfaceHandle, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, uint32_t* lpNumberOfBytesTransferred, win32::Windows::Win32::Foundation::BOOL bWait) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpNumberOfBytesTransferred);
        ORBIT_TRACK_PARAM(bWait);

        auto win32_impl_result = g_api_table.WinUsb_GetOverlappedResult(InterfaceHandle, lpOverlapped, lpNumberOfBytesTransferred, bWait);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Devices::Usb::USB_INTERFACE_DESCRIPTOR* __stdcall ORBIT_IMPL_WinUsb_ParseConfigurationDescriptor(win32::Windows::Win32::Devices::Usb::USB_CONFIGURATION_DESCRIPTOR* ConfigurationDescriptor, void* StartPosition, int32_t InterfaceNumber, int32_t AlternateSetting, int32_t InterfaceClass, int32_t InterfaceSubClass, int32_t InterfaceProtocol) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConfigurationDescriptor);
        ORBIT_TRACK_PARAM(StartPosition);
        ORBIT_TRACK_PARAM(InterfaceNumber);
        ORBIT_TRACK_PARAM(AlternateSetting);
        ORBIT_TRACK_PARAM(InterfaceClass);
        ORBIT_TRACK_PARAM(InterfaceSubClass);
        ORBIT_TRACK_PARAM(InterfaceProtocol);

        auto win32_impl_result = g_api_table.WinUsb_ParseConfigurationDescriptor(ConfigurationDescriptor, StartPosition, InterfaceNumber, AlternateSetting, InterfaceClass, InterfaceSubClass, InterfaceProtocol);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Devices::Usb::USB_COMMON_DESCRIPTOR* __stdcall ORBIT_IMPL_WinUsb_ParseDescriptors(void* DescriptorBuffer, uint32_t TotalLength, void* StartPosition, int32_t DescriptorType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DescriptorBuffer);
        ORBIT_TRACK_PARAM(TotalLength);
        ORBIT_TRACK_PARAM(StartPosition);
        ORBIT_TRACK_PARAM(DescriptorType);

        auto win32_impl_result = g_api_table.WinUsb_ParseDescriptors(DescriptorBuffer, TotalLength, StartPosition, DescriptorType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetCurrentFrameNumber(void* InterfaceHandle, uint32_t* CurrentFrameNumber, win32::Windows::Win32::Foundation::LARGE_INTEGER* TimeStamp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(CurrentFrameNumber);
        ORBIT_TRACK_PARAM(TimeStamp);

        auto win32_impl_result = g_api_table.WinUsb_GetCurrentFrameNumber(InterfaceHandle, CurrentFrameNumber, TimeStamp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetAdjustedFrameNumber(uint32_t* CurrentFrameNumber, win32::Windows::Win32::Foundation::LARGE_INTEGER TimeStamp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CurrentFrameNumber);
        ORBIT_TRACK_PARAM(TimeStamp);

        auto win32_impl_result = g_api_table.WinUsb_GetAdjustedFrameNumber(CurrentFrameNumber, TimeStamp);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_RegisterIsochBuffer(void* InterfaceHandle, uint8_t PipeID, uint8_t* Buffer, uint32_t BufferLength, void** IsochBufferHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(PipeID);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(IsochBufferHandle);

        auto win32_impl_result = g_api_table.WinUsb_RegisterIsochBuffer(InterfaceHandle, PipeID, Buffer, BufferLength, IsochBufferHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_UnregisterIsochBuffer(void* IsochBufferHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IsochBufferHandle);

        auto win32_impl_result = g_api_table.WinUsb_UnregisterIsochBuffer(IsochBufferHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_WriteIsochPipe(void* BufferHandle, uint32_t Offset, uint32_t Length, uint32_t* FrameNumber, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferHandle);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(Length);
        ORBIT_TRACK_PARAM(FrameNumber);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_WriteIsochPipe(BufferHandle, Offset, Length, FrameNumber, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_ReadIsochPipe(void* BufferHandle, uint32_t Offset, uint32_t Length, uint32_t* FrameNumber, uint32_t NumberOfPackets, win32::Windows::Win32::Devices::Usb::USBD_ISO_PACKET_DESCRIPTOR* IsoPacketDescriptors, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferHandle);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(Length);
        ORBIT_TRACK_PARAM(FrameNumber);
        ORBIT_TRACK_PARAM(NumberOfPackets);
        ORBIT_TRACK_PARAM(IsoPacketDescriptors);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_ReadIsochPipe(BufferHandle, Offset, Length, FrameNumber, NumberOfPackets, IsoPacketDescriptors, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_WriteIsochPipeAsap(void* BufferHandle, uint32_t Offset, uint32_t Length, win32::Windows::Win32::Foundation::BOOL ContinueStream, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferHandle);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(Length);
        ORBIT_TRACK_PARAM(ContinueStream);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_WriteIsochPipeAsap(BufferHandle, Offset, Length, ContinueStream, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_ReadIsochPipeAsap(void* BufferHandle, uint32_t Offset, uint32_t Length, win32::Windows::Win32::Foundation::BOOL ContinueStream, uint32_t NumberOfPackets, win32::Windows::Win32::Devices::Usb::USBD_ISO_PACKET_DESCRIPTOR* IsoPacketDescriptors, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferHandle);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(Length);
        ORBIT_TRACK_PARAM(ContinueStream);
        ORBIT_TRACK_PARAM(NumberOfPackets);
        ORBIT_TRACK_PARAM(IsoPacketDescriptors);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.WinUsb_ReadIsochPipeAsap(BufferHandle, Offset, Length, ContinueStream, NumberOfPackets, IsoPacketDescriptors, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_StartTrackingForTimeSync(void* InterfaceHandle, win32::Windows::Win32::Devices::Usb::USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION* StartTrackingInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(StartTrackingInfo);

        auto win32_impl_result = g_api_table.WinUsb_StartTrackingForTimeSync(InterfaceHandle, StartTrackingInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_GetCurrentFrameNumberAndQpc(void* InterfaceHandle, win32::Windows::Win32::Devices::Usb::USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION* FrameQpcInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(FrameQpcInfo);

        auto win32_impl_result = g_api_table.WinUsb_GetCurrentFrameNumberAndQpc(InterfaceHandle, FrameQpcInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WinUsb_StopTrackingForTimeSync(void* InterfaceHandle, win32::Windows::Win32::Devices::Usb::USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION* StopTrackingInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InterfaceHandle);
        ORBIT_TRACK_PARAM(StopTrackingInfo);

        auto win32_impl_result = g_api_table.WinUsb_StopTrackingForTimeSync(InterfaceHandle, StopTrackingInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
