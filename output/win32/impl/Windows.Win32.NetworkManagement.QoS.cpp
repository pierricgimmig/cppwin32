// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_QoS_2_H
#define WIN32_Windows_Win32_NetworkManagement_QoS_2_H
#include "win32/Windows.Win32.NetworkManagement.QoS.h"
#include "win32/impl/Windows.Win32.NetworkManagement.QoS.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::QoS
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSCreateHandle(win32::Windows::Win32::NetworkManagement::QoS::QOS_VERSION* Version, win32::Windows::Win32::Foundation::HANDLE* QOSHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(QOSHandle);

        auto win32_impl_result = g_api_table.QOSCreateHandle(Version, QOSHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSCloseHandle(win32::Windows::Win32::Foundation::HANDLE QOSHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);

        auto win32_impl_result = g_api_table.QOSCloseHandle(QOSHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSStartTrackingClient(win32::Windows::Win32::Foundation::HANDLE QOSHandle, win32::Windows::Win32::Networking::WinSock::SOCKADDR* DestAddr, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(DestAddr);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.QOSStartTrackingClient(QOSHandle, DestAddr, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSStopTrackingClient(win32::Windows::Win32::Foundation::HANDLE QOSHandle, win32::Windows::Win32::Networking::WinSock::SOCKADDR* DestAddr, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(DestAddr);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.QOSStopTrackingClient(QOSHandle, DestAddr, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSEnumerateFlows(win32::Windows::Win32::Foundation::HANDLE QOSHandle, uint32_t* Size, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.QOSEnumerateFlows(QOSHandle, Size, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSAddSocketToFlow(win32::Windows::Win32::Foundation::HANDLE QOSHandle, win32::Windows::Win32::Networking::WinSock::SOCKET Socket, win32::Windows::Win32::Networking::WinSock::SOCKADDR* DestAddr, win32::Windows::Win32::NetworkManagement::QoS::QOS_TRAFFIC_TYPE TrafficType, uint32_t Flags, uint32_t* FlowId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(DestAddr);
        ORBIT_TRACK_PARAM(TrafficType);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(FlowId);

        auto win32_impl_result = g_api_table.QOSAddSocketToFlow(QOSHandle, Socket, DestAddr, TrafficType, Flags, FlowId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSRemoveSocketFromFlow(win32::Windows::Win32::Foundation::HANDLE QOSHandle, win32::Windows::Win32::Networking::WinSock::SOCKET Socket, uint32_t FlowId, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(Socket);
        ORBIT_TRACK_PARAM(FlowId);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.QOSRemoveSocketFromFlow(QOSHandle, Socket, FlowId, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSSetFlow(win32::Windows::Win32::Foundation::HANDLE QOSHandle, uint32_t FlowId, win32::Windows::Win32::NetworkManagement::QoS::QOS_SET_FLOW Operation, uint32_t Size, void* Buffer, uint32_t Flags, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(FlowId);
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.QOSSetFlow(QOSHandle, FlowId, Operation, Size, Buffer, Flags, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSQueryFlow(win32::Windows::Win32::Foundation::HANDLE QOSHandle, uint32_t FlowId, win32::Windows::Win32::NetworkManagement::QoS::QOS_QUERY_FLOW Operation, uint32_t* Size, void* Buffer, uint32_t Flags, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(FlowId);
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.QOSQueryFlow(QOSHandle, FlowId, Operation, Size, Buffer, Flags, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSNotifyFlow(win32::Windows::Win32::Foundation::HANDLE QOSHandle, uint32_t FlowId, win32::Windows::Win32::NetworkManagement::QoS::QOS_NOTIFY_FLOW Operation, uint32_t* Size, void* Buffer, uint32_t Flags, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(FlowId);
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.QOSNotifyFlow(QOSHandle, FlowId, Operation, Size, Buffer, Flags, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QOSCancel(win32::Windows::Win32::Foundation::HANDLE QOSHandle, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(QOSHandle);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.QOSCancel(QOSHandle, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcRegisterClient(uint32_t TciVersion, win32::Windows::Win32::Foundation::HANDLE ClRegCtx, win32::Windows::Win32::NetworkManagement::QoS::TCI_CLIENT_FUNC_LIST* ClientHandlerList, win32::Windows::Win32::Foundation::HANDLE* pClientHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TciVersion);
        ORBIT_TRACK_PARAM(ClRegCtx);
        ORBIT_TRACK_PARAM(ClientHandlerList);
        ORBIT_TRACK_PARAM(pClientHandle);

        auto win32_impl_result = g_api_table.TcRegisterClient(TciVersion, ClRegCtx, ClientHandlerList, pClientHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcEnumerateInterfaces(win32::Windows::Win32::Foundation::HANDLE ClientHandle, uint32_t* pBufferSize, win32::Windows::Win32::NetworkManagement::QoS::TC_IFC_DESCRIPTOR* InterfaceBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ClientHandle);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(InterfaceBuffer);

        auto win32_impl_result = g_api_table.TcEnumerateInterfaces(ClientHandle, pBufferSize, InterfaceBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcOpenInterfaceA(win32::Windows::Win32::Foundation::PSTR pInterfaceName, win32::Windows::Win32::Foundation::HANDLE ClientHandle, win32::Windows::Win32::Foundation::HANDLE ClIfcCtx, win32::Windows::Win32::Foundation::HANDLE* pIfcHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterfaceName);
        ORBIT_TRACK_PARAM(ClientHandle);
        ORBIT_TRACK_PARAM(ClIfcCtx);
        ORBIT_TRACK_PARAM(pIfcHandle);

        auto win32_impl_result = g_api_table.TcOpenInterfaceA(pInterfaceName, ClientHandle, ClIfcCtx, pIfcHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcOpenInterfaceW(win32::Windows::Win32::Foundation::PWSTR pInterfaceName, win32::Windows::Win32::Foundation::HANDLE ClientHandle, win32::Windows::Win32::Foundation::HANDLE ClIfcCtx, win32::Windows::Win32::Foundation::HANDLE* pIfcHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInterfaceName);
        ORBIT_TRACK_PARAM(ClientHandle);
        ORBIT_TRACK_PARAM(ClIfcCtx);
        ORBIT_TRACK_PARAM(pIfcHandle);

        auto win32_impl_result = g_api_table.TcOpenInterfaceW(pInterfaceName, ClientHandle, ClIfcCtx, pIfcHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcCloseInterface(win32::Windows::Win32::Foundation::HANDLE IfcHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfcHandle);

        auto win32_impl_result = g_api_table.TcCloseInterface(IfcHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcQueryInterface(win32::Windows::Win32::Foundation::HANDLE IfcHandle, ::win32::guid* pGuidParam, win32::Windows::Win32::Foundation::BOOLEAN NotifyChange, uint32_t* pBufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfcHandle);
        ORBIT_TRACK_PARAM(pGuidParam);
        ORBIT_TRACK_PARAM(NotifyChange);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcQueryInterface(IfcHandle, pGuidParam, NotifyChange, pBufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcSetInterface(win32::Windows::Win32::Foundation::HANDLE IfcHandle, ::win32::guid* pGuidParam, uint32_t BufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfcHandle);
        ORBIT_TRACK_PARAM(pGuidParam);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcSetInterface(IfcHandle, pGuidParam, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcQueryFlowA(win32::Windows::Win32::Foundation::PSTR pFlowName, ::win32::guid* pGuidParam, uint32_t* pBufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pFlowName);
        ORBIT_TRACK_PARAM(pGuidParam);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcQueryFlowA(pFlowName, pGuidParam, pBufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcQueryFlowW(win32::Windows::Win32::Foundation::PWSTR pFlowName, ::win32::guid* pGuidParam, uint32_t* pBufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pFlowName);
        ORBIT_TRACK_PARAM(pGuidParam);
        ORBIT_TRACK_PARAM(pBufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcQueryFlowW(pFlowName, pGuidParam, pBufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcSetFlowA(win32::Windows::Win32::Foundation::PSTR pFlowName, ::win32::guid* pGuidParam, uint32_t BufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pFlowName);
        ORBIT_TRACK_PARAM(pGuidParam);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcSetFlowA(pFlowName, pGuidParam, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcSetFlowW(win32::Windows::Win32::Foundation::PWSTR pFlowName, ::win32::guid* pGuidParam, uint32_t BufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pFlowName);
        ORBIT_TRACK_PARAM(pGuidParam);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcSetFlowW(pFlowName, pGuidParam, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcAddFlow(win32::Windows::Win32::Foundation::HANDLE IfcHandle, win32::Windows::Win32::Foundation::HANDLE ClFlowCtx, uint32_t Flags, win32::Windows::Win32::NetworkManagement::QoS::TC_GEN_FLOW* pGenericFlow, win32::Windows::Win32::Foundation::HANDLE* pFlowHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfcHandle);
        ORBIT_TRACK_PARAM(ClFlowCtx);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pGenericFlow);
        ORBIT_TRACK_PARAM(pFlowHandle);

        auto win32_impl_result = g_api_table.TcAddFlow(IfcHandle, ClFlowCtx, Flags, pGenericFlow, pFlowHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcGetFlowNameA(win32::Windows::Win32::Foundation::HANDLE FlowHandle, uint32_t StrSize, win32::Windows::Win32::Foundation::PSTR pFlowName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FlowHandle);
        ORBIT_TRACK_PARAM(StrSize);
        ORBIT_TRACK_PARAM(pFlowName);

        auto win32_impl_result = g_api_table.TcGetFlowNameA(FlowHandle, StrSize, pFlowName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcGetFlowNameW(win32::Windows::Win32::Foundation::HANDLE FlowHandle, uint32_t StrSize, win32::Windows::Win32::Foundation::PWSTR pFlowName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FlowHandle);
        ORBIT_TRACK_PARAM(StrSize);
        ORBIT_TRACK_PARAM(pFlowName);

        auto win32_impl_result = g_api_table.TcGetFlowNameW(FlowHandle, StrSize, pFlowName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcModifyFlow(win32::Windows::Win32::Foundation::HANDLE FlowHandle, win32::Windows::Win32::NetworkManagement::QoS::TC_GEN_FLOW* pGenericFlow) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FlowHandle);
        ORBIT_TRACK_PARAM(pGenericFlow);

        auto win32_impl_result = g_api_table.TcModifyFlow(FlowHandle, pGenericFlow);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcAddFilter(win32::Windows::Win32::Foundation::HANDLE FlowHandle, win32::Windows::Win32::NetworkManagement::QoS::TC_GEN_FILTER* pGenericFilter, win32::Windows::Win32::Foundation::HANDLE* pFilterHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FlowHandle);
        ORBIT_TRACK_PARAM(pGenericFilter);
        ORBIT_TRACK_PARAM(pFilterHandle);

        auto win32_impl_result = g_api_table.TcAddFilter(FlowHandle, pGenericFilter, pFilterHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcDeregisterClient(win32::Windows::Win32::Foundation::HANDLE ClientHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ClientHandle);

        auto win32_impl_result = g_api_table.TcDeregisterClient(ClientHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcDeleteFlow(win32::Windows::Win32::Foundation::HANDLE FlowHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FlowHandle);

        auto win32_impl_result = g_api_table.TcDeleteFlow(FlowHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcDeleteFilter(win32::Windows::Win32::Foundation::HANDLE FilterHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FilterHandle);

        auto win32_impl_result = g_api_table.TcDeleteFilter(FilterHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TcEnumerateFlows(win32::Windows::Win32::Foundation::HANDLE IfcHandle, win32::Windows::Win32::Foundation::HANDLE* pEnumHandle, uint32_t* pFlowCount, uint32_t* pBufSize, win32::Windows::Win32::NetworkManagement::QoS::ENUMERATION_BUFFER* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(IfcHandle);
        ORBIT_TRACK_PARAM(pEnumHandle);
        ORBIT_TRACK_PARAM(pFlowCount);
        ORBIT_TRACK_PARAM(pBufSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.TcEnumerateFlows(IfcHandle, pEnumHandle, pFlowCount, pBufSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
