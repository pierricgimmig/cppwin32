// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Services_0_H
#define WIN32_Windows_Win32_System_Services_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct PSTR;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Services
{
#pragma region enums
    enum class ENUM_SERVICE_STATE : uint32_t
    {
        SERVICE_ACTIVE = 0x1,
        SERVICE_INACTIVE = 0x2,
        SERVICE_STATE_ALL = 0x3,
    };
    enum class ENUM_SERVICE_TYPE : uint32_t
    {
        SERVICE_DRIVER = 0xb,
        SERVICE_FILE_SYSTEM_DRIVER_ = 0x2,
        SERVICE_KERNEL_DRIVER = 0x1,
        SERVICE_WIN32 = 0x30,
        SERVICE_WIN32_OWN_PROCESS_ = 0x10,
        SERVICE_WIN32_SHARE_PROCESS = 0x20,
        SERVICE_ADAPTER = 0x4,
        SERVICE_FILE_SYSTEM_DRIVER = 0x2,
        SERVICE_RECOGNIZER_DRIVER = 0x8,
        SERVICE_WIN32_OWN_PROCESS = 0x10,
        SERVICE_USER_OWN_PROCESS = 0x50,
        SERVICE_USER_SHARE_PROCESS = 0x60,
    };
    enum class SC_ACTION_TYPE : int32_t
    {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3,
        SC_ACTION_OWN_RESTART = 4,
    };
    enum class SC_ENUM_TYPE : int32_t
    {
        SC_ENUM_PROCESS_INFO = 0,
    };
    enum class SC_EVENT_TYPE : int32_t
    {
        SC_EVENT_DATABASE_CHANGE = 0,
        SC_EVENT_PROPERTY_CHANGE = 1,
        SC_EVENT_STATUS_CHANGE = 2,
    };
    enum class SC_STATUS_TYPE : int32_t
    {
        SC_STATUS_PROCESS_INFO = 0,
    };
    enum class SERVICE_CONFIG : uint32_t
    {
        SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 0x3,
        SERVICE_CONFIG_DESCRIPTION = 0x1,
        SERVICE_CONFIG_FAILURE_ACTIONS = 0x2,
        SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 0x4,
        SERVICE_CONFIG_PREFERRED_NODE = 0x9,
        SERVICE_CONFIG_PRESHUTDOWN_INFO = 0x7,
        SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 0x6,
        SERVICE_CONFIG_SERVICE_SID_INFO = 0x5,
        SERVICE_CONFIG_TRIGGER_INFO = 0x8,
        SERVICE_CONFIG_LAUNCH_PROTECTED = 0xc,
    };
    enum class SERVICE_DIRECTORY_TYPE : int32_t
    {
        ServiceDirectoryPersistentState = 0,
        ServiceDirectoryTypeMax = 1,
    };
    enum class SERVICE_ERROR : uint32_t
    {
        SERVICE_ERROR_CRITICAL = 0x3,
        SERVICE_ERROR_IGNORE = 0x0,
        SERVICE_ERROR_NORMAL = 0x1,
        SERVICE_ERROR_SEVERE = 0x2,
    };
    enum class SERVICE_NOTIFY : uint32_t
    {
        SERVICE_NOTIFY_CREATED = 0x80,
        SERVICE_NOTIFY_CONTINUE_PENDING = 0x10,
        SERVICE_NOTIFY_DELETE_PENDING = 0x200,
        SERVICE_NOTIFY_DELETED = 0x100,
        SERVICE_NOTIFY_PAUSE_PENDING = 0x20,
        SERVICE_NOTIFY_PAUSED = 0x40,
        SERVICE_NOTIFY_RUNNING = 0x8,
        SERVICE_NOTIFY_START_PENDING = 0x2,
        SERVICE_NOTIFY_STOP_PENDING = 0x4,
        SERVICE_NOTIFY_STOPPED = 0x1,
    };
    enum class SERVICE_REGISTRY_STATE_TYPE : int32_t
    {
        ServiceRegistryStateParameters = 0,
        ServiceRegistryStatePersistent = 1,
        MaxServiceRegistryStateType = 2,
    };
    enum class SERVICE_RUNS_IN_PROCESS : uint32_t
    {
        SERVICE_RUNS_IN_NON_SYSTEM_OR_NOT_RUNNING = 0x0,
        SERVICE_RUNS_IN_SYSTEM_PROCESS = 0x1,
    };
    enum class SERVICE_SHARED_DIRECTORY_TYPE : int32_t
    {
        ServiceSharedDirectoryPersistentState = 0,
    };
    enum class SERVICE_SHARED_REGISTRY_STATE_TYPE : int32_t
    {
        ServiceSharedRegistryPersistentState = 0,
    };
    enum class SERVICE_START_TYPE : uint32_t
    {
        SERVICE_AUTO_START = 0x2,
        SERVICE_BOOT_START = 0x0,
        SERVICE_DEMAND_START = 0x3,
        SERVICE_DISABLED = 0x4,
        SERVICE_SYSTEM_START = 0x1,
    };
    enum class SERVICE_STATUS_CURRENT_STATE : uint32_t
    {
        SERVICE_CONTINUE_PENDING = 0x5,
        SERVICE_PAUSE_PENDING = 0x6,
        SERVICE_PAUSED = 0x7,
        SERVICE_RUNNING = 0x4,
        SERVICE_START_PENDING = 0x2,
        SERVICE_STOP_PENDING = 0x3,
        SERVICE_STOPPED = 0x1,
    };
    enum class SERVICE_TRIGGER_ACTION : uint32_t
    {
        SERVICE_TRIGGER_ACTION_SERVICE_START = 0x1,
        SERVICE_TRIGGER_ACTION_SERVICE_STOP = 0x2,
    };
    enum class SERVICE_TRIGGER_SPECIFIC_DATA_ITEM_DATA_TYPE : uint32_t
    {
        SERVICE_TRIGGER_DATA_TYPE_BINARY = 0x1,
        SERVICE_TRIGGER_DATA_TYPE_STRING = 0x2,
        SERVICE_TRIGGER_DATA_TYPE_LEVEL = 0x3,
        SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY = 0x4,
        SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL = 0x5,
    };
    enum class SERVICE_TRIGGER_TYPE : uint32_t
    {
        SERVICE_TRIGGER_TYPE_CUSTOM = 0x14,
        SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 0x1,
        SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 0x3,
        SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 0x4,
        SERVICE_TRIGGER_TYPE_GROUP_POLICY = 0x5,
        SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 0x2,
        SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT = 0x6,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ENUM_SERVICE_STATUSA;
    struct ENUM_SERVICE_STATUSW;
    struct ENUM_SERVICE_STATUS_PROCESSA;
    struct ENUM_SERVICE_STATUS_PROCESSW;
    struct QUERY_SERVICE_CONFIGA;
    struct QUERY_SERVICE_CONFIGW;
    struct QUERY_SERVICE_LOCK_STATUSA;
    struct QUERY_SERVICE_LOCK_STATUSW;
    struct SC_ACTION;
    struct SERVICE_CONTROL_STATUS_REASON_PARAMSA;
    struct SERVICE_CONTROL_STATUS_REASON_PARAMSW;
    struct SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
    struct SERVICE_DELAYED_AUTO_START_INFO;
    struct SERVICE_DESCRIPTIONA;
    struct SERVICE_DESCRIPTIONW;
    struct SERVICE_FAILURE_ACTIONSA;
    struct SERVICE_FAILURE_ACTIONSW;
    struct SERVICE_FAILURE_ACTIONS_FLAG;
    struct SERVICE_LAUNCH_PROTECTED_INFO;
    struct SERVICE_NOTIFY_1;
    struct SERVICE_NOTIFY_2A;
    struct SERVICE_NOTIFY_2W;
    struct SERVICE_PREFERRED_NODE_INFO;
    struct SERVICE_PRESHUTDOWN_INFO;
    struct SERVICE_REQUIRED_PRIVILEGES_INFOA;
    struct SERVICE_REQUIRED_PRIVILEGES_INFOW;
    struct SERVICE_SID_INFO;
    struct SERVICE_START_REASON;
    struct SERVICE_STATUS;
    struct SERVICE_STATUS_HANDLE;
    struct SERVICE_STATUS_PROCESS;
    struct SERVICE_TABLE_ENTRYA;
    struct SERVICE_TABLE_ENTRYW;
    struct SERVICE_TIMECHANGE_INFO;
    struct SERVICE_TRIGGER;
    struct SERVICE_TRIGGER_CUSTOM_STATE_ID;
    struct SERVICE_TRIGGER_INFO;
    struct SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
    struct _SC_NOTIFICATION_REGISTRATION;
#pragma endregion forward_declarations

#pragma region delegates
    using SERVICE_MAIN_FUNCTIONW = void __stdcall(uint32_t, Windows::Win32::Foundation::PWSTR*);
    using SERVICE_MAIN_FUNCTIONA = void __stdcall(uint32_t, int8_t**);
    using LPSERVICE_MAIN_FUNCTIONW = void __stdcall(uint32_t, Windows::Win32::Foundation::PWSTR*);
    using LPSERVICE_MAIN_FUNCTIONA = void __stdcall(uint32_t, Windows::Win32::Foundation::PSTR*);
    using HANDLER_FUNCTION = void __stdcall(uint32_t);
    using HANDLER_FUNCTION_EX = uint32_t __stdcall(uint32_t, uint32_t, void*, void*);
    using LPHANDLER_FUNCTION = void __stdcall(uint32_t);
    using LPHANDLER_FUNCTION_EX = uint32_t __stdcall(uint32_t, uint32_t, void*, void*);
    using PFN_SC_NOTIFY_CALLBACK = void __stdcall(void*);
    using PSC_NOTIFICATION_CALLBACK = void __stdcall(uint32_t, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
