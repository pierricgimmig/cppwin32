// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Memory_2_H
#define WIN32_Windows_Win32_System_Memory_2_H
#include "win32/Windows.Win32.System.Memory.h"
#include "win32/impl/Windows.Win32.System.Memory.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Memory
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::System::Memory::HeapHandle __stdcall ORBIT_IMPL_HeapCreate(win32::Windows::Win32::System::Memory::HEAP_FLAGS flOptions, size_t dwInitialSize, size_t dwMaximumSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(flOptions);
        ORBIT_TRACK_PARAM(dwInitialSize);
        ORBIT_TRACK_PARAM(dwMaximumSize);

        auto win32_impl_result = g_api_table.HeapCreate(flOptions, dwInitialSize, dwMaximumSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapDestroy(win32::Windows::Win32::System::Memory::HeapHandle hHeap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);

        auto win32_impl_result = g_api_table.HeapDestroy(hHeap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_HeapAlloc(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::Memory::HEAP_FLAGS dwFlags, size_t dwBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwBytes);

        auto win32_impl_result = g_api_table.HeapAlloc(hHeap, dwFlags, dwBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_HeapReAlloc(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::Memory::HEAP_FLAGS dwFlags, void* lpMem, size_t dwBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpMem);
        ORBIT_TRACK_PARAM(dwBytes);

        auto win32_impl_result = g_api_table.HeapReAlloc(hHeap, dwFlags, lpMem, dwBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapFree(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::Memory::HEAP_FLAGS dwFlags, void* lpMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpMem);

        auto win32_impl_result = g_api_table.HeapFree(hHeap, dwFlags, lpMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_HeapSize(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::Memory::HEAP_FLAGS dwFlags, void* lpMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpMem);

        auto win32_impl_result = g_api_table.HeapSize(hHeap, dwFlags, lpMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Memory::HeapHandle __stdcall ORBIT_IMPL_GetProcessHeap() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetProcessHeap();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_HeapCompact(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::Memory::HEAP_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.HeapCompact(hHeap, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapSetInformation(win32::Windows::Win32::System::Memory::HeapHandle HeapHandle, win32::Windows::Win32::System::SystemServices::HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, size_t HeapInformationLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HeapHandle);
        ORBIT_TRACK_PARAM(HeapInformationClass);
        ORBIT_TRACK_PARAM(HeapInformation);
        ORBIT_TRACK_PARAM(HeapInformationLength);

        auto win32_impl_result = g_api_table.HeapSetInformation(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapValidate(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::Memory::HEAP_FLAGS dwFlags, void* lpMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpMem);

        auto win32_impl_result = g_api_table.HeapValidate(hHeap, dwFlags, lpMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapSummary(win32::Windows::Win32::Foundation::HANDLE hHeap, uint32_t dwFlags, win32::Windows::Win32::System::Memory::HEAP_SUMMARY* lpSummary) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpSummary);

        auto win32_impl_result = g_api_table.HeapSummary(hHeap, dwFlags, lpSummary);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetProcessHeaps(uint32_t NumberOfHeaps, win32::Windows::Win32::System::Memory::HeapHandle* ProcessHeaps) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NumberOfHeaps);
        ORBIT_TRACK_PARAM(ProcessHeaps);

        auto win32_impl_result = g_api_table.GetProcessHeaps(NumberOfHeaps, ProcessHeaps);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapLock(win32::Windows::Win32::System::Memory::HeapHandle hHeap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);

        auto win32_impl_result = g_api_table.HeapLock(hHeap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapUnlock(win32::Windows::Win32::System::Memory::HeapHandle hHeap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);

        auto win32_impl_result = g_api_table.HeapUnlock(hHeap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapWalk(win32::Windows::Win32::System::Memory::HeapHandle hHeap, win32::Windows::Win32::System::SystemServices::PROCESS_HEAP_ENTRY* lpEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHeap);
        ORBIT_TRACK_PARAM(lpEntry);

        auto win32_impl_result = g_api_table.HeapWalk(hHeap, lpEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HeapQueryInformation(win32::Windows::Win32::System::Memory::HeapHandle HeapHandle, win32::Windows::Win32::System::SystemServices::HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, size_t HeapInformationLength, size_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HeapHandle);
        ORBIT_TRACK_PARAM(HeapInformationClass);
        ORBIT_TRACK_PARAM(HeapInformation);
        ORBIT_TRACK_PARAM(HeapInformationLength);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.HeapQueryInformation(HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_VirtualAlloc(void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE flAllocationType, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flProtect) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(flAllocationType);
        ORBIT_TRACK_PARAM(flProtect);

        auto win32_impl_result = g_api_table.VirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualProtect(void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flNewProtect, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS* lpflOldProtect) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(flNewProtect);
        ORBIT_TRACK_PARAM(lpflOldProtect);

        auto win32_impl_result = g_api_table.VirtualProtect(lpAddress, dwSize, flNewProtect, lpflOldProtect);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualFree(void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::VIRTUAL_FREE_TYPE dwFreeType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(dwFreeType);

        auto win32_impl_result = g_api_table.VirtualFree(lpAddress, dwSize, dwFreeType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_VirtualQuery(void* lpAddress, win32::Windows::Win32::System::Memory::MEMORY_BASIC_INFORMATION* lpBuffer, size_t dwLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwLength);

        auto win32_impl_result = g_api_table.VirtualQuery(lpAddress, lpBuffer, dwLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_VirtualAllocEx(win32::Windows::Win32::Foundation::HANDLE hProcess, void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE flAllocationType, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flProtect) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(flAllocationType);
        ORBIT_TRACK_PARAM(flProtect);

        auto win32_impl_result = g_api_table.VirtualAllocEx(hProcess, lpAddress, dwSize, flAllocationType, flProtect);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualProtectEx(win32::Windows::Win32::Foundation::HANDLE hProcess, void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flNewProtect, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS* lpflOldProtect) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(flNewProtect);
        ORBIT_TRACK_PARAM(lpflOldProtect);

        auto win32_impl_result = g_api_table.VirtualProtectEx(hProcess, lpAddress, dwSize, flNewProtect, lpflOldProtect);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_VirtualQueryEx(win32::Windows::Win32::Foundation::HANDLE hProcess, void* lpAddress, win32::Windows::Win32::System::Memory::MEMORY_BASIC_INFORMATION* lpBuffer, size_t dwLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwLength);

        auto win32_impl_result = g_api_table.VirtualQueryEx(hProcess, lpAddress, lpBuffer, dwLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileMappingW(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpFileMappingAttributes, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flProtect, uint32_t dwMaximumSizeHigh, uint32_t dwMaximumSizeLow, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileMappingAttributes);
        ORBIT_TRACK_PARAM(flProtect);
        ORBIT_TRACK_PARAM(dwMaximumSizeHigh);
        ORBIT_TRACK_PARAM(dwMaximumSizeLow);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateFileMappingW(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenFileMappingW(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.OpenFileMappingW(dwDesiredAccess, bInheritHandle, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFile(win32::Windows::Win32::Foundation::HANDLE hFileMappingObject, win32::Windows::Win32::System::Memory::FILE_MAP dwDesiredAccess, uint32_t dwFileOffsetHigh, uint32_t dwFileOffsetLow, size_t dwNumberOfBytesToMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFileMappingObject);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwFileOffsetHigh);
        ORBIT_TRACK_PARAM(dwFileOffsetLow);
        ORBIT_TRACK_PARAM(dwNumberOfBytesToMap);

        auto win32_impl_result = g_api_table.MapViewOfFile(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFileEx(win32::Windows::Win32::Foundation::HANDLE hFileMappingObject, win32::Windows::Win32::System::Memory::FILE_MAP dwDesiredAccess, uint32_t dwFileOffsetHigh, uint32_t dwFileOffsetLow, size_t dwNumberOfBytesToMap, void* lpBaseAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFileMappingObject);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwFileOffsetHigh);
        ORBIT_TRACK_PARAM(dwFileOffsetLow);
        ORBIT_TRACK_PARAM(dwNumberOfBytesToMap);
        ORBIT_TRACK_PARAM(lpBaseAddress);

        auto win32_impl_result = g_api_table.MapViewOfFileEx(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualFreeEx(win32::Windows::Win32::Foundation::HANDLE hProcess, void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::VIRTUAL_FREE_TYPE dwFreeType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(dwFreeType);

        auto win32_impl_result = g_api_table.VirtualFreeEx(hProcess, lpAddress, dwSize, dwFreeType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FlushViewOfFile(void* lpBaseAddress, size_t dwNumberOfBytesToFlush) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBaseAddress);
        ORBIT_TRACK_PARAM(dwNumberOfBytesToFlush);

        auto win32_impl_result = g_api_table.FlushViewOfFile(lpBaseAddress, dwNumberOfBytesToFlush);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnmapViewOfFile(void* lpBaseAddress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBaseAddress);

        auto win32_impl_result = g_api_table.UnmapViewOfFile(lpBaseAddress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_GetLargePageMinimum() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetLargePageMinimum();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessWorkingSetSizeEx(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t* lpMinimumWorkingSetSize, size_t* lpMaximumWorkingSetSize, uint32_t* Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpMinimumWorkingSetSize);
        ORBIT_TRACK_PARAM(lpMaximumWorkingSetSize);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.GetProcessWorkingSetSizeEx(hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessWorkingSetSizeEx(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t dwMinimumWorkingSetSize, size_t dwMaximumWorkingSetSize, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwMinimumWorkingSetSize);
        ORBIT_TRACK_PARAM(dwMaximumWorkingSetSize);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.SetProcessWorkingSetSizeEx(hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualLock(void* lpAddress, size_t dwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);

        auto win32_impl_result = g_api_table.VirtualLock(lpAddress, dwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualUnlock(void* lpAddress, size_t dwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);

        auto win32_impl_result = g_api_table.VirtualUnlock(lpAddress, dwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetWriteWatch(uint32_t dwFlags, void* lpBaseAddress, size_t dwRegionSize, void** lpAddresses, size_t* lpdwCount, uint32_t* lpdwGranularity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpBaseAddress);
        ORBIT_TRACK_PARAM(dwRegionSize);
        ORBIT_TRACK_PARAM(lpAddresses);
        ORBIT_TRACK_PARAM(lpdwCount);
        ORBIT_TRACK_PARAM(lpdwGranularity);

        auto win32_impl_result = g_api_table.GetWriteWatch(dwFlags, lpBaseAddress, dwRegionSize, lpAddresses, lpdwCount, lpdwGranularity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResetWriteWatch(void* lpBaseAddress, size_t dwRegionSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBaseAddress);
        ORBIT_TRACK_PARAM(dwRegionSize);

        auto win32_impl_result = g_api_table.ResetWriteWatch(lpBaseAddress, dwRegionSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateMemoryResourceNotification(win32::Windows::Win32::System::Memory::MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NotificationType);

        auto win32_impl_result = g_api_table.CreateMemoryResourceNotification(NotificationType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryMemoryResourceNotification(win32::Windows::Win32::Foundation::HANDLE ResourceNotificationHandle, win32::Windows::Win32::Foundation::BOOL* ResourceState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ResourceNotificationHandle);
        ORBIT_TRACK_PARAM(ResourceState);

        auto win32_impl_result = g_api_table.QueryMemoryResourceNotification(ResourceNotificationHandle, ResourceState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetSystemFileCacheSize(size_t* lpMinimumFileCacheSize, size_t* lpMaximumFileCacheSize, uint32_t* lpFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpMinimumFileCacheSize);
        ORBIT_TRACK_PARAM(lpMaximumFileCacheSize);
        ORBIT_TRACK_PARAM(lpFlags);

        auto win32_impl_result = g_api_table.GetSystemFileCacheSize(lpMinimumFileCacheSize, lpMaximumFileCacheSize, lpFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetSystemFileCacheSize(size_t MinimumFileCacheSize, size_t MaximumFileCacheSize, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MinimumFileCacheSize);
        ORBIT_TRACK_PARAM(MaximumFileCacheSize);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.SetSystemFileCacheSize(MinimumFileCacheSize, MaximumFileCacheSize, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileMappingNumaW(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpFileMappingAttributes, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flProtect, uint32_t dwMaximumSizeHigh, uint32_t dwMaximumSizeLow, win32::Windows::Win32::Foundation::PWSTR lpName, uint32_t nndPreferred) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileMappingAttributes);
        ORBIT_TRACK_PARAM(flProtect);
        ORBIT_TRACK_PARAM(dwMaximumSizeHigh);
        ORBIT_TRACK_PARAM(dwMaximumSizeLow);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(nndPreferred);

        auto win32_impl_result = g_api_table.CreateFileMappingNumaW(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PrefetchVirtualMemory(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t NumberOfEntries, win32::Windows::Win32::System::Memory::WIN32_MEMORY_RANGE_ENTRY* VirtualAddresses, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(NumberOfEntries);
        ORBIT_TRACK_PARAM(VirtualAddresses);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.PrefetchVirtualMemory(hProcess, NumberOfEntries, VirtualAddresses, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileMappingFromApp(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* SecurityAttributes, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS PageProtection, uint64_t MaximumSize, win32::Windows::Win32::Foundation::PWSTR Name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(SecurityAttributes);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(MaximumSize);
        ORBIT_TRACK_PARAM(Name);

        auto win32_impl_result = g_api_table.CreateFileMappingFromApp(hFile, SecurityAttributes, PageProtection, MaximumSize, Name);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFileFromApp(win32::Windows::Win32::Foundation::HANDLE hFileMappingObject, win32::Windows::Win32::System::Memory::FILE_MAP DesiredAccess, uint64_t FileOffset, size_t NumberOfBytesToMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFileMappingObject);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(FileOffset);
        ORBIT_TRACK_PARAM(NumberOfBytesToMap);

        auto win32_impl_result = g_api_table.MapViewOfFileFromApp(hFileMappingObject, DesiredAccess, FileOffset, NumberOfBytesToMap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnmapViewOfFileEx(void* BaseAddress, win32::Windows::Win32::System::Memory::UNMAP_VIEW_OF_FILE_FLAGS UnmapFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(UnmapFlags);

        auto win32_impl_result = g_api_table.UnmapViewOfFileEx(BaseAddress, UnmapFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AllocateUserPhysicalPages(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t* NumberOfPages, size_t* PageArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(NumberOfPages);
        ORBIT_TRACK_PARAM(PageArray);

        auto win32_impl_result = g_api_table.AllocateUserPhysicalPages(hProcess, NumberOfPages, PageArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FreeUserPhysicalPages(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t* NumberOfPages, size_t* PageArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(NumberOfPages);
        ORBIT_TRACK_PARAM(PageArray);

        auto win32_impl_result = g_api_table.FreeUserPhysicalPages(hProcess, NumberOfPages, PageArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MapUserPhysicalPages(void* VirtualAddress, size_t NumberOfPages, size_t* PageArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(NumberOfPages);
        ORBIT_TRACK_PARAM(PageArray);

        auto win32_impl_result = g_api_table.MapUserPhysicalPages(VirtualAddress, NumberOfPages, PageArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AllocateUserPhysicalPagesNuma(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t* NumberOfPages, size_t* PageArray, uint32_t nndPreferred) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(NumberOfPages);
        ORBIT_TRACK_PARAM(PageArray);
        ORBIT_TRACK_PARAM(nndPreferred);

        auto win32_impl_result = g_api_table.AllocateUserPhysicalPagesNuma(hProcess, NumberOfPages, PageArray, nndPreferred);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_VirtualAllocExNuma(win32::Windows::Win32::Foundation::HANDLE hProcess, void* lpAddress, size_t dwSize, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE flAllocationType, uint32_t flProtect, uint32_t nndPreferred) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpAddress);
        ORBIT_TRACK_PARAM(dwSize);
        ORBIT_TRACK_PARAM(flAllocationType);
        ORBIT_TRACK_PARAM(flProtect);
        ORBIT_TRACK_PARAM(nndPreferred);

        auto win32_impl_result = g_api_table.VirtualAllocExNuma(hProcess, lpAddress, dwSize, flAllocationType, flProtect, nndPreferred);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetMemoryErrorHandlingCapabilities(uint32_t* Capabilities) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Capabilities);

        auto win32_impl_result = g_api_table.GetMemoryErrorHandlingCapabilities(Capabilities);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_RegisterBadMemoryNotification(win32::Windows::Win32::System::Memory::PBAD_MEMORY_CALLBACK_ROUTINE* Callback) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Callback);

        auto win32_impl_result = g_api_table.RegisterBadMemoryNotification(Callback);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnregisterBadMemoryNotification(void* RegistrationHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RegistrationHandle);

        auto win32_impl_result = g_api_table.UnregisterBadMemoryNotification(RegistrationHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OfferVirtualMemory(void* VirtualAddress, size_t Size, win32::Windows::Win32::System::Memory::OFFER_PRIORITY Priority) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(Priority);

        auto win32_impl_result = g_api_table.OfferVirtualMemory(VirtualAddress, Size, Priority);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReclaimVirtualMemory(void* VirtualAddress, size_t Size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(Size);

        auto win32_impl_result = g_api_table.ReclaimVirtualMemory(VirtualAddress, Size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DiscardVirtualMemory(void* VirtualAddress, size_t Size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(Size);

        auto win32_impl_result = g_api_table.DiscardVirtualMemory(VirtualAddress, Size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessValidCallTargets(win32::Windows::Win32::Foundation::HANDLE hProcess, void* VirtualAddress, size_t RegionSize, uint32_t NumberOfOffsets, win32::Windows::Win32::System::SystemServices::CFG_CALL_TARGET_INFO* OffsetInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(RegionSize);
        ORBIT_TRACK_PARAM(NumberOfOffsets);
        ORBIT_TRACK_PARAM(OffsetInformation);

        auto win32_impl_result = g_api_table.SetProcessValidCallTargets(hProcess, VirtualAddress, RegionSize, NumberOfOffsets, OffsetInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessValidCallTargetsForMappedView(win32::Windows::Win32::Foundation::HANDLE Process, void* VirtualAddress, size_t RegionSize, uint32_t NumberOfOffsets, win32::Windows::Win32::System::SystemServices::CFG_CALL_TARGET_INFO* OffsetInformation, win32::Windows::Win32::Foundation::HANDLE Section, uint64_t ExpectedFileOffset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(RegionSize);
        ORBIT_TRACK_PARAM(NumberOfOffsets);
        ORBIT_TRACK_PARAM(OffsetInformation);
        ORBIT_TRACK_PARAM(Section);
        ORBIT_TRACK_PARAM(ExpectedFileOffset);

        auto win32_impl_result = g_api_table.SetProcessValidCallTargetsForMappedView(Process, VirtualAddress, RegionSize, NumberOfOffsets, OffsetInformation, Section, ExpectedFileOffset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_VirtualAllocFromApp(void* BaseAddress, size_t Size, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE AllocationType, uint32_t Protection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(AllocationType);
        ORBIT_TRACK_PARAM(Protection);

        auto win32_impl_result = g_api_table.VirtualAllocFromApp(BaseAddress, Size, AllocationType, Protection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualProtectFromApp(void* Address, size_t Size, uint32_t NewProtection, uint32_t* OldProtection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(NewProtection);
        ORBIT_TRACK_PARAM(OldProtection);

        auto win32_impl_result = g_api_table.VirtualProtectFromApp(Address, Size, NewProtection, OldProtection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenFileMappingFromApp(uint32_t DesiredAccess, win32::Windows::Win32::Foundation::BOOL InheritHandle, win32::Windows::Win32::Foundation::PWSTR Name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(InheritHandle);
        ORBIT_TRACK_PARAM(Name);

        auto win32_impl_result = g_api_table.OpenFileMappingFromApp(DesiredAccess, InheritHandle, Name);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryVirtualMemoryInformation(win32::Windows::Win32::Foundation::HANDLE Process, void* VirtualAddress, win32::Windows::Win32::System::Memory::WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass, void* MemoryInformation, size_t MemoryInformationSize, size_t* ReturnSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(VirtualAddress);
        ORBIT_TRACK_PARAM(MemoryInformationClass);
        ORBIT_TRACK_PARAM(MemoryInformation);
        ORBIT_TRACK_PARAM(MemoryInformationSize);
        ORBIT_TRACK_PARAM(ReturnSize);

        auto win32_impl_result = g_api_table.QueryVirtualMemoryInformation(Process, VirtualAddress, MemoryInformationClass, MemoryInformation, MemoryInformationSize, ReturnSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFileNuma2(win32::Windows::Win32::Foundation::HANDLE FileMappingHandle, win32::Windows::Win32::Foundation::HANDLE ProcessHandle, uint64_t Offset, void* BaseAddress, size_t ViewSize, uint32_t AllocationType, uint32_t PageProtection, uint32_t PreferredNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileMappingHandle);
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(ViewSize);
        ORBIT_TRACK_PARAM(AllocationType);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(PreferredNode);

        auto win32_impl_result = g_api_table.MapViewOfFileNuma2(FileMappingHandle, ProcessHandle, Offset, BaseAddress, ViewSize, AllocationType, PageProtection, PreferredNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnmapViewOfFile2(win32::Windows::Win32::Foundation::HANDLE Process, void* BaseAddress, win32::Windows::Win32::System::Memory::UNMAP_VIEW_OF_FILE_FLAGS UnmapFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(UnmapFlags);

        auto win32_impl_result = g_api_table.UnmapViewOfFile2(Process, BaseAddress, UnmapFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VirtualUnlockEx(win32::Windows::Win32::Foundation::HANDLE Process, void* Address, size_t Size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(Size);

        auto win32_impl_result = g_api_table.VirtualUnlockEx(Process, Address, Size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_VirtualAlloc2(win32::Windows::Win32::Foundation::HANDLE Process, void* BaseAddress, size_t Size, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE AllocationType, uint32_t PageProtection, win32::Windows::Win32::System::SystemServices::MEM_EXTENDED_PARAMETER* ExtendedParameters, uint32_t ParameterCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(AllocationType);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(ExtendedParameters);
        ORBIT_TRACK_PARAM(ParameterCount);

        auto win32_impl_result = g_api_table.VirtualAlloc2(Process, BaseAddress, Size, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFile3(win32::Windows::Win32::Foundation::HANDLE FileMapping, win32::Windows::Win32::Foundation::HANDLE Process, void* BaseAddress, uint64_t Offset, size_t ViewSize, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE AllocationType, uint32_t PageProtection, win32::Windows::Win32::System::SystemServices::MEM_EXTENDED_PARAMETER* ExtendedParameters, uint32_t ParameterCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileMapping);
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(ViewSize);
        ORBIT_TRACK_PARAM(AllocationType);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(ExtendedParameters);
        ORBIT_TRACK_PARAM(ParameterCount);

        auto win32_impl_result = g_api_table.MapViewOfFile3(FileMapping, Process, BaseAddress, Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_VirtualAlloc2FromApp(win32::Windows::Win32::Foundation::HANDLE Process, void* BaseAddress, size_t Size, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE AllocationType, uint32_t PageProtection, win32::Windows::Win32::System::SystemServices::MEM_EXTENDED_PARAMETER* ExtendedParameters, uint32_t ParameterCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(Size);
        ORBIT_TRACK_PARAM(AllocationType);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(ExtendedParameters);
        ORBIT_TRACK_PARAM(ParameterCount);

        auto win32_impl_result = g_api_table.VirtualAlloc2FromApp(Process, BaseAddress, Size, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFile3FromApp(win32::Windows::Win32::Foundation::HANDLE FileMapping, win32::Windows::Win32::Foundation::HANDLE Process, void* BaseAddress, uint64_t Offset, size_t ViewSize, win32::Windows::Win32::System::Memory::VIRTUAL_ALLOCATION_TYPE AllocationType, uint32_t PageProtection, win32::Windows::Win32::System::SystemServices::MEM_EXTENDED_PARAMETER* ExtendedParameters, uint32_t ParameterCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileMapping);
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(BaseAddress);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(ViewSize);
        ORBIT_TRACK_PARAM(AllocationType);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(ExtendedParameters);
        ORBIT_TRACK_PARAM(ParameterCount);

        auto win32_impl_result = g_api_table.MapViewOfFile3FromApp(FileMapping, Process, BaseAddress, Offset, ViewSize, AllocationType, PageProtection, ExtendedParameters, ParameterCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileMapping2(win32::Windows::Win32::Foundation::HANDLE File, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* SecurityAttributes, uint32_t DesiredAccess, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS PageProtection, uint32_t AllocationAttributes, uint64_t MaximumSize, win32::Windows::Win32::Foundation::PWSTR Name, win32::Windows::Win32::System::SystemServices::MEM_EXTENDED_PARAMETER* ExtendedParameters, uint32_t ParameterCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(File);
        ORBIT_TRACK_PARAM(SecurityAttributes);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(PageProtection);
        ORBIT_TRACK_PARAM(AllocationAttributes);
        ORBIT_TRACK_PARAM(MaximumSize);
        ORBIT_TRACK_PARAM(Name);
        ORBIT_TRACK_PARAM(ExtendedParameters);
        ORBIT_TRACK_PARAM(ParameterCount);

        auto win32_impl_result = g_api_table.CreateFileMapping2(File, SecurityAttributes, DesiredAccess, PageProtection, AllocationAttributes, MaximumSize, Name, ExtendedParameters, ParameterCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AllocateUserPhysicalPages2(win32::Windows::Win32::Foundation::HANDLE ObjectHandle, size_t* NumberOfPages, size_t* PageArray, win32::Windows::Win32::System::SystemServices::MEM_EXTENDED_PARAMETER* ExtendedParameters, uint32_t ExtendedParameterCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ObjectHandle);
        ORBIT_TRACK_PARAM(NumberOfPages);
        ORBIT_TRACK_PARAM(PageArray);
        ORBIT_TRACK_PARAM(ExtendedParameters);
        ORBIT_TRACK_PARAM(ExtendedParameterCount);

        auto win32_impl_result = g_api_table.AllocateUserPhysicalPages2(ObjectHandle, NumberOfPages, PageArray, ExtendedParameters, ExtendedParameterCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenDedicatedMemoryPartition(win32::Windows::Win32::Foundation::HANDLE Partition, uint64_t DedicatedMemoryTypeId, uint32_t DesiredAccess, win32::Windows::Win32::Foundation::BOOL InheritHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(DedicatedMemoryTypeId);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(InheritHandle);

        auto win32_impl_result = g_api_table.OpenDedicatedMemoryPartition(Partition, DedicatedMemoryTypeId, DesiredAccess, InheritHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryPartitionInformation(win32::Windows::Win32::Foundation::HANDLE Partition, win32::Windows::Win32::System::Memory::WIN32_MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass, void* PartitionInformation, uint32_t PartitionInformationLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Partition);
        ORBIT_TRACK_PARAM(PartitionInformationClass);
        ORBIT_TRACK_PARAM(PartitionInformation);
        ORBIT_TRACK_PARAM(PartitionInformationLength);

        auto win32_impl_result = g_api_table.QueryPartitionInformation(Partition, PartitionInformationClass, PartitionInformation, PartitionInformationLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_GlobalAlloc(win32::Windows::Win32::System::Memory::GLOBAL_ALLOC_FLAGS uFlags, size_t dwBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(dwBytes);

        auto win32_impl_result = g_api_table.GlobalAlloc(uFlags, dwBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_GlobalReAlloc(intptr_t hMem, size_t dwBytes, uint32_t uFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);
        ORBIT_TRACK_PARAM(dwBytes);
        ORBIT_TRACK_PARAM(uFlags);

        auto win32_impl_result = g_api_table.GlobalReAlloc(hMem, dwBytes, uFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_GlobalSize(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.GlobalSize(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GlobalUnlock(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.GlobalUnlock(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_GlobalLock(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.GlobalLock(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GlobalFlags(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.GlobalFlags(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_GlobalHandle(void* pMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMem);

        auto win32_impl_result = g_api_table.GlobalHandle(pMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_GlobalFree(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.GlobalFree(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_LocalAlloc(win32::Windows::Win32::System::Memory::LOCAL_ALLOC_FLAGS uFlags, size_t uBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(uBytes);

        auto win32_impl_result = g_api_table.LocalAlloc(uFlags, uBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_LocalReAlloc(intptr_t hMem, size_t uBytes, uint32_t uFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);
        ORBIT_TRACK_PARAM(uBytes);
        ORBIT_TRACK_PARAM(uFlags);

        auto win32_impl_result = g_api_table.LocalReAlloc(hMem, uBytes, uFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_LocalLock(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.LocalLock(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_LocalHandle(void* pMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMem);

        auto win32_impl_result = g_api_table.LocalHandle(pMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_LocalUnlock(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.LocalUnlock(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_LocalSize(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.LocalSize(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LocalFlags(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.LocalFlags(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    intptr_t __stdcall ORBIT_IMPL_LocalFree(intptr_t hMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMem);

        auto win32_impl_result = g_api_table.LocalFree(hMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileMappingA(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpFileMappingAttributes, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flProtect, uint32_t dwMaximumSizeHigh, uint32_t dwMaximumSizeLow, win32::Windows::Win32::Foundation::PSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileMappingAttributes);
        ORBIT_TRACK_PARAM(flProtect);
        ORBIT_TRACK_PARAM(dwMaximumSizeHigh);
        ORBIT_TRACK_PARAM(dwMaximumSizeLow);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateFileMappingA(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileMappingNumaA(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpFileMappingAttributes, win32::Windows::Win32::System::Memory::PAGE_PROTECTION_FLAGS flProtect, uint32_t dwMaximumSizeHigh, uint32_t dwMaximumSizeLow, win32::Windows::Win32::Foundation::PSTR lpName, uint32_t nndPreferred) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileMappingAttributes);
        ORBIT_TRACK_PARAM(flProtect);
        ORBIT_TRACK_PARAM(dwMaximumSizeHigh);
        ORBIT_TRACK_PARAM(dwMaximumSizeLow);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(nndPreferred);

        auto win32_impl_result = g_api_table.CreateFileMappingNumaA(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenFileMappingA(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.OpenFileMappingA(dwDesiredAccess, bInheritHandle, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MapViewOfFileExNuma(win32::Windows::Win32::Foundation::HANDLE hFileMappingObject, win32::Windows::Win32::System::Memory::FILE_MAP dwDesiredAccess, uint32_t dwFileOffsetHigh, uint32_t dwFileOffsetLow, size_t dwNumberOfBytesToMap, void* lpBaseAddress, uint32_t nndPreferred) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFileMappingObject);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwFileOffsetHigh);
        ORBIT_TRACK_PARAM(dwFileOffsetLow);
        ORBIT_TRACK_PARAM(dwNumberOfBytesToMap);
        ORBIT_TRACK_PARAM(lpBaseAddress);
        ORBIT_TRACK_PARAM(nndPreferred);

        auto win32_impl_result = g_api_table.MapViewOfFileExNuma(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress, nndPreferred);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsBadReadPtr(void* lp, size_t ucb) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lp);
        ORBIT_TRACK_PARAM(ucb);

        auto win32_impl_result = g_api_table.IsBadReadPtr(lp, ucb);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsBadWritePtr(void* lp, size_t ucb) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lp);
        ORBIT_TRACK_PARAM(ucb);

        auto win32_impl_result = g_api_table.IsBadWritePtr(lp, ucb);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsBadCodePtr(win32::Windows::Win32::Foundation::FARPROC* lpfn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpfn);

        auto win32_impl_result = g_api_table.IsBadCodePtr(lpfn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsBadStringPtrA(win32::Windows::Win32::Foundation::PSTR lpsz, size_t ucchMax) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpsz);
        ORBIT_TRACK_PARAM(ucchMax);

        auto win32_impl_result = g_api_table.IsBadStringPtrA(lpsz, ucchMax);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsBadStringPtrW(win32::Windows::Win32::Foundation::PWSTR lpsz, size_t ucchMax) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpsz);
        ORBIT_TRACK_PARAM(ucchMax);

        auto win32_impl_result = g_api_table.IsBadStringPtrW(lpsz, ucchMax);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MapUserPhysicalPagesScatter(void** VirtualAddresses, size_t NumberOfPages, size_t* PageArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualAddresses);
        ORBIT_TRACK_PARAM(NumberOfPages);
        ORBIT_TRACK_PARAM(PageArray);

        auto win32_impl_result = g_api_table.MapUserPhysicalPagesScatter(VirtualAddresses, NumberOfPages, PageArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AddSecureMemoryCacheCallback(win32::Windows::Win32::System::Memory::PSECURE_MEMORY_CACHE_CALLBACK* pfnCallBack) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnCallBack);

        auto win32_impl_result = g_api_table.AddSecureMemoryCacheCallback(pfnCallBack);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveSecureMemoryCacheCallback(win32::Windows::Win32::System::Memory::PSECURE_MEMORY_CACHE_CALLBACK* pfnCallBack) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnCallBack);

        auto win32_impl_result = g_api_table.RemoveSecureMemoryCacheCallback(pfnCallBack);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
