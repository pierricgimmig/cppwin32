// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Foundation_2_H
#define WIN32_Windows_Win32_Foundation_2_H
#include "win32/Windows.Win32.Foundation.h"
#include "win32/impl/Windows.Win32.Foundation.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BSTR __stdcall ORBIT_IMPL_SysAllocString(win32::Windows::Win32::Foundation::PWSTR psz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(psz);

        auto win32_impl_result = g_api_table.SysAllocString(psz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SysReAllocString(win32::Windows::Win32::Foundation::BSTR* pbstr, win32::Windows::Win32::Foundation::PWSTR psz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbstr);
        ORBIT_TRACK_PARAM(psz);

        auto win32_impl_result = g_api_table.SysReAllocString(pbstr, psz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BSTR __stdcall ORBIT_IMPL_SysAllocStringLen(win32::Windows::Win32::Foundation::PWSTR strIn, uint32_t ui) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(strIn);
        ORBIT_TRACK_PARAM(ui);

        auto win32_impl_result = g_api_table.SysAllocStringLen(strIn, ui);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SysReAllocStringLen(win32::Windows::Win32::Foundation::BSTR* pbstr, win32::Windows::Win32::Foundation::PWSTR psz, uint32_t len) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbstr);
        ORBIT_TRACK_PARAM(psz);
        ORBIT_TRACK_PARAM(len);

        auto win32_impl_result = g_api_table.SysReAllocStringLen(pbstr, psz, len);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SysAddRefString(win32::Windows::Win32::Foundation::BSTR bstrString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bstrString);

        auto win32_impl_result = g_api_table.SysAddRefString(bstrString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SysReleaseString(win32::Windows::Win32::Foundation::BSTR bstrString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bstrString);

        g_api_table.SysReleaseString(bstrString);
        
    }

    void __stdcall ORBIT_IMPL_SysFreeString(win32::Windows::Win32::Foundation::BSTR bstrString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bstrString);

        g_api_table.SysFreeString(bstrString);
        
    }

    uint32_t __stdcall ORBIT_IMPL_SysStringLen(win32::Windows::Win32::Foundation::BSTR pbstr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbstr);

        auto win32_impl_result = g_api_table.SysStringLen(pbstr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SysStringByteLen(win32::Windows::Win32::Foundation::BSTR bstr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(bstr);

        auto win32_impl_result = g_api_table.SysStringByteLen(bstr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BSTR __stdcall ORBIT_IMPL_SysAllocStringByteLen(win32::Windows::Win32::Foundation::PSTR psz, uint32_t len) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(psz);
        ORBIT_TRACK_PARAM(len);

        auto win32_impl_result = g_api_table.SysAllocStringByteLen(psz, len);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseHandle(win32::Windows::Win32::Foundation::HANDLE hObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);

        auto win32_impl_result = g_api_table.CloseHandle(hObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DuplicateHandle(win32::Windows::Win32::Foundation::HANDLE hSourceProcessHandle, win32::Windows::Win32::Foundation::HANDLE hSourceHandle, win32::Windows::Win32::Foundation::HANDLE hTargetProcessHandle, win32::Windows::Win32::Foundation::HANDLE* lpTargetHandle, uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::DUPLICATE_HANDLE_OPTIONS dwOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSourceProcessHandle);
        ORBIT_TRACK_PARAM(hSourceHandle);
        ORBIT_TRACK_PARAM(hTargetProcessHandle);
        ORBIT_TRACK_PARAM(lpTargetHandle);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(dwOptions);

        auto win32_impl_result = g_api_table.DuplicateHandle(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle, lpTargetHandle, dwDesiredAccess, bInheritHandle, dwOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CompareObjectHandles(win32::Windows::Win32::Foundation::HANDLE hFirstObjectHandle, win32::Windows::Win32::Foundation::HANDLE hSecondObjectHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFirstObjectHandle);
        ORBIT_TRACK_PARAM(hSecondObjectHandle);

        auto win32_impl_result = g_api_table.CompareObjectHandles(hFirstObjectHandle, hSecondObjectHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetHandleInformation(win32::Windows::Win32::Foundation::HANDLE hObject, uint32_t* lpdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(lpdwFlags);

        auto win32_impl_result = g_api_table.GetHandleInformation(hObject, lpdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetHandleInformation(win32::Windows::Win32::Foundation::HANDLE hObject, uint32_t dwMask, win32::Windows::Win32::Foundation::HANDLE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(dwMask);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.SetHandleInformation(hObject, dwMask, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::WIN32_ERROR __stdcall ORBIT_IMPL_GetLastError() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetLastError();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SetLastError(win32::Windows::Win32::Foundation::WIN32_ERROR dwErrCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwErrCode);

        g_api_table.SetLastError(dwErrCode);
        
    }

    void __stdcall ORBIT_IMPL_SetLastErrorEx(win32::Windows::Win32::Foundation::WIN32_ERROR dwErrCode, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwErrCode);
        ORBIT_TRACK_PARAM(dwType);

        g_api_table.SetLastErrorEx(dwErrCode, dwType);
        
    }

    uint32_t __stdcall ORBIT_IMPL_RtlNtStatusToDosError(win32::Windows::Win32::Foundation::NTSTATUS Status) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Status);

        auto win32_impl_result = g_api_table.RtlNtStatusToDosError(Status);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
