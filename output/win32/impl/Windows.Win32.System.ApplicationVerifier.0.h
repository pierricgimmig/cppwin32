// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_ApplicationVerifier_0_H
#define WIN32_Windows_Win32_System_ApplicationVerifier_0_H
WIN32_EXPORT namespace win32::Windows::Win32::System::ApplicationVerifier
{
#pragma region enums
    enum class VERIFIER_ENUM_RESOURCE_FLAGS : uint32_t
    {
        AVRF_ENUM_RESOURCES_FLAGS_DONT_RESOLVE_TRACES = 0x2,
        AVRF_ENUM_RESOURCES_FLAGS_SUSPEND = 0x1,
    };
    enum class eAvrfResourceTypes : int32_t
    {
        AvrfResourceHeapAllocation = 0,
        AvrfResourceHandleTrace = 1,
        AvrfResourceMax = 2,
    };
    enum class eHANDLE_TRACE_OPERATIONS : int32_t
    {
        OperationDbUnused = 0,
        OperationDbOPEN = 1,
        OperationDbCLOSE = 2,
        OperationDbBADREF = 3,
    };
    enum class eHeapAllocationState : int32_t
    {
        HeapFullPageHeap = 1073741824,
        HeapMetadata = -2147483648,
        HeapStateMask = -65536,
    };
    enum class eHeapEnumerationLevel : int32_t
    {
        HeapEnumerationEverything = 0,
        HeapEnumerationStop = -1,
    };
    enum class eUserAllocationState : int32_t
    {
        AllocationStateUnknown = 0,
        AllocationStateBusy = 1,
        AllocationStateFree = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct AVRF_BACKTRACE_INFORMATION;
    struct AVRF_HANDLE_OPERATION;
    struct AVRF_HEAP_ALLOCATION;
#pragma endregion forward_declarations

#pragma region delegates
    using AVRF_RESOURCE_ENUMERATE_CALLBACK = uint32_t __stdcall(void*, void*, uint32_t*);
    using AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK = uint32_t __stdcall(Windows::Win32::System::ApplicationVerifier::AVRF_HEAP_ALLOCATION*, void*, uint32_t*);
    using AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK = uint32_t __stdcall(Windows::Win32::System::ApplicationVerifier::AVRF_HANDLE_OPERATION*, void*, uint32_t*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
