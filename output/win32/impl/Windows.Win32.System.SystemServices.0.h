// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_SystemServices_0_H
#define WIN32_Windows_Win32_System_SystemServices_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct BOOLEAN;
    struct HANDLE;
    struct HRESULT;
    struct HWND;
    struct NTSTATUS;
    struct POINTL;
    struct PSTR;
    struct PWSTR;
    struct RECTL;
    struct SIZE;
}
WIN32_EXPORT namespace win32::Windows::Win32::Graphics::DirectDraw
{
    struct DDPIXELFORMAT;
    struct DDSURFACEDESC;
    struct DD_CALLBACKS;
    struct DD_DIRECTDRAW_GLOBAL;
    struct DD_HALINFO;
    struct DD_PALETTECALLBACKS;
    struct DD_SURFACECALLBACKS;
    struct DD_SURFACE_LOCAL;
    struct VIDEOMEMORY;
}
WIN32_EXPORT namespace win32::Windows::Win32::Graphics::Gdi
{
    struct COLORADJUSTMENT;
    struct DESIGNVECTOR;
    struct DEVMODEW;
    struct HBITMAP;
    struct TRIVERTEX;
    struct TTPOLYGONHEADER;
}
WIN32_EXPORT namespace win32::Windows::Win32::Graphics::OpenGL
{
    struct PIXELFORMATDESCRIPTOR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Diagnostics::Debug
{
    struct EXCEPTION_POINTERS;
}
WIN32_EXPORT namespace win32::Windows::Win32::UI::ColorSystem
{
    struct LOGCOLORSPACEW;
}
WIN32_EXPORT namespace win32::Windows::Win32::UI::DisplayDevices
{
    struct BLENDOBJ;
    struct BRUSHOBJ;
    struct CLIPOBJ;
    struct DEVINFO;
    struct DRIVEROBJ;
    struct DRVENABLEDATA;
    struct FONTOBJ;
    struct GDIINFO;
    struct GLYPHDATA;
    struct HSURF;
    struct IFIMETRICS;
    struct LINEATTRS;
    struct PALOBJ;
    struct PATHOBJ;
    struct PERBANDINFO;
    struct STROBJ;
    struct SURFOBJ;
    struct WNDOBJ;
    struct XLATEOBJ;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::SystemServices
{
#pragma region enums
    enum class ACCESS_REASON_TYPE : int32_t
    {
        AccessReasonNone = 0,
        AccessReasonAllowedAce = 65536,
        AccessReasonDeniedAce = 131072,
        AccessReasonAllowedParentAce = 196608,
        AccessReasonDeniedParentAce = 262144,
        AccessReasonNotGrantedByCape = 327680,
        AccessReasonNotGrantedByParentCape = 393216,
        AccessReasonNotGrantedToAppContainer = 458752,
        AccessReasonMissingPrivilege = 1048576,
        AccessReasonFromPrivilege = 2097152,
        AccessReasonIntegrityLevel = 3145728,
        AccessReasonOwnership = 4194304,
        AccessReasonNullDacl = 5242880,
        AccessReasonEmptyDacl = 6291456,
        AccessReasonNoSD = 7340032,
        AccessReasonNoGrant = 8388608,
        AccessReasonTrustLabel = 9437184,
        AccessReasonFilterAce = 10485760,
    };
    enum class ACTIVATION_CONTEXT_INFO_CLASS : int32_t
    {
        ActivationContextBasicInformation = 1,
        ActivationContextDetailedInformation = 2,
        AssemblyDetailedInformationInActivationContext = 3,
        FileInformationInAssemblyOfAssemblyInActivationContext = 4,
        RunlevelInformationInActivationContext = 5,
        CompatibilityInformationInActivationContext = 6,
        ActivationContextManifestResourceName = 7,
        MaxActivationContextInfoClass = 8,
        AssemblyDetailedInformationInActivationContxt = 3,
        FileInformationInAssemblyOfAssemblyInActivationContxt = 4,
    };
    enum class ALERT_SYSTEM_SEV : uint32_t
    {
        ALERT_SYSTEM_INFORMATIONAL = 0x1,
        ALERT_SYSTEM_WARNING = 0x2,
        ALERT_SYSTEM_ERROR = 0x3,
        ALERT_SYSTEM_QUERY = 0x4,
        ALERT_SYSTEM_CRITICAL = 0x5,
    };
    enum class APPCOMMAND_ID : uint32_t
    {
        APPCOMMAND_BROWSER_BACKWARD = 0x1,
        APPCOMMAND_BROWSER_FORWARD = 0x2,
        APPCOMMAND_BROWSER_REFRESH = 0x3,
        APPCOMMAND_BROWSER_STOP = 0x4,
        APPCOMMAND_BROWSER_SEARCH = 0x5,
        APPCOMMAND_BROWSER_FAVORITES = 0x6,
        APPCOMMAND_BROWSER_HOME = 0x7,
        APPCOMMAND_VOLUME_MUTE = 0x8,
        APPCOMMAND_VOLUME_DOWN = 0x9,
        APPCOMMAND_VOLUME_UP = 0xa,
        APPCOMMAND_MEDIA_NEXTTRACK = 0xb,
        APPCOMMAND_MEDIA_PREVIOUSTRACK = 0xc,
        APPCOMMAND_MEDIA_STOP = 0xd,
        APPCOMMAND_MEDIA_PLAY_PAUSE = 0xe,
        APPCOMMAND_LAUNCH_MAIL = 0xf,
        APPCOMMAND_LAUNCH_MEDIA_SELECT = 0x10,
        APPCOMMAND_LAUNCH_APP1 = 0x11,
        APPCOMMAND_LAUNCH_APP2 = 0x12,
        APPCOMMAND_BASS_DOWN = 0x13,
        APPCOMMAND_BASS_BOOST = 0x14,
        APPCOMMAND_BASS_UP = 0x15,
        APPCOMMAND_TREBLE_DOWN = 0x16,
        APPCOMMAND_TREBLE_UP = 0x17,
        APPCOMMAND_MICROPHONE_VOLUME_MUTE = 0x18,
        APPCOMMAND_MICROPHONE_VOLUME_DOWN = 0x19,
        APPCOMMAND_MICROPHONE_VOLUME_UP = 0x1a,
        APPCOMMAND_HELP = 0x1b,
        APPCOMMAND_FIND = 0x1c,
        APPCOMMAND_NEW = 0x1d,
        APPCOMMAND_OPEN = 0x1e,
        APPCOMMAND_CLOSE = 0x1f,
        APPCOMMAND_SAVE = 0x20,
        APPCOMMAND_PRINT = 0x21,
        APPCOMMAND_UNDO = 0x22,
        APPCOMMAND_REDO = 0x23,
        APPCOMMAND_COPY = 0x24,
        APPCOMMAND_CUT = 0x25,
        APPCOMMAND_PASTE = 0x26,
        APPCOMMAND_REPLY_TO_MAIL = 0x27,
        APPCOMMAND_FORWARD_MAIL = 0x28,
        APPCOMMAND_SEND_MAIL = 0x29,
        APPCOMMAND_SPELL_CHECK = 0x2a,
        APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 0x2b,
        APPCOMMAND_MIC_ON_OFF_TOGGLE = 0x2c,
        APPCOMMAND_CORRECTION_LIST = 0x2d,
        APPCOMMAND_MEDIA_PLAY = 0x2e,
        APPCOMMAND_MEDIA_PAUSE = 0x2f,
        APPCOMMAND_MEDIA_RECORD = 0x30,
        APPCOMMAND_MEDIA_FAST_FORWARD = 0x31,
        APPCOMMAND_MEDIA_REWIND = 0x32,
        APPCOMMAND_MEDIA_CHANNEL_UP = 0x33,
        APPCOMMAND_MEDIA_CHANNEL_DOWN = 0x34,
        APPCOMMAND_DELETE = 0x35,
        APPCOMMAND_DWM_FLIP3D = 0x36,
    };
    enum class ARM64_FNPDATA_CR : int32_t
    {
        PdataCrUnchained = 0,
        PdataCrUnchainedSavedLr = 1,
        PdataCrChainedWithPac = 2,
        PdataCrChained = 3,
    };
    enum class ARM64_FNPDATA_FLAGS : int32_t
    {
        PdataRefToFullXdata = 0,
        PdataPackedUnwindFunction = 1,
        PdataPackedUnwindFragment = 2,
    };
    enum class ATF_FLAGS : uint32_t
    {
        ATF_TIMEOUTON = 0x1,
        ATF_ONOFFFEEDBACK = 0x2,
    };
    enum class CERT_VIEWPROPERTIES_STRUCT_FLAGS : uint32_t
    {
        CM_ENABLEHOOK = 0x1,
        CM_SHOW_HELP = 0x2,
        CM_SHOW_HELPICON = 0x4,
        CM_ENABLETEMPLATE = 0x8,
        CM_HIDE_ADVANCEPAGE = 0x10,
        CM_HIDE_TRUSTPAGE = 0x20,
        CM_NO_NAMECHANGE = 0x40,
        CM_NO_EDITTRUST = 0x80,
        CM_HIDE_DETAILPAGE = 0x100,
        CM_ADD_CERT_STORES = 0x200,
    };
    enum class CFE_UNDERLINE : uint32_t
    {
        CFU_CF1UNDERLINE = 0xff,
        CFU_INVERT = 0xfe,
        CFU_UNDERLINETHICKLONGDASH = 0x12,
        CFU_UNDERLINETHICKDOTTED = 0x11,
        CFU_UNDERLINETHICKDASHDOTDOT = 0x10,
        CFU_UNDERLINETHICKDASHDOT = 0xf,
        CFU_UNDERLINETHICKDASH = 0xe,
        CFU_UNDERLINELONGDASH = 0xd,
        CFU_UNDERLINEHEAVYWAVE = 0xc,
        CFU_UNDERLINEDOUBLEWAVE = 0xb,
        CFU_UNDERLINEHAIRLINE = 0xa,
        CFU_UNDERLINETHICK = 0x9,
        CFU_UNDERLINEWAVE = 0x8,
        CFU_UNDERLINEDASHDOTDOT = 0x7,
        CFU_UNDERLINEDASHDOT = 0x6,
        CFU_UNDERLINEDASH = 0x5,
        CFU_UNDERLINEDOTTED = 0x4,
        CFU_UNDERLINEDOUBLE = 0x3,
        CFU_UNDERLINEWORD = 0x2,
        CFU_UNDERLINE = 0x1,
        CFU_UNDERLINENONE = 0x0,
    };
    enum class CHOOSECOLOR_FLAGS : uint32_t
    {
        CC_RGBINIT = 0x1,
        CC_FULLOPEN = 0x2,
        CC_PREVENTFULLOPEN = 0x4,
        CC_SHOWHELP = 0x8,
        CC_ENABLEHOOK = 0x10,
        CC_ENABLETEMPLATE = 0x20,
        CC_ENABLETEMPLATEHANDLE = 0x40,
        CC_SOLIDCOLOR = 0x80,
        CC_ANYCOLOR = 0x100,
    };
    enum class CLIPBOARD_FORMATS : uint32_t
    {
        CF_TEXT = 0x1,
        CF_BITMAP = 0x2,
        CF_METAFILEPICT = 0x3,
        CF_SYLK = 0x4,
        CF_DIF = 0x5,
        CF_TIFF = 0x6,
        CF_OEMTEXT = 0x7,
        CF_DIB = 0x8,
        CF_PALETTE = 0x9,
        CF_PENDATA = 0xa,
        CF_RIFF = 0xb,
        CF_WAVE = 0xc,
        CF_UNICODETEXT = 0xd,
        CF_ENHMETAFILE = 0xe,
        CF_HDROP = 0xf,
        CF_LOCALE = 0x10,
        CF_DIBV5 = 0x11,
        CF_MAX = 0x12,
        CF_OWNERDISPLAY = 0x80,
        CF_DSPTEXT = 0x81,
        CF_DSPBITMAP = 0x82,
        CF_DSPMETAFILEPICT = 0x83,
        CF_DSPENHMETAFILE = 0x8e,
        CF_PRIVATEFIRST = 0x200,
        CF_PRIVATELAST = 0x2ff,
        CF_GDIOBJFIRST = 0x300,
        CF_GDIOBJLAST = 0x3ff,
    };
    enum class CM_ERROR_CONTROL_TYPE : int32_t
    {
        IgnoreError = 0,
        NormalError = 1,
        SevereError = 2,
        CriticalError = 3,
    };
    enum class CM_SERVICE_LOAD_TYPE : int32_t
    {
        BootLoad = 0,
        SystemLoad = 1,
        AutoLoad = 2,
        DemandLoad = 3,
        DisableLoad = 4,
    };
    enum class CM_SERVICE_NODE_TYPE : int32_t
    {
        DriverType = 1,
        FileSystemType = 2,
        Win32ServiceOwnProcess = 16,
        Win32ServiceShareProcess = 32,
        AdapterType = 4,
        RecognizerType = 8,
    };
    enum class D3DANTIALIASMODE : int32_t
    {
        D3DANTIALIAS_NONE = 0,
        D3DANTIALIAS_SORTDEPENDENT = 1,
        D3DANTIALIAS_SORTINDEPENDENT = 2,
        D3DANTIALIAS_FORCE_DWORD = 2147483647,
    };
    enum class D3DLIGHTSTATETYPE : int32_t
    {
        D3DLIGHTSTATE_MATERIAL = 1,
        D3DLIGHTSTATE_AMBIENT = 2,
        D3DLIGHTSTATE_COLORMODEL = 3,
        D3DLIGHTSTATE_FOGMODE = 4,
        D3DLIGHTSTATE_FOGSTART = 5,
        D3DLIGHTSTATE_FOGEND = 6,
        D3DLIGHTSTATE_FOGDENSITY = 7,
        D3DLIGHTSTATE_COLORVERTEX = 8,
        D3DLIGHTSTATE_FORCE_DWORD = 2147483647,
    };
    enum class D3DNTHAL_DP2OPERATION : int32_t
    {
        D3DNTDP2OP_POINTS = 1,
        D3DNTDP2OP_INDEXEDLINELIST = 2,
        D3DNTDP2OP_INDEXEDTRIANGLELIST = 3,
        D3DNTDP2OP_RENDERSTATE = 8,
        D3DNTDP2OP_LINELIST = 15,
        D3DNTDP2OP_LINESTRIP = 16,
        D3DNTDP2OP_INDEXEDLINESTRIP = 17,
        D3DNTDP2OP_TRIANGLELIST = 18,
        D3DNTDP2OP_TRIANGLESTRIP = 19,
        D3DNTDP2OP_INDEXEDTRIANGLESTRIP = 20,
        D3DNTDP2OP_TRIANGLEFAN = 21,
        D3DNTDP2OP_INDEXEDTRIANGLEFAN = 22,
        D3DNTDP2OP_TRIANGLEFAN_IMM = 23,
        D3DNTDP2OP_LINELIST_IMM = 24,
        D3DNTDP2OP_TEXTURESTAGESTATE = 25,
        D3DNTDP2OP_INDEXEDTRIANGLELIST2 = 26,
        D3DNTDP2OP_INDEXEDLINELIST2 = 27,
        D3DNTDP2OP_VIEWPORTINFO = 28,
        D3DNTDP2OP_WINFO = 29,
        D3DNTDP2OP_SETPALETTE = 30,
        D3DNTDP2OP_UPDATEPALETTE = 31,
        D3DNTDP2OP_ZRANGE = 32,
        D3DNTDP2OP_SETMATERIAL = 33,
        D3DNTDP2OP_SETLIGHT = 34,
        D3DNTDP2OP_CREATELIGHT = 35,
        D3DNTDP2OP_SETTRANSFORM = 36,
        D3DNTDP2OP_TEXBLT = 38,
        D3DNTDP2OP_STATESET = 39,
        D3DNTDP2OP_SETPRIORITY = 40,
        D3DNTDP2OP_SETRENDERTARGET = 41,
        D3DNTDP2OP_CLEAR = 42,
        D3DNTDP2OP_SETTEXLOD = 43,
        D3DNTDP2OP_SETCLIPPLANE = 44,
    };
    enum class D3DOPCODE : int32_t
    {
        D3DOP_POINT = 1,
        D3DOP_LINE = 2,
        D3DOP_TRIANGLE = 3,
        D3DOP_MATRIXLOAD = 4,
        D3DOP_MATRIXMULTIPLY = 5,
        D3DOP_STATETRANSFORM = 6,
        D3DOP_STATELIGHT = 7,
        D3DOP_STATERENDER = 8,
        D3DOP_PROCESSVERTICES = 9,
        D3DOP_TEXTURELOAD = 10,
        D3DOP_EXIT = 11,
        D3DOP_BRANCHFORWARD = 12,
        D3DOP_SPAN = 13,
        D3DOP_SETSTATUS = 14,
        D3DOP_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREBLEND : int32_t
    {
        D3DTBLEND_DECAL = 1,
        D3DTBLEND_MODULATE = 2,
        D3DTBLEND_DECALALPHA = 3,
        D3DTBLEND_MODULATEALPHA = 4,
        D3DTBLEND_DECALMASK = 5,
        D3DTBLEND_MODULATEMASK = 6,
        D3DTBLEND_COPY = 7,
        D3DTBLEND_ADD = 8,
        D3DTBLEND_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREFILTER : int32_t
    {
        D3DFILTER_NEAREST = 1,
        D3DFILTER_LINEAR = 2,
        D3DFILTER_MIPNEAREST = 3,
        D3DFILTER_MIPLINEAR = 4,
        D3DFILTER_LINEARMIPNEAREST = 5,
        D3DFILTER_LINEARMIPLINEAR = 6,
        D3DFILTER_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREMAGFILTER : int32_t
    {
        D3DTFG_POINT = 1,
        D3DTFG_LINEAR = 2,
        D3DTFG_FLATCUBIC = 3,
        D3DTFG_GAUSSIANCUBIC = 4,
        D3DTFG_ANISOTROPIC = 5,
        D3DTFG_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREMINFILTER : int32_t
    {
        D3DTFN_POINT = 1,
        D3DTFN_LINEAR = 2,
        D3DTFN_ANISOTROPIC = 3,
        D3DTFN_FORCE_DWORD = 2147483647,
    };
    enum class D3DTEXTUREMIPFILTER : int32_t
    {
        D3DTFP_NONE = 1,
        D3DTFP_POINT = 2,
        D3DTFP_LINEAR = 3,
        D3DTFP_FORCE_DWORD = 2147483647,
    };
    enum class D3DVERTEXTYPE : int32_t
    {
        D3DVT_VERTEX = 1,
        D3DVT_LVERTEX = 2,
        D3DVT_TLVERTEX = 3,
        D3DVT_FORCE_DWORD = 2147483647,
    };
    enum class DEVICE_POWER_STATE : int32_t
    {
        PowerDeviceUnspecified = 0,
        PowerDeviceD0 = 1,
        PowerDeviceD1 = 2,
        PowerDeviceD2 = 3,
        PowerDeviceD3 = 4,
        PowerDeviceMaximum = 5,
    };
    enum class DEVPROPSTORE : int32_t
    {
        DEVPROP_STORE_SYSTEM = 0,
        DEVPROP_STORE_USER = 1,
    };
    enum class DEV_BROADCAST_HDR_DEVICE_TYPE : uint32_t
    {
        DBT_DEVTYP_DEVICEINTERFACE = 0x5,
        DBT_DEVTYP_HANDLE = 0x6,
        DBT_DEVTYP_OEM = 0x0,
        DBT_DEVTYP_PORT = 0x3,
        DBT_DEVTYP_VOLUME = 0x2,
    };
    enum class DEV_BROADCAST_VOLUME_FLAGS : uint16_t
    {
        DBTF_MEDIA = 0x1,
        DBTF_NET = 0x2,
    };
    enum class ENG_DEVICE_ATTRIBUTE : int32_t
    {
        QDA_RESERVED = 0,
        QDA_ACCELERATION_LEVEL = 1,
    };
    enum class ENG_SYSTEM_ATTRIBUTE : int32_t
    {
        EngProcessorFeature = 1,
        EngNumberOfProcessors = 2,
        EngOptimumAvailableUserMemory = 3,
        EngOptimumAvailableSystemMemory = 4,
    };
    enum class ENLISTMENT_INFORMATION_CLASS : int32_t
    {
        EnlistmentBasicInformation = 0,
        EnlistmentRecoveryInformation = 1,
        EnlistmentCrmInformation = 2,
    };
    enum class GESTURECONFIG_FLAGS : uint32_t
    {
        GC_ALLGESTURES = 0x1,
        GC_ZOOM = 0x1,
        GC_PAN = 0x1,
        GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 0x2,
        GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 0x4,
        GC_PAN_WITH_GUTTER = 0x8,
        GC_PAN_WITH_INERTIA = 0x10,
        GC_ROTATE = 0x1,
        GC_TWOFINGERTAP = 0x1,
        GC_PRESSANDTAP = 0x1,
        GC_ROLLOVER = 0x1,
    };
    enum class HEAP_INFORMATION_CLASS : int32_t
    {
        HeapCompatibilityInformation = 0,
        HeapEnableTerminationOnCorruption = 1,
        HeapOptimizeResources = 3,
        HeapTag = 7,
    };
    enum class HIBERFILE_BUCKET_SIZE : int32_t
    {
        HiberFileBucket1GB = 0,
        HiberFileBucket2GB = 1,
        HiberFileBucket4GB = 2,
        HiberFileBucket8GB = 3,
        HiberFileBucket16GB = 4,
        HiberFileBucket32GB = 5,
        HiberFileBucketUnlimited = 6,
        HiberFileBucketMax = 7,
    };
    enum class IGP_ID : uint32_t
    {
        IGP_GETIMEVERSION = 0xfffffffc,
        IGP_PROPERTY = 0x4,
        IGP_CONVERSION = 0x8,
        IGP_SENTENCE = 0xc,
        IGP_UI = 0x10,
        IGP_SETCOMPSTR = 0x14,
        IGP_SELECT = 0x18,
    };
    enum class IMAGE_AUX_SYMBOL_TYPE : int32_t
    {
        IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
    };
    enum class IMAGE_POLICY_ENTRY_TYPE : int32_t
    {
        ImagePolicyEntryTypeNone = 0,
        ImagePolicyEntryTypeBool = 1,
        ImagePolicyEntryTypeInt8 = 2,
        ImagePolicyEntryTypeUInt8 = 3,
        ImagePolicyEntryTypeInt16 = 4,
        ImagePolicyEntryTypeUInt16 = 5,
        ImagePolicyEntryTypeInt32 = 6,
        ImagePolicyEntryTypeUInt32 = 7,
        ImagePolicyEntryTypeInt64 = 8,
        ImagePolicyEntryTypeUInt64 = 9,
        ImagePolicyEntryTypeAnsiString = 10,
        ImagePolicyEntryTypeUnicodeString = 11,
        ImagePolicyEntryTypeOverride = 12,
        ImagePolicyEntryTypeMaximum = 13,
    };
    enum class IMAGE_POLICY_ID : int32_t
    {
        ImagePolicyIdNone = 0,
        ImagePolicyIdEtw = 1,
        ImagePolicyIdDebug = 2,
        ImagePolicyIdCrashDump = 3,
        ImagePolicyIdCrashDumpKey = 4,
        ImagePolicyIdCrashDumpKeyGuid = 5,
        ImagePolicyIdParentSd = 6,
        ImagePolicyIdParentSdRev = 7,
        ImagePolicyIdSvn = 8,
        ImagePolicyIdDeviceId = 9,
        ImagePolicyIdCapability = 10,
        ImagePolicyIdScenarioId = 11,
        ImagePolicyIdMaximum = 12,
    };
    enum class IMPORT_OBJECT_NAME_TYPE : int32_t
    {
        IMPORT_OBJECT_ORDINAL = 0,
        IMPORT_OBJECT_NAME = 1,
        IMPORT_OBJECT_NAME_NO_PREFIX = 2,
        IMPORT_OBJECT_NAME_UNDECORATE = 3,
        IMPORT_OBJECT_NAME_EXPORTAS = 4,
    };
    enum class IMPORT_OBJECT_TYPE : int32_t
    {
        IMPORT_OBJECT_CODE = 0,
        IMPORT_OBJECT_DATA = 1,
        IMPORT_OBJECT_CONST = 2,
    };
    enum class JOBOBJECTINFOCLASS : int32_t
    {
        JobObjectBasicAccountingInformation = 1,
        JobObjectBasicLimitInformation = 2,
        JobObjectBasicProcessIdList = 3,
        JobObjectBasicUIRestrictions = 4,
        JobObjectSecurityLimitInformation = 5,
        JobObjectEndOfJobTimeInformation = 6,
        JobObjectAssociateCompletionPortInformation = 7,
        JobObjectBasicAndIoAccountingInformation = 8,
        JobObjectExtendedLimitInformation = 9,
        JobObjectJobSetInformation = 10,
        JobObjectGroupInformation = 11,
        JobObjectNotificationLimitInformation = 12,
        JobObjectLimitViolationInformation = 13,
        JobObjectGroupInformationEx = 14,
        JobObjectCpuRateControlInformation = 15,
        JobObjectCompletionFilter = 16,
        JobObjectCompletionCounter = 17,
        JobObjectReserved1Information = 18,
        JobObjectReserved2Information = 19,
        JobObjectReserved3Information = 20,
        JobObjectReserved4Information = 21,
        JobObjectReserved5Information = 22,
        JobObjectReserved6Information = 23,
        JobObjectReserved7Information = 24,
        JobObjectReserved8Information = 25,
        JobObjectReserved9Information = 26,
        JobObjectReserved10Information = 27,
        JobObjectReserved11Information = 28,
        JobObjectReserved12Information = 29,
        JobObjectReserved13Information = 30,
        JobObjectReserved14Information = 31,
        JobObjectNetRateControlInformation = 32,
        JobObjectNotificationLimitInformation2 = 33,
        JobObjectLimitViolationInformation2 = 34,
        JobObjectCreateSilo = 35,
        JobObjectSiloBasicInformation = 36,
        JobObjectReserved15Information = 37,
        JobObjectReserved16Information = 38,
        JobObjectReserved17Information = 39,
        JobObjectReserved18Information = 40,
        JobObjectReserved19Information = 41,
        JobObjectReserved20Information = 42,
        JobObjectReserved21Information = 43,
        JobObjectReserved22Information = 44,
        JobObjectReserved23Information = 45,
        JobObjectReserved24Information = 46,
        JobObjectReserved25Information = 47,
        MaxJobObjectInfoClass = 48,
    };
    enum class JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS : int32_t
    {
        JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1,
        JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2,
        JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3,
    };
    enum class JOBOBJECT_RATE_CONTROL_TOLERANCE : int32_t
    {
        ToleranceLow = 1,
        ToleranceMedium = 2,
        ToleranceHigh = 3,
    };
    enum class JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL : int32_t
    {
        ToleranceIntervalShort = 1,
        ToleranceIntervalMedium = 2,
        ToleranceIntervalLong = 3,
    };
    enum class JOB_OBJECT_CPU_RATE_CONTROL : uint32_t
    {
        JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = 0x1,
        JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = 0x2,
        JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = 0x4,
        JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = 0x8,
        JOB_OBJECT__CPU_RATE_CONTROL_MIN_MAX_RATE = 0x10,
    };
    enum class JOB_OBJECT_IO_RATE_CONTROL_FLAGS : int32_t
    {
        JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
        JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
        JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
        JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
        JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
    };
    enum class JOB_OBJECT_NET_RATE_CONTROL_FLAGS : int32_t
    {
        JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
        JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
        JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
        JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
    };
    enum class JOB_OBJECT_TERMINATE_AT_END_ACTION : uint32_t
    {
        JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0x0,
        JOB_OBJECT_POST_AT_END_OF_JOB = 0x1,
    };
    enum class KTMOBJECT_TYPE : int32_t
    {
        KTMOBJECT_TRANSACTION = 0,
        KTMOBJECT_TRANSACTION_MANAGER = 1,
        KTMOBJECT_RESOURCE_MANAGER = 2,
        KTMOBJECT_ENLISTMENT = 3,
        KTMOBJECT_INVALID = 4,
    };
    enum class MEM_DEDICATED_ATTRIBUTE_TYPE : int32_t
    {
        MemDedicatedAttributeReadBandwidth = 0,
        MemDedicatedAttributeReadLatency = 1,
        MemDedicatedAttributeWriteBandwidth = 2,
        MemDedicatedAttributeWriteLatency = 3,
        MemDedicatedAttributeMax = 4,
    };
    enum class MEM_EXTENDED_PARAMETER_TYPE : int32_t
    {
        MemExtendedParameterInvalidType = 0,
        MemExtendedParameterAddressRequirements = 1,
        MemExtendedParameterNumaNode = 2,
        MemExtendedParameterPartitionHandle = 3,
        MemExtendedParameterUserPhysicalHandle = 4,
        MemExtendedParameterAttributeFlags = 5,
        MemExtendedParameterImageMachine = 6,
        MemExtendedParameterMax = 7,
    };
    enum class MEM_SECTION_EXTENDED_PARAMETER_TYPE : int32_t
    {
        MemSectionExtendedParameterInvalidType = 0,
        MemSectionExtendedParameterUserPhysicalFlags = 1,
        MemSectionExtendedParameterNumaNode = 2,
        MemSectionExtendedParameterSigningLevel = 3,
        MemSectionExtendedParameterMax = 4,
    };
    enum class MONITOR_DISPLAY_STATE : int32_t
    {
        PowerMonitorOff = 0,
        PowerMonitorOn = 1,
        PowerMonitorDim = 2,
    };
    enum class OS_DEPLOYEMENT_STATE_VALUES : int32_t
    {
        OS_DEPLOYMENT_STANDARD = 1,
        OS_DEPLOYMENT_COMPACT = 2,
    };
    enum class POWER_INFORMATION_LEVEL : int32_t
    {
        SystemPowerPolicyAc = 0,
        SystemPowerPolicyDc = 1,
        VerifySystemPolicyAc = 2,
        VerifySystemPolicyDc = 3,
        SystemPowerCapabilities = 4,
        SystemBatteryState = 5,
        SystemPowerStateHandler = 6,
        ProcessorStateHandler = 7,
        SystemPowerPolicyCurrent = 8,
        AdministratorPowerPolicy = 9,
        SystemReserveHiberFile = 10,
        ProcessorInformation = 11,
        SystemPowerInformation = 12,
        ProcessorStateHandler2 = 13,
        LastWakeTime = 14,
        LastSleepTime = 15,
        SystemExecutionState = 16,
        SystemPowerStateNotifyHandler = 17,
        ProcessorPowerPolicyAc = 18,
        ProcessorPowerPolicyDc = 19,
        VerifyProcessorPowerPolicyAc = 20,
        VerifyProcessorPowerPolicyDc = 21,
        ProcessorPowerPolicyCurrent = 22,
        SystemPowerStateLogging = 23,
        SystemPowerLoggingEntry = 24,
        SetPowerSettingValue = 25,
        NotifyUserPowerSetting = 26,
        PowerInformationLevelUnused0 = 27,
        SystemMonitorHiberBootPowerOff = 28,
        SystemVideoState = 29,
        TraceApplicationPowerMessage = 30,
        TraceApplicationPowerMessageEnd = 31,
        ProcessorPerfStates = 32,
        ProcessorIdleStates = 33,
        ProcessorCap = 34,
        SystemWakeSource = 35,
        SystemHiberFileInformation = 36,
        TraceServicePowerMessage = 37,
        ProcessorLoad = 38,
        PowerShutdownNotification = 39,
        MonitorCapabilities = 40,
        SessionPowerInit = 41,
        SessionDisplayState = 42,
        PowerRequestCreate = 43,
        PowerRequestAction = 44,
        GetPowerRequestList = 45,
        ProcessorInformationEx = 46,
        NotifyUserModeLegacyPowerEvent = 47,
        GroupPark = 48,
        ProcessorIdleDomains = 49,
        WakeTimerList = 50,
        SystemHiberFileSize = 51,
        ProcessorIdleStatesHv = 52,
        ProcessorPerfStatesHv = 53,
        ProcessorPerfCapHv = 54,
        ProcessorSetIdle = 55,
        LogicalProcessorIdling = 56,
        UserPresence = 57,
        PowerSettingNotificationName = 58,
        GetPowerSettingValue = 59,
        IdleResiliency = 60,
        SessionRITState = 61,
        SessionConnectNotification = 62,
        SessionPowerCleanup = 63,
        SessionLockState = 64,
        SystemHiberbootState = 65,
        PlatformInformation = 66,
        PdcInvocation = 67,
        MonitorInvocation = 68,
        FirmwareTableInformationRegistered = 69,
        SetShutdownSelectedTime = 70,
        SuspendResumeInvocation = 71,
        PlmPowerRequestCreate = 72,
        ScreenOff = 73,
        CsDeviceNotification = 74,
        PlatformRole = 75,
        LastResumePerformance = 76,
        DisplayBurst = 77,
        ExitLatencySamplingPercentage = 78,
        RegisterSpmPowerSettings = 79,
        PlatformIdleStates = 80,
        ProcessorIdleVeto = 81,
        PlatformIdleVeto = 82,
        SystemBatteryStatePrecise = 83,
        ThermalEvent = 84,
        PowerRequestActionInternal = 85,
        BatteryDeviceState = 86,
        PowerInformationInternal = 87,
        ThermalStandby = 88,
        SystemHiberFileType = 89,
        PhysicalPowerButtonPress = 90,
        QueryPotentialDripsConstraint = 91,
        EnergyTrackerCreate = 92,
        EnergyTrackerQuery = 93,
        UpdateBlackBoxRecorder = 94,
        SessionAllowExternalDmaDevices = 95,
        SendSuspendResumeNotification = 96,
        PowerInformationLevelMaximum = 97,
    };
    enum class POWER_MONITOR_REQUEST_REASON : int32_t
    {
        MonitorRequestReasonUnknown = 0,
        MonitorRequestReasonPowerButton = 1,
        MonitorRequestReasonRemoteConnection = 2,
        MonitorRequestReasonScMonitorpower = 3,
        MonitorRequestReasonUserInput = 4,
        MonitorRequestReasonAcDcDisplayBurst = 5,
        MonitorRequestReasonUserDisplayBurst = 6,
        MonitorRequestReasonPoSetSystemState = 7,
        MonitorRequestReasonSetThreadExecutionState = 8,
        MonitorRequestReasonFullWake = 9,
        MonitorRequestReasonSessionUnlock = 10,
        MonitorRequestReasonScreenOffRequest = 11,
        MonitorRequestReasonIdleTimeout = 12,
        MonitorRequestReasonPolicyChange = 13,
        MonitorRequestReasonSleepButton = 14,
        MonitorRequestReasonLid = 15,
        MonitorRequestReasonBatteryCountChange = 16,
        MonitorRequestReasonGracePeriod = 17,
        MonitorRequestReasonPnP = 18,
        MonitorRequestReasonDP = 19,
        MonitorRequestReasonSxTransition = 20,
        MonitorRequestReasonSystemIdle = 21,
        MonitorRequestReasonNearProximity = 22,
        MonitorRequestReasonThermalStandby = 23,
        MonitorRequestReasonResumePdc = 24,
        MonitorRequestReasonResumeS4 = 25,
        MonitorRequestReasonTerminal = 26,
        MonitorRequestReasonPdcSignal = 27,
        MonitorRequestReasonAcDcDisplayBurstSuppressed = 28,
        MonitorRequestReasonSystemStateEntered = 29,
        MonitorRequestReasonWinrt = 30,
        MonitorRequestReasonUserInputKeyboard = 31,
        MonitorRequestReasonUserInputMouse = 32,
        MonitorRequestReasonUserInputTouchpad = 33,
        MonitorRequestReasonUserInputPen = 34,
        MonitorRequestReasonUserInputAccelerometer = 35,
        MonitorRequestReasonUserInputHid = 36,
        MonitorRequestReasonUserInputPoUserPresent = 37,
        MonitorRequestReasonUserInputSessionSwitch = 38,
        MonitorRequestReasonUserInputInitialization = 39,
        MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40,
        MonitorRequestReasonPdcSignalWindowsMobileShell = 41,
        MonitorRequestReasonPdcSignalHeyCortana = 42,
        MonitorRequestReasonPdcSignalHolographicShell = 43,
        MonitorRequestReasonPdcSignalFingerprint = 44,
        MonitorRequestReasonDirectedDrips = 45,
        MonitorRequestReasonDim = 46,
        MonitorRequestReasonBuiltinPanel = 47,
        MonitorRequestReasonDisplayRequiredUnDim = 48,
        MonitorRequestReasonBatteryCountChangeSuppressed = 49,
        MonitorRequestReasonResumeModernStandby = 50,
        MonitorRequestReasonTerminalInit = 51,
        MonitorRequestReasonPdcSignalSensorsHumanPresence = 52,
        MonitorRequestReasonBatteryPreCritical = 53,
        MonitorRequestReasonUserInputTouch = 54,
        MonitorRequestReasonMax = 55,
    };
    enum class POWER_MONITOR_REQUEST_TYPE : int32_t
    {
        MonitorRequestTypeOff = 0,
        MonitorRequestTypeOnAndPresent = 1,
        MonitorRequestTypeToggleOn = 2,
    };
    enum class POWER_REQUEST_CONTEXT_FLAGS : uint32_t
    {
        POWER_REQUEST_CONTEXT_DETAILED_STRING = 0x2,
        POWER_REQUEST_CONTEXT_SIMPLE_STRING = 0x1,
    };
    enum class POWER_REQUEST_TYPE : int32_t
    {
        PowerRequestDisplayRequired = 0,
        PowerRequestSystemRequired = 1,
        PowerRequestAwayModeRequired = 2,
        PowerRequestExecutionRequired = 3,
    };
    enum class POWER_SETTING_ALTITUDE : int32_t
    {
        ALTITUDE_GROUP_POLICY = 0,
        ALTITUDE_USER = 1,
        ALTITUDE_RUNTIME_OVERRIDE = 2,
        ALTITUDE_PROVISIONING = 3,
        ALTITUDE_OEM_CUSTOMIZATION = 4,
        ALTITUDE_INTERNAL_OVERRIDE = 5,
        ALTITUDE_OS_DEFAULT = 6,
    };
    enum class POWER_USER_PRESENCE_TYPE : int32_t
    {
        UserNotPresent = 0,
        UserPresent = 1,
        UserUnknown = 255,
    };
    enum class PROCESS_MITIGATION_POLICY : int32_t
    {
        ProcessDEPPolicy = 0,
        ProcessASLRPolicy = 1,
        ProcessDynamicCodePolicy = 2,
        ProcessStrictHandleCheckPolicy = 3,
        ProcessSystemCallDisablePolicy = 4,
        ProcessMitigationOptionsMask = 5,
        ProcessExtensionPointDisablePolicy = 6,
        ProcessControlFlowGuardPolicy = 7,
        ProcessSignaturePolicy = 8,
        ProcessFontDisablePolicy = 9,
        ProcessImageLoadPolicy = 10,
        ProcessSystemCallFilterPolicy = 11,
        ProcessPayloadRestrictionPolicy = 12,
        ProcessChildProcessPolicy = 13,
        ProcessSideChannelIsolationPolicy = 14,
        ProcessUserShadowStackPolicy = 15,
        ProcessRedirectionTrustPolicy = 16,
        MaxProcessMitigationPolicy = 17,
    };
    enum class RESOURCEMANAGER_INFORMATION_CLASS : int32_t
    {
        ResourceManagerBasicInformation = 0,
        ResourceManagerCompletionInformation = 1,
    };
    enum class RTL_SYSTEM_GLOBAL_DATA_ID : int32_t
    {
        GlobalDataIdUnknown = 0,
        GlobalDataIdRngSeedVersion = 1,
        GlobalDataIdInterruptTime = 2,
        GlobalDataIdTimeZoneBias = 3,
        GlobalDataIdImageNumberLow = 4,
        GlobalDataIdImageNumberHigh = 5,
        GlobalDataIdTimeZoneId = 6,
        GlobalDataIdNtMajorVersion = 7,
        GlobalDataIdNtMinorVersion = 8,
        GlobalDataIdSystemExpirationDate = 9,
        GlobalDataIdKdDebuggerEnabled = 10,
        GlobalDataIdCyclesPerYield = 11,
        GlobalDataIdSafeBootMode = 12,
        GlobalDataIdLastSystemRITEventTickCount = 13,
    };
    enum class RTL_UMS_SCHEDULER_REASON : int32_t
    {
        UmsSchedulerStartup = 0,
        UmsSchedulerThreadBlocked = 1,
        UmsSchedulerThreadYield = 2,
    };
    enum class RTL_UMS_THREAD_INFO_CLASS : int32_t
    {
        UmsThreadInvalidInfoClass = 0,
        UmsThreadUserContext = 1,
        UmsThreadPriority = 2,
        UmsThreadAffinity = 3,
        UmsThreadTeb = 4,
        UmsThreadIsSuspended = 5,
        UmsThreadIsTerminated = 6,
        UmsThreadMaxInfoClass = 7,
    };
    enum class ReplacesCorHdrNumericDefines : int32_t
    {
        COMIMAGE_FLAGS_ILONLY = 1,
        COMIMAGE_FLAGS_32BITREQUIRED = 2,
        COMIMAGE_FLAGS_IL_LIBRARY = 4,
        COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
        COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
        COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
        COMIMAGE_FLAGS_32BITPREFERRED = 131072,
        COR_VERSION_MAJOR_V2 = 2,
        COR_VERSION_MAJOR = 2,
        COR_VERSION_MINOR = 5,
        COR_DELETED_NAME_LENGTH = 8,
        COR_VTABLEGAP_NAME_LENGTH = 8,
        NATIVE_TYPE_MAX_CB = 1,
        COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
        IMAGE_COR_MIH_METHODRVA = 1,
        IMAGE_COR_MIH_EHRVA = 2,
        IMAGE_COR_MIH_BASICBLOCK = 8,
        COR_VTABLE_32BIT = 1,
        COR_VTABLE_64BIT = 2,
        COR_VTABLE_FROM_UNMANAGED = 4,
        COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
        COR_VTABLE_CALL_MOST_DERIVED = 16,
        IMAGE_COR_EATJ_THUNK_SIZE = 32,
        MAX_CLASS_NAME = 1024,
        MAX_PACKAGE_NAME = 1024,
    };
    enum class SECTION_FLAGS : uint32_t
    {
        SECTION_ALL_ACCESS = 0xf001f,
        SECTION_QUERY = 0x1,
        SECTION_MAP_WRITE = 0x2,
        SECTION_MAP_READ = 0x4,
        SECTION_MAP_EXECUTE = 0x8,
        SECTION_EXTEND_SIZE = 0x10,
        SECTION_MAP_EXECUTE_EXPLICIT = 0x20,
    };
    enum class SERVERSILO_STATE : int32_t
    {
        SERVERSILO_INITING = 0,
        SERVERSILO_STARTED = 1,
        SERVERSILO_SHUTTING_DOWN = 2,
        SERVERSILO_TERMINATING = 3,
        SERVERSILO_TERMINATED = 4,
    };
    enum class SE_IMAGE_SIGNATURE_TYPE : int32_t
    {
        SeImageSignatureNone = 0,
        SeImageSignatureEmbedded = 1,
        SeImageSignatureCache = 2,
        SeImageSignatureCatalogCached = 3,
        SeImageSignatureCatalogNotCached = 4,
        SeImageSignatureCatalogHint = 5,
        SeImageSignaturePackageCatalog = 6,
        SeImageSignaturePplMitigated = 7,
    };
    enum class SE_LEARNING_MODE_DATA_TYPE : int32_t
    {
        SeLearningModeInvalidType = 0,
        SeLearningModeSettings = 1,
        SeLearningModeMax = 2,
    };
    enum class SharedVirtualDiskHandleState : int32_t
    {
        SharedVirtualDiskHandleStateNone = 0,
        SharedVirtualDiskHandleStateFileShared = 1,
        SharedVirtualDiskHandleStateHandleShared = 3,
    };
    enum class SharedVirtualDiskSupportType : int32_t
    {
        SharedVirtualDisksUnsupported = 0,
        SharedVirtualDisksSupported = 1,
        SharedVirtualDiskSnapshotsSupported = 3,
        SharedVirtualDiskCDPSnapshotsSupported = 7,
    };
    enum class TAPE_DRIVE_PROBLEM_TYPE : int32_t
    {
        TapeDriveProblemNone = 0,
        TapeDriveReadWriteWarning = 1,
        TapeDriveReadWriteError = 2,
        TapeDriveReadWarning = 3,
        TapeDriveWriteWarning = 4,
        TapeDriveReadError = 5,
        TapeDriveWriteError = 6,
        TapeDriveHardwareError = 7,
        TapeDriveUnsupportedMedia = 8,
        TapeDriveScsiConnectionError = 9,
        TapeDriveTimetoClean = 10,
        TapeDriveCleanDriveNow = 11,
        TapeDriveMediaLifeExpired = 12,
        TapeDriveSnappedTape = 13,
    };
    enum class TAPE_GET_DRIVE_PARAMETERS_FEATURES_HIGH : uint32_t
    {
        TAPE_DRIVE_ABS_BLK_IMMED = 0x80002000,
        TAPE_DRIVE_ABSOLUTE_BLK = 0x80001000,
        TAPE_DRIVE_END_OF_DATA = 0x80010000,
        TAPE_DRIVE_FILEMARKS = 0x80040000,
        TAPE_DRIVE_LOAD_UNLOAD = 0x80000001,
        TAPE_DRIVE_LOAD_UNLD_IMMED = 0x80000020,
        TAPE_DRIVE_LOCK_UNLOCK = 0x80000004,
        TAPE_DRIVE_LOCK_UNLK_IMMED = 0x80000080,
        TAPE_DRIVE_LOG_BLK_IMMED = 0x80008000,
        TAPE_DRIVE_LOGICAL_BLK = 0x80004000,
        TAPE_DRIVE_RELATIVE_BLKS = 0x80020000,
        TAPE_DRIVE_REVERSE_POSITION = 0x80400000,
        TAPE_DRIVE_REWIND_IMMEDIATE = 0x80000008,
        TAPE_DRIVE_SEQUENTIAL_FMKS = 0x80080000,
        TAPE_DRIVE_SEQUENTIAL_SMKS = 0x80200000,
        TAPE_DRIVE_SET_BLOCK_SIZE = 0x80000010,
        TAPE_DRIVE_SET_COMPRESSION = 0x80000200,
        TAPE_DRIVE_SET_ECC = 0x80000100,
        TAPE_DRIVE_SET_PADDING = 0x80000400,
        TAPE_DRIVE_SET_REPORT_SMKS = 0x80000800,
        TAPE_DRIVE_SETMARKS = 0x80100000,
        TAPE_DRIVE_SPACE_IMMEDIATE = 0x80800000,
        TAPE_DRIVE_TENSION = 0x80000002,
        TAPE_DRIVE_TENSION_IMMED = 0x80000040,
        TAPE_DRIVE_WRITE_FILEMARKS = 0x82000000,
        TAPE_DRIVE_WRITE_LONG_FMKS = 0x88000000,
        TAPE_DRIVE_WRITE_MARK_IMMED = 0x90000000,
        TAPE_DRIVE_WRITE_SETMARKS = 0x81000000,
        TAPE_DRIVE_WRITE_SHORT_FMKS = 0x84000000,
    };
    enum class TP_CALLBACK_PRIORITY : int32_t
    {
        TP_CALLBACK_PRIORITY_HIGH = 0,
        TP_CALLBACK_PRIORITY_NORMAL = 1,
        TP_CALLBACK_PRIORITY_LOW = 2,
        TP_CALLBACK_PRIORITY_INVALID = 3,
        TP_CALLBACK_PRIORITY_COUNT = 3,
    };
    enum class TRANSACTIONMANAGER_INFORMATION_CLASS : int32_t
    {
        TransactionManagerBasicInformation = 0,
        TransactionManagerLogInformation = 1,
        TransactionManagerLogPathInformation = 2,
        TransactionManagerRecoveryInformation = 4,
        TransactionManagerOnlineProbeInformation = 3,
        TransactionManagerOldestTransactionInformation = 5,
    };
    enum class TRANSACTION_INFORMATION_CLASS : int32_t
    {
        TransactionBasicInformation = 0,
        TransactionPropertiesInformation = 1,
        TransactionEnlistmentInformation = 2,
        TransactionSuperiorEnlistmentInformation = 3,
        TransactionBindInformation = 4,
        TransactionDTCPrivateInformation = 5,
    };
    enum class TRANSACTION_STATE : int32_t
    {
        TransactionStateNormal = 1,
        TransactionStateIndoubt = 2,
        TransactionStateCommittedNotify = 3,
    };
    enum class USER_ACTIVITY_PRESENCE : int32_t
    {
        PowerUserPresent = 0,
        PowerUserNotPresent = 1,
        PowerUserInactive = 2,
        PowerUserMaximum = 3,
        PowerUserInvalid = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACCESS_REASONS;
    struct ANON_OBJECT_HEADER;
    struct ANON_OBJECT_HEADER_BIGOBJ;
    struct ANON_OBJECT_HEADER_V2;
    struct APPLICATIONLAUNCH_SETTING_VALUE;
    struct ARM64_NT_CONTEXT;
    union ARM64_NT_NEON128;
    struct AtlThunkData_t;
    struct CDDDXGK_REDIRBITMAPPRESENTINFO;
    struct CFG_CALL_TARGET_INFO;
    struct CM_Power_Data_s;
    struct COMPONENT_FILTER;
    struct CORRELATION_VECTOR;
    struct CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
    struct D3DBRANCH;
    struct D3DCLIPSTATUS;
    struct D3DDEVINFO_TEXTUREMANAGER;
    struct D3DDEVINFO_TEXTURING;
    struct D3DDP_PTRSTRIDE;
    struct D3DDRAWPRIMITIVESTRIDEDDATA;
    struct D3DEXECUTEDATA;
    struct D3DFINDDEVICERESULT;
    struct D3DFINDDEVICESEARCH;
    struct D3DHVERTEX;
    struct D3DINSTRUCTION;
    struct D3DLIGHT;
    struct D3DLIGHT2;
    struct D3DLIGHT7;
    struct D3DLIGHTDATA;
    struct D3DLIGHTINGCAPS;
    struct D3DLIGHTINGELEMENT;
    struct D3DLINE;
    struct D3DLINEPATTERN;
    struct D3DLVERTEX;
    struct D3DMATERIAL;
    struct D3DMATERIAL7;
    struct D3DMATRIXLOAD;
    struct D3DMATRIXMULTIPLY;
    struct D3DNTHAL_CALLBACKS;
    struct D3DNTHAL_CALLBACKS2;
    struct D3DNTHAL_CALLBACKS3;
    struct D3DNTHAL_CLEAR2DATA;
    struct D3DNTHAL_CONTEXTCREATEDATA;
    struct D3DNTHAL_CONTEXTDESTROYALLDATA;
    struct D3DNTHAL_CONTEXTDESTROYDATA;
    struct D3DNTHAL_D3DDX6EXTENDEDCAPS;
    struct D3DNTHAL_D3DEXTENDEDCAPS;
    struct D3DNTHAL_DP2CLEAR;
    struct D3DNTHAL_DP2COMMAND;
    struct D3DNTHAL_DP2CREATELIGHT;
    struct D3DNTHAL_DP2EXT;
    struct D3DNTHAL_DP2INDEXEDLINELIST;
    struct D3DNTHAL_DP2INDEXEDLINESTRIP;
    struct D3DNTHAL_DP2INDEXEDTRIANGLEFAN;
    struct D3DNTHAL_DP2INDEXEDTRIANGLELIST;
    struct D3DNTHAL_DP2INDEXEDTRIANGLELIST2;
    struct D3DNTHAL_DP2INDEXEDTRIANGLESTRIP;
    struct D3DNTHAL_DP2LINELIST;
    struct D3DNTHAL_DP2LINESTRIP;
    struct D3DNTHAL_DP2POINTS;
    struct D3DNTHAL_DP2RENDERSTATE;
    struct D3DNTHAL_DP2SETCLIPPLANE;
    struct D3DNTHAL_DP2SETLIGHT;
    struct D3DNTHAL_DP2SETPALETTE;
    struct D3DNTHAL_DP2SETPRIORITY;
    struct D3DNTHAL_DP2SETRENDERTARGET;
    struct D3DNTHAL_DP2SETTEXLOD;
    struct D3DNTHAL_DP2SETTRANSFORM;
    struct D3DNTHAL_DP2STARTVERTEX;
    struct D3DNTHAL_DP2STATESET;
    struct D3DNTHAL_DP2TEXBLT;
    struct D3DNTHAL_DP2TEXTURESTAGESTATE;
    struct D3DNTHAL_DP2TRIANGLEFAN;
    struct D3DNTHAL_DP2TRIANGLEFAN_IMM;
    struct D3DNTHAL_DP2TRIANGLELIST;
    struct D3DNTHAL_DP2TRIANGLESTRIP;
    struct D3DNTHAL_DP2UPDATEPALETTE;
    struct D3DNTHAL_DP2VIEWPORTINFO;
    struct D3DNTHAL_DP2WINFO;
    struct D3DNTHAL_DP2ZRANGE;
    struct D3DNTHAL_DRAWPRIMITIVES2DATA;
    struct D3DNTHAL_GLOBALDRIVERDATA;
    struct D3DNTHAL_SCENECAPTUREDATA;
    struct D3DNTHAL_SETRENDERTARGETDATA;
    struct D3DNTHAL_TEXTURECREATEDATA;
    struct D3DNTHAL_TEXTUREDESTROYDATA;
    struct D3DNTHAL_TEXTUREGETSURFDATA;
    struct D3DNTHAL_TEXTURESWAPDATA;
    struct D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA;
    struct D3DPICKRECORD;
    struct D3DPOINT;
    struct D3DPROCESSVERTICES;
    struct D3DSPAN;
    struct D3DSTATE;
    struct D3DSTATS;
    struct D3DSTATUS;
    struct D3DTEXTURELOAD;
    struct D3DTLVERTEX;
    struct D3DTRANSFORMCAPS;
    struct D3DTRANSFORMDATA;
    struct D3DTRIANGLE;
    struct D3DVERTEX;
    struct D3DVERTEXBUFFERDESC;
    struct D3DVIEWPORT;
    struct D3DVIEWPORT2;
    struct D3DVIEWPORT7;
    struct DEVICE_EVENT_BECOMING_READY;
    struct DEVICE_EVENT_EXTERNAL_REQUEST;
    struct DEVICE_EVENT_GENERIC_DATA;
    struct DEVICE_EVENT_MOUNT;
    struct DEVICE_EVENT_RBC_DATA;
    struct DEVPROPCOMPKEY;
    struct DEVPROPERTY;
    struct DEVPROPKEY;
    struct DEV_BROADCAST_DEVICEINTERFACE_A;
    struct DEV_BROADCAST_DEVICEINTERFACE_W;
    struct DEV_BROADCAST_DEVNODE;
    struct DEV_BROADCAST_HANDLE;
    struct DEV_BROADCAST_HANDLE32;
    struct DEV_BROADCAST_HANDLE64;
    struct DEV_BROADCAST_HDR;
    struct DEV_BROADCAST_NET;
    struct DEV_BROADCAST_OEM;
    struct DEV_BROADCAST_PORT_A;
    struct DEV_BROADCAST_PORT_W;
    struct DEV_BROADCAST_VOLUME;
    struct DHPDEV;
    struct DHSURF;
    struct DISK_HEALTH_NOTIFICATION_DATA;
    struct DISPATCHER_CONTEXT;
    struct DISPATCHER_CONTEXT_ARM64;
    union DISPATCHER_CONTEXT_NONVOLREG_ARM64;
    struct DRH_APIBITMAPDATA;
    struct EMFINFO;
    struct ENLISTMENT_BASIC_INFORMATION;
    struct ENLISTMENT_CRM_INFORMATION;
    struct EVENTLOGRECORD;
    struct EVENTSFORLOGFILE;
    struct EXCEPTION_RECORD32;
    struct EXCEPTION_REGISTRATION_RECORD;
    struct FD_LIGATURE;
    union FLOAT_LONG;
    struct GDI_NONREMOTE;
    struct GUID_IO_DISK_CLONE_ARRIVAL_INFORMATION;
    struct HBM;
    struct HDEV;
    struct HDRVOBJ;
    struct HEAP_OPTIMIZE_RESOURCES_INFORMATION;
    struct HFASTMUTEX;
    struct HIBERFILE_BUCKET;
    struct HLSURF;
    struct HSEMAPHORE__;
    struct HSPRITE;
    struct HSTR;
    struct HUMPD;
    struct IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_ARCHITECTURE_ENTRY;
    struct IMAGE_ARCHITECTURE_HEADER;
    struct IMAGE_ARCHIVE_MEMBER_HEADER;
    struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
    union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;
    struct IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
    union IMAGE_AUX_SYMBOL;
    union IMAGE_AUX_SYMBOL_EX;
    struct IMAGE_AUX_SYMBOL_TOKEN_DEF;
    struct IMAGE_BASE_RELOCATION;
    struct IMAGE_BOUND_FORWARDER_REF;
    struct IMAGE_BOUND_IMPORT_DESCRIPTOR;
    struct IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_COR20_HEADER;
    struct IMAGE_DEBUG_MISC;
    struct IMAGE_DELAYLOAD_DESCRIPTOR;
    struct IMAGE_DOS_HEADER;
    struct IMAGE_DYNAMIC_RELOCATION32;
    struct IMAGE_DYNAMIC_RELOCATION32_V2;
    struct IMAGE_DYNAMIC_RELOCATION64;
    struct IMAGE_DYNAMIC_RELOCATION64_V2;
    struct IMAGE_DYNAMIC_RELOCATION_TABLE;
    struct IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
    struct IMAGE_EXPORT_DIRECTORY;
    struct IMAGE_HOT_PATCH_BASE;
    struct IMAGE_HOT_PATCH_HASHES;
    struct IMAGE_HOT_PATCH_INFO;
    struct IMAGE_IMPORT_BY_NAME;
    struct IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    struct IMAGE_IMPORT_DESCRIPTOR;
    struct IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
    struct IMAGE_LINENUMBER;
    struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
    struct IMAGE_OS2_HEADER;
    struct IMAGE_POLICY_ENTRY;
    struct IMAGE_POLICY_METADATA;
    struct IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
    struct IMAGE_RELOCATION;
    struct IMAGE_RESOURCE_DATA_ENTRY;
    struct IMAGE_RESOURCE_DIRECTORY;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY;
    struct IMAGE_RESOURCE_DIRECTORY_STRING;
    struct IMAGE_RESOURCE_DIR_STRING_U;
    struct IMAGE_ROM_HEADERS;
    struct IMAGE_ROM_OPTIONAL_HEADER;
    struct IMAGE_RUNTIME_FUNCTION_ENTRY;
    struct IMAGE_SEPARATE_DEBUG_HEADER;
    struct IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
    struct IMAGE_SYMBOL;
    struct IMAGE_SYMBOL_EX;
    struct IMAGE_THUNK_DATA32;
    struct IMAGE_THUNK_DATA64;
    struct IMAGE_TLS_DIRECTORY32;
    struct IMAGE_TLS_DIRECTORY64;
    struct IMAGE_VXD_HEADER;
    struct IMPORT_OBJECT_HEADER;
    struct IO_COUNTERS;
    struct JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
    struct JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
    struct JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
    struct JOBOBJECT_BASIC_LIMIT_INFORMATION;
    struct JOBOBJECT_BASIC_PROCESS_ID_LIST;
    struct JOBOBJECT_BASIC_UI_RESTRICTIONS;
    struct JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
    struct JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
    struct JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
    struct JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
    struct JOBOBJECT_IO_ATTRIBUTION_STATS;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
    struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
    struct JOBOBJECT_JOBSET_INFORMATION;
    struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
    struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
    struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
    struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
    struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
    struct JOBOBJECT_SECURITY_LIMIT_INFORMATION;
    struct JOB_SET_ARRAY;
    struct KERNEL_CET_CONTEXT;
    struct KNONVOLATILE_CONTEXT_POINTERS;
    struct KNONVOLATILE_CONTEXT_POINTERS_ARM64;
    struct KTMOBJECT_CURSOR;
    struct LIGATURE;
    struct M128A;
    struct MAXVERSIONTESTED_INFO;
    struct MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
    struct MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
    struct MEM_ADDRESS_REQUIREMENTS;
    struct MEM_EXTENDED_PARAMETER;
    struct NETWORK_APP_INSTANCE_EA;
    struct NON_PAGED_DEBUG_INFO;
    struct NOTIFY_USER_POWER_SETTING;
    struct NT_TIB;
    struct NT_TIB32;
    struct NT_TIB64;
    struct NV_MEMORY_RANGE;
    struct PACKEDEVENTINFO;
    struct POINTE;
    struct POINTFIX;
    struct POINTQF;
    struct POWER_IDLE_RESILIENCY;
    struct POWER_MONITOR_INVOCATION;
    struct POWER_PLATFORM_INFORMATION;
    struct POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
    struct POWER_SESSION_CONNECT;
    struct POWER_SESSION_RIT_STATE;
    struct POWER_SESSION_TIMEOUTS;
    struct POWER_SESSION_WINLOGON;
    struct POWER_USER_PRESENCE;
    struct PPM_IDLESTATE_EVENT;
    struct PPM_IDLE_ACCOUNTING;
    struct PPM_IDLE_ACCOUNTING_EX;
    struct PPM_IDLE_STATE_ACCOUNTING;
    struct PPM_IDLE_STATE_ACCOUNTING_EX;
    struct PPM_IDLE_STATE_BUCKET_EX;
    struct PPM_PERFSTATE_DOMAIN_EVENT;
    struct PPM_PERFSTATE_EVENT;
    struct PPM_THERMALCHANGE_EVENT;
    struct PPM_THERMAL_POLICY_EVENT;
    struct PPM_WMI_IDLE_STATE;
    struct PPM_WMI_IDLE_STATES;
    struct PPM_WMI_IDLE_STATES_EX;
    struct PPM_WMI_LEGACY_PERFSTATE;
    struct PPM_WMI_PERF_STATE;
    struct PPM_WMI_PERF_STATES;
    struct PPM_WMI_PERF_STATES_EX;
    struct PROCESSOR_IDLESTATE_INFO;
    struct PROCESSOR_IDLESTATE_POLICY;
    struct PROCESSOR_PERFSTATE_POLICY;
    struct PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
    struct PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
    struct PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
    struct PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
    struct PROCESS_HEAP_ENTRY;
    struct PROCESS_MITIGATION_ASLR_POLICY;
    struct PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
    struct PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
    struct PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
    struct PROCESS_MITIGATION_DEP_POLICY;
    struct PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
    struct PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
    struct PROCESS_MITIGATION_FONT_DISABLE_POLICY;
    struct PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
    struct PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
    struct PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
    struct PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
    struct PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
    struct PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
    struct PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
    struct PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
    struct QUOTA_LIMITS_EX;
    union RATE_QUOTA_LIMIT;
    struct REARRANGE_FILE_DATA;
    struct REARRANGE_FILE_DATA32;
    struct REASON_CONTEXT;
    struct RECTFX;
    struct REDBOOK_DIGITAL_AUDIO_EXTRACTION_INFO;
    struct RESOURCEMANAGER_BASIC_INFORMATION;
    struct RESOURCEMANAGER_COMPLETION_INFORMATION;
    struct RESUME_PERFORMANCE;
    struct RPC_IMPORT_CONTEXT_P;
    struct RTL_BARRIER;
    struct RTL_CONDITION_VARIABLE;
    struct RTL_CRITICAL_SECTION;
    struct RTL_CRITICAL_SECTION_DEBUG;
    union RTL_RUN_ONCE;
    struct RTL_SRWLOCK;
    struct RemBRUSH;
    struct RemHBITMAP;
    struct RemHENHMETAFILE;
    struct RemHGLOBAL;
    struct RemHMETAFILEPICT;
    struct RemHPALETTE;
    struct RemotableHandle;
    struct SCOPE_TABLE_AMD64;
    struct SCOPE_TABLE_ARM;
    struct SCOPE_TABLE_ARM64;
    struct SCRUB_DATA_INPUT;
    struct SCRUB_DATA_OUTPUT;
    struct SCRUB_PARITY_EXTENT;
    struct SCRUB_PARITY_EXTENT_DATA;
    struct SECURITY_DESCRIPTOR_RELATIVE;
    struct SECURITY_OBJECT_AI_PARAMS;
    struct SERVERSILO_BASIC_INFORMATION;
    struct SET_POWER_SETTING_VALUE;
    struct SE_ACCESS_REPLY;
    struct SE_ACCESS_REQUEST;
    struct SE_IMPERSONATION_STATE;
    struct SE_SECURITY_DESCRIPTOR;
    union SE_SID;
    struct SE_TOKEN_USER;
    struct SHARED_VIRTUAL_DISK_SUPPORT;
    struct SHUFFLE_FILE_DATA;
    struct SILOOBJECT_BASIC_INFORMATION;
    struct SUPPORTED_OS_INFO;
    struct SYSTEM_ACCESS_FILTER_ACE;
    struct SYSTEM_PROCESS_TRUST_LABEL_ACE;
    struct TAPE_CREATE_PARTITION;
    struct TAPE_ERASE;
    struct TAPE_GET_DRIVE_PARAMETERS;
    struct TAPE_GET_MEDIA_PARAMETERS;
    struct TAPE_GET_POSITION;
    struct TAPE_PREPARE;
    struct TAPE_SET_DRIVE_PARAMETERS;
    struct TAPE_SET_MEDIA_PARAMETERS;
    struct TAPE_SET_POSITION;
    struct TAPE_WMI_OPERATIONS;
    struct TAPE_WRITE_MARKS;
    struct TEB;
    struct TOKEN_BNO_ISOLATION_INFORMATION;
    struct TOKEN_SID_INFORMATION;
    struct TP_CALLBACK_ENVIRON_V3;
    struct TP_CALLBACK_INSTANCE;
    struct TP_CLEANUP_GROUP;
    struct TP_IO;
    struct TP_POOL;
    struct TP_POOL_STACK_INFORMATION;
    struct TP_TIMER;
    struct TP_WAIT;
    struct TP_WORK;
    struct TRANSACTIONMANAGER_BASIC_INFORMATION;
    struct TRANSACTIONMANAGER_LOGPATH_INFORMATION;
    struct TRANSACTIONMANAGER_LOG_INFORMATION;
    struct TRANSACTIONMANAGER_OLDEST_INFORMATION;
    struct TRANSACTIONMANAGER_RECOVERY_INFORMATION;
    struct TRANSACTION_BASIC_INFORMATION;
    struct TRANSACTION_BIND_INFORMATION;
    struct TRANSACTION_ENLISTMENTS_INFORMATION;
    struct TRANSACTION_ENLISTMENT_PAIR;
    struct TRANSACTION_LIST_ENTRY;
    struct TRANSACTION_LIST_INFORMATION;
    struct TRANSACTION_PROPERTIES_INFORMATION;
    struct TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
    struct UMS_CREATE_THREAD_ATTRIBUTES;
    struct UNWIND_HISTORY_TABLE;
    struct UNWIND_HISTORY_TABLE_ENTRY;
    struct VolLockBroadcast;
    struct XFORMOBJ;
    struct XSAVE_AREA;
    struct XSAVE_AREA_HEADER;
    struct XSAVE_CET_U_FORMAT;
    struct XSAVE_FORMAT;
    struct XSTATE_CONFIGURATION;
    struct XSTATE_CONTEXT;
    struct XSTATE_FEATURE;
    struct _D3DDeviceDesc;
    struct _D3DDeviceDesc7;
    struct _D3DExecuteBufferDesc;
    struct _D3DNTDeviceDesc_V3;
    struct _D3DNTHALDeviceDesc_V1;
    struct _D3DNTHALDeviceDesc_V2;
    struct _D3DPrimCaps;
    struct _DEV_BROADCAST_HEADER;
    struct _DEV_BROADCAST_USERDEFINED;
    struct remoteMETAFILEPICT;
    struct userBITMAP;
    struct userCLIPFORMAT;
    struct userHBITMAP;
    struct userHENHMETAFILE;
    struct userHGLOBAL;
    struct userHMETAFILE;
    struct userHMETAFILEPICT;
    struct userHPALETTE;
#pragma endregion forward_declarations

#pragma region delegates
    using PUMS_SCHEDULER_ENTRY_POINT = void __stdcall(Windows::Win32::System::SystemServices::RTL_UMS_SCHEDULER_REASON, size_t, void*);
    using PTERMINATION_HANDLER = void __stdcall(Windows::Win32::Foundation::BOOLEAN, uint64_t);
    using PGET_RUNTIME_FUNCTION_CALLBACK = Windows::Win32::System::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY* __stdcall(uint64_t, void*);
    using POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE, void*, uint32_t*, Windows::Win32::System::SystemServices::IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY**);
    using PEXCEPTION_FILTER = int32_t __stdcall(Windows::Win32::System::Diagnostics::Debug::EXCEPTION_POINTERS*, void*);
    using PIMAGE_TLS_CALLBACK = void __stdcall(void*, uint32_t, void*);
    using PRTL_UMS_SCHEDULER_ENTRY_POINT = void __stdcall(Windows::Win32::System::SystemServices::RTL_UMS_SCHEDULER_REASON, size_t, void*);
    using PAPCFUNC = void __stdcall(size_t);
    using WAITORTIMERCALLBACK = void __stdcall(void*, Windows::Win32::Foundation::BOOLEAN);
    using WORKERCALLBACKFUNC = void __stdcall(void*);
    using APC_CALLBACK_FUNCTION = void __stdcall(uint32_t, void*, void*);
    using PFLS_CALLBACK_FUNCTION = void __stdcall(void*);
    using PTP_SIMPLE_CALLBACK = void __stdcall(Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE*, void*);
    using PTP_CLEANUP_GROUP_CANCEL_CALLBACK = void __stdcall(void*, void*);
    using PTP_WORK_CALLBACK = void __stdcall(Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE*, void*, Windows::Win32::System::SystemServices::TP_WORK*);
    using PTP_TIMER_CALLBACK = void __stdcall(Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE*, void*, Windows::Win32::System::SystemServices::TP_TIMER*);
    using PTP_WAIT_CALLBACK = void __stdcall(Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE*, void*, Windows::Win32::System::SystemServices::TP_WAIT*, uint32_t);
    using LPTHREAD_START_ROUTINE = uint32_t __stdcall(void*);
    using LPD3DVALIDATECALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint32_t);
    using LPD3DENUMTEXTUREFORMATSCALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Graphics::DirectDraw::DDSURFACEDESC*, void*);
    using LPD3DENUMPIXELFORMATSCALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Graphics::DirectDraw::DDPIXELFORMAT*, void*);
    using LPD3DENUMDEVICESCALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(::win32::guid*, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::System::SystemServices::_D3DDeviceDesc*, Windows::Win32::System::SystemServices::_D3DDeviceDesc*, void*);
    using LPD3DENUMDEVICESCALLBACK7 = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::System::SystemServices::_D3DDeviceDesc7*, void*);
    using LPD3DNTHAL_CONTEXTCREATECB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_CONTEXTCREATEDATA*);
    using LPD3DNTHAL_CONTEXTDESTROYCB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_CONTEXTDESTROYDATA*);
    using LPD3DNTHAL_CONTEXTDESTROYALLCB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_CONTEXTDESTROYALLDATA*);
    using LPD3DNTHAL_SCENECAPTURECB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_SCENECAPTUREDATA*);
    using LPD3DNTHAL_TEXTURECREATECB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_TEXTURECREATEDATA*);
    using LPD3DNTHAL_TEXTUREDESTROYCB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_TEXTUREDESTROYDATA*);
    using LPD3DNTHAL_TEXTURESWAPCB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_TEXTURESWAPDATA*);
    using LPD3DNTHAL_TEXTUREGETSURFCB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_TEXTUREGETSURFDATA*);
    using LPD3DNTHAL_SETRENDERTARGETCB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_SETRENDERTARGETDATA*);
    using LPD3DNTHAL_CLEAR2CB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_CLEAR2DATA*);
    using LPD3DNTHAL_VALIDATETEXTURESTAGESTATECB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_VALIDATETEXTURESTAGESTATEDATA*);
    using LPD3DNTHAL_DRAWPRIMITIVES2CB = uint32_t __stdcall(Windows::Win32::System::SystemServices::D3DNTHAL_DRAWPRIMITIVES2DATA*);
    using PFND3DNTPARSEUNKNOWNCOMMAND = Windows::Win32::Foundation::HRESULT __stdcall(void*, void**);
    using PFN = intptr_t __stdcall();
    using FREEOBJPROC = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::DRIVEROBJ*);
    using WNDOBJCHANGEPROC = void __stdcall(Windows::Win32::UI::DisplayDevices::WNDOBJ*, uint32_t);
    using SORTCOMP = int32_t __stdcall(void*, void*);
    using PFN_DrvEnableDriver = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, uint32_t, Windows::Win32::UI::DisplayDevices::DRVENABLEDATA*);
    using PFN_DrvEnablePDEV = Windows::Win32::System::SystemServices::DHPDEV __stdcall(Windows::Win32::Graphics::Gdi::DEVMODEW*, Windows::Win32::Foundation::PWSTR, uint32_t, Windows::Win32::UI::DisplayDevices::HSURF*, uint32_t, Windows::Win32::UI::DisplayDevices::GDIINFO*, uint32_t, Windows::Win32::UI::DisplayDevices::DEVINFO*, Windows::Win32::System::SystemServices::HDEV, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::HANDLE);
    using PFN_DrvCompletePDEV = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::System::SystemServices::HDEV);
    using PFN_DrvResetDevice = uint32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, void*);
    using PFN_DrvDisablePDEV = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV);
    using PFN_DrvSynchronize = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::RECTL*);
    using PFN_DrvEnableSurface = Windows::Win32::UI::DisplayDevices::HSURF __stdcall(Windows::Win32::System::SystemServices::DHPDEV);
    using PFN_DrvDisableDriver = void __stdcall();
    using PFN_DrvDisableSurface = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV);
    using PFN_DrvAssertMode = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::BOOL);
    using PFN_DrvTextOut = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::STROBJ*, Windows::Win32::UI::DisplayDevices::FONTOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::RECTL*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::Foundation::POINTL*, uint32_t);
    using PFN_DrvStretchBlt = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Graphics::Gdi::COLORADJUSTMENT*, Windows::Win32::Foundation::POINTL*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::POINTL*, uint32_t);
    using PFN_DrvStretchBltROP = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Graphics::Gdi::COLORADJUSTMENT*, Windows::Win32::Foundation::POINTL*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::POINTL*, uint32_t, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, uint32_t);
    using PFN_DrvTransparentBlt = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::RECTL*, uint32_t, uint32_t);
    using PFN_DrvPlgBlt = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Graphics::Gdi::COLORADJUSTMENT*, Windows::Win32::Foundation::POINTL*, Windows::Win32::System::SystemServices::POINTFIX*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::POINTL*, uint32_t);
    using PFN_DrvBitBlt = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::POINTL*, Windows::Win32::Foundation::POINTL*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::Foundation::POINTL*, uint32_t);
    using PFN_DrvRealizeBrush = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, uint32_t);
    using PFN_DrvCopyBits = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::POINTL*);
    using PFN_DrvDitherColor = uint32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, uint32_t, uint32_t, uint32_t*);
    using PFN_DrvCreateDeviceBitmap = Windows::Win32::Graphics::Gdi::HBITMAP __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::SIZE, uint32_t);
    using PFN_DrvDeleteDeviceBitmap = void __stdcall(Windows::Win32::System::SystemServices::DHSURF);
    using PFN_DrvSetPalette = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::UI::DisplayDevices::PALOBJ*, uint32_t, uint32_t, uint32_t);
    using PFN_DrvEscape = uint32_t __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, uint32_t, uint32_t, void*, uint32_t, void*);
    using PFN_DrvDrawEscape = uint32_t __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, uint32_t, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::Foundation::RECTL*, uint32_t, void*);
    using PFN_DrvQueryFont = Windows::Win32::UI::DisplayDevices::IFIMETRICS* __stdcall(Windows::Win32::System::SystemServices::DHPDEV, size_t, uint32_t, size_t*);
    using PFN_DrvQueryFontTree = void* __stdcall(Windows::Win32::System::SystemServices::DHPDEV, size_t, uint32_t, uint32_t, size_t*);
    using PFN_DrvQueryFontData = int32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::UI::DisplayDevices::FONTOBJ*, uint32_t, uint32_t, Windows::Win32::UI::DisplayDevices::GLYPHDATA*, void*, uint32_t);
    using PFN_DrvFree = void __stdcall(void*, size_t);
    using PFN_DrvDestroyFont = void __stdcall(Windows::Win32::UI::DisplayDevices::FONTOBJ*);
    using PFN_DrvQueryFontCaps = int32_t __stdcall(uint32_t, uint32_t*);
    using PFN_DrvLoadFontFile = size_t __stdcall(uint32_t, size_t*, void**, uint32_t*, Windows::Win32::Graphics::Gdi::DESIGNVECTOR*, uint32_t, uint32_t);
    using PFN_DrvUnloadFontFile = Windows::Win32::Foundation::BOOL __stdcall(size_t);
    using PFN_DrvSetPointerShape = uint32_t __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, int32_t, int32_t, int32_t, int32_t, Windows::Win32::Foundation::RECTL*, uint32_t);
    using PFN_DrvMovePointer = void __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, int32_t, int32_t, Windows::Win32::Foundation::RECTL*);
    using PFN_DrvSendPage = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*);
    using PFN_DrvStartPage = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*);
    using PFN_DrvStartDoc = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::PWSTR, uint32_t);
    using PFN_DrvEndDoc = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, uint32_t);
    using PFN_DrvQuerySpoolType = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::PWSTR);
    using PFN_DrvLineTo = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, int32_t, int32_t, int32_t, int32_t, Windows::Win32::Foundation::RECTL*, uint32_t);
    using PFN_DrvStrokePath = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::PATHOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::System::SystemServices::XFORMOBJ*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::Foundation::POINTL*, Windows::Win32::UI::DisplayDevices::LINEATTRS*, uint32_t);
    using PFN_DrvFillPath = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::PATHOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::Foundation::POINTL*, uint32_t, uint32_t);
    using PFN_DrvStrokeAndFillPath = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::PATHOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::System::SystemServices::XFORMOBJ*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::UI::DisplayDevices::LINEATTRS*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::Foundation::POINTL*, uint32_t, uint32_t);
    using PFN_DrvPaint = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::BRUSHOBJ*, Windows::Win32::Foundation::POINTL*, uint32_t);
    using PFN_DrvGetGlyphMode = uint32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::UI::DisplayDevices::FONTOBJ*);
    using PFN_DrvResetPDEV = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::System::SystemServices::DHPDEV);
    using PFN_DrvSaveScreenBits = size_t __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, uint32_t, size_t, Windows::Win32::Foundation::RECTL*);
    using PFN_DrvGetModes = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, Windows::Win32::Graphics::Gdi::DEVMODEW*);
    using PFN_DrvQueryTrueTypeTable = int32_t __stdcall(size_t, uint32_t, uint32_t, int32_t, uint32_t, uint8_t*, uint8_t**, uint32_t*);
    using PFN_DrvQueryTrueTypeSection = int32_t __stdcall(uint32_t, uint32_t, uint32_t, Windows::Win32::Foundation::HANDLE*, int32_t*);
    using PFN_DrvQueryTrueTypeOutline = int32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::UI::DisplayDevices::FONTOBJ*, uint32_t, Windows::Win32::Foundation::BOOL, Windows::Win32::UI::DisplayDevices::GLYPHDATA*, uint32_t, Windows::Win32::Graphics::Gdi::TTPOLYGONHEADER*);
    using PFN_DrvGetTrueTypeFile = void* __stdcall(size_t, uint32_t*);
    using PFN_DrvQueryFontFile = int32_t __stdcall(size_t, uint32_t, uint32_t, uint32_t*);
    using PFN_DrvQueryAdvanceWidths = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::UI::DisplayDevices::FONTOBJ*, uint32_t, uint32_t*, void*, uint32_t);
    using PFN_DrvFontManagement = uint32_t __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::FONTOBJ*, uint32_t, uint32_t, void*, uint32_t, void*);
    using PFN_DrvSetPixelFormat = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, int32_t, Windows::Win32::Foundation::HWND);
    using PFN_DrvDescribePixelFormat = int32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, int32_t, uint32_t, Windows::Win32::Graphics::OpenGL::PIXELFORMATDESCRIPTOR*);
    using PFN_DrvSwapBuffers = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::WNDOBJ*);
    using PFN_DrvStartBanding = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::POINTL*);
    using PFN_DrvNextBand = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::POINTL*);
    using PFN_DrvQueryPerBandInfo = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::PERBANDINFO*);
    using PFN_DrvEnableDirectDraw = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Graphics::DirectDraw::DD_CALLBACKS*, Windows::Win32::Graphics::DirectDraw::DD_SURFACECALLBACKS*, Windows::Win32::Graphics::DirectDraw::DD_PALETTECALLBACKS*);
    using PFN_DrvDisableDirectDraw = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV);
    using PFN_DrvGetDirectDrawInfo = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Graphics::DirectDraw::DD_HALINFO*, uint32_t*, Windows::Win32::Graphics::DirectDraw::VIDEOMEMORY*, uint32_t*, uint32_t*);
    using PFN_DrvIcmCreateColorTransform = Windows::Win32::Foundation::HANDLE __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::UI::ColorSystem::LOGCOLORSPACEW*, void*, uint32_t, void*, uint32_t, void*, uint32_t, uint32_t);
    using PFN_DrvIcmDeleteColorTransform = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::HANDLE);
    using PFN_DrvIcmCheckBitmapBits = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::HANDLE, Windows::Win32::UI::DisplayDevices::SURFOBJ*, uint8_t*);
    using PFN_DrvIcmSetDeviceGammaRamp = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, uint32_t, void*);
    using PFN_DrvAlphaBlend = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::RECTL*, Windows::Win32::UI::DisplayDevices::BLENDOBJ*);
    using PFN_DrvGradientFill = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::CLIPOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::Graphics::Gdi::TRIVERTEX*, uint32_t, void*, uint32_t, Windows::Win32::Foundation::RECTL*, Windows::Win32::Foundation::POINTL*, uint32_t);
    using PFN_DrvQueryDeviceSupport = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::UI::DisplayDevices::XLATEOBJ*, Windows::Win32::System::SystemServices::XFORMOBJ*, uint32_t, uint32_t, void*, uint32_t, void*);
    using PFN_DrvDeriveSurface = Windows::Win32::Graphics::Gdi::HBITMAP __stdcall(Windows::Win32::Graphics::DirectDraw::DD_DIRECTDRAW_GLOBAL*, Windows::Win32::Graphics::DirectDraw::DD_SURFACE_LOCAL*);
    using PFN_DrvSynchronizeSurface = void __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::RECTL*, uint32_t);
    using PFN_DrvNotify = void __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, uint32_t, void*);
    using PFN_DrvRenderHint = int32_t __stdcall(Windows::Win32::System::SystemServices::DHPDEV, uint32_t, size_t, void*);
    using PFN_EngCreateRectRgn = Windows::Win32::Foundation::HANDLE __stdcall(int32_t, int32_t, int32_t, int32_t);
    using PFN_EngDeleteRgn = void __stdcall(Windows::Win32::Foundation::HANDLE);
    using PFN_EngCombineRgn = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, int32_t);
    using PFN_EngCopyRgn = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE);
    using PFN_EngIntersectRgn = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE);
    using PFN_EngSubtractRgn = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE);
    using PFN_EngUnionRgn = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE);
    using PFN_EngXorRgn = int32_t __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE);
    using PFN_DrvCreateDeviceBitmapEx = Windows::Win32::Graphics::Gdi::HBITMAP __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::SIZE, uint32_t, uint32_t, Windows::Win32::System::SystemServices::DHSURF, uint32_t, uint32_t, Windows::Win32::Foundation::HANDLE*);
    using PFN_DrvDeleteDeviceBitmapEx = void __stdcall(Windows::Win32::System::SystemServices::DHSURF);
    using PFN_DrvAssociateSharedSurface = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::SIZE);
    using PFN_DrvSynchronizeRedirectionBitmaps = Windows::Win32::Foundation::NTSTATUS __stdcall(Windows::Win32::System::SystemServices::DHPDEV, uint64_t*);
    using PFN_DrvAccumulateD3DDirtyRect = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::System::SystemServices::CDDDXGK_REDIRBITMAPPRESENTINFO*);
    using PFN_DrvStartDxInterop = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::BOOL, void*);
    using PFN_DrvEndDxInterop = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::UI::DisplayDevices::SURFOBJ*, Windows::Win32::Foundation::BOOL, Windows::Win32::Foundation::BOOL*, void*);
    using PFN_DrvLockDisplayArea = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::RECTL*);
    using PFN_DrvUnlockDisplayArea = void __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::RECTL*);
    using PFN_DrvSurfaceComplete = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::System::SystemServices::DHPDEV, Windows::Win32::Foundation::HANDLE);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
