// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Power_0_H
#define WIN32_Windows_Win32_System_Power_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOLEAN;
    struct LPARAM;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Power
{
#pragma region enums
    enum class BATTERY_CHARGING_SOURCE_TYPE : int32_t
    {
        BatteryChargingSourceType_AC = 1,
        BatteryChargingSourceType_USB = 2,
        BatteryChargingSourceType_Wireless = 3,
        BatteryChargingSourceType_Max = 4,
    };
    enum class BATTERY_QUERY_INFORMATION_LEVEL : int32_t
    {
        BatteryInformation = 0,
        BatteryGranularityInformation = 1,
        BatteryTemperature = 2,
        BatteryEstimatedTime = 3,
        BatteryDeviceName = 4,
        BatteryManufactureDate = 5,
        BatteryManufactureName = 6,
        BatteryUniqueID = 7,
        BatterySerialNumber = 8,
    };
    enum class BATTERY_SET_INFORMATION_LEVEL : int32_t
    {
        BatteryCriticalBias = 0,
        BatteryCharge = 1,
        BatteryDischarge = 2,
        BatteryChargingSource = 3,
        BatteryChargerId = 4,
        BatteryChargerStatus = 5,
    };
    enum class EFFECTIVE_POWER_MODE : int32_t
    {
        EffectivePowerModeBatterySaver = 0,
        EffectivePowerModeBetterBattery = 1,
        EffectivePowerModeBalanced = 2,
        EffectivePowerModeHighPerformance = 3,
        EffectivePowerModeMaxPerformance = 4,
        EffectivePowerModeGameMode = 5,
        EffectivePowerModeMixedReality = 6,
    };
    enum class EMI_MEASUREMENT_UNIT : int32_t
    {
        EmiMeasurementUnitPicowattHours = 0,
    };
    enum class EXECUTION_STATE : uint32_t
    {
        ES_AWAYMODE_REQUIRED = 0x40,
        ES_CONTINUOUS = 0x80000000,
        ES_DISPLAY_REQUIRED = 0x2,
        ES_SYSTEM_REQUIRED = 0x1,
        ES_USER_PRESENT = 0x4,
    };
    enum class LATENCY_TIME : int32_t
    {
        LT_DONT_CARE = 0,
        LT_LOWEST_LATENCY = 1,
    };
    enum class POWER_ACTION : int32_t
    {
        PowerActionNone = 0,
        PowerActionReserved = 1,
        PowerActionSleep = 2,
        PowerActionHibernate = 3,
        PowerActionShutdown = 4,
        PowerActionShutdownReset = 5,
        PowerActionShutdownOff = 6,
        PowerActionWarmEject = 7,
        PowerActionDisplayOff = 8,
    };
    enum class POWER_ACTION_POLICY_EVENT_CODE : uint32_t
    {
        POWER_FORCE_TRIGGER_RESET = 0x80000000,
        POWER_LEVEL_USER_NOTIFY_EXEC = 0x4,
        POWER_LEVEL_USER_NOTIFY_SOUND = 0x2,
        POWER_LEVEL_USER_NOTIFY_TEXT = 0x1,
        POWER_USER_NOTIFY_BUTTON = 0x8,
        POWER_USER_NOTIFY_SHUTDOWN = 0x10,
    };
    enum class POWER_DATA_ACCESSOR : int32_t
    {
        ACCESS_AC_POWER_SETTING_INDEX = 0,
        ACCESS_DC_POWER_SETTING_INDEX = 1,
        ACCESS_FRIENDLY_NAME = 2,
        ACCESS_DESCRIPTION = 3,
        ACCESS_POSSIBLE_POWER_SETTING = 4,
        ACCESS_POSSIBLE_POWER_SETTING_FRIENDLY_NAME = 5,
        ACCESS_POSSIBLE_POWER_SETTING_DESCRIPTION = 6,
        ACCESS_DEFAULT_AC_POWER_SETTING = 7,
        ACCESS_DEFAULT_DC_POWER_SETTING = 8,
        ACCESS_POSSIBLE_VALUE_MIN = 9,
        ACCESS_POSSIBLE_VALUE_MAX = 10,
        ACCESS_POSSIBLE_VALUE_INCREMENT = 11,
        ACCESS_POSSIBLE_VALUE_UNITS = 12,
        ACCESS_ICON_RESOURCE = 13,
        ACCESS_DEFAULT_SECURITY_DESCRIPTOR = 14,
        ACCESS_ATTRIBUTES = 15,
        ACCESS_SCHEME = 16,
        ACCESS_SUBGROUP = 17,
        ACCESS_INDIVIDUAL_SETTING = 18,
        ACCESS_ACTIVE_SCHEME = 19,
        ACCESS_CREATE_SCHEME = 20,
        ACCESS_AC_POWER_SETTING_MAX = 21,
        ACCESS_DC_POWER_SETTING_MAX = 22,
        ACCESS_AC_POWER_SETTING_MIN = 23,
        ACCESS_DC_POWER_SETTING_MIN = 24,
        ACCESS_PROFILE = 25,
        ACCESS_OVERLAY_SCHEME = 26,
        ACCESS_ACTIVE_OVERLAY_SCHEME = 27,
    };
    enum class POWER_PLATFORM_ROLE : int32_t
    {
        PlatformRoleUnspecified = 0,
        PlatformRoleDesktop = 1,
        PlatformRoleMobile = 2,
        PlatformRoleWorkstation = 3,
        PlatformRoleEnterpriseServer = 4,
        PlatformRoleSOHOServer = 5,
        PlatformRoleAppliancePC = 6,
        PlatformRolePerformanceServer = 7,
        PlatformRoleSlate = 8,
        PlatformRoleMaximum = 9,
    };
    enum class POWER_PLATFORM_ROLE_VERSION : uint32_t
    {
        POWER_PLATFORM_ROLE_V1 = 0x1,
        POWER_PLATFORM_ROLE_V2 = 0x2,
    };
    enum class POWER_SETTING_REGISTER_NOTIFICATION_FLAGS : uint32_t
    {
        DEVICE_NOTIFY_SERVICE_HANDLE = 0x1,
        DEVICE_NOTIFY_CALLBACK = 0x2,
        DEVICE_NOTIFY_WINDOW_HANDLE = 0x0,
    };
    enum class SYSTEM_POWER_CONDITION : int32_t
    {
        PoAc = 0,
        PoDc = 1,
        PoHot = 2,
        PoConditionMaximum = 3,
    };
    enum class SYSTEM_POWER_STATE : int32_t
    {
        PowerSystemUnspecified = 0,
        PowerSystemWorking = 1,
        PowerSystemSleeping1 = 2,
        PowerSystemSleeping2 = 3,
        PowerSystemSleeping3 = 4,
        PowerSystemHibernate = 5,
        PowerSystemShutdown = 6,
        PowerSystemMaximum = 7,
    };
    enum class USB_CHARGER_PORT : int32_t
    {
        UsbChargerPort_Legacy = 0,
        UsbChargerPort_TypeC = 1,
        UsbChargerPort_Max = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACPI_REAL_TIME;
    struct ADMINISTRATOR_POWER_POLICY;
    struct BATTERY_CHARGER_STATUS;
    struct BATTERY_CHARGING_SOURCE;
    struct BATTERY_CHARGING_SOURCE_INFORMATION;
    struct BATTERY_INFORMATION;
    struct BATTERY_MANUFACTURE_DATE;
    struct BATTERY_QUERY_INFORMATION;
    struct BATTERY_REPORTING_SCALE;
    struct BATTERY_SET_INFORMATION;
    struct BATTERY_STATUS;
    struct BATTERY_USB_CHARGER_STATUS;
    struct BATTERY_WAIT_STATUS;
    struct DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS;
    struct EMI_CHANNEL_MEASUREMENT_DATA;
    struct EMI_CHANNEL_V2;
    struct EMI_MEASUREMENT_DATA_V2;
    struct EMI_METADATA_SIZE;
    struct EMI_METADATA_V1;
    struct EMI_METADATA_V2;
    struct EMI_VERSION;
    struct GLOBAL_MACHINE_POWER_POLICY;
    struct GLOBAL_POWER_POLICY;
    struct GLOBAL_USER_POWER_POLICY;
    struct HPOWERNOTIFY;
    struct MACHINE_POWER_POLICY;
    struct MACHINE_PROCESSOR_POWER_POLICY;
    struct POWERBROADCAST_SETTING;
    struct POWER_ACTION_POLICY;
    struct POWER_POLICY;
    struct PROCESSOR_OBJECT_INFO;
    struct PROCESSOR_OBJECT_INFO_EX;
    struct PROCESSOR_POWER_POLICY;
    struct PROCESSOR_POWER_POLICY_INFO;
    struct SYSTEM_BATTERY_STATE;
    struct SYSTEM_POWER_CAPABILITIES;
    struct SYSTEM_POWER_LEVEL;
    struct SYSTEM_POWER_POLICY;
    struct SYSTEM_POWER_STATUS;
    struct THERMAL_EVENT;
    struct THERMAL_INFORMATION;
    struct THERMAL_POLICY;
    struct THERMAL_WAIT_READ;
    struct USER_POWER_POLICY;
    struct WAKE_ALARM_INFORMATION;
#pragma endregion forward_declarations

#pragma region delegates
    using EFFECTIVE_POWER_MODE_CALLBACK = void __stdcall(Windows::Win32::System::Power::EFFECTIVE_POWER_MODE, void*);
    using PWRSCHEMESENUMPROC_V1 = Windows::Win32::Foundation::BOOLEAN __stdcall(uint32_t, uint32_t, int8_t*, uint32_t, int8_t*, Windows::Win32::System::Power::POWER_POLICY*, Windows::Win32::Foundation::LPARAM);
    using PWRSCHEMESENUMPROC = Windows::Win32::Foundation::BOOLEAN __stdcall(uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, uint32_t, Windows::Win32::Foundation::PWSTR, Windows::Win32::System::Power::POWER_POLICY*, Windows::Win32::Foundation::LPARAM);
    using PDEVICE_NOTIFY_CALLBACK_ROUTINE = uint32_t __stdcall(void*, uint32_t, void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
