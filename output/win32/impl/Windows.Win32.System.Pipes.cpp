// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Pipes_2_H
#define WIN32_Windows_Win32_System_Pipes_2_H
#include "win32/Windows.Win32.System.Pipes.h"
#include "win32/impl/Windows.Win32.System.Pipes.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Pipes
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreatePipe(win32::Windows::Win32::Foundation::HANDLE* hReadPipe, win32::Windows::Win32::Foundation::HANDLE* hWritePipe, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpPipeAttributes, uint32_t nSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hReadPipe);
        ORBIT_TRACK_PARAM(hWritePipe);
        ORBIT_TRACK_PARAM(lpPipeAttributes);
        ORBIT_TRACK_PARAM(nSize);

        auto win32_impl_result = g_api_table.CreatePipe(hReadPipe, hWritePipe, lpPipeAttributes, nSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ConnectNamedPipe(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.ConnectNamedPipe(hNamedPipe, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DisconnectNamedPipe(win32::Windows::Win32::Foundation::HANDLE hNamedPipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);

        auto win32_impl_result = g_api_table.DisconnectNamedPipe(hNamedPipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetNamedPipeHandleState(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, win32::Windows::Win32::System::Pipes::NAMED_PIPE_MODE* lpMode, uint32_t* lpMaxCollectionCount, uint32_t* lpCollectDataTimeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpMode);
        ORBIT_TRACK_PARAM(lpMaxCollectionCount);
        ORBIT_TRACK_PARAM(lpCollectDataTimeout);

        auto win32_impl_result = g_api_table.SetNamedPipeHandleState(hNamedPipe, lpMode, lpMaxCollectionCount, lpCollectDataTimeout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PeekNamedPipe(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, void* lpBuffer, uint32_t nBufferSize, uint32_t* lpBytesRead, uint32_t* lpTotalBytesAvail, uint32_t* lpBytesLeftThisMessage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nBufferSize);
        ORBIT_TRACK_PARAM(lpBytesRead);
        ORBIT_TRACK_PARAM(lpTotalBytesAvail);
        ORBIT_TRACK_PARAM(lpBytesLeftThisMessage);

        auto win32_impl_result = g_api_table.PeekNamedPipe(hNamedPipe, lpBuffer, nBufferSize, lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TransactNamedPipe(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesRead, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesRead);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.TransactNamedPipe(hNamedPipe, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateNamedPipeW(win32::Windows::Win32::Foundation::PWSTR lpName, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwOpenMode, win32::Windows::Win32::System::Pipes::NAMED_PIPE_MODE dwPipeMode, uint32_t nMaxInstances, uint32_t nOutBufferSize, uint32_t nInBufferSize, uint32_t nDefaultTimeOut, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwOpenMode);
        ORBIT_TRACK_PARAM(dwPipeMode);
        ORBIT_TRACK_PARAM(nMaxInstances);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(nDefaultTimeOut);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateNamedPipeW(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WaitNamedPipeW(win32::Windows::Win32::Foundation::PWSTR lpNamedPipeName, uint32_t nTimeOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpNamedPipeName);
        ORBIT_TRACK_PARAM(nTimeOut);

        auto win32_impl_result = g_api_table.WaitNamedPipeW(lpNamedPipeName, nTimeOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeClientComputerNameW(win32::Windows::Win32::Foundation::HANDLE Pipe, win32::Windows::Win32::Foundation::PWSTR ClientComputerName, uint32_t ClientComputerNameLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(ClientComputerName);
        ORBIT_TRACK_PARAM(ClientComputerNameLength);

        auto win32_impl_result = g_api_table.GetNamedPipeClientComputerNameW(Pipe, ClientComputerName, ClientComputerNameLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ImpersonateNamedPipeClient(win32::Windows::Win32::Foundation::HANDLE hNamedPipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);

        auto win32_impl_result = g_api_table.ImpersonateNamedPipeClient(hNamedPipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeInfo(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, win32::Windows::Win32::System::Pipes::NAMED_PIPE_MODE* lpFlags, uint32_t* lpOutBufferSize, uint32_t* lpInBufferSize, uint32_t* lpMaxInstances) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpFlags);
        ORBIT_TRACK_PARAM(lpOutBufferSize);
        ORBIT_TRACK_PARAM(lpInBufferSize);
        ORBIT_TRACK_PARAM(lpMaxInstances);

        auto win32_impl_result = g_api_table.GetNamedPipeInfo(hNamedPipe, lpFlags, lpOutBufferSize, lpInBufferSize, lpMaxInstances);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeHandleStateW(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, win32::Windows::Win32::System::Pipes::NAMED_PIPE_MODE* lpState, uint32_t* lpCurInstances, uint32_t* lpMaxCollectionCount, uint32_t* lpCollectDataTimeout, win32::Windows::Win32::Foundation::PWSTR lpUserName, uint32_t nMaxUserNameSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpState);
        ORBIT_TRACK_PARAM(lpCurInstances);
        ORBIT_TRACK_PARAM(lpMaxCollectionCount);
        ORBIT_TRACK_PARAM(lpCollectDataTimeout);
        ORBIT_TRACK_PARAM(lpUserName);
        ORBIT_TRACK_PARAM(nMaxUserNameSize);

        auto win32_impl_result = g_api_table.GetNamedPipeHandleStateW(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CallNamedPipeW(win32::Windows::Win32::Foundation::PWSTR lpNamedPipeName, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesRead, uint32_t nTimeOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpNamedPipeName);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesRead);
        ORBIT_TRACK_PARAM(nTimeOut);

        auto win32_impl_result = g_api_table.CallNamedPipeW(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateNamedPipeA(win32::Windows::Win32::Foundation::PSTR lpName, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwOpenMode, win32::Windows::Win32::System::Pipes::NAMED_PIPE_MODE dwPipeMode, uint32_t nMaxInstances, uint32_t nOutBufferSize, uint32_t nInBufferSize, uint32_t nDefaultTimeOut, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwOpenMode);
        ORBIT_TRACK_PARAM(dwPipeMode);
        ORBIT_TRACK_PARAM(nMaxInstances);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(nDefaultTimeOut);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateNamedPipeA(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeHandleStateA(win32::Windows::Win32::Foundation::HANDLE hNamedPipe, win32::Windows::Win32::System::Pipes::NAMED_PIPE_MODE* lpState, uint32_t* lpCurInstances, uint32_t* lpMaxCollectionCount, uint32_t* lpCollectDataTimeout, win32::Windows::Win32::Foundation::PSTR lpUserName, uint32_t nMaxUserNameSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNamedPipe);
        ORBIT_TRACK_PARAM(lpState);
        ORBIT_TRACK_PARAM(lpCurInstances);
        ORBIT_TRACK_PARAM(lpMaxCollectionCount);
        ORBIT_TRACK_PARAM(lpCollectDataTimeout);
        ORBIT_TRACK_PARAM(lpUserName);
        ORBIT_TRACK_PARAM(nMaxUserNameSize);

        auto win32_impl_result = g_api_table.GetNamedPipeHandleStateA(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CallNamedPipeA(win32::Windows::Win32::Foundation::PSTR lpNamedPipeName, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesRead, uint32_t nTimeOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpNamedPipeName);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesRead);
        ORBIT_TRACK_PARAM(nTimeOut);

        auto win32_impl_result = g_api_table.CallNamedPipeA(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WaitNamedPipeA(win32::Windows::Win32::Foundation::PSTR lpNamedPipeName, uint32_t nTimeOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpNamedPipeName);
        ORBIT_TRACK_PARAM(nTimeOut);

        auto win32_impl_result = g_api_table.WaitNamedPipeA(lpNamedPipeName, nTimeOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeClientComputerNameA(win32::Windows::Win32::Foundation::HANDLE Pipe, win32::Windows::Win32::Foundation::PSTR ClientComputerName, uint32_t ClientComputerNameLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(ClientComputerName);
        ORBIT_TRACK_PARAM(ClientComputerNameLength);

        auto win32_impl_result = g_api_table.GetNamedPipeClientComputerNameA(Pipe, ClientComputerName, ClientComputerNameLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeClientProcessId(win32::Windows::Win32::Foundation::HANDLE Pipe, uint32_t* ClientProcessId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(ClientProcessId);

        auto win32_impl_result = g_api_table.GetNamedPipeClientProcessId(Pipe, ClientProcessId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeClientSessionId(win32::Windows::Win32::Foundation::HANDLE Pipe, uint32_t* ClientSessionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(ClientSessionId);

        auto win32_impl_result = g_api_table.GetNamedPipeClientSessionId(Pipe, ClientSessionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeServerProcessId(win32::Windows::Win32::Foundation::HANDLE Pipe, uint32_t* ServerProcessId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(ServerProcessId);

        auto win32_impl_result = g_api_table.GetNamedPipeServerProcessId(Pipe, ServerProcessId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNamedPipeServerSessionId(win32::Windows::Win32::Foundation::HANDLE Pipe, uint32_t* ServerSessionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(ServerSessionId);

        auto win32_impl_result = g_api_table.GetNamedPipeServerSessionId(Pipe, ServerSessionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
