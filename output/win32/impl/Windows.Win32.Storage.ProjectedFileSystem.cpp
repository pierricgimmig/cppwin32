// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_ProjectedFileSystem_2_H
#define WIN32_Windows_Win32_Storage_ProjectedFileSystem_2_H
#include "win32/Windows.Win32.Storage.ProjectedFileSystem.h"
#include "win32/impl/Windows.Win32.Storage.ProjectedFileSystem.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::ProjectedFileSystem
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjStartVirtualizing(win32::Windows::Win32::Foundation::PWSTR virtualizationRootPath, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_CALLBACKS* callbacks, void* instanceContext, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_STARTVIRTUALIZING_OPTIONS* options, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT* namespaceVirtualizationContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(virtualizationRootPath);
        ORBIT_TRACK_PARAM(callbacks);
        ORBIT_TRACK_PARAM(instanceContext);
        ORBIT_TRACK_PARAM(options);
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);

        auto win32_impl_result = g_api_table.PrjStartVirtualizing(virtualizationRootPath, callbacks, instanceContext, options, namespaceVirtualizationContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_PrjStopVirtualizing(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);

        g_api_table.PrjStopVirtualizing(namespaceVirtualizationContext);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjClearNegativePathCache(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, uint32_t* totalEntryNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(totalEntryNumber);

        auto win32_impl_result = g_api_table.PrjClearNegativePathCache(namespaceVirtualizationContext, totalEntryNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjGetVirtualizationInstanceInfo(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_VIRTUALIZATION_INSTANCE_INFO* virtualizationInstanceInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(virtualizationInstanceInfo);

        auto win32_impl_result = g_api_table.PrjGetVirtualizationInstanceInfo(namespaceVirtualizationContext, virtualizationInstanceInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjMarkDirectoryAsPlaceholder(win32::Windows::Win32::Foundation::PWSTR rootPathName, win32::Windows::Win32::Foundation::PWSTR targetPathName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_PLACEHOLDER_VERSION_INFO* versionInfo, ::win32::guid* virtualizationInstanceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(rootPathName);
        ORBIT_TRACK_PARAM(targetPathName);
        ORBIT_TRACK_PARAM(versionInfo);
        ORBIT_TRACK_PARAM(virtualizationInstanceID);

        auto win32_impl_result = g_api_table.PrjMarkDirectoryAsPlaceholder(rootPathName, targetPathName, versionInfo, virtualizationInstanceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjWritePlaceholderInfo(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, win32::Windows::Win32::Foundation::PWSTR destinationFileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_PLACEHOLDER_INFO* placeholderInfo, uint32_t placeholderInfoSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(destinationFileName);
        ORBIT_TRACK_PARAM(placeholderInfo);
        ORBIT_TRACK_PARAM(placeholderInfoSize);

        auto win32_impl_result = g_api_table.PrjWritePlaceholderInfo(namespaceVirtualizationContext, destinationFileName, placeholderInfo, placeholderInfoSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjWritePlaceholderInfo2(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, win32::Windows::Win32::Foundation::PWSTR destinationFileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_PLACEHOLDER_INFO* placeholderInfo, uint32_t placeholderInfoSize, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_EXTENDED_INFO* ExtendedInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(destinationFileName);
        ORBIT_TRACK_PARAM(placeholderInfo);
        ORBIT_TRACK_PARAM(placeholderInfoSize);
        ORBIT_TRACK_PARAM(ExtendedInfo);

        auto win32_impl_result = g_api_table.PrjWritePlaceholderInfo2(namespaceVirtualizationContext, destinationFileName, placeholderInfo, placeholderInfoSize, ExtendedInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjUpdateFileIfNeeded(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, win32::Windows::Win32::Foundation::PWSTR destinationFileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_PLACEHOLDER_INFO* placeholderInfo, uint32_t placeholderInfoSize, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_UPDATE_TYPES updateFlags, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_UPDATE_FAILURE_CAUSES* failureReason) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(destinationFileName);
        ORBIT_TRACK_PARAM(placeholderInfo);
        ORBIT_TRACK_PARAM(placeholderInfoSize);
        ORBIT_TRACK_PARAM(updateFlags);
        ORBIT_TRACK_PARAM(failureReason);

        auto win32_impl_result = g_api_table.PrjUpdateFileIfNeeded(namespaceVirtualizationContext, destinationFileName, placeholderInfo, placeholderInfoSize, updateFlags, failureReason);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjDeleteFile(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, win32::Windows::Win32::Foundation::PWSTR destinationFileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_UPDATE_TYPES updateFlags, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_UPDATE_FAILURE_CAUSES* failureReason) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(destinationFileName);
        ORBIT_TRACK_PARAM(updateFlags);
        ORBIT_TRACK_PARAM(failureReason);

        auto win32_impl_result = g_api_table.PrjDeleteFile(namespaceVirtualizationContext, destinationFileName, updateFlags, failureReason);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjWriteFileData(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, ::win32::guid* dataStreamId, void* buffer, uint64_t byteOffset, uint32_t length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(dataStreamId);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(byteOffset);
        ORBIT_TRACK_PARAM(length);

        auto win32_impl_result = g_api_table.PrjWriteFileData(namespaceVirtualizationContext, dataStreamId, buffer, byteOffset, length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjGetOnDiskFileState(win32::Windows::Win32::Foundation::PWSTR destinationFileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_FILE_STATE* fileState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(destinationFileName);
        ORBIT_TRACK_PARAM(fileState);

        auto win32_impl_result = g_api_table.PrjGetOnDiskFileState(destinationFileName, fileState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_PrjAllocateAlignedBuffer(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, size_t size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(size);

        auto win32_impl_result = g_api_table.PrjAllocateAlignedBuffer(namespaceVirtualizationContext, size);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_PrjFreeAlignedBuffer(void* buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(buffer);

        g_api_table.PrjFreeAlignedBuffer(buffer);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjCompleteCommand(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, int32_t commandId, win32::Windows::Win32::Foundation::HRESULT completionResult, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS* extendedParameters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(namespaceVirtualizationContext);
        ORBIT_TRACK_PARAM(commandId);
        ORBIT_TRACK_PARAM(completionResult);
        ORBIT_TRACK_PARAM(extendedParameters);

        auto win32_impl_result = g_api_table.PrjCompleteCommand(namespaceVirtualizationContext, commandId, completionResult, extendedParameters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjFillDirEntryBuffer(win32::Windows::Win32::Foundation::PWSTR fileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_FILE_BASIC_INFO* fileBasicInfo, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileName);
        ORBIT_TRACK_PARAM(fileBasicInfo);
        ORBIT_TRACK_PARAM(dirEntryBufferHandle);

        auto win32_impl_result = g_api_table.PrjFillDirEntryBuffer(fileName, fileBasicInfo, dirEntryBufferHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PrjFillDirEntryBuffer2(win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle, win32::Windows::Win32::Foundation::PWSTR fileName, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_FILE_BASIC_INFO* fileBasicInfo, win32::Windows::Win32::Storage::ProjectedFileSystem::PRJ_EXTENDED_INFO* extendedInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dirEntryBufferHandle);
        ORBIT_TRACK_PARAM(fileName);
        ORBIT_TRACK_PARAM(fileBasicInfo);
        ORBIT_TRACK_PARAM(extendedInfo);

        auto win32_impl_result = g_api_table.PrjFillDirEntryBuffer2(dirEntryBufferHandle, fileName, fileBasicInfo, extendedInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_PrjFileNameMatch(win32::Windows::Win32::Foundation::PWSTR fileNameToCheck, win32::Windows::Win32::Foundation::PWSTR pattern) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileNameToCheck);
        ORBIT_TRACK_PARAM(pattern);

        auto win32_impl_result = g_api_table.PrjFileNameMatch(fileNameToCheck, pattern);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_PrjFileNameCompare(win32::Windows::Win32::Foundation::PWSTR fileName1, win32::Windows::Win32::Foundation::PWSTR fileName2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileName1);
        ORBIT_TRACK_PARAM(fileName2);

        auto win32_impl_result = g_api_table.PrjFileNameCompare(fileName1, fileName2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_PrjDoesNameContainWildCards(win32::Windows::Win32::Foundation::PWSTR fileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileName);

        auto win32_impl_result = g_api_table.PrjDoesNameContainWildCards(fileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
