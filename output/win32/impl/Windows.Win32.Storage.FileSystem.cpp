// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_FileSystem_2_H
#define WIN32_Windows_Win32_Storage_FileSystem_2_H
#include "win32/Windows.Win32.Storage.FileSystem.h"
#include "win32/impl/Windows.Win32.Storage.FileSystem.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::FileSystem
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_SearchPathW(win32::Windows::Win32::Foundation::PWSTR lpPath, win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Foundation::PWSTR lpExtension, uint32_t nBufferLength, win32::Windows::Win32::Foundation::PWSTR lpBuffer, win32::Windows::Win32::Foundation::PWSTR* lpFilePart) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPath);
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpExtension);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpFilePart);

        auto win32_impl_result = g_api_table.SearchPathW(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SearchPathA(win32::Windows::Win32::Foundation::PSTR lpPath, win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Foundation::PSTR lpExtension, uint32_t nBufferLength, win32::Windows::Win32::Foundation::PSTR lpBuffer, win32::Windows::Win32::Foundation::PSTR* lpFilePart) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPath);
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpExtension);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpFilePart);

        auto win32_impl_result = g_api_table.SearchPathA(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CompareFileTime(win32::Windows::Win32::Foundation::FILETIME* lpFileTime1, win32::Windows::Win32::Foundation::FILETIME* lpFileTime2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileTime1);
        ORBIT_TRACK_PARAM(lpFileTime2);

        auto win32_impl_result = g_api_table.CompareFileTime(lpFileTime1, lpFileTime2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryA(win32::Windows::Win32::Foundation::PSTR lpPathName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateDirectoryA(lpPathName, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryW(win32::Windows::Win32::Foundation::PWSTR lpPathName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateDirectoryW(lpPathName, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Storage::FileSystem::FILE_CREATION_DISPOSITION dwCreationDisposition, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, win32::Windows::Win32::Foundation::HANDLE hTemplateFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);
        ORBIT_TRACK_PARAM(hTemplateFile);

        auto win32_impl_result = g_api_table.CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Storage::FileSystem::FILE_CREATION_DISPOSITION dwCreationDisposition, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, win32::Windows::Win32::Foundation::HANDLE hTemplateFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);
        ORBIT_TRACK_PARAM(hTemplateFile);

        auto win32_impl_result = g_api_table.CreateFileW(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DefineDosDeviceW(win32::Windows::Win32::Storage::FileSystem::DEFINE_DOS_DEVICE_FLAGS dwFlags, win32::Windows::Win32::Foundation::PWSTR lpDeviceName, win32::Windows::Win32::Foundation::PWSTR lpTargetPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDeviceName);
        ORBIT_TRACK_PARAM(lpTargetPath);

        auto win32_impl_result = g_api_table.DefineDosDeviceW(dwFlags, lpDeviceName, lpTargetPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteFileA(win32::Windows::Win32::Foundation::PSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.DeleteFileA(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteFileW(win32::Windows::Win32::Foundation::PWSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.DeleteFileW(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteVolumeMountPointW(win32::Windows::Win32::Foundation::PWSTR lpszVolumeMountPoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);

        auto win32_impl_result = g_api_table.DeleteVolumeMountPointW(lpszVolumeMountPoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FileTimeToLocalFileTime(win32::Windows::Win32::Foundation::FILETIME* lpFileTime, win32::Windows::Win32::Foundation::FILETIME* lpLocalFileTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileTime);
        ORBIT_TRACK_PARAM(lpLocalFileTime);

        auto win32_impl_result = g_api_table.FileTimeToLocalFileTime(lpFileTime, lpLocalFileTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindClose(win32::Windows::Win32::Storage::FileSystem::FindFileHandle hFindFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindFile);

        auto win32_impl_result = g_api_table.FindClose(hFindFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindCloseChangeNotification(win32::Windows::Win32::Storage::FileSystem::FindChangeNotificationHandle hChangeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChangeHandle);

        auto win32_impl_result = g_api_table.FindCloseChangeNotification(hChangeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindChangeNotificationHandle __stdcall ORBIT_IMPL_FindFirstChangeNotificationA(win32::Windows::Win32::Foundation::PSTR lpPathName, win32::Windows::Win32::Foundation::BOOL bWatchSubtree, win32::Windows::Win32::Storage::FileSystem::FILE_NOTIFY_CHANGE dwNotifyFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(bWatchSubtree);
        ORBIT_TRACK_PARAM(dwNotifyFilter);

        auto win32_impl_result = g_api_table.FindFirstChangeNotificationA(lpPathName, bWatchSubtree, dwNotifyFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindChangeNotificationHandle __stdcall ORBIT_IMPL_FindFirstChangeNotificationW(win32::Windows::Win32::Foundation::PWSTR lpPathName, win32::Windows::Win32::Foundation::BOOL bWatchSubtree, win32::Windows::Win32::Storage::FileSystem::FILE_NOTIFY_CHANGE dwNotifyFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(bWatchSubtree);
        ORBIT_TRACK_PARAM(dwNotifyFilter);

        auto win32_impl_result = g_api_table.FindFirstChangeNotificationW(lpPathName, bWatchSubtree, dwNotifyFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileHandle __stdcall ORBIT_IMPL_FindFirstFileA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::WIN32_FIND_DATAA* lpFindFileData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpFindFileData);

        auto win32_impl_result = g_api_table.FindFirstFileA(lpFileName, lpFindFileData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileHandle __stdcall ORBIT_IMPL_FindFirstFileW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::WIN32_FIND_DATAW* lpFindFileData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpFindFileData);

        auto win32_impl_result = g_api_table.FindFirstFileW(lpFileName, lpFindFileData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileHandle __stdcall ORBIT_IMPL_FindFirstFileExA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, win32::Windows::Win32::Storage::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, win32::Windows::Win32::Storage::FileSystem::FIND_FIRST_EX_FLAGS dwAdditionalFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFindFileData);
        ORBIT_TRACK_PARAM(fSearchOp);
        ORBIT_TRACK_PARAM(lpSearchFilter);
        ORBIT_TRACK_PARAM(dwAdditionalFlags);

        auto win32_impl_result = g_api_table.FindFirstFileExA(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileHandle __stdcall ORBIT_IMPL_FindFirstFileExW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, win32::Windows::Win32::Storage::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, win32::Windows::Win32::Storage::FileSystem::FIND_FIRST_EX_FLAGS dwAdditionalFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFindFileData);
        ORBIT_TRACK_PARAM(fSearchOp);
        ORBIT_TRACK_PARAM(lpSearchFilter);
        ORBIT_TRACK_PARAM(dwAdditionalFlags);

        auto win32_impl_result = g_api_table.FindFirstFileExW(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindVolumeHandle __stdcall ORBIT_IMPL_FindFirstVolumeW(win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindFirstVolumeW(lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextChangeNotification(win32::Windows::Win32::Storage::FileSystem::FindChangeNotificationHandle hChangeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChangeHandle);

        auto win32_impl_result = g_api_table.FindNextChangeNotification(hChangeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextFileA(win32::Windows::Win32::Storage::FileSystem::FindFileHandle hFindFile, win32::Windows::Win32::Storage::FileSystem::WIN32_FIND_DATAA* lpFindFileData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindFile);
        ORBIT_TRACK_PARAM(lpFindFileData);

        auto win32_impl_result = g_api_table.FindNextFileA(hFindFile, lpFindFileData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextFileW(win32::Windows::Win32::Foundation::HANDLE hFindFile, win32::Windows::Win32::Storage::FileSystem::WIN32_FIND_DATAW* lpFindFileData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindFile);
        ORBIT_TRACK_PARAM(lpFindFileData);

        auto win32_impl_result = g_api_table.FindNextFileW(hFindFile, lpFindFileData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextVolumeW(win32::Windows::Win32::Storage::FileSystem::FindVolumeHandle hFindVolume, win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindVolume);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindNextVolumeW(hFindVolume, lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindVolumeClose(win32::Windows::Win32::Storage::FileSystem::FindVolumeHandle hFindVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindVolume);

        auto win32_impl_result = g_api_table.FindVolumeClose(hFindVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FlushFileBuffers(win32::Windows::Win32::Foundation::HANDLE hFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);

        auto win32_impl_result = g_api_table.FlushFileBuffers(hFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDiskFreeSpaceA(win32::Windows::Win32::Foundation::PSTR lpRootPathName, uint32_t* lpSectorsPerCluster, uint32_t* lpBytesPerSector, uint32_t* lpNumberOfFreeClusters, uint32_t* lpTotalNumberOfClusters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);
        ORBIT_TRACK_PARAM(lpSectorsPerCluster);
        ORBIT_TRACK_PARAM(lpBytesPerSector);
        ORBIT_TRACK_PARAM(lpNumberOfFreeClusters);
        ORBIT_TRACK_PARAM(lpTotalNumberOfClusters);

        auto win32_impl_result = g_api_table.GetDiskFreeSpaceA(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDiskFreeSpaceW(win32::Windows::Win32::Foundation::PWSTR lpRootPathName, uint32_t* lpSectorsPerCluster, uint32_t* lpBytesPerSector, uint32_t* lpNumberOfFreeClusters, uint32_t* lpTotalNumberOfClusters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);
        ORBIT_TRACK_PARAM(lpSectorsPerCluster);
        ORBIT_TRACK_PARAM(lpBytesPerSector);
        ORBIT_TRACK_PARAM(lpNumberOfFreeClusters);
        ORBIT_TRACK_PARAM(lpTotalNumberOfClusters);

        auto win32_impl_result = g_api_table.GetDiskFreeSpaceW(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDiskFreeSpaceExA(win32::Windows::Win32::Foundation::PSTR lpDirectoryName, win32::Windows::Win32::Foundation::ULARGE_INTEGER* lpFreeBytesAvailableToCaller, win32::Windows::Win32::Foundation::ULARGE_INTEGER* lpTotalNumberOfBytes, win32::Windows::Win32::Foundation::ULARGE_INTEGER* lpTotalNumberOfFreeBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDirectoryName);
        ORBIT_TRACK_PARAM(lpFreeBytesAvailableToCaller);
        ORBIT_TRACK_PARAM(lpTotalNumberOfBytes);
        ORBIT_TRACK_PARAM(lpTotalNumberOfFreeBytes);

        auto win32_impl_result = g_api_table.GetDiskFreeSpaceExA(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDiskFreeSpaceExW(win32::Windows::Win32::Foundation::PWSTR lpDirectoryName, win32::Windows::Win32::Foundation::ULARGE_INTEGER* lpFreeBytesAvailableToCaller, win32::Windows::Win32::Foundation::ULARGE_INTEGER* lpTotalNumberOfBytes, win32::Windows::Win32::Foundation::ULARGE_INTEGER* lpTotalNumberOfFreeBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDirectoryName);
        ORBIT_TRACK_PARAM(lpFreeBytesAvailableToCaller);
        ORBIT_TRACK_PARAM(lpTotalNumberOfBytes);
        ORBIT_TRACK_PARAM(lpTotalNumberOfFreeBytes);

        auto win32_impl_result = g_api_table.GetDiskFreeSpaceExW(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetDiskSpaceInformationA(win32::Windows::Win32::Foundation::PSTR rootPath, win32::Windows::Win32::Storage::FileSystem::DISK_SPACE_INFORMATION* diskSpaceInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(rootPath);
        ORBIT_TRACK_PARAM(diskSpaceInfo);

        auto win32_impl_result = g_api_table.GetDiskSpaceInformationA(rootPath, diskSpaceInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetDiskSpaceInformationW(win32::Windows::Win32::Foundation::PWSTR rootPath, win32::Windows::Win32::Storage::FileSystem::DISK_SPACE_INFORMATION* diskSpaceInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(rootPath);
        ORBIT_TRACK_PARAM(diskSpaceInfo);

        auto win32_impl_result = g_api_table.GetDiskSpaceInformationW(rootPath, diskSpaceInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDriveTypeA(win32::Windows::Win32::Foundation::PSTR lpRootPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);

        auto win32_impl_result = g_api_table.GetDriveTypeA(lpRootPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDriveTypeW(win32::Windows::Win32::Foundation::PWSTR lpRootPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);

        auto win32_impl_result = g_api_table.GetDriveTypeW(lpRootPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileAttributesA(win32::Windows::Win32::Foundation::PSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.GetFileAttributesA(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileAttributesW(win32::Windows::Win32::Foundation::PWSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.GetFileAttributesW(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileAttributesExA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFileInformation);

        auto win32_impl_result = g_api_table.GetFileAttributesExA(lpFileName, fInfoLevelId, lpFileInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileAttributesExW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFileInformation);

        auto win32_impl_result = g_api_table.GetFileAttributesExW(lpFileName, fInfoLevelId, lpFileInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileInformationByHandle(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Storage::FileSystem::BY_HANDLE_FILE_INFORMATION* lpFileInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileInformation);

        auto win32_impl_result = g_api_table.GetFileInformationByHandle(hFile, lpFileInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileSize(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t* lpFileSizeHigh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileSizeHigh);

        auto win32_impl_result = g_api_table.GetFileSize(hFile, lpFileSizeHigh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileSizeEx(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::LARGE_INTEGER* lpFileSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpFileSize);

        auto win32_impl_result = g_api_table.GetFileSizeEx(hFile, lpFileSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileType(win32::Windows::Win32::Foundation::HANDLE hFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);

        auto win32_impl_result = g_api_table.GetFileType(hFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFinalPathNameByHandleA(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::PSTR lpszFilePath, uint32_t cchFilePath, win32::Windows::Win32::Storage::FileSystem::FILE_NAME dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpszFilePath);
        ORBIT_TRACK_PARAM(cchFilePath);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.GetFinalPathNameByHandleA(hFile, lpszFilePath, cchFilePath, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFinalPathNameByHandleW(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::PWSTR lpszFilePath, uint32_t cchFilePath, win32::Windows::Win32::Storage::FileSystem::FILE_NAME dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpszFilePath);
        ORBIT_TRACK_PARAM(cchFilePath);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.GetFinalPathNameByHandleW(hFile, lpszFilePath, cchFilePath, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileTime(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::FILETIME* lpCreationTime, win32::Windows::Win32::Foundation::FILETIME* lpLastAccessTime, win32::Windows::Win32::Foundation::FILETIME* lpLastWriteTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpCreationTime);
        ORBIT_TRACK_PARAM(lpLastAccessTime);
        ORBIT_TRACK_PARAM(lpLastWriteTime);

        auto win32_impl_result = g_api_table.GetFileTime(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFullPathNameW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t nBufferLength, win32::Windows::Win32::Foundation::PWSTR lpBuffer, win32::Windows::Win32::Foundation::PWSTR* lpFilePart) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpFilePart);

        auto win32_impl_result = g_api_table.GetFullPathNameW(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFullPathNameA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t nBufferLength, win32::Windows::Win32::Foundation::PSTR lpBuffer, win32::Windows::Win32::Foundation::PSTR* lpFilePart) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpFilePart);

        auto win32_impl_result = g_api_table.GetFullPathNameA(lpFileName, nBufferLength, lpBuffer, lpFilePart);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLogicalDrives() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetLogicalDrives();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLogicalDriveStringsW(uint32_t nBufferLength, win32::Windows::Win32::Foundation::PWSTR lpBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);

        auto win32_impl_result = g_api_table.GetLogicalDriveStringsW(nBufferLength, lpBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLongPathNameA(win32::Windows::Win32::Foundation::PSTR lpszShortPath, win32::Windows::Win32::Foundation::PSTR lpszLongPath, uint32_t cchBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszShortPath);
        ORBIT_TRACK_PARAM(lpszLongPath);
        ORBIT_TRACK_PARAM(cchBuffer);

        auto win32_impl_result = g_api_table.GetLongPathNameA(lpszShortPath, lpszLongPath, cchBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLongPathNameW(win32::Windows::Win32::Foundation::PWSTR lpszShortPath, win32::Windows::Win32::Foundation::PWSTR lpszLongPath, uint32_t cchBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszShortPath);
        ORBIT_TRACK_PARAM(lpszLongPath);
        ORBIT_TRACK_PARAM(cchBuffer);

        auto win32_impl_result = g_api_table.GetLongPathNameW(lpszShortPath, lpszLongPath, cchBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AreShortNamesEnabled(win32::Windows::Win32::Foundation::HANDLE Handle, win32::Windows::Win32::Foundation::BOOL* Enabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(Enabled);

        auto win32_impl_result = g_api_table.AreShortNamesEnabled(Handle, Enabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetShortPathNameW(win32::Windows::Win32::Foundation::PWSTR lpszLongPath, win32::Windows::Win32::Foundation::PWSTR lpszShortPath, uint32_t cchBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszLongPath);
        ORBIT_TRACK_PARAM(lpszShortPath);
        ORBIT_TRACK_PARAM(cchBuffer);

        auto win32_impl_result = g_api_table.GetShortPathNameW(lpszLongPath, lpszShortPath, cchBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTempFileNameW(win32::Windows::Win32::Foundation::PWSTR lpPathName, win32::Windows::Win32::Foundation::PWSTR lpPrefixString, uint32_t uUnique, win32::Windows::Win32::Foundation::PWSTR lpTempFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(lpPrefixString);
        ORBIT_TRACK_PARAM(uUnique);
        ORBIT_TRACK_PARAM(lpTempFileName);

        auto win32_impl_result = g_api_table.GetTempFileNameW(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumeInformationByHandleW(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::PWSTR lpVolumeNameBuffer, uint32_t nVolumeNameSize, uint32_t* lpVolumeSerialNumber, uint32_t* lpMaximumComponentLength, uint32_t* lpFileSystemFlags, win32::Windows::Win32::Foundation::PWSTR lpFileSystemNameBuffer, uint32_t nFileSystemNameSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpVolumeNameBuffer);
        ORBIT_TRACK_PARAM(nVolumeNameSize);
        ORBIT_TRACK_PARAM(lpVolumeSerialNumber);
        ORBIT_TRACK_PARAM(lpMaximumComponentLength);
        ORBIT_TRACK_PARAM(lpFileSystemFlags);
        ORBIT_TRACK_PARAM(lpFileSystemNameBuffer);
        ORBIT_TRACK_PARAM(nFileSystemNameSize);

        auto win32_impl_result = g_api_table.GetVolumeInformationByHandleW(hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumeInformationW(win32::Windows::Win32::Foundation::PWSTR lpRootPathName, win32::Windows::Win32::Foundation::PWSTR lpVolumeNameBuffer, uint32_t nVolumeNameSize, uint32_t* lpVolumeSerialNumber, uint32_t* lpMaximumComponentLength, uint32_t* lpFileSystemFlags, win32::Windows::Win32::Foundation::PWSTR lpFileSystemNameBuffer, uint32_t nFileSystemNameSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);
        ORBIT_TRACK_PARAM(lpVolumeNameBuffer);
        ORBIT_TRACK_PARAM(nVolumeNameSize);
        ORBIT_TRACK_PARAM(lpVolumeSerialNumber);
        ORBIT_TRACK_PARAM(lpMaximumComponentLength);
        ORBIT_TRACK_PARAM(lpFileSystemFlags);
        ORBIT_TRACK_PARAM(lpFileSystemNameBuffer);
        ORBIT_TRACK_PARAM(nFileSystemNameSize);

        auto win32_impl_result = g_api_table.GetVolumeInformationW(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumePathNameW(win32::Windows::Win32::Foundation::PWSTR lpszFileName, win32::Windows::Win32::Foundation::PWSTR lpszVolumePathName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszFileName);
        ORBIT_TRACK_PARAM(lpszVolumePathName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.GetVolumePathNameW(lpszFileName, lpszVolumePathName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_LocalFileTimeToFileTime(win32::Windows::Win32::Foundation::FILETIME* lpLocalFileTime, win32::Windows::Win32::Foundation::FILETIME* lpFileTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpLocalFileTime);
        ORBIT_TRACK_PARAM(lpFileTime);

        auto win32_impl_result = g_api_table.LocalFileTimeToFileTime(lpLocalFileTime, lpFileTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_LockFile(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t dwFileOffsetLow, uint32_t dwFileOffsetHigh, uint32_t nNumberOfBytesToLockLow, uint32_t nNumberOfBytesToLockHigh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(dwFileOffsetLow);
        ORBIT_TRACK_PARAM(dwFileOffsetHigh);
        ORBIT_TRACK_PARAM(nNumberOfBytesToLockLow);
        ORBIT_TRACK_PARAM(nNumberOfBytesToLockHigh);

        auto win32_impl_result = g_api_table.LockFile(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_LockFileEx(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Storage::FileSystem::LOCK_FILE_FLAGS dwFlags, uint32_t dwReserved, uint32_t nNumberOfBytesToLockLow, uint32_t nNumberOfBytesToLockHigh, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(nNumberOfBytesToLockLow);
        ORBIT_TRACK_PARAM(nNumberOfBytesToLockHigh);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.LockFileEx(hFile, dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryDosDeviceW(win32::Windows::Win32::Foundation::PWSTR lpDeviceName, win32::Windows::Win32::Foundation::PWSTR lpTargetPath, uint32_t ucchMax) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDeviceName);
        ORBIT_TRACK_PARAM(lpTargetPath);
        ORBIT_TRACK_PARAM(ucchMax);

        auto win32_impl_result = g_api_table.QueryDosDeviceW(lpDeviceName, lpTargetPath, ucchMax);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadFile(win32::Windows::Win32::Foundation::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nNumberOfBytesToRead);
        ORBIT_TRACK_PARAM(lpNumberOfBytesRead);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.ReadFile(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadFileEx(win32::Windows::Win32::Foundation::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToRead, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::System::IO::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nNumberOfBytesToRead);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.ReadFileEx(hFile, lpBuffer, nNumberOfBytesToRead, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadFileScatter(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Storage::FileSystem::FILE_SEGMENT_ELEMENT* aSegmentArray, uint32_t nNumberOfBytesToRead, uint32_t* lpReserved, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(aSegmentArray);
        ORBIT_TRACK_PARAM(nNumberOfBytesToRead);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.ReadFileScatter(hFile, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveDirectoryA(win32::Windows::Win32::Foundation::PSTR lpPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);

        auto win32_impl_result = g_api_table.RemoveDirectoryA(lpPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveDirectoryW(win32::Windows::Win32::Foundation::PWSTR lpPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);

        auto win32_impl_result = g_api_table.RemoveDirectoryW(lpPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetEndOfFile(win32::Windows::Win32::Foundation::HANDLE hFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);

        auto win32_impl_result = g_api_table.SetEndOfFile(hFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileAttributesA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFileAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFileAttributes);

        auto win32_impl_result = g_api_table.SetFileAttributesA(lpFileName, dwFileAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileAttributesW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFileAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFileAttributes);

        auto win32_impl_result = g_api_table.SetFileAttributesW(lpFileName, dwFileAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileInformationByHandle(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Storage::FileSystem::FILE_INFO_BY_HANDLE_CLASS FileInformationClass, void* lpFileInformation, uint32_t dwBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(FileInformationClass);
        ORBIT_TRACK_PARAM(lpFileInformation);
        ORBIT_TRACK_PARAM(dwBufferSize);

        auto win32_impl_result = g_api_table.SetFileInformationByHandle(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetFilePointer(win32::Windows::Win32::Foundation::HANDLE hFile, int32_t lDistanceToMove, int32_t* lpDistanceToMoveHigh, win32::Windows::Win32::Storage::FileSystem::SET_FILE_POINTER_MOVE_METHOD dwMoveMethod) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lDistanceToMove);
        ORBIT_TRACK_PARAM(lpDistanceToMoveHigh);
        ORBIT_TRACK_PARAM(dwMoveMethod);

        auto win32_impl_result = g_api_table.SetFilePointer(hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFilePointerEx(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::LARGE_INTEGER liDistanceToMove, win32::Windows::Win32::Foundation::LARGE_INTEGER* lpNewFilePointer, win32::Windows::Win32::Storage::FileSystem::SET_FILE_POINTER_MOVE_METHOD dwMoveMethod) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(liDistanceToMove);
        ORBIT_TRACK_PARAM(lpNewFilePointer);
        ORBIT_TRACK_PARAM(dwMoveMethod);

        auto win32_impl_result = g_api_table.SetFilePointerEx(hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileTime(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::FILETIME* lpCreationTime, win32::Windows::Win32::Foundation::FILETIME* lpLastAccessTime, win32::Windows::Win32::Foundation::FILETIME* lpLastWriteTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpCreationTime);
        ORBIT_TRACK_PARAM(lpLastAccessTime);
        ORBIT_TRACK_PARAM(lpLastWriteTime);

        auto win32_impl_result = g_api_table.SetFileTime(hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileValidData(win32::Windows::Win32::Foundation::HANDLE hFile, int64_t ValidDataLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(ValidDataLength);

        auto win32_impl_result = g_api_table.SetFileValidData(hFile, ValidDataLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnlockFile(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t dwFileOffsetLow, uint32_t dwFileOffsetHigh, uint32_t nNumberOfBytesToUnlockLow, uint32_t nNumberOfBytesToUnlockHigh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(dwFileOffsetLow);
        ORBIT_TRACK_PARAM(dwFileOffsetHigh);
        ORBIT_TRACK_PARAM(nNumberOfBytesToUnlockLow);
        ORBIT_TRACK_PARAM(nNumberOfBytesToUnlockHigh);

        auto win32_impl_result = g_api_table.UnlockFile(hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnlockFileEx(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t dwReserved, uint32_t nNumberOfBytesToUnlockLow, uint32_t nNumberOfBytesToUnlockHigh, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(nNumberOfBytesToUnlockLow);
        ORBIT_TRACK_PARAM(nNumberOfBytesToUnlockHigh);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.UnlockFileEx(hFile, dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WriteFile(win32::Windows::Win32::Foundation::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nNumberOfBytesToWrite);
        ORBIT_TRACK_PARAM(lpNumberOfBytesWritten);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WriteFileEx(win32::Windows::Win32::Foundation::HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToWrite, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::System::IO::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nNumberOfBytesToWrite);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.WriteFileEx(hFile, lpBuffer, nNumberOfBytesToWrite, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WriteFileGather(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Storage::FileSystem::FILE_SEGMENT_ELEMENT* aSegmentArray, uint32_t nNumberOfBytesToWrite, uint32_t* lpReserved, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(aSegmentArray);
        ORBIT_TRACK_PARAM(nNumberOfBytesToWrite);
        ORBIT_TRACK_PARAM(lpReserved);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.WriteFileGather(hFile, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTempPathW(uint32_t nBufferLength, win32::Windows::Win32::Foundation::PWSTR lpBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);

        auto win32_impl_result = g_api_table.GetTempPathW(nBufferLength, lpBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumeNameForVolumeMountPointW(win32::Windows::Win32::Foundation::PWSTR lpszVolumeMountPoint, win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumePathNamesForVolumeNameW(win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, win32::Windows::Win32::Foundation::PWSTR lpszVolumePathNames, uint32_t cchBufferLength, uint32_t* lpcchReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(lpszVolumePathNames);
        ORBIT_TRACK_PARAM(cchBufferLength);
        ORBIT_TRACK_PARAM(lpcchReturnLength);

        auto win32_impl_result = g_api_table.GetVolumePathNamesForVolumeNameW(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFile2(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Storage::FileSystem::FILE_CREATION_DISPOSITION dwCreationDisposition, win32::Windows::Win32::Storage::FileSystem::CREATEFILE2_EXTENDED_PARAMETERS* pCreateExParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(pCreateExParams);

        auto win32_impl_result = g_api_table.CreateFile2(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileIoOverlappedRange(win32::Windows::Win32::Foundation::HANDLE FileHandle, uint8_t* OverlappedRangeStart, uint32_t Length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileHandle);
        ORBIT_TRACK_PARAM(OverlappedRangeStart);
        ORBIT_TRACK_PARAM(Length);

        auto win32_impl_result = g_api_table.SetFileIoOverlappedRange(FileHandle, OverlappedRangeStart, Length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCompressedFileSizeA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t* lpFileSizeHigh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpFileSizeHigh);

        auto win32_impl_result = g_api_table.GetCompressedFileSizeA(lpFileName, lpFileSizeHigh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCompressedFileSizeW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t* lpFileSizeHigh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpFileSizeHigh);

        auto win32_impl_result = g_api_table.GetCompressedFileSizeW(lpFileName, lpFileSizeHigh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindStreamHandle __stdcall ORBIT_IMPL_FindFirstStreamW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(lpFindStreamData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.FindFirstStreamW(lpFileName, InfoLevel, lpFindStreamData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextStreamW(win32::Windows::Win32::Storage::FileSystem::FindStreamHandle hFindStream, void* lpFindStreamData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindStream);
        ORBIT_TRACK_PARAM(lpFindStreamData);

        auto win32_impl_result = g_api_table.FindNextStreamW(hFindStream, lpFindStreamData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AreFileApisANSI() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.AreFileApisANSI();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTempPathA(uint32_t nBufferLength, win32::Windows::Win32::Foundation::PSTR lpBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);

        auto win32_impl_result = g_api_table.GetTempPathA(nBufferLength, lpBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileNameHandle __stdcall ORBIT_IMPL_FindFirstFileNameW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwFlags, uint32_t* StringLength, win32::Windows::Win32::Foundation::PWSTR LinkName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(StringLength);
        ORBIT_TRACK_PARAM(LinkName);

        auto win32_impl_result = g_api_table.FindFirstFileNameW(lpFileName, dwFlags, StringLength, LinkName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextFileNameW(win32::Windows::Win32::Storage::FileSystem::FindFileNameHandle hFindStream, uint32_t* StringLength, win32::Windows::Win32::Foundation::PWSTR LinkName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindStream);
        ORBIT_TRACK_PARAM(StringLength);
        ORBIT_TRACK_PARAM(LinkName);

        auto win32_impl_result = g_api_table.FindNextFileNameW(hFindStream, StringLength, LinkName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumeInformationA(win32::Windows::Win32::Foundation::PSTR lpRootPathName, win32::Windows::Win32::Foundation::PSTR lpVolumeNameBuffer, uint32_t nVolumeNameSize, uint32_t* lpVolumeSerialNumber, uint32_t* lpMaximumComponentLength, uint32_t* lpFileSystemFlags, win32::Windows::Win32::Foundation::PSTR lpFileSystemNameBuffer, uint32_t nFileSystemNameSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);
        ORBIT_TRACK_PARAM(lpVolumeNameBuffer);
        ORBIT_TRACK_PARAM(nVolumeNameSize);
        ORBIT_TRACK_PARAM(lpVolumeSerialNumber);
        ORBIT_TRACK_PARAM(lpMaximumComponentLength);
        ORBIT_TRACK_PARAM(lpFileSystemFlags);
        ORBIT_TRACK_PARAM(lpFileSystemNameBuffer);
        ORBIT_TRACK_PARAM(nFileSystemNameSize);

        auto win32_impl_result = g_api_table.GetVolumeInformationA(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTempFileNameA(win32::Windows::Win32::Foundation::PSTR lpPathName, win32::Windows::Win32::Foundation::PSTR lpPrefixString, uint32_t uUnique, win32::Windows::Win32::Foundation::PSTR lpTempFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(lpPrefixString);
        ORBIT_TRACK_PARAM(uUnique);
        ORBIT_TRACK_PARAM(lpTempFileName);

        auto win32_impl_result = g_api_table.GetTempFileNameA(lpPathName, lpPrefixString, uUnique, lpTempFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SetFileApisToOEM() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.SetFileApisToOEM();
        
    }

    void __stdcall ORBIT_IMPL_SetFileApisToANSI() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.SetFileApisToANSI();
        
    }

    uint32_t __stdcall ORBIT_IMPL_GetTempPath2W(uint32_t BufferLength, win32::Windows::Win32::Foundation::PWSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.GetTempPath2W(BufferLength, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTempPath2A(uint32_t BufferLength, win32::Windows::Win32::Foundation::PSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.GetTempPath2A(BufferLength, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileFromAppW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Foundation::BOOL bFailIfExists) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(bFailIfExists);

        auto win32_impl_result = g_api_table.CopyFileFromAppW(lpExistingFileName, lpNewFileName, bFailIfExists);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryFromAppW(win32::Windows::Win32::Foundation::PWSTR lpPathName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateDirectoryFromAppW(lpPathName, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileFromAppW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwDesiredAccess, uint32_t dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, uint32_t dwCreationDisposition, uint32_t dwFlagsAndAttributes, win32::Windows::Win32::Foundation::HANDLE hTemplateFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);
        ORBIT_TRACK_PARAM(hTemplateFile);

        auto win32_impl_result = g_api_table.CreateFileFromAppW(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFile2FromAppW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwDesiredAccess, uint32_t dwShareMode, uint32_t dwCreationDisposition, win32::Windows::Win32::Storage::FileSystem::CREATEFILE2_EXTENDED_PARAMETERS* pCreateExParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(pCreateExParams);

        auto win32_impl_result = g_api_table.CreateFile2FromAppW(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, pCreateExParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteFileFromAppW(win32::Windows::Win32::Foundation::PWSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.DeleteFileFromAppW(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_FindFirstFileExFromAppW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, win32::Windows::Win32::Storage::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, uint32_t dwAdditionalFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFindFileData);
        ORBIT_TRACK_PARAM(fSearchOp);
        ORBIT_TRACK_PARAM(lpSearchFilter);
        ORBIT_TRACK_PARAM(dwAdditionalFlags);

        auto win32_impl_result = g_api_table.FindFirstFileExFromAppW(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileAttributesExFromAppW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFileInformation);

        auto win32_impl_result = g_api_table.GetFileAttributesExFromAppW(lpFileName, fInfoLevelId, lpFileInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileFromAppW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);

        auto win32_impl_result = g_api_table.MoveFileFromAppW(lpExistingFileName, lpNewFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveDirectoryFromAppW(win32::Windows::Win32::Foundation::PWSTR lpPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);

        auto win32_impl_result = g_api_table.RemoveDirectoryFromAppW(lpPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReplaceFileFromAppW(win32::Windows::Win32::Foundation::PWSTR lpReplacedFileName, win32::Windows::Win32::Foundation::PWSTR lpReplacementFileName, win32::Windows::Win32::Foundation::PWSTR lpBackupFileName, uint32_t dwReplaceFlags, void* lpExclude, void* lpReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpReplacedFileName);
        ORBIT_TRACK_PARAM(lpReplacementFileName);
        ORBIT_TRACK_PARAM(lpBackupFileName);
        ORBIT_TRACK_PARAM(dwReplaceFlags);
        ORBIT_TRACK_PARAM(lpExclude);
        ORBIT_TRACK_PARAM(lpReserved);

        auto win32_impl_result = g_api_table.ReplaceFileFromAppW(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileAttributesFromAppW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwFileAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFileAttributes);

        auto win32_impl_result = g_api_table.SetFileAttributesFromAppW(lpFileName, dwFileAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::VER_FIND_FILE_STATUS __stdcall ORBIT_IMPL_VerFindFileA(win32::Windows::Win32::Storage::FileSystem::VER_FIND_FILE_FLAGS uFlags, win32::Windows::Win32::Foundation::PSTR szFileName, win32::Windows::Win32::Foundation::PSTR szWinDir, win32::Windows::Win32::Foundation::PSTR szAppDir, win32::Windows::Win32::Foundation::PSTR szCurDir, uint32_t* puCurDirLen, win32::Windows::Win32::Foundation::PSTR szDestDir, uint32_t* puDestDirLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(szFileName);
        ORBIT_TRACK_PARAM(szWinDir);
        ORBIT_TRACK_PARAM(szAppDir);
        ORBIT_TRACK_PARAM(szCurDir);
        ORBIT_TRACK_PARAM(puCurDirLen);
        ORBIT_TRACK_PARAM(szDestDir);
        ORBIT_TRACK_PARAM(puDestDirLen);

        auto win32_impl_result = g_api_table.VerFindFileA(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::VER_FIND_FILE_STATUS __stdcall ORBIT_IMPL_VerFindFileW(win32::Windows::Win32::Storage::FileSystem::VER_FIND_FILE_FLAGS uFlags, win32::Windows::Win32::Foundation::PWSTR szFileName, win32::Windows::Win32::Foundation::PWSTR szWinDir, win32::Windows::Win32::Foundation::PWSTR szAppDir, win32::Windows::Win32::Foundation::PWSTR szCurDir, uint32_t* puCurDirLen, win32::Windows::Win32::Foundation::PWSTR szDestDir, uint32_t* puDestDirLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(szFileName);
        ORBIT_TRACK_PARAM(szWinDir);
        ORBIT_TRACK_PARAM(szAppDir);
        ORBIT_TRACK_PARAM(szCurDir);
        ORBIT_TRACK_PARAM(puCurDirLen);
        ORBIT_TRACK_PARAM(szDestDir);
        ORBIT_TRACK_PARAM(puDestDirLen);

        auto win32_impl_result = g_api_table.VerFindFileW(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::VER_INSTALL_FILE_STATUS __stdcall ORBIT_IMPL_VerInstallFileA(win32::Windows::Win32::Storage::FileSystem::VER_INSTALL_FILE_FLAGS uFlags, win32::Windows::Win32::Foundation::PSTR szSrcFileName, win32::Windows::Win32::Foundation::PSTR szDestFileName, win32::Windows::Win32::Foundation::PSTR szSrcDir, win32::Windows::Win32::Foundation::PSTR szDestDir, win32::Windows::Win32::Foundation::PSTR szCurDir, win32::Windows::Win32::Foundation::PSTR szTmpFile, uint32_t* puTmpFileLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(szSrcFileName);
        ORBIT_TRACK_PARAM(szDestFileName);
        ORBIT_TRACK_PARAM(szSrcDir);
        ORBIT_TRACK_PARAM(szDestDir);
        ORBIT_TRACK_PARAM(szCurDir);
        ORBIT_TRACK_PARAM(szTmpFile);
        ORBIT_TRACK_PARAM(puTmpFileLen);

        auto win32_impl_result = g_api_table.VerInstallFileA(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::VER_INSTALL_FILE_STATUS __stdcall ORBIT_IMPL_VerInstallFileW(win32::Windows::Win32::Storage::FileSystem::VER_INSTALL_FILE_FLAGS uFlags, win32::Windows::Win32::Foundation::PWSTR szSrcFileName, win32::Windows::Win32::Foundation::PWSTR szDestFileName, win32::Windows::Win32::Foundation::PWSTR szSrcDir, win32::Windows::Win32::Foundation::PWSTR szDestDir, win32::Windows::Win32::Foundation::PWSTR szCurDir, win32::Windows::Win32::Foundation::PWSTR szTmpFile, uint32_t* puTmpFileLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uFlags);
        ORBIT_TRACK_PARAM(szSrcFileName);
        ORBIT_TRACK_PARAM(szDestFileName);
        ORBIT_TRACK_PARAM(szSrcDir);
        ORBIT_TRACK_PARAM(szDestDir);
        ORBIT_TRACK_PARAM(szCurDir);
        ORBIT_TRACK_PARAM(szTmpFile);
        ORBIT_TRACK_PARAM(puTmpFileLen);

        auto win32_impl_result = g_api_table.VerInstallFileW(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileVersionInfoSizeA(win32::Windows::Win32::Foundation::PSTR lptstrFilename, uint32_t* lpdwHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lptstrFilename);
        ORBIT_TRACK_PARAM(lpdwHandle);

        auto win32_impl_result = g_api_table.GetFileVersionInfoSizeA(lptstrFilename, lpdwHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileVersionInfoSizeW(win32::Windows::Win32::Foundation::PWSTR lptstrFilename, uint32_t* lpdwHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lptstrFilename);
        ORBIT_TRACK_PARAM(lpdwHandle);

        auto win32_impl_result = g_api_table.GetFileVersionInfoSizeW(lptstrFilename, lpdwHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileVersionInfoA(win32::Windows::Win32::Foundation::PSTR lptstrFilename, uint32_t dwHandle, uint32_t dwLen, void* lpData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lptstrFilename);
        ORBIT_TRACK_PARAM(dwHandle);
        ORBIT_TRACK_PARAM(dwLen);
        ORBIT_TRACK_PARAM(lpData);

        auto win32_impl_result = g_api_table.GetFileVersionInfoA(lptstrFilename, dwHandle, dwLen, lpData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileVersionInfoW(win32::Windows::Win32::Foundation::PWSTR lptstrFilename, uint32_t dwHandle, uint32_t dwLen, void* lpData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lptstrFilename);
        ORBIT_TRACK_PARAM(dwHandle);
        ORBIT_TRACK_PARAM(dwLen);
        ORBIT_TRACK_PARAM(lpData);

        auto win32_impl_result = g_api_table.GetFileVersionInfoW(lptstrFilename, dwHandle, dwLen, lpData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileVersionInfoSizeExA(win32::Windows::Win32::Storage::FileSystem::GET_FILE_VERSION_INFO_FLAGS dwFlags, win32::Windows::Win32::Foundation::PSTR lpwstrFilename, uint32_t* lpdwHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpwstrFilename);
        ORBIT_TRACK_PARAM(lpdwHandle);

        auto win32_impl_result = g_api_table.GetFileVersionInfoSizeExA(dwFlags, lpwstrFilename, lpdwHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFileVersionInfoSizeExW(win32::Windows::Win32::Storage::FileSystem::GET_FILE_VERSION_INFO_FLAGS dwFlags, win32::Windows::Win32::Foundation::PWSTR lpwstrFilename, uint32_t* lpdwHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpwstrFilename);
        ORBIT_TRACK_PARAM(lpdwHandle);

        auto win32_impl_result = g_api_table.GetFileVersionInfoSizeExW(dwFlags, lpwstrFilename, lpdwHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileVersionInfoExA(win32::Windows::Win32::Storage::FileSystem::GET_FILE_VERSION_INFO_FLAGS dwFlags, win32::Windows::Win32::Foundation::PSTR lpwstrFilename, uint32_t dwHandle, uint32_t dwLen, void* lpData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpwstrFilename);
        ORBIT_TRACK_PARAM(dwHandle);
        ORBIT_TRACK_PARAM(dwLen);
        ORBIT_TRACK_PARAM(lpData);

        auto win32_impl_result = g_api_table.GetFileVersionInfoExA(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileVersionInfoExW(win32::Windows::Win32::Storage::FileSystem::GET_FILE_VERSION_INFO_FLAGS dwFlags, win32::Windows::Win32::Foundation::PWSTR lpwstrFilename, uint32_t dwHandle, uint32_t dwLen, void* lpData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpwstrFilename);
        ORBIT_TRACK_PARAM(dwHandle);
        ORBIT_TRACK_PARAM(dwLen);
        ORBIT_TRACK_PARAM(lpData);

        auto win32_impl_result = g_api_table.GetFileVersionInfoExW(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_VerLanguageNameA(uint32_t wLang, win32::Windows::Win32::Foundation::PSTR szLang, uint32_t cchLang) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wLang);
        ORBIT_TRACK_PARAM(szLang);
        ORBIT_TRACK_PARAM(cchLang);

        auto win32_impl_result = g_api_table.VerLanguageNameA(wLang, szLang, cchLang);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_VerLanguageNameW(uint32_t wLang, win32::Windows::Win32::Foundation::PWSTR szLang, uint32_t cchLang) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wLang);
        ORBIT_TRACK_PARAM(szLang);
        ORBIT_TRACK_PARAM(cchLang);

        auto win32_impl_result = g_api_table.VerLanguageNameW(wLang, szLang, cchLang);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VerQueryValueA(void* pBlock, win32::Windows::Win32::Foundation::PSTR lpSubBlock, void** lplpBuffer, uint32_t* puLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBlock);
        ORBIT_TRACK_PARAM(lpSubBlock);
        ORBIT_TRACK_PARAM(lplpBuffer);
        ORBIT_TRACK_PARAM(puLen);

        auto win32_impl_result = g_api_table.VerQueryValueA(pBlock, lpSubBlock, lplpBuffer, puLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_VerQueryValueW(void* pBlock, win32::Windows::Win32::Foundation::PWSTR lpSubBlock, void** lplpBuffer, uint32_t* puLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBlock);
        ORBIT_TRACK_PARAM(lpSubBlock);
        ORBIT_TRACK_PARAM(lplpBuffer);
        ORBIT_TRACK_PARAM(puLen);

        auto win32_impl_result = g_api_table.VerQueryValueW(pBlock, lpSubBlock, lplpBuffer, puLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_LsnEqual(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn1, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn1);
        ORBIT_TRACK_PARAM(plsn2);

        auto win32_impl_result = g_api_table.LsnEqual(plsn1, plsn2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_LsnLess(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn1, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn1);
        ORBIT_TRACK_PARAM(plsn2);

        auto win32_impl_result = g_api_table.LsnLess(plsn1, plsn2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_LsnGreater(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn1, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn1);
        ORBIT_TRACK_PARAM(plsn2);

        auto win32_impl_result = g_api_table.LsnGreater(plsn1, plsn2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_LsnNull(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn);

        auto win32_impl_result = g_api_table.LsnNull(plsn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LsnContainer(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn);

        auto win32_impl_result = g_api_table.LsnContainer(plsn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::CLS_LSN __stdcall ORBIT_IMPL_LsnCreate(uint32_t cidContainer, uint32_t offBlock, uint32_t cRecord) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cidContainer);
        ORBIT_TRACK_PARAM(offBlock);
        ORBIT_TRACK_PARAM(cRecord);

        auto win32_impl_result = g_api_table.LsnCreate(cidContainer, offBlock, cRecord);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LsnBlockOffset(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn);

        auto win32_impl_result = g_api_table.LsnBlockOffset(plsn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LsnRecordSequence(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn);

        auto win32_impl_result = g_api_table.LsnRecordSequence(plsn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_LsnInvalid(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn);

        auto win32_impl_result = g_api_table.LsnInvalid(plsn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::CLS_LSN __stdcall ORBIT_IMPL_LsnIncrement(win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plsn);

        auto win32_impl_result = g_api_table.LsnIncrement(plsn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateLogFile(win32::Windows::Win32::Foundation::PWSTR pszLogFileName, win32::Windows::Win32::Storage::FileSystem::FILE_ACCESS_FLAGS fDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* psaLogFile, win32::Windows::Win32::Storage::FileSystem::FILE_CREATION_DISPOSITION fCreateDisposition, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES fFlagsAndAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszLogFileName);
        ORBIT_TRACK_PARAM(fDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(psaLogFile);
        ORBIT_TRACK_PARAM(fCreateDisposition);
        ORBIT_TRACK_PARAM(fFlagsAndAttributes);

        auto win32_impl_result = g_api_table.CreateLogFile(pszLogFileName, fDesiredAccess, dwShareMode, psaLogFile, fCreateDisposition, fFlagsAndAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteLogByHandle(win32::Windows::Win32::Foundation::HANDLE hLog) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);

        auto win32_impl_result = g_api_table.DeleteLogByHandle(hLog);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteLogFile(win32::Windows::Win32::Foundation::PWSTR pszLogFileName, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszLogFileName);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.DeleteLogFile(pszLogFileName, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AddLogContainer(win32::Windows::Win32::Foundation::HANDLE hLog, uint64_t* pcbContainer, win32::Windows::Win32::Foundation::PWSTR pwszContainerPath, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pcbContainer);
        ORBIT_TRACK_PARAM(pwszContainerPath);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.AddLogContainer(hLog, pcbContainer, pwszContainerPath, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AddLogContainerSet(win32::Windows::Win32::Foundation::HANDLE hLog, uint16_t cContainer, uint64_t* pcbContainer, win32::Windows::Win32::Foundation::PWSTR* rgwszContainerPath, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(cContainer);
        ORBIT_TRACK_PARAM(pcbContainer);
        ORBIT_TRACK_PARAM(rgwszContainerPath);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.AddLogContainerSet(hLog, cContainer, pcbContainer, rgwszContainerPath, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveLogContainer(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Foundation::PWSTR pwszContainerPath, win32::Windows::Win32::Foundation::BOOL fForce, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pwszContainerPath);
        ORBIT_TRACK_PARAM(fForce);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.RemoveLogContainer(hLog, pwszContainerPath, fForce, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveLogContainerSet(win32::Windows::Win32::Foundation::HANDLE hLog, uint16_t cContainer, win32::Windows::Win32::Foundation::PWSTR* rgwszContainerPath, win32::Windows::Win32::Foundation::BOOL fForce, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(cContainer);
        ORBIT_TRACK_PARAM(rgwszContainerPath);
        ORBIT_TRACK_PARAM(fForce);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.RemoveLogContainerSet(hLog, cContainer, rgwszContainerPath, fForce, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetLogArchiveTail(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnArchiveTail, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(plsnArchiveTail);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.SetLogArchiveTail(hLog, plsnArchiveTail, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetEndOfLog(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnEnd, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(plsnEnd);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.SetEndOfLog(hLog, plsnEnd, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TruncateLog(void* pvMarshal, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnEnd, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(plsnEnd);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.TruncateLog(pvMarshal, plsnEnd, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateLogContainerScanContext(win32::Windows::Win32::Foundation::HANDLE hLog, uint32_t cFromContainer, uint32_t cContainers, uint8_t eScanMode, win32::Windows::Win32::Storage::FileSystem::CLS_SCAN_CONTEXT* pcxScan, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(cFromContainer);
        ORBIT_TRACK_PARAM(cContainers);
        ORBIT_TRACK_PARAM(eScanMode);
        ORBIT_TRACK_PARAM(pcxScan);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.CreateLogContainerScanContext(hLog, cFromContainer, cContainers, eScanMode, pcxScan, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ScanLogContainers(win32::Windows::Win32::Storage::FileSystem::CLS_SCAN_CONTEXT* pcxScan, uint8_t eScanMode, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcxScan);
        ORBIT_TRACK_PARAM(eScanMode);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.ScanLogContainers(pcxScan, eScanMode, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AlignReservedLog(void* pvMarshal, uint32_t cReservedRecords, int64_t* rgcbReservation, int64_t* pcbAlignReservation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(cReservedRecords);
        ORBIT_TRACK_PARAM(rgcbReservation);
        ORBIT_TRACK_PARAM(pcbAlignReservation);

        auto win32_impl_result = g_api_table.AlignReservedLog(pvMarshal, cReservedRecords, rgcbReservation, pcbAlignReservation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AllocReservedLog(void* pvMarshal, uint32_t cReservedRecords, int64_t* pcbAdjustment) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(cReservedRecords);
        ORBIT_TRACK_PARAM(pcbAdjustment);

        auto win32_impl_result = g_api_table.AllocReservedLog(pvMarshal, cReservedRecords, pcbAdjustment);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FreeReservedLog(void* pvMarshal, uint32_t cReservedRecords, int64_t* pcbAdjustment) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(cReservedRecords);
        ORBIT_TRACK_PARAM(pcbAdjustment);

        auto win32_impl_result = g_api_table.FreeReservedLog(pvMarshal, cReservedRecords, pcbAdjustment);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetLogFileInformation(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLS_INFORMATION* pinfoBuffer, uint32_t* cbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pinfoBuffer);
        ORBIT_TRACK_PARAM(cbBuffer);

        auto win32_impl_result = g_api_table.GetLogFileInformation(hLog, pinfoBuffer, cbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetLogArchiveMode(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLFS_LOG_ARCHIVE_MODE eMode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(eMode);

        auto win32_impl_result = g_api_table.SetLogArchiveMode(hLog, eMode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadLogRestartArea(void* pvMarshal, void** ppvRestartBuffer, uint32_t* pcbRestartBuffer, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn, void** ppvContext, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(ppvRestartBuffer);
        ORBIT_TRACK_PARAM(pcbRestartBuffer);
        ORBIT_TRACK_PARAM(plsn);
        ORBIT_TRACK_PARAM(ppvContext);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.ReadLogRestartArea(pvMarshal, ppvRestartBuffer, pcbRestartBuffer, plsn, ppvContext, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadPreviousLogRestartArea(void* pvReadContext, void** ppvRestartBuffer, uint32_t* pcbRestartBuffer, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnRestart, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvReadContext);
        ORBIT_TRACK_PARAM(ppvRestartBuffer);
        ORBIT_TRACK_PARAM(pcbRestartBuffer);
        ORBIT_TRACK_PARAM(plsnRestart);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.ReadPreviousLogRestartArea(pvReadContext, ppvRestartBuffer, pcbRestartBuffer, plsnRestart, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WriteLogRestartArea(void* pvMarshal, void* pvRestartBuffer, uint32_t cbRestartBuffer, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnBase, win32::Windows::Win32::Storage::FileSystem::CLFS_FLAG fFlags, uint32_t* pcbWritten, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnNext, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(pvRestartBuffer);
        ORBIT_TRACK_PARAM(cbRestartBuffer);
        ORBIT_TRACK_PARAM(plsnBase);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(pcbWritten);
        ORBIT_TRACK_PARAM(plsnNext);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.WriteLogRestartArea(pvMarshal, pvRestartBuffer, cbRestartBuffer, plsnBase, fFlags, pcbWritten, plsnNext, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetLogReservationInfo(void* pvMarshal, uint32_t* pcbRecordNumber, int64_t* pcbUserReservation, int64_t* pcbCommitReservation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(pcbRecordNumber);
        ORBIT_TRACK_PARAM(pcbUserReservation);
        ORBIT_TRACK_PARAM(pcbCommitReservation);

        auto win32_impl_result = g_api_table.GetLogReservationInfo(pvMarshal, pcbRecordNumber, pcbUserReservation, pcbCommitReservation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AdvanceLogBase(void* pvMarshal, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnBase, uint32_t fFlags, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(plsnBase);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.AdvanceLogBase(pvMarshal, plsnBase, fFlags, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseAndResetLogFile(win32::Windows::Win32::Foundation::HANDLE hLog) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);

        auto win32_impl_result = g_api_table.CloseAndResetLogFile(hLog);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateLogMarshallingArea(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLFS_BLOCK_ALLOCATION* pfnAllocBuffer, win32::Windows::Win32::Storage::FileSystem::CLFS_BLOCK_DEALLOCATION* pfnFreeBuffer, void* pvBlockAllocContext, uint32_t cbMarshallingBuffer, uint32_t cMaxWriteBuffers, uint32_t cMaxReadBuffers, void** ppvMarshal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pfnAllocBuffer);
        ORBIT_TRACK_PARAM(pfnFreeBuffer);
        ORBIT_TRACK_PARAM(pvBlockAllocContext);
        ORBIT_TRACK_PARAM(cbMarshallingBuffer);
        ORBIT_TRACK_PARAM(cMaxWriteBuffers);
        ORBIT_TRACK_PARAM(cMaxReadBuffers);
        ORBIT_TRACK_PARAM(ppvMarshal);

        auto win32_impl_result = g_api_table.CreateLogMarshallingArea(hLog, pfnAllocBuffer, pfnFreeBuffer, pvBlockAllocContext, cbMarshallingBuffer, cMaxWriteBuffers, cMaxReadBuffers, ppvMarshal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteLogMarshallingArea(void* pvMarshal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);

        auto win32_impl_result = g_api_table.DeleteLogMarshallingArea(pvMarshal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReserveAndAppendLog(void* pvMarshal, win32::Windows::Win32::Storage::FileSystem::CLS_WRITE_ENTRY* rgWriteEntries, uint32_t cWriteEntries, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnUndoNext, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnPrevious, uint32_t cReserveRecords, int64_t* rgcbReservation, win32::Windows::Win32::Storage::FileSystem::CLFS_FLAG fFlags, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(rgWriteEntries);
        ORBIT_TRACK_PARAM(cWriteEntries);
        ORBIT_TRACK_PARAM(plsnUndoNext);
        ORBIT_TRACK_PARAM(plsnPrevious);
        ORBIT_TRACK_PARAM(cReserveRecords);
        ORBIT_TRACK_PARAM(rgcbReservation);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(plsn);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.ReserveAndAppendLog(pvMarshal, rgWriteEntries, cWriteEntries, plsnUndoNext, plsnPrevious, cReserveRecords, rgcbReservation, fFlags, plsn, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReserveAndAppendLogAligned(void* pvMarshal, win32::Windows::Win32::Storage::FileSystem::CLS_WRITE_ENTRY* rgWriteEntries, uint32_t cWriteEntries, uint32_t cbEntryAlignment, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnUndoNext, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnPrevious, uint32_t cReserveRecords, int64_t* rgcbReservation, win32::Windows::Win32::Storage::FileSystem::CLFS_FLAG fFlags, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsn, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(rgWriteEntries);
        ORBIT_TRACK_PARAM(cWriteEntries);
        ORBIT_TRACK_PARAM(cbEntryAlignment);
        ORBIT_TRACK_PARAM(plsnUndoNext);
        ORBIT_TRACK_PARAM(plsnPrevious);
        ORBIT_TRACK_PARAM(cReserveRecords);
        ORBIT_TRACK_PARAM(rgcbReservation);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(plsn);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.ReserveAndAppendLogAligned(pvMarshal, rgWriteEntries, cWriteEntries, cbEntryAlignment, plsnUndoNext, plsnPrevious, cReserveRecords, rgcbReservation, fFlags, plsn, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FlushLogBuffers(void* pvMarshal, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.FlushLogBuffers(pvMarshal, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FlushLogToLsn(void* pvMarshalContext, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnFlush, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnLastFlushed, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshalContext);
        ORBIT_TRACK_PARAM(plsnFlush);
        ORBIT_TRACK_PARAM(plsnLastFlushed);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.FlushLogToLsn(pvMarshalContext, plsnFlush, plsnLastFlushed, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadLogRecord(void* pvMarshal, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnFirst, win32::Windows::Win32::Storage::FileSystem::CLFS_CONTEXT_MODE eContextMode, void** ppvReadBuffer, uint32_t* pcbReadBuffer, uint8_t* peRecordType, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnUndoNext, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnPrevious, void** ppvReadContext, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvMarshal);
        ORBIT_TRACK_PARAM(plsnFirst);
        ORBIT_TRACK_PARAM(eContextMode);
        ORBIT_TRACK_PARAM(ppvReadBuffer);
        ORBIT_TRACK_PARAM(pcbReadBuffer);
        ORBIT_TRACK_PARAM(peRecordType);
        ORBIT_TRACK_PARAM(plsnUndoNext);
        ORBIT_TRACK_PARAM(plsnPrevious);
        ORBIT_TRACK_PARAM(ppvReadContext);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.ReadLogRecord(pvMarshal, plsnFirst, eContextMode, ppvReadBuffer, pcbReadBuffer, peRecordType, plsnUndoNext, plsnPrevious, ppvReadContext, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadNextLogRecord(void* pvReadContext, void** ppvBuffer, uint32_t* pcbBuffer, uint8_t* peRecordType, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnUser, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnUndoNext, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnPrevious, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnRecord, win32::Windows::Win32::System::IO::OVERLAPPED* pOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvReadContext);
        ORBIT_TRACK_PARAM(ppvBuffer);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(peRecordType);
        ORBIT_TRACK_PARAM(plsnUser);
        ORBIT_TRACK_PARAM(plsnUndoNext);
        ORBIT_TRACK_PARAM(plsnPrevious);
        ORBIT_TRACK_PARAM(plsnRecord);
        ORBIT_TRACK_PARAM(pOverlapped);

        auto win32_impl_result = g_api_table.ReadNextLogRecord(pvReadContext, ppvBuffer, pcbBuffer, peRecordType, plsnUser, plsnUndoNext, plsnPrevious, plsnRecord, pOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TerminateReadLog(void* pvCursorContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvCursorContext);

        auto win32_impl_result = g_api_table.TerminateReadLog(pvCursorContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PrepareLogArchive(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Foundation::PWSTR pszBaseLogFileName, uint32_t cLen, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnLow, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnHigh, uint32_t* pcActualLength, uint64_t* poffBaseLogFileData, uint64_t* pcbBaseLogFileLength, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnBase, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnLast, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* plsnCurrentArchiveTail, void** ppvArchiveContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pszBaseLogFileName);
        ORBIT_TRACK_PARAM(cLen);
        ORBIT_TRACK_PARAM(plsnLow);
        ORBIT_TRACK_PARAM(plsnHigh);
        ORBIT_TRACK_PARAM(pcActualLength);
        ORBIT_TRACK_PARAM(poffBaseLogFileData);
        ORBIT_TRACK_PARAM(pcbBaseLogFileLength);
        ORBIT_TRACK_PARAM(plsnBase);
        ORBIT_TRACK_PARAM(plsnLast);
        ORBIT_TRACK_PARAM(plsnCurrentArchiveTail);
        ORBIT_TRACK_PARAM(ppvArchiveContext);

        auto win32_impl_result = g_api_table.PrepareLogArchive(hLog, pszBaseLogFileName, cLen, plsnLow, plsnHigh, pcActualLength, poffBaseLogFileData, pcbBaseLogFileLength, plsnBase, plsnLast, plsnCurrentArchiveTail, ppvArchiveContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadLogArchiveMetadata(void* pvArchiveContext, uint32_t cbOffset, uint32_t cbBytesToRead, uint8_t* pbReadBuffer, uint32_t* pcbBytesRead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvArchiveContext);
        ORBIT_TRACK_PARAM(cbOffset);
        ORBIT_TRACK_PARAM(cbBytesToRead);
        ORBIT_TRACK_PARAM(pbReadBuffer);
        ORBIT_TRACK_PARAM(pcbBytesRead);

        auto win32_impl_result = g_api_table.ReadLogArchiveMetadata(pvArchiveContext, cbOffset, cbBytesToRead, pbReadBuffer, pcbBytesRead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNextLogArchiveExtent(void* pvArchiveContext, win32::Windows::Win32::Storage::FileSystem::CLS_ARCHIVE_DESCRIPTOR* rgadExtent, uint32_t cDescriptors, uint32_t* pcDescriptorsReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvArchiveContext);
        ORBIT_TRACK_PARAM(rgadExtent);
        ORBIT_TRACK_PARAM(cDescriptors);
        ORBIT_TRACK_PARAM(pcDescriptorsReturned);

        auto win32_impl_result = g_api_table.GetNextLogArchiveExtent(pvArchiveContext, rgadExtent, cDescriptors, pcDescriptorsReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TerminateLogArchive(void* pvArchiveContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvArchiveContext);

        auto win32_impl_result = g_api_table.TerminateLogArchive(pvArchiveContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ValidateLog(win32::Windows::Win32::Foundation::PWSTR pszLogFileName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* psaLogFile, win32::Windows::Win32::Storage::FileSystem::CLS_INFORMATION* pinfoBuffer, uint32_t* pcbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszLogFileName);
        ORBIT_TRACK_PARAM(psaLogFile);
        ORBIT_TRACK_PARAM(pinfoBuffer);
        ORBIT_TRACK_PARAM(pcbBuffer);

        auto win32_impl_result = g_api_table.ValidateLog(pszLogFileName, psaLogFile, pinfoBuffer, pcbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetLogContainerName(win32::Windows::Win32::Foundation::HANDLE hLog, uint32_t cidLogicalContainer, win32::Windows::Win32::Foundation::PWSTR pwstrContainerName, uint32_t cLenContainerName, uint32_t* pcActualLenContainerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(cidLogicalContainer);
        ORBIT_TRACK_PARAM(pwstrContainerName);
        ORBIT_TRACK_PARAM(cLenContainerName);
        ORBIT_TRACK_PARAM(pcActualLenContainerName);

        auto win32_impl_result = g_api_table.GetLogContainerName(hLog, cidLogicalContainer, pwstrContainerName, cLenContainerName, pcActualLenContainerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetLogIoStatistics(win32::Windows::Win32::Foundation::HANDLE hLog, void* pvStatsBuffer, uint32_t cbStatsBuffer, win32::Windows::Win32::Storage::FileSystem::CLFS_IOSTATS_CLASS eStatsClass, uint32_t* pcbStatsWritten) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pvStatsBuffer);
        ORBIT_TRACK_PARAM(cbStatsBuffer);
        ORBIT_TRACK_PARAM(eStatsClass);
        ORBIT_TRACK_PARAM(pcbStatsWritten);

        auto win32_impl_result = g_api_table.GetLogIoStatistics(hLog, pvStatsBuffer, cbStatsBuffer, eStatsClass, pcbStatsWritten);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RegisterManageableLogClient(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::LOG_MANAGEMENT_CALLBACKS* pCallbacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pCallbacks);

        auto win32_impl_result = g_api_table.RegisterManageableLogClient(hLog, pCallbacks);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeregisterManageableLogClient(win32::Windows::Win32::Foundation::HANDLE hLog) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);

        auto win32_impl_result = g_api_table.DeregisterManageableLogClient(hLog);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadLogNotification(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLFS_MGMT_NOTIFICATION* pNotification, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pNotification);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.ReadLogNotification(hLog, pNotification, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InstallLogPolicy(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLFS_MGMT_POLICY* pPolicy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pPolicy);

        auto win32_impl_result = g_api_table.InstallLogPolicy(hLog, pPolicy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveLogPolicy(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLFS_MGMT_POLICY_TYPE ePolicyType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(ePolicyType);

        auto win32_impl_result = g_api_table.RemoveLogPolicy(hLog, ePolicyType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryLogPolicy(win32::Windows::Win32::Foundation::HANDLE hLog, win32::Windows::Win32::Storage::FileSystem::CLFS_MGMT_POLICY_TYPE ePolicyType, win32::Windows::Win32::Storage::FileSystem::CLFS_MGMT_POLICY* pPolicyBuffer, uint32_t* pcbPolicyBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(ePolicyType);
        ORBIT_TRACK_PARAM(pPolicyBuffer);
        ORBIT_TRACK_PARAM(pcbPolicyBuffer);

        auto win32_impl_result = g_api_table.QueryLogPolicy(hLog, ePolicyType, pPolicyBuffer, pcbPolicyBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetLogFileSizeWithPolicy(win32::Windows::Win32::Foundation::HANDLE hLog, uint64_t* pDesiredSize, uint64_t* pResultingSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(pDesiredSize);
        ORBIT_TRACK_PARAM(pResultingSize);

        auto win32_impl_result = g_api_table.SetLogFileSizeWithPolicy(hLog, pDesiredSize, pResultingSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_HandleLogFull(win32::Windows::Win32::Foundation::HANDLE hLog) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);

        auto win32_impl_result = g_api_table.HandleLogFull(hLog);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_LogTailAdvanceFailure(win32::Windows::Win32::Foundation::HANDLE hLog, uint32_t dwReason) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(dwReason);

        auto win32_impl_result = g_api_table.LogTailAdvanceFailure(hLog, dwReason);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RegisterForLogWriteNotification(win32::Windows::Win32::Foundation::HANDLE hLog, uint32_t cbThreshold, win32::Windows::Win32::Foundation::BOOL fEnable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLog);
        ORBIT_TRACK_PARAM(cbThreshold);
        ORBIT_TRACK_PARAM(fEnable);

        auto win32_impl_result = g_api_table.RegisterForLogWriteNotification(hLog, cbThreshold, fEnable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryUsersOnEncryptedFile(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST** pUsers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(pUsers);

        auto win32_impl_result = g_api_table.QueryUsersOnEncryptedFile(lpFileName, pUsers);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryRecoveryAgentsOnEncryptedFile(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST** pRecoveryAgents) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(pRecoveryAgents);

        auto win32_impl_result = g_api_table.QueryRecoveryAgentsOnEncryptedFile(lpFileName, pRecoveryAgents);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveUsersFromEncryptedFile(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pHashes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(pHashes);

        auto win32_impl_result = g_api_table.RemoveUsersFromEncryptedFile(lpFileName, pHashes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddUsersToEncryptedFile(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_LIST* pEncryptionCertificates) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(pEncryptionCertificates);

        auto win32_impl_result = g_api_table.AddUsersToEncryptedFile(lpFileName, pEncryptionCertificates);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetUserFileEncryptionKey(win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE* pEncryptionCertificate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEncryptionCertificate);

        auto win32_impl_result = g_api_table.SetUserFileEncryptionKey(pEncryptionCertificate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetUserFileEncryptionKeyEx(win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE* pEncryptionCertificate, uint32_t dwCapabilities, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEncryptionCertificate);
        ORBIT_TRACK_PARAM(dwCapabilities);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.SetUserFileEncryptionKeyEx(pEncryptionCertificate, dwCapabilities, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_FreeEncryptionCertificateHashList(win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pUsers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pUsers);

        g_api_table.FreeEncryptionCertificateHashList(pUsers);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EncryptionDisable(win32::Windows::Win32::Foundation::PWSTR DirPath, win32::Windows::Win32::Foundation::BOOL Disable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DirPath);
        ORBIT_TRACK_PARAM(Disable);

        auto win32_impl_result = g_api_table.EncryptionDisable(DirPath, Disable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DuplicateEncryptionInfoFile(win32::Windows::Win32::Foundation::PWSTR SrcFileName, win32::Windows::Win32::Foundation::PWSTR DstFileName, uint32_t dwCreationDistribution, uint32_t dwAttributes, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SrcFileName);
        ORBIT_TRACK_PARAM(DstFileName);
        ORBIT_TRACK_PARAM(dwCreationDistribution);
        ORBIT_TRACK_PARAM(dwAttributes);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.DuplicateEncryptionInfoFile(SrcFileName, DstFileName, dwCreationDistribution, dwAttributes, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetEncryptedFileMetadata(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t* pcbMetadata, uint8_t** ppbMetadata) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(pcbMetadata);
        ORBIT_TRACK_PARAM(ppbMetadata);

        auto win32_impl_result = g_api_table.GetEncryptedFileMetadata(lpFileName, pcbMetadata, ppbMetadata);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetEncryptedFileMetadata(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint8_t* pbOldMetadata, uint8_t* pbNewMetadata, win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_HASH* pOwnerHash, uint32_t dwOperation, win32::Windows::Win32::Storage::FileSystem::ENCRYPTION_CERTIFICATE_HASH_LIST* pCertificatesAdded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(pbOldMetadata);
        ORBIT_TRACK_PARAM(pbNewMetadata);
        ORBIT_TRACK_PARAM(pOwnerHash);
        ORBIT_TRACK_PARAM(dwOperation);
        ORBIT_TRACK_PARAM(pCertificatesAdded);

        auto win32_impl_result = g_api_table.SetEncryptedFileMetadata(lpFileName, pbOldMetadata, pbNewMetadata, pOwnerHash, dwOperation, pCertificatesAdded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_FreeEncryptedFileMetadata(uint8_t* pbMetadata) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbMetadata);

        g_api_table.FreeEncryptedFileMetadata(pbMetadata);
        
    }

    int32_t __stdcall ORBIT_IMPL_LZStart() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.LZStart();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_LZDone() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.LZDone();
        
    }

    int32_t __stdcall ORBIT_IMPL_CopyLZFile(int32_t hfSource, int32_t hfDest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hfSource);
        ORBIT_TRACK_PARAM(hfDest);

        auto win32_impl_result = g_api_table.CopyLZFile(hfSource, hfDest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LZCopy(int32_t hfSource, int32_t hfDest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hfSource);
        ORBIT_TRACK_PARAM(hfDest);

        auto win32_impl_result = g_api_table.LZCopy(hfSource, hfDest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LZInit(int32_t hfSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hfSource);

        auto win32_impl_result = g_api_table.LZInit(hfSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetExpandedNameA(win32::Windows::Win32::Foundation::PSTR lpszSource, win32::Windows::Win32::Foundation::PSTR lpszBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszSource);
        ORBIT_TRACK_PARAM(lpszBuffer);

        auto win32_impl_result = g_api_table.GetExpandedNameA(lpszSource, lpszBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetExpandedNameW(win32::Windows::Win32::Foundation::PWSTR lpszSource, win32::Windows::Win32::Foundation::PWSTR lpszBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszSource);
        ORBIT_TRACK_PARAM(lpszBuffer);

        auto win32_impl_result = g_api_table.GetExpandedNameW(lpszSource, lpszBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LZOpenFileA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::OFSTRUCT* lpReOpenBuf, win32::Windows::Win32::Storage::FileSystem::LZOPENFILE_STYLE wStyle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpReOpenBuf);
        ORBIT_TRACK_PARAM(wStyle);

        auto win32_impl_result = g_api_table.LZOpenFileA(lpFileName, lpReOpenBuf, wStyle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LZOpenFileW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::OFSTRUCT* lpReOpenBuf, win32::Windows::Win32::Storage::FileSystem::LZOPENFILE_STYLE wStyle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpReOpenBuf);
        ORBIT_TRACK_PARAM(wStyle);

        auto win32_impl_result = g_api_table.LZOpenFileW(lpFileName, lpReOpenBuf, wStyle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LZSeek(int32_t hFile, int32_t lOffset, int32_t iOrigin) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lOffset);
        ORBIT_TRACK_PARAM(iOrigin);

        auto win32_impl_result = g_api_table.LZSeek(hFile, lOffset, iOrigin);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_LZRead(int32_t hFile, win32::Windows::Win32::Foundation::PSTR lpBuffer, int32_t cbRead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(cbRead);

        auto win32_impl_result = g_api_table.LZRead(hFile, lpBuffer, cbRead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_LZClose(int32_t hFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);

        g_api_table.LZClose(hFile);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WofShouldCompressBinaries(win32::Windows::Win32::Foundation::PWSTR Volume, uint32_t* Algorithm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Volume);
        ORBIT_TRACK_PARAM(Algorithm);

        auto win32_impl_result = g_api_table.WofShouldCompressBinaries(Volume, Algorithm);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofGetDriverVersion(win32::Windows::Win32::Foundation::HANDLE FileOrVolumeHandle, uint32_t Provider, uint32_t* WofVersion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileOrVolumeHandle);
        ORBIT_TRACK_PARAM(Provider);
        ORBIT_TRACK_PARAM(WofVersion);

        auto win32_impl_result = g_api_table.WofGetDriverVersion(FileOrVolumeHandle, Provider, WofVersion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofSetFileDataLocation(win32::Windows::Win32::Foundation::HANDLE FileHandle, uint32_t Provider, void* ExternalFileInfo, uint32_t Length) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileHandle);
        ORBIT_TRACK_PARAM(Provider);
        ORBIT_TRACK_PARAM(ExternalFileInfo);
        ORBIT_TRACK_PARAM(Length);

        auto win32_impl_result = g_api_table.WofSetFileDataLocation(FileHandle, Provider, ExternalFileInfo, Length);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofIsExternalFile(win32::Windows::Win32::Foundation::PWSTR FilePath, win32::Windows::Win32::Foundation::BOOL* IsExternalFile, uint32_t* Provider, void* ExternalFileInfo, uint32_t* BufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FilePath);
        ORBIT_TRACK_PARAM(IsExternalFile);
        ORBIT_TRACK_PARAM(Provider);
        ORBIT_TRACK_PARAM(ExternalFileInfo);
        ORBIT_TRACK_PARAM(BufferLength);

        auto win32_impl_result = g_api_table.WofIsExternalFile(FilePath, IsExternalFile, Provider, ExternalFileInfo, BufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofEnumEntries(win32::Windows::Win32::Foundation::PWSTR VolumeName, uint32_t Provider, win32::Windows::Win32::Storage::FileSystem::WofEnumEntryProc* EnumProc, void* UserData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(Provider);
        ORBIT_TRACK_PARAM(EnumProc);
        ORBIT_TRACK_PARAM(UserData);

        auto win32_impl_result = g_api_table.WofEnumEntries(VolumeName, Provider, EnumProc, UserData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofWimAddEntry(win32::Windows::Win32::Foundation::PWSTR VolumeName, win32::Windows::Win32::Foundation::PWSTR WimPath, uint32_t WimType, uint32_t WimIndex, win32::Windows::Win32::Foundation::LARGE_INTEGER* DataSourceId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(WimPath);
        ORBIT_TRACK_PARAM(WimType);
        ORBIT_TRACK_PARAM(WimIndex);
        ORBIT_TRACK_PARAM(DataSourceId);

        auto win32_impl_result = g_api_table.WofWimAddEntry(VolumeName, WimPath, WimType, WimIndex, DataSourceId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofWimEnumFiles(win32::Windows::Win32::Foundation::PWSTR VolumeName, win32::Windows::Win32::Foundation::LARGE_INTEGER DataSourceId, win32::Windows::Win32::Storage::FileSystem::WofEnumFilesProc* EnumProc, void* UserData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(DataSourceId);
        ORBIT_TRACK_PARAM(EnumProc);
        ORBIT_TRACK_PARAM(UserData);

        auto win32_impl_result = g_api_table.WofWimEnumFiles(VolumeName, DataSourceId, EnumProc, UserData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofWimSuspendEntry(win32::Windows::Win32::Foundation::PWSTR VolumeName, win32::Windows::Win32::Foundation::LARGE_INTEGER DataSourceId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(DataSourceId);

        auto win32_impl_result = g_api_table.WofWimSuspendEntry(VolumeName, DataSourceId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofWimRemoveEntry(win32::Windows::Win32::Foundation::PWSTR VolumeName, win32::Windows::Win32::Foundation::LARGE_INTEGER DataSourceId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(DataSourceId);

        auto win32_impl_result = g_api_table.WofWimRemoveEntry(VolumeName, DataSourceId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofWimUpdateEntry(win32::Windows::Win32::Foundation::PWSTR VolumeName, win32::Windows::Win32::Foundation::LARGE_INTEGER DataSourceId, win32::Windows::Win32::Foundation::PWSTR NewWimPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(DataSourceId);
        ORBIT_TRACK_PARAM(NewWimPath);

        auto win32_impl_result = g_api_table.WofWimUpdateEntry(VolumeName, DataSourceId, NewWimPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_WofFileEnumFiles(win32::Windows::Win32::Foundation::PWSTR VolumeName, uint32_t Algorithm, win32::Windows::Win32::Storage::FileSystem::WofEnumFilesProc* EnumProc, void* UserData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VolumeName);
        ORBIT_TRACK_PARAM(Algorithm);
        ORBIT_TRACK_PARAM(EnumProc);
        ORBIT_TRACK_PARAM(UserData);

        auto win32_impl_result = g_api_table.WofFileEnumFiles(VolumeName, Algorithm, EnumProc, UserData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfLogCreateFileReadContext(win32::Windows::Win32::Foundation::PWSTR LogPath, win32::Windows::Win32::Storage::FileSystem::CLS_LSN BeginningLsn, win32::Windows::Win32::Storage::FileSystem::CLS_LSN EndingLsn, win32::Windows::Win32::Storage::FileSystem::TXF_ID* TxfFileId, void** TxfLogContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LogPath);
        ORBIT_TRACK_PARAM(BeginningLsn);
        ORBIT_TRACK_PARAM(EndingLsn);
        ORBIT_TRACK_PARAM(TxfFileId);
        ORBIT_TRACK_PARAM(TxfLogContext);

        auto win32_impl_result = g_api_table.TxfLogCreateFileReadContext(LogPath, BeginningLsn, EndingLsn, TxfFileId, TxfLogContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfLogCreateRangeReadContext(win32::Windows::Win32::Foundation::PWSTR LogPath, win32::Windows::Win32::Storage::FileSystem::CLS_LSN BeginningLsn, win32::Windows::Win32::Storage::FileSystem::CLS_LSN EndingLsn, win32::Windows::Win32::Foundation::LARGE_INTEGER* BeginningVirtualClock, win32::Windows::Win32::Foundation::LARGE_INTEGER* EndingVirtualClock, uint32_t RecordTypeMask, void** TxfLogContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LogPath);
        ORBIT_TRACK_PARAM(BeginningLsn);
        ORBIT_TRACK_PARAM(EndingLsn);
        ORBIT_TRACK_PARAM(BeginningVirtualClock);
        ORBIT_TRACK_PARAM(EndingVirtualClock);
        ORBIT_TRACK_PARAM(RecordTypeMask);
        ORBIT_TRACK_PARAM(TxfLogContext);

        auto win32_impl_result = g_api_table.TxfLogCreateRangeReadContext(LogPath, BeginningLsn, EndingLsn, BeginningVirtualClock, EndingVirtualClock, RecordTypeMask, TxfLogContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfLogDestroyReadContext(void* TxfLogContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TxfLogContext);

        auto win32_impl_result = g_api_table.TxfLogDestroyReadContext(TxfLogContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfLogReadRecords(void* TxfLogContext, uint32_t BufferLength, void* Buffer, uint32_t* BytesUsed, uint32_t* RecordCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TxfLogContext);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BytesUsed);
        ORBIT_TRACK_PARAM(RecordCount);

        auto win32_impl_result = g_api_table.TxfLogReadRecords(TxfLogContext, BufferLength, Buffer, BytesUsed, RecordCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfReadMetadataInfo(win32::Windows::Win32::Foundation::HANDLE FileHandle, win32::Windows::Win32::Storage::FileSystem::TXF_ID* TxfFileId, win32::Windows::Win32::Storage::FileSystem::CLS_LSN* LastLsn, uint32_t* TransactionState, ::win32::guid* LockingTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileHandle);
        ORBIT_TRACK_PARAM(TxfFileId);
        ORBIT_TRACK_PARAM(LastLsn);
        ORBIT_TRACK_PARAM(TransactionState);
        ORBIT_TRACK_PARAM(LockingTransaction);

        auto win32_impl_result = g_api_table.TxfReadMetadataInfo(FileHandle, TxfFileId, LastLsn, TransactionState, LockingTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfLogRecordGetFileName(void* RecordBuffer, uint32_t RecordBufferLengthInBytes, win32::Windows::Win32::Foundation::PWSTR NameBuffer, uint32_t* NameBufferLengthInBytes, win32::Windows::Win32::Storage::FileSystem::TXF_ID* TxfId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RecordBuffer);
        ORBIT_TRACK_PARAM(RecordBufferLengthInBytes);
        ORBIT_TRACK_PARAM(NameBuffer);
        ORBIT_TRACK_PARAM(NameBufferLengthInBytes);
        ORBIT_TRACK_PARAM(TxfId);

        auto win32_impl_result = g_api_table.TxfLogRecordGetFileName(RecordBuffer, RecordBufferLengthInBytes, NameBuffer, NameBufferLengthInBytes, TxfId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TxfLogRecordGetGenericType(void* RecordBuffer, uint32_t RecordBufferLengthInBytes, uint32_t* GenericType, win32::Windows::Win32::Foundation::LARGE_INTEGER* VirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(RecordBuffer);
        ORBIT_TRACK_PARAM(RecordBufferLengthInBytes);
        ORBIT_TRACK_PARAM(GenericType);
        ORBIT_TRACK_PARAM(VirtualClock);

        auto win32_impl_result = g_api_table.TxfLogRecordGetGenericType(RecordBuffer, RecordBufferLengthInBytes, GenericType, VirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_TxfSetThreadMiniVersionForCreate(uint16_t MiniVersion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MiniVersion);

        g_api_table.TxfSetThreadMiniVersionForCreate(MiniVersion);
        
    }

    void __stdcall ORBIT_IMPL_TxfGetThreadMiniVersionForCreate(uint16_t* MiniVersion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MiniVersion);

        g_api_table.TxfGetThreadMiniVersionForCreate(MiniVersion);
        
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateTransaction(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpTransactionAttributes, ::win32::guid* UOW, uint32_t CreateOptions, uint32_t IsolationLevel, uint32_t IsolationFlags, uint32_t Timeout, win32::Windows::Win32::Foundation::PWSTR Description) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTransactionAttributes);
        ORBIT_TRACK_PARAM(UOW);
        ORBIT_TRACK_PARAM(CreateOptions);
        ORBIT_TRACK_PARAM(IsolationLevel);
        ORBIT_TRACK_PARAM(IsolationFlags);
        ORBIT_TRACK_PARAM(Timeout);
        ORBIT_TRACK_PARAM(Description);

        auto win32_impl_result = g_api_table.CreateTransaction(lpTransactionAttributes, UOW, CreateOptions, IsolationLevel, IsolationFlags, Timeout, Description);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenTransaction(uint32_t dwDesiredAccess, ::win32::guid* TransactionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(TransactionId);

        auto win32_impl_result = g_api_table.OpenTransaction(dwDesiredAccess, TransactionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CommitTransaction(win32::Windows::Win32::Foundation::HANDLE TransactionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);

        auto win32_impl_result = g_api_table.CommitTransaction(TransactionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CommitTransactionAsync(win32::Windows::Win32::Foundation::HANDLE TransactionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);

        auto win32_impl_result = g_api_table.CommitTransactionAsync(TransactionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RollbackTransaction(win32::Windows::Win32::Foundation::HANDLE TransactionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);

        auto win32_impl_result = g_api_table.RollbackTransaction(TransactionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RollbackTransactionAsync(win32::Windows::Win32::Foundation::HANDLE TransactionHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);

        auto win32_impl_result = g_api_table.RollbackTransactionAsync(TransactionHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetTransactionId(win32::Windows::Win32::Foundation::HANDLE TransactionHandle, ::win32::guid* TransactionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);
        ORBIT_TRACK_PARAM(TransactionId);

        auto win32_impl_result = g_api_table.GetTransactionId(TransactionHandle, TransactionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetTransactionInformation(win32::Windows::Win32::Foundation::HANDLE TransactionHandle, uint32_t* Outcome, uint32_t* IsolationLevel, uint32_t* IsolationFlags, uint32_t* Timeout, uint32_t BufferLength, win32::Windows::Win32::Foundation::PWSTR Description) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);
        ORBIT_TRACK_PARAM(Outcome);
        ORBIT_TRACK_PARAM(IsolationLevel);
        ORBIT_TRACK_PARAM(IsolationFlags);
        ORBIT_TRACK_PARAM(Timeout);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(Description);

        auto win32_impl_result = g_api_table.GetTransactionInformation(TransactionHandle, Outcome, IsolationLevel, IsolationFlags, Timeout, BufferLength, Description);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetTransactionInformation(win32::Windows::Win32::Foundation::HANDLE TransactionHandle, uint32_t IsolationLevel, uint32_t IsolationFlags, uint32_t Timeout, win32::Windows::Win32::Foundation::PWSTR Description) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionHandle);
        ORBIT_TRACK_PARAM(IsolationLevel);
        ORBIT_TRACK_PARAM(IsolationFlags);
        ORBIT_TRACK_PARAM(Timeout);
        ORBIT_TRACK_PARAM(Description);

        auto win32_impl_result = g_api_table.SetTransactionInformation(TransactionHandle, IsolationLevel, IsolationFlags, Timeout, Description);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateTransactionManager(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpTransactionAttributes, win32::Windows::Win32::Foundation::PWSTR LogFileName, uint32_t CreateOptions, uint32_t CommitStrength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTransactionAttributes);
        ORBIT_TRACK_PARAM(LogFileName);
        ORBIT_TRACK_PARAM(CreateOptions);
        ORBIT_TRACK_PARAM(CommitStrength);

        auto win32_impl_result = g_api_table.CreateTransactionManager(lpTransactionAttributes, LogFileName, CreateOptions, CommitStrength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenTransactionManager(win32::Windows::Win32::Foundation::PWSTR LogFileName, uint32_t DesiredAccess, uint32_t OpenOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LogFileName);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(OpenOptions);

        auto win32_impl_result = g_api_table.OpenTransactionManager(LogFileName, DesiredAccess, OpenOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenTransactionManagerById(::win32::guid* TransactionManagerId, uint32_t DesiredAccess, uint32_t OpenOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionManagerId);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(OpenOptions);

        auto win32_impl_result = g_api_table.OpenTransactionManagerById(TransactionManagerId, DesiredAccess, OpenOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RenameTransactionManager(win32::Windows::Win32::Foundation::PWSTR LogFileName, ::win32::guid* ExistingTransactionManagerGuid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LogFileName);
        ORBIT_TRACK_PARAM(ExistingTransactionManagerGuid);

        auto win32_impl_result = g_api_table.RenameTransactionManager(LogFileName, ExistingTransactionManagerGuid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RollforwardTransactionManager(win32::Windows::Win32::Foundation::HANDLE TransactionManagerHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionManagerHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.RollforwardTransactionManager(TransactionManagerHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RecoverTransactionManager(win32::Windows::Win32::Foundation::HANDLE TransactionManagerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionManagerHandle);

        auto win32_impl_result = g_api_table.RecoverTransactionManager(TransactionManagerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetCurrentClockTransactionManager(win32::Windows::Win32::Foundation::HANDLE TransactionManagerHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionManagerHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.GetCurrentClockTransactionManager(TransactionManagerHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetTransactionManagerId(win32::Windows::Win32::Foundation::HANDLE TransactionManagerHandle, ::win32::guid* TransactionManagerId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TransactionManagerHandle);
        ORBIT_TRACK_PARAM(TransactionManagerId);

        auto win32_impl_result = g_api_table.GetTransactionManagerId(TransactionManagerHandle, TransactionManagerId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateResourceManager(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpResourceManagerAttributes, ::win32::guid* ResourceManagerId, uint32_t CreateOptions, win32::Windows::Win32::Foundation::HANDLE TmHandle, win32::Windows::Win32::Foundation::PWSTR Description) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpResourceManagerAttributes);
        ORBIT_TRACK_PARAM(ResourceManagerId);
        ORBIT_TRACK_PARAM(CreateOptions);
        ORBIT_TRACK_PARAM(TmHandle);
        ORBIT_TRACK_PARAM(Description);

        auto win32_impl_result = g_api_table.CreateResourceManager(lpResourceManagerAttributes, ResourceManagerId, CreateOptions, TmHandle, Description);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenResourceManager(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::HANDLE TmHandle, ::win32::guid* ResourceManagerId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(TmHandle);
        ORBIT_TRACK_PARAM(ResourceManagerId);

        auto win32_impl_result = g_api_table.OpenResourceManager(dwDesiredAccess, TmHandle, ResourceManagerId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RecoverResourceManager(win32::Windows::Win32::Foundation::HANDLE ResourceManagerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ResourceManagerHandle);

        auto win32_impl_result = g_api_table.RecoverResourceManager(ResourceManagerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNotificationResourceManager(win32::Windows::Win32::Foundation::HANDLE ResourceManagerHandle, win32::Windows::Win32::Storage::FileSystem::TRANSACTION_NOTIFICATION* TransactionNotification, uint32_t NotificationLength, uint32_t dwMilliseconds, uint32_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ResourceManagerHandle);
        ORBIT_TRACK_PARAM(TransactionNotification);
        ORBIT_TRACK_PARAM(NotificationLength);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.GetNotificationResourceManager(ResourceManagerHandle, TransactionNotification, NotificationLength, dwMilliseconds, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNotificationResourceManagerAsync(win32::Windows::Win32::Foundation::HANDLE ResourceManagerHandle, win32::Windows::Win32::Storage::FileSystem::TRANSACTION_NOTIFICATION* TransactionNotification, uint32_t TransactionNotificationLength, uint32_t* ReturnLength, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ResourceManagerHandle);
        ORBIT_TRACK_PARAM(TransactionNotification);
        ORBIT_TRACK_PARAM(TransactionNotificationLength);
        ORBIT_TRACK_PARAM(ReturnLength);
        ORBIT_TRACK_PARAM(lpOverlapped);

        auto win32_impl_result = g_api_table.GetNotificationResourceManagerAsync(ResourceManagerHandle, TransactionNotification, TransactionNotificationLength, ReturnLength, lpOverlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetResourceManagerCompletionPort(win32::Windows::Win32::Foundation::HANDLE ResourceManagerHandle, win32::Windows::Win32::Foundation::HANDLE IoCompletionPortHandle, size_t CompletionKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ResourceManagerHandle);
        ORBIT_TRACK_PARAM(IoCompletionPortHandle);
        ORBIT_TRACK_PARAM(CompletionKey);

        auto win32_impl_result = g_api_table.SetResourceManagerCompletionPort(ResourceManagerHandle, IoCompletionPortHandle, CompletionKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateEnlistment(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpEnlistmentAttributes, win32::Windows::Win32::Foundation::HANDLE ResourceManagerHandle, win32::Windows::Win32::Foundation::HANDLE TransactionHandle, uint32_t NotificationMask, uint32_t CreateOptions, void* EnlistmentKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEnlistmentAttributes);
        ORBIT_TRACK_PARAM(ResourceManagerHandle);
        ORBIT_TRACK_PARAM(TransactionHandle);
        ORBIT_TRACK_PARAM(NotificationMask);
        ORBIT_TRACK_PARAM(CreateOptions);
        ORBIT_TRACK_PARAM(EnlistmentKey);

        auto win32_impl_result = g_api_table.CreateEnlistment(lpEnlistmentAttributes, ResourceManagerHandle, TransactionHandle, NotificationMask, CreateOptions, EnlistmentKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenEnlistment(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::HANDLE ResourceManagerHandle, ::win32::guid* EnlistmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(ResourceManagerHandle);
        ORBIT_TRACK_PARAM(EnlistmentId);

        auto win32_impl_result = g_api_table.OpenEnlistment(dwDesiredAccess, ResourceManagerHandle, EnlistmentId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RecoverEnlistment(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, void* EnlistmentKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(EnlistmentKey);

        auto win32_impl_result = g_api_table.RecoverEnlistment(EnlistmentHandle, EnlistmentKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetEnlistmentRecoveryInformation(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, uint32_t BufferSize, void* Buffer, uint32_t* BufferUsed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferUsed);

        auto win32_impl_result = g_api_table.GetEnlistmentRecoveryInformation(EnlistmentHandle, BufferSize, Buffer, BufferUsed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetEnlistmentId(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, ::win32::guid* EnlistmentId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(EnlistmentId);

        auto win32_impl_result = g_api_table.GetEnlistmentId(EnlistmentHandle, EnlistmentId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetEnlistmentRecoveryInformation(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, uint32_t BufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.SetEnlistmentRecoveryInformation(EnlistmentHandle, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PrepareEnlistment(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.PrepareEnlistment(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PrePrepareEnlistment(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.PrePrepareEnlistment(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CommitEnlistment(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.CommitEnlistment(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RollbackEnlistment(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.RollbackEnlistment(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PrePrepareComplete(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.PrePrepareComplete(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PrepareComplete(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.PrepareComplete(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadOnlyEnlistment(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.ReadOnlyEnlistment(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CommitComplete(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.CommitComplete(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RollbackComplete(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.RollbackComplete(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SinglePhaseReject(win32::Windows::Win32::Foundation::HANDLE EnlistmentHandle, win32::Windows::Win32::Foundation::LARGE_INTEGER* TmVirtualClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(EnlistmentHandle);
        ORBIT_TRACK_PARAM(TmVirtualClock);

        auto win32_impl_result = g_api_table.SinglePhaseReject(EnlistmentHandle, TmVirtualClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetShareAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetShareEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareEnumSticky(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetShareEnumSticky(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR netname, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(netname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetShareGetInfo(servername, netname, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR netname, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(netname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetShareSetInfo(servername, netname, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR netname, uint32_t reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(netname);
        ORBIT_TRACK_PARAM(reserved);

        auto win32_impl_result = g_api_table.NetShareDel(servername, netname, reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareDelSticky(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR netname, uint32_t reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(netname);
        ORBIT_TRACK_PARAM(reserved);

        auto win32_impl_result = g_api_table.NetShareDelSticky(servername, netname, reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareCheck(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR device, uint32_t* type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(device);
        ORBIT_TRACK_PARAM(type);

        auto win32_impl_result = g_api_table.NetShareCheck(servername, device, type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetShareDelEx(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);

        auto win32_impl_result = g_api_table.NetShareDelEx(servername, level, buf);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerAliasAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);

        auto win32_impl_result = g_api_table.NetServerAliasAdd(servername, level, buf);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerAliasDel(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);

        auto win32_impl_result = g_api_table.NetServerAliasDel(servername, level, buf);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerAliasEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resumehandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resumehandle);

        auto win32_impl_result = g_api_table.NetServerAliasEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetSessionEnum(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR UncClientName, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(UncClientName);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetSessionEnum(servername, UncClientName, username, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetSessionDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR UncClientName, win32::Windows::Win32::Foundation::PWSTR username) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(UncClientName);
        ORBIT_TRACK_PARAM(username);

        auto win32_impl_result = g_api_table.NetSessionDel(servername, UncClientName, username);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetSessionGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR UncClientName, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(UncClientName);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetSessionGetInfo(servername, UncClientName, username, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetConnectionEnum(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR qualifier, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(qualifier);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetConnectionEnum(servername, qualifier, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetFileClose(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t fileid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(fileid);

        auto win32_impl_result = g_api_table.NetFileClose(servername, fileid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetFileEnum(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR basepath, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(basepath);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetFileEnum(servername, basepath, username, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetFileGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t fileid, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(fileid);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetFileGetInfo(servername, fileid, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetStatisticsGet(int8_t* ServerName, int8_t* Service, uint32_t Level, uint32_t Options, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Service);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Options);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetStatisticsGet(ServerName, Service, Level, Options, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_QueryIoRingCapabilities(win32::Windows::Win32::Storage::FileSystem::IORING_CAPABILITIES* capabilities) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(capabilities);

        auto win32_impl_result = g_api_table.QueryIoRingCapabilities(capabilities);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsIoRingOpSupported(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, win32::Windows::Win32::Storage::FileSystem::IORING_OP_CODE op) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(op);

        auto win32_impl_result = g_api_table.IsIoRingOpSupported(ioRing, op);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateIoRing(win32::Windows::Win32::Storage::FileSystem::IORING_VERSION ioringVersion, win32::Windows::Win32::Storage::FileSystem::IORING_CREATE_FLAGS flags, uint32_t submissionQueueSize, uint32_t completionQueueSize, win32::Windows::Win32::Storage::FileSystem::HIORING__** h) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioringVersion);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(submissionQueueSize);
        ORBIT_TRACK_PARAM(completionQueueSize);
        ORBIT_TRACK_PARAM(h);

        auto win32_impl_result = g_api_table.CreateIoRing(ioringVersion, flags, submissionQueueSize, completionQueueSize, h);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetIoRingInfo(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, win32::Windows::Win32::Storage::FileSystem::IORING_INFO* info) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(info);

        auto win32_impl_result = g_api_table.GetIoRingInfo(ioRing, info);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SubmitIoRing(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, uint32_t waitOperations, uint32_t milliseconds, uint32_t* submittedEntries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(waitOperations);
        ORBIT_TRACK_PARAM(milliseconds);
        ORBIT_TRACK_PARAM(submittedEntries);

        auto win32_impl_result = g_api_table.SubmitIoRing(ioRing, waitOperations, milliseconds, submittedEntries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CloseIoRing(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);

        auto win32_impl_result = g_api_table.CloseIoRing(ioRing);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PopIoRingCompletion(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, win32::Windows::Win32::Storage::FileSystem::IORING_CQE* cqe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(cqe);

        auto win32_impl_result = g_api_table.PopIoRingCompletion(ioRing, cqe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetIoRingCompletionEvent(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.SetIoRingCompletionEvent(ioRing, hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_BuildIoRingCancelRequest(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, win32::Windows::Win32::Storage::FileSystem::IORING_HANDLE_REF file, size_t opToCancel, size_t userData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(file);
        ORBIT_TRACK_PARAM(opToCancel);
        ORBIT_TRACK_PARAM(userData);

        auto win32_impl_result = g_api_table.BuildIoRingCancelRequest(ioRing, file, opToCancel, userData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_BuildIoRingReadFile(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, win32::Windows::Win32::Storage::FileSystem::IORING_HANDLE_REF fileRef, win32::Windows::Win32::Storage::FileSystem::IORING_BUFFER_REF dataRef, uint32_t numberOfBytesToRead, uint64_t fileOffset, size_t userData, win32::Windows::Win32::Storage::FileSystem::IORING_SQE_FLAGS flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(fileRef);
        ORBIT_TRACK_PARAM(dataRef);
        ORBIT_TRACK_PARAM(numberOfBytesToRead);
        ORBIT_TRACK_PARAM(fileOffset);
        ORBIT_TRACK_PARAM(userData);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.BuildIoRingReadFile(ioRing, fileRef, dataRef, numberOfBytesToRead, fileOffset, userData, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_BuildIoRingRegisterFileHandles(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, uint32_t count, win32::Windows::Win32::Foundation::HANDLE* handles, size_t userData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(handles);
        ORBIT_TRACK_PARAM(userData);

        auto win32_impl_result = g_api_table.BuildIoRingRegisterFileHandles(ioRing, count, handles, userData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_BuildIoRingRegisterBuffers(win32::Windows::Win32::Storage::FileSystem::HIORING__* ioRing, uint32_t count, win32::Windows::Win32::Storage::FileSystem::IORING_BUFFER_INFO* buffers, size_t userData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ioRing);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(buffers);
        ORBIT_TRACK_PARAM(userData);

        auto win32_impl_result = g_api_table.BuildIoRingRegisterBuffers(ioRing, count, buffers, userData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_Wow64EnableWow64FsRedirection(win32::Windows::Win32::Foundation::BOOLEAN Wow64FsEnableRedirection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Wow64FsEnableRedirection);

        auto win32_impl_result = g_api_table.Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_Wow64DisableWow64FsRedirection(void** OldValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(OldValue);

        auto win32_impl_result = g_api_table.Wow64DisableWow64FsRedirection(OldValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_Wow64RevertWow64FsRedirection(void* OlValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(OlValue);

        auto win32_impl_result = g_api_table.Wow64RevertWow64FsRedirection(OlValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetBinaryTypeA(win32::Windows::Win32::Foundation::PSTR lpApplicationName, uint32_t* lpBinaryType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpBinaryType);

        auto win32_impl_result = g_api_table.GetBinaryTypeA(lpApplicationName, lpBinaryType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetBinaryTypeW(win32::Windows::Win32::Foundation::PWSTR lpApplicationName, uint32_t* lpBinaryType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpBinaryType);

        auto win32_impl_result = g_api_table.GetBinaryTypeW(lpApplicationName, lpBinaryType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetShortPathNameA(win32::Windows::Win32::Foundation::PSTR lpszLongPath, win32::Windows::Win32::Foundation::PSTR lpszShortPath, uint32_t cchBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszLongPath);
        ORBIT_TRACK_PARAM(lpszShortPath);
        ORBIT_TRACK_PARAM(cchBuffer);

        auto win32_impl_result = g_api_table.GetShortPathNameA(lpszLongPath, lpszShortPath, cchBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLongPathNameTransactedA(win32::Windows::Win32::Foundation::PSTR lpszShortPath, win32::Windows::Win32::Foundation::PSTR lpszLongPath, uint32_t cchBuffer, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszShortPath);
        ORBIT_TRACK_PARAM(lpszLongPath);
        ORBIT_TRACK_PARAM(cchBuffer);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetLongPathNameTransactedA(lpszShortPath, lpszLongPath, cchBuffer, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLongPathNameTransactedW(win32::Windows::Win32::Foundation::PWSTR lpszShortPath, win32::Windows::Win32::Foundation::PWSTR lpszLongPath, uint32_t cchBuffer, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszShortPath);
        ORBIT_TRACK_PARAM(lpszLongPath);
        ORBIT_TRACK_PARAM(cchBuffer);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetLongPathNameTransactedW(lpszShortPath, lpszLongPath, cchBuffer, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileCompletionNotificationModes(win32::Windows::Win32::Foundation::HANDLE FileHandle, uint8_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FileHandle);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.SetFileCompletionNotificationModes(FileHandle, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileShortNameA(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::PSTR lpShortName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpShortName);

        auto win32_impl_result = g_api_table.SetFileShortNameA(hFile, lpShortName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileShortNameW(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Foundation::PWSTR lpShortName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpShortName);

        auto win32_impl_result = g_api_table.SetFileShortNameW(hFile, lpShortName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetTapePosition(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::TAPE_POSITION_METHOD dwPositionMethod, uint32_t dwPartition, uint32_t dwOffsetLow, uint32_t dwOffsetHigh, win32::Windows::Win32::Foundation::BOOL bImmediate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwPositionMethod);
        ORBIT_TRACK_PARAM(dwPartition);
        ORBIT_TRACK_PARAM(dwOffsetLow);
        ORBIT_TRACK_PARAM(dwOffsetHigh);
        ORBIT_TRACK_PARAM(bImmediate);

        auto win32_impl_result = g_api_table.SetTapePosition(hDevice, dwPositionMethod, dwPartition, dwOffsetLow, dwOffsetHigh, bImmediate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTapePosition(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::TAPE_POSITION_TYPE dwPositionType, uint32_t* lpdwPartition, uint32_t* lpdwOffsetLow, uint32_t* lpdwOffsetHigh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwPositionType);
        ORBIT_TRACK_PARAM(lpdwPartition);
        ORBIT_TRACK_PARAM(lpdwOffsetLow);
        ORBIT_TRACK_PARAM(lpdwOffsetHigh);

        auto win32_impl_result = g_api_table.GetTapePosition(hDevice, dwPositionType, lpdwPartition, lpdwOffsetLow, lpdwOffsetHigh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PrepareTape(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::PREPARE_TAPE_OPERATION dwOperation, win32::Windows::Win32::Foundation::BOOL bImmediate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwOperation);
        ORBIT_TRACK_PARAM(bImmediate);

        auto win32_impl_result = g_api_table.PrepareTape(hDevice, dwOperation, bImmediate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EraseTape(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::ERASE_TAPE_TYPE dwEraseType, win32::Windows::Win32::Foundation::BOOL bImmediate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwEraseType);
        ORBIT_TRACK_PARAM(bImmediate);

        auto win32_impl_result = g_api_table.EraseTape(hDevice, dwEraseType, bImmediate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateTapePartition(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::CREATE_TAPE_PARTITION_METHOD dwPartitionMethod, uint32_t dwCount, uint32_t dwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwPartitionMethod);
        ORBIT_TRACK_PARAM(dwCount);
        ORBIT_TRACK_PARAM(dwSize);

        auto win32_impl_result = g_api_table.CreateTapePartition(hDevice, dwPartitionMethod, dwCount, dwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WriteTapemark(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::TAPEMARK_TYPE dwTapemarkType, uint32_t dwTapemarkCount, win32::Windows::Win32::Foundation::BOOL bImmediate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwTapemarkType);
        ORBIT_TRACK_PARAM(dwTapemarkCount);
        ORBIT_TRACK_PARAM(bImmediate);

        auto win32_impl_result = g_api_table.WriteTapemark(hDevice, dwTapemarkType, dwTapemarkCount, bImmediate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTapeStatus(win32::Windows::Win32::Foundation::HANDLE hDevice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);

        auto win32_impl_result = g_api_table.GetTapeStatus(hDevice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetTapeParameters(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::GET_TAPE_DRIVE_PARAMETERS_OPERATION dwOperation, uint32_t* lpdwSize, void* lpTapeInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwOperation);
        ORBIT_TRACK_PARAM(lpdwSize);
        ORBIT_TRACK_PARAM(lpTapeInformation);

        auto win32_impl_result = g_api_table.GetTapeParameters(hDevice, dwOperation, lpdwSize, lpTapeInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetTapeParameters(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::Storage::FileSystem::TAPE_INFORMATION_TYPE dwOperation, void* lpTapeInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(dwOperation);
        ORBIT_TRACK_PARAM(lpTapeInformation);

        auto win32_impl_result = g_api_table.SetTapeParameters(hDevice, dwOperation, lpTapeInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EncryptFileA(win32::Windows::Win32::Foundation::PSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.EncryptFileA(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EncryptFileW(win32::Windows::Win32::Foundation::PWSTR lpFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);

        auto win32_impl_result = g_api_table.EncryptFileW(lpFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DecryptFileA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t dwReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwReserved);

        auto win32_impl_result = g_api_table.DecryptFileA(lpFileName, dwReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DecryptFileW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwReserved);

        auto win32_impl_result = g_api_table.DecryptFileW(lpFileName, dwReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FileEncryptionStatusA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t* lpStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpStatus);

        auto win32_impl_result = g_api_table.FileEncryptionStatusA(lpFileName, lpStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FileEncryptionStatusW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t* lpStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpStatus);

        auto win32_impl_result = g_api_table.FileEncryptionStatusW(lpFileName, lpStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OpenEncryptedFileRawA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t ulFlags, void** pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(ulFlags);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.OpenEncryptedFileRawA(lpFileName, ulFlags, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OpenEncryptedFileRawW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t ulFlags, void** pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(ulFlags);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.OpenEncryptedFileRawW(lpFileName, ulFlags, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReadEncryptedFileRaw(win32::Windows::Win32::Storage::FileSystem::PFE_EXPORT_FUNC* pfExportCallback, void* pvCallbackContext, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfExportCallback);
        ORBIT_TRACK_PARAM(pvCallbackContext);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.ReadEncryptedFileRaw(pfExportCallback, pvCallbackContext, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WriteEncryptedFileRaw(win32::Windows::Win32::Storage::FileSystem::PFE_IMPORT_FUNC* pfImportCallback, void* pvCallbackContext, void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfImportCallback);
        ORBIT_TRACK_PARAM(pvCallbackContext);
        ORBIT_TRACK_PARAM(pvContext);

        auto win32_impl_result = g_api_table.WriteEncryptedFileRaw(pfImportCallback, pvCallbackContext, pvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CloseEncryptedFileRaw(void* pvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvContext);

        g_api_table.CloseEncryptedFileRaw(pvContext);
        
    }

    int32_t __stdcall ORBIT_IMPL_OpenFile(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::OFSTRUCT* lpReOpenBuff, win32::Windows::Win32::Storage::FileSystem::LZOPENFILE_STYLE uStyle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpReOpenBuff);
        ORBIT_TRACK_PARAM(uStyle);

        auto win32_impl_result = g_api_table.OpenFile(lpFileName, lpReOpenBuff, uStyle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_BackupRead(win32::Windows::Win32::Foundation::HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, win32::Windows::Win32::Foundation::BOOL bAbort, win32::Windows::Win32::Foundation::BOOL bProcessSecurity, void** lpContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nNumberOfBytesToRead);
        ORBIT_TRACK_PARAM(lpNumberOfBytesRead);
        ORBIT_TRACK_PARAM(bAbort);
        ORBIT_TRACK_PARAM(bProcessSecurity);
        ORBIT_TRACK_PARAM(lpContext);

        auto win32_impl_result = g_api_table.BackupRead(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, bAbort, bProcessSecurity, lpContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_BackupSeek(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t dwLowBytesToSeek, uint32_t dwHighBytesToSeek, uint32_t* lpdwLowByteSeeked, uint32_t* lpdwHighByteSeeked, void** lpContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(dwLowBytesToSeek);
        ORBIT_TRACK_PARAM(dwHighBytesToSeek);
        ORBIT_TRACK_PARAM(lpdwLowByteSeeked);
        ORBIT_TRACK_PARAM(lpdwHighByteSeeked);
        ORBIT_TRACK_PARAM(lpContext);

        auto win32_impl_result = g_api_table.BackupSeek(hFile, dwLowBytesToSeek, dwHighBytesToSeek, lpdwLowByteSeeked, lpdwHighByteSeeked, lpContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_BackupWrite(win32::Windows::Win32::Foundation::HANDLE hFile, uint8_t* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, win32::Windows::Win32::Foundation::BOOL bAbort, win32::Windows::Win32::Foundation::BOOL bProcessSecurity, void** lpContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nNumberOfBytesToWrite);
        ORBIT_TRACK_PARAM(lpNumberOfBytesWritten);
        ORBIT_TRACK_PARAM(bAbort);
        ORBIT_TRACK_PARAM(bProcessSecurity);
        ORBIT_TRACK_PARAM(lpContext);

        auto win32_impl_result = g_api_table.BackupWrite(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, bAbort, bProcessSecurity, lpContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetLogicalDriveStringsA(uint32_t nBufferLength, win32::Windows::Win32::Foundation::PSTR lpBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);

        auto win32_impl_result = g_api_table.GetLogicalDriveStringsA(nBufferLength, lpBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetSearchPathMode(uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.SetSearchPathMode(Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryExA(win32::Windows::Win32::Foundation::PSTR lpTemplateDirectory, win32::Windows::Win32::Foundation::PSTR lpNewDirectory, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTemplateDirectory);
        ORBIT_TRACK_PARAM(lpNewDirectory);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateDirectoryExA(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryExW(win32::Windows::Win32::Foundation::PWSTR lpTemplateDirectory, win32::Windows::Win32::Foundation::PWSTR lpNewDirectory, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTemplateDirectory);
        ORBIT_TRACK_PARAM(lpNewDirectory);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateDirectoryExW(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryTransactedA(win32::Windows::Win32::Foundation::PSTR lpTemplateDirectory, win32::Windows::Win32::Foundation::PSTR lpNewDirectory, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTemplateDirectory);
        ORBIT_TRACK_PARAM(lpNewDirectory);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CreateDirectoryTransactedA(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDirectoryTransactedW(win32::Windows::Win32::Foundation::PWSTR lpTemplateDirectory, win32::Windows::Win32::Foundation::PWSTR lpNewDirectory, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTemplateDirectory);
        ORBIT_TRACK_PARAM(lpNewDirectory);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CreateDirectoryTransactedW(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveDirectoryTransactedA(win32::Windows::Win32::Foundation::PSTR lpPathName, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.RemoveDirectoryTransactedA(lpPathName, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RemoveDirectoryTransactedW(win32::Windows::Win32::Foundation::PWSTR lpPathName, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPathName);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.RemoveDirectoryTransactedW(lpPathName, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFullPathNameTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t nBufferLength, win32::Windows::Win32::Foundation::PSTR lpBuffer, win32::Windows::Win32::Foundation::PSTR* lpFilePart, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpFilePart);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetFullPathNameTransactedA(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetFullPathNameTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t nBufferLength, win32::Windows::Win32::Foundation::PWSTR lpBuffer, win32::Windows::Win32::Foundation::PWSTR* lpFilePart, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(lpFilePart);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetFullPathNameTransactedW(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DefineDosDeviceA(win32::Windows::Win32::Storage::FileSystem::DEFINE_DOS_DEVICE_FLAGS dwFlags, win32::Windows::Win32::Foundation::PSTR lpDeviceName, win32::Windows::Win32::Foundation::PSTR lpTargetPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpDeviceName);
        ORBIT_TRACK_PARAM(lpTargetPath);

        auto win32_impl_result = g_api_table.DefineDosDeviceA(dwFlags, lpDeviceName, lpTargetPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryDosDeviceA(win32::Windows::Win32::Foundation::PSTR lpDeviceName, win32::Windows::Win32::Foundation::PSTR lpTargetPath, uint32_t ucchMax) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDeviceName);
        ORBIT_TRACK_PARAM(lpTargetPath);
        ORBIT_TRACK_PARAM(ucchMax);

        auto win32_impl_result = g_api_table.QueryDosDeviceA(lpDeviceName, lpTargetPath, ucchMax);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Storage::FileSystem::FILE_CREATION_DISPOSITION dwCreationDisposition, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, win32::Windows::Win32::Foundation::HANDLE hTemplateFile, win32::Windows::Win32::Foundation::HANDLE hTransaction, win32::Windows::Win32::Storage::FileSystem::TXFS_MINIVERSION* pusMiniVersion, void* lpExtendedParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);
        ORBIT_TRACK_PARAM(hTemplateFile);
        ORBIT_TRACK_PARAM(hTransaction);
        ORBIT_TRACK_PARAM(pusMiniVersion);
        ORBIT_TRACK_PARAM(lpExtendedParameter);

        auto win32_impl_result = g_api_table.CreateFileTransactedA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateFileTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Storage::FileSystem::FILE_CREATION_DISPOSITION dwCreationDisposition, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, win32::Windows::Win32::Foundation::HANDLE hTemplateFile, win32::Windows::Win32::Foundation::HANDLE hTransaction, win32::Windows::Win32::Storage::FileSystem::TXFS_MINIVERSION* pusMiniVersion, void* lpExtendedParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(dwCreationDisposition);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);
        ORBIT_TRACK_PARAM(hTemplateFile);
        ORBIT_TRACK_PARAM(hTransaction);
        ORBIT_TRACK_PARAM(pusMiniVersion);
        ORBIT_TRACK_PARAM(lpExtendedParameter);

        auto win32_impl_result = g_api_table.CreateFileTransactedW(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_ReOpenFile(win32::Windows::Win32::Foundation::HANDLE hOriginalFile, win32::Windows::Win32::Storage::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hOriginalFile);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);

        auto win32_impl_result = g_api_table.ReOpenFile(hOriginalFile, dwDesiredAccess, dwShareMode, dwFlagsAndAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileAttributesTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t dwFileAttributes, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFileAttributes);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.SetFileAttributesTransactedA(lpFileName, dwFileAttributes, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileAttributesTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwFileAttributes, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFileAttributes);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.SetFileAttributesTransactedW(lpFileName, dwFileAttributes, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileAttributesTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFileInformation);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetFileAttributesTransactedA(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileAttributesTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFileInformation);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetFileAttributesTransactedW(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCompressedFileSizeTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, uint32_t* lpFileSizeHigh, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpFileSizeHigh);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetCompressedFileSizeTransactedA(lpFileName, lpFileSizeHigh, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCompressedFileSizeTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t* lpFileSizeHigh, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpFileSizeHigh);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.GetCompressedFileSizeTransactedW(lpFileName, lpFileSizeHigh, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteFileTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.DeleteFileTransactedA(lpFileName, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteFileTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.DeleteFileTransactedW(lpFileName, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CheckNameLegalDOS8Dot3A(win32::Windows::Win32::Foundation::PSTR lpName, win32::Windows::Win32::Foundation::PSTR lpOemName, uint32_t OemNameSize, win32::Windows::Win32::Foundation::BOOL* pbNameContainsSpaces, win32::Windows::Win32::Foundation::BOOL* pbNameLegal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(lpOemName);
        ORBIT_TRACK_PARAM(OemNameSize);
        ORBIT_TRACK_PARAM(pbNameContainsSpaces);
        ORBIT_TRACK_PARAM(pbNameLegal);

        auto win32_impl_result = g_api_table.CheckNameLegalDOS8Dot3A(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CheckNameLegalDOS8Dot3W(win32::Windows::Win32::Foundation::PWSTR lpName, win32::Windows::Win32::Foundation::PSTR lpOemName, uint32_t OemNameSize, win32::Windows::Win32::Foundation::BOOL* pbNameContainsSpaces, win32::Windows::Win32::Foundation::BOOL* pbNameLegal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(lpOemName);
        ORBIT_TRACK_PARAM(OemNameSize);
        ORBIT_TRACK_PARAM(pbNameContainsSpaces);
        ORBIT_TRACK_PARAM(pbNameLegal);

        auto win32_impl_result = g_api_table.CheckNameLegalDOS8Dot3W(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileHandle __stdcall ORBIT_IMPL_FindFirstFileTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, win32::Windows::Win32::Storage::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, uint32_t dwAdditionalFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFindFileData);
        ORBIT_TRACK_PARAM(fSearchOp);
        ORBIT_TRACK_PARAM(lpSearchFilter);
        ORBIT_TRACK_PARAM(dwAdditionalFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.FindFirstFileTransactedA(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileHandle __stdcall ORBIT_IMPL_FindFirstFileTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, win32::Windows::Win32::Storage::FileSystem::FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, uint32_t dwAdditionalFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(fInfoLevelId);
        ORBIT_TRACK_PARAM(lpFindFileData);
        ORBIT_TRACK_PARAM(fSearchOp);
        ORBIT_TRACK_PARAM(lpSearchFilter);
        ORBIT_TRACK_PARAM(dwAdditionalFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.FindFirstFileTransactedW(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName, win32::Windows::Win32::Foundation::BOOL bFailIfExists) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(bFailIfExists);

        auto win32_impl_result = g_api_table.CopyFileA(lpExistingFileName, lpNewFileName, bFailIfExists);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Foundation::BOOL bFailIfExists) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(bFailIfExists);

        auto win32_impl_result = g_api_table.CopyFileW(lpExistingFileName, lpNewFileName, bFailIfExists);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileExA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(pbCancel);
        ORBIT_TRACK_PARAM(dwCopyFlags);

        auto win32_impl_result = g_api_table.CopyFileExA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileExW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(pbCancel);
        ORBIT_TRACK_PARAM(dwCopyFlags);

        auto win32_impl_result = g_api_table.CopyFileExW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileTransactedA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(pbCancel);
        ORBIT_TRACK_PARAM(dwCopyFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CopyFileTransactedA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CopyFileTransactedW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, int32_t* pbCancel, uint32_t dwCopyFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(pbCancel);
        ORBIT_TRACK_PARAM(dwCopyFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CopyFileTransactedW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CopyFile2(win32::Windows::Win32::Foundation::PWSTR pwszExistingFileName, win32::Windows::Win32::Foundation::PWSTR pwszNewFileName, win32::Windows::Win32::Storage::FileSystem::COPYFILE2_EXTENDED_PARAMETERS* pExtendedParameters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszExistingFileName);
        ORBIT_TRACK_PARAM(pwszNewFileName);
        ORBIT_TRACK_PARAM(pExtendedParameters);

        auto win32_impl_result = g_api_table.CopyFile2(pwszExistingFileName, pwszNewFileName, pExtendedParameters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);

        auto win32_impl_result = g_api_table.MoveFileA(lpExistingFileName, lpNewFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);

        auto win32_impl_result = g_api_table.MoveFileW(lpExistingFileName, lpNewFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileExA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::MOVE_FILE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.MoveFileExA(lpExistingFileName, lpNewFileName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileExW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::MOVE_FILE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.MoveFileExW(lpExistingFileName, lpNewFileName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileWithProgressA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, win32::Windows::Win32::Storage::FileSystem::MOVE_FILE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.MoveFileWithProgressA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileWithProgressW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, win32::Windows::Win32::Storage::FileSystem::MOVE_FILE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.MoveFileWithProgressW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileTransactedA(win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Foundation::PSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, win32::Windows::Win32::Storage::FileSystem::MOVE_FILE_FLAGS dwFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.MoveFileTransactedA(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MoveFileTransactedW(win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Foundation::PWSTR lpNewFileName, win32::Windows::Win32::Storage::FileSystem::LPPROGRESS_ROUTINE* lpProgressRoutine, void* lpData, win32::Windows::Win32::Storage::FileSystem::MOVE_FILE_FLAGS dwFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpNewFileName);
        ORBIT_TRACK_PARAM(lpProgressRoutine);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.MoveFileTransactedW(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReplaceFileA(win32::Windows::Win32::Foundation::PSTR lpReplacedFileName, win32::Windows::Win32::Foundation::PSTR lpReplacementFileName, win32::Windows::Win32::Foundation::PSTR lpBackupFileName, win32::Windows::Win32::Storage::FileSystem::REPLACE_FILE_FLAGS dwReplaceFlags, void* lpExclude, void* lpReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpReplacedFileName);
        ORBIT_TRACK_PARAM(lpReplacementFileName);
        ORBIT_TRACK_PARAM(lpBackupFileName);
        ORBIT_TRACK_PARAM(dwReplaceFlags);
        ORBIT_TRACK_PARAM(lpExclude);
        ORBIT_TRACK_PARAM(lpReserved);

        auto win32_impl_result = g_api_table.ReplaceFileA(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReplaceFileW(win32::Windows::Win32::Foundation::PWSTR lpReplacedFileName, win32::Windows::Win32::Foundation::PWSTR lpReplacementFileName, win32::Windows::Win32::Foundation::PWSTR lpBackupFileName, win32::Windows::Win32::Storage::FileSystem::REPLACE_FILE_FLAGS dwReplaceFlags, void* lpExclude, void* lpReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpReplacedFileName);
        ORBIT_TRACK_PARAM(lpReplacementFileName);
        ORBIT_TRACK_PARAM(lpBackupFileName);
        ORBIT_TRACK_PARAM(dwReplaceFlags);
        ORBIT_TRACK_PARAM(lpExclude);
        ORBIT_TRACK_PARAM(lpReserved);

        auto win32_impl_result = g_api_table.ReplaceFileW(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateHardLinkA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateHardLinkA(lpFileName, lpExistingFileName, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateHardLinkW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);

        auto win32_impl_result = g_api_table.CreateHardLinkW(lpFileName, lpExistingFileName, lpSecurityAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateHardLinkTransactedA(win32::Windows::Win32::Foundation::PSTR lpFileName, win32::Windows::Win32::Foundation::PSTR lpExistingFileName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CreateHardLinkTransactedA(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateHardLinkTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Foundation::PWSTR lpExistingFileName, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(lpExistingFileName);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CreateHardLinkTransactedW(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindStreamHandle __stdcall ORBIT_IMPL_FindFirstStreamTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, win32::Windows::Win32::Storage::FileSystem::STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, uint32_t dwFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(lpFindStreamData);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.FindFirstStreamTransactedW(lpFileName, InfoLevel, lpFindStreamData, dwFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindFileNameHandle __stdcall ORBIT_IMPL_FindFirstFileNameTransactedW(win32::Windows::Win32::Foundation::PWSTR lpFileName, uint32_t dwFlags, uint32_t* StringLength, win32::Windows::Win32::Foundation::PWSTR LinkName, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFileName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(StringLength);
        ORBIT_TRACK_PARAM(LinkName);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.FindFirstFileNameTransactedW(lpFileName, dwFlags, StringLength, LinkName, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetVolumeLabelA(win32::Windows::Win32::Foundation::PSTR lpRootPathName, win32::Windows::Win32::Foundation::PSTR lpVolumeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);
        ORBIT_TRACK_PARAM(lpVolumeName);

        auto win32_impl_result = g_api_table.SetVolumeLabelA(lpRootPathName, lpVolumeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetVolumeLabelW(win32::Windows::Win32::Foundation::PWSTR lpRootPathName, win32::Windows::Win32::Foundation::PWSTR lpVolumeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpRootPathName);
        ORBIT_TRACK_PARAM(lpVolumeName);

        auto win32_impl_result = g_api_table.SetVolumeLabelW(lpRootPathName, lpVolumeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetFileBandwidthReservation(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t nPeriodMilliseconds, uint32_t nBytesPerPeriod, win32::Windows::Win32::Foundation::BOOL bDiscardable, uint32_t* lpTransferSize, uint32_t* lpNumOutstandingRequests) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(nPeriodMilliseconds);
        ORBIT_TRACK_PARAM(nBytesPerPeriod);
        ORBIT_TRACK_PARAM(bDiscardable);
        ORBIT_TRACK_PARAM(lpTransferSize);
        ORBIT_TRACK_PARAM(lpNumOutstandingRequests);

        auto win32_impl_result = g_api_table.SetFileBandwidthReservation(hFile, nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize, lpNumOutstandingRequests);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileBandwidthReservation(win32::Windows::Win32::Foundation::HANDLE hFile, uint32_t* lpPeriodMilliseconds, uint32_t* lpBytesPerPeriod, int32_t* pDiscardable, uint32_t* lpTransferSize, uint32_t* lpNumOutstandingRequests) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(lpPeriodMilliseconds);
        ORBIT_TRACK_PARAM(lpBytesPerPeriod);
        ORBIT_TRACK_PARAM(pDiscardable);
        ORBIT_TRACK_PARAM(lpTransferSize);
        ORBIT_TRACK_PARAM(lpNumOutstandingRequests);

        auto win32_impl_result = g_api_table.GetFileBandwidthReservation(hFile, lpPeriodMilliseconds, lpBytesPerPeriod, pDiscardable, lpTransferSize, lpNumOutstandingRequests);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadDirectoryChangesW(win32::Windows::Win32::Foundation::HANDLE hDirectory, void* lpBuffer, uint32_t nBufferLength, win32::Windows::Win32::Foundation::BOOL bWatchSubtree, win32::Windows::Win32::Storage::FileSystem::FILE_NOTIFY_CHANGE dwNotifyFilter, uint32_t* lpBytesReturned, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::System::IO::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDirectory);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(bWatchSubtree);
        ORBIT_TRACK_PARAM(dwNotifyFilter);
        ORBIT_TRACK_PARAM(lpBytesReturned);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);

        auto win32_impl_result = g_api_table.ReadDirectoryChangesW(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReadDirectoryChangesExW(win32::Windows::Win32::Foundation::HANDLE hDirectory, void* lpBuffer, uint32_t nBufferLength, win32::Windows::Win32::Foundation::BOOL bWatchSubtree, win32::Windows::Win32::Storage::FileSystem::FILE_NOTIFY_CHANGE dwNotifyFilter, uint32_t* lpBytesReturned, win32::Windows::Win32::System::IO::OVERLAPPED* lpOverlapped, win32::Windows::Win32::System::IO::LPOVERLAPPED_COMPLETION_ROUTINE* lpCompletionRoutine, win32::Windows::Win32::Storage::FileSystem::READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDirectory);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nBufferLength);
        ORBIT_TRACK_PARAM(bWatchSubtree);
        ORBIT_TRACK_PARAM(dwNotifyFilter);
        ORBIT_TRACK_PARAM(lpBytesReturned);
        ORBIT_TRACK_PARAM(lpOverlapped);
        ORBIT_TRACK_PARAM(lpCompletionRoutine);
        ORBIT_TRACK_PARAM(ReadDirectoryNotifyInformationClass);

        auto win32_impl_result = g_api_table.ReadDirectoryChangesExW(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine, ReadDirectoryNotifyInformationClass);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindVolumeHandle __stdcall ORBIT_IMPL_FindFirstVolumeA(win32::Windows::Win32::Foundation::PSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindFirstVolumeA(lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextVolumeA(win32::Windows::Win32::Storage::FileSystem::FindVolumeHandle hFindVolume, win32::Windows::Win32::Foundation::PSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindVolume);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindNextVolumeA(hFindVolume, lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindVolumeMointPointHandle __stdcall ORBIT_IMPL_FindFirstVolumeMountPointA(win32::Windows::Win32::Foundation::PSTR lpszRootPathName, win32::Windows::Win32::Foundation::PSTR lpszVolumeMountPoint, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszRootPathName);
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindFirstVolumeMountPointA(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Storage::FileSystem::FindVolumeMointPointHandle __stdcall ORBIT_IMPL_FindFirstVolumeMountPointW(win32::Windows::Win32::Foundation::PWSTR lpszRootPathName, win32::Windows::Win32::Foundation::PWSTR lpszVolumeMountPoint, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszRootPathName);
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindFirstVolumeMountPointW(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextVolumeMountPointA(win32::Windows::Win32::Storage::FileSystem::FindVolumeMointPointHandle hFindVolumeMountPoint, win32::Windows::Win32::Foundation::PSTR lpszVolumeMountPoint, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindNextVolumeMountPointA(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindNextVolumeMountPointW(win32::Windows::Win32::Storage::FileSystem::FindVolumeMointPointHandle hFindVolumeMountPoint, win32::Windows::Win32::Foundation::PWSTR lpszVolumeMountPoint, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.FindNextVolumeMountPointW(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FindVolumeMountPointClose(win32::Windows::Win32::Storage::FileSystem::FindVolumeMointPointHandle hFindVolumeMountPoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFindVolumeMountPoint);

        auto win32_impl_result = g_api_table.FindVolumeMountPointClose(hFindVolumeMountPoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetVolumeMountPointA(win32::Windows::Win32::Foundation::PSTR lpszVolumeMountPoint, win32::Windows::Win32::Foundation::PSTR lpszVolumeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeName);

        auto win32_impl_result = g_api_table.SetVolumeMountPointA(lpszVolumeMountPoint, lpszVolumeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetVolumeMountPointW(win32::Windows::Win32::Foundation::PWSTR lpszVolumeMountPoint, win32::Windows::Win32::Foundation::PWSTR lpszVolumeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeName);

        auto win32_impl_result = g_api_table.SetVolumeMountPointW(lpszVolumeMountPoint, lpszVolumeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteVolumeMountPointA(win32::Windows::Win32::Foundation::PSTR lpszVolumeMountPoint) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);

        auto win32_impl_result = g_api_table.DeleteVolumeMountPointA(lpszVolumeMountPoint);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumeNameForVolumeMountPointA(win32::Windows::Win32::Foundation::PSTR lpszVolumeMountPoint, win32::Windows::Win32::Foundation::PSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumePathNameA(win32::Windows::Win32::Foundation::PSTR lpszFileName, win32::Windows::Win32::Foundation::PSTR lpszVolumePathName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszFileName);
        ORBIT_TRACK_PARAM(lpszVolumePathName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.GetVolumePathNameA(lpszFileName, lpszVolumePathName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetVolumePathNamesForVolumeNameA(win32::Windows::Win32::Foundation::PSTR lpszVolumeName, win32::Windows::Win32::Foundation::PSTR lpszVolumePathNames, uint32_t cchBufferLength, uint32_t* lpcchReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(lpszVolumePathNames);
        ORBIT_TRACK_PARAM(cchBufferLength);
        ORBIT_TRACK_PARAM(lpcchReturnLength);

        auto win32_impl_result = g_api_table.GetVolumePathNamesForVolumeNameA(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetFileInformationByHandleEx(win32::Windows::Win32::Foundation::HANDLE hFile, win32::Windows::Win32::Storage::FileSystem::FILE_INFO_BY_HANDLE_CLASS FileInformationClass, void* lpFileInformation, uint32_t dwBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(FileInformationClass);
        ORBIT_TRACK_PARAM(lpFileInformation);
        ORBIT_TRACK_PARAM(dwBufferSize);

        auto win32_impl_result = g_api_table.GetFileInformationByHandleEx(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenFileById(win32::Windows::Win32::Foundation::HANDLE hVolumeHint, win32::Windows::Win32::Storage::FileSystem::FILE_ID_DESCRIPTOR* lpFileId, win32::Windows::Win32::Storage::FileSystem::FILE_ACCESS_FLAGS dwDesiredAccess, win32::Windows::Win32::Storage::FileSystem::FILE_SHARE_MODE dwShareMode, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::Storage::FileSystem::FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hVolumeHint);
        ORBIT_TRACK_PARAM(lpFileId);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(dwShareMode);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(dwFlagsAndAttributes);

        auto win32_impl_result = g_api_table.OpenFileById(hVolumeHint, lpFileId, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlagsAndAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_CreateSymbolicLinkA(win32::Windows::Win32::Foundation::PSTR lpSymlinkFileName, win32::Windows::Win32::Foundation::PSTR lpTargetFileName, win32::Windows::Win32::Storage::FileSystem::SYMBOLIC_LINK_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSymlinkFileName);
        ORBIT_TRACK_PARAM(lpTargetFileName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CreateSymbolicLinkA(lpSymlinkFileName, lpTargetFileName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_CreateSymbolicLinkW(win32::Windows::Win32::Foundation::PWSTR lpSymlinkFileName, win32::Windows::Win32::Foundation::PWSTR lpTargetFileName, win32::Windows::Win32::Storage::FileSystem::SYMBOLIC_LINK_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSymlinkFileName);
        ORBIT_TRACK_PARAM(lpTargetFileName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CreateSymbolicLinkW(lpSymlinkFileName, lpTargetFileName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_CreateSymbolicLinkTransactedA(win32::Windows::Win32::Foundation::PSTR lpSymlinkFileName, win32::Windows::Win32::Foundation::PSTR lpTargetFileName, win32::Windows::Win32::Storage::FileSystem::SYMBOLIC_LINK_FLAGS dwFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSymlinkFileName);
        ORBIT_TRACK_PARAM(lpTargetFileName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CreateSymbolicLinkTransactedA(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_CreateSymbolicLinkTransactedW(win32::Windows::Win32::Foundation::PWSTR lpSymlinkFileName, win32::Windows::Win32::Foundation::PWSTR lpTargetFileName, win32::Windows::Win32::Storage::FileSystem::SYMBOLIC_LINK_FLAGS dwFlags, win32::Windows::Win32::Foundation::HANDLE hTransaction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSymlinkFileName);
        ORBIT_TRACK_PARAM(lpTargetFileName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hTransaction);

        auto win32_impl_result = g_api_table.CreateSymbolicLinkTransactedW(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
