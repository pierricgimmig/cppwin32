// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_0_H
#define WIN32_Windows_Win32_Security_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct NTSTATUS;
}
WIN32_EXPORT namespace win32::Windows::Win32::Security
{
#pragma region enums
    enum class ACE_FLAGS : uint32_t
    {
        CONTAINER_INHERIT_ACE = 0x2,
        FAILED_ACCESS_ACE_FLAG = 0x80,
        INHERIT_ONLY_ACE = 0x8,
        INHERITED_ACE = 0x10,
        NO_PROPAGATE_INHERIT_ACE = 0x4,
        OBJECT_INHERIT_ACE = 0x1,
        SUCCESSFUL_ACCESS_ACE_FLAG = 0x40,
        SUB_CONTAINERS_AND_OBJECTS_INHERIT = 0x3,
        SUB_CONTAINERS_ONLY_INHERIT = 0x2,
        SUB_OBJECTS_ONLY_INHERIT = 0x1,
        INHERIT_NO_PROPAGATE = 0x4,
        INHERIT_ONLY = 0x8,
        NO_INHERITANCE = 0x0,
        INHERIT_ONLY_ACE_ = 0x8,
    };
    enum class ACE_REVISION : uint32_t
    {
        ACL_REVISION = 0x2,
        ACL_REVISION_DS = 0x4,
    };
    enum class ACL_INFORMATION_CLASS : int32_t
    {
        AclRevisionInformation = 1,
        AclSizeInformation = 2,
    };
    enum class AUDIT_EVENT_TYPE : int32_t
    {
        AuditEventObjectAccess = 0,
        AuditEventDirectoryServiceAccess = 1,
    };
    enum class CLAIM_SECURITY_ATTRIBUTE_FLAGS : uint32_t
    {
        CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = 0x1,
        CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 0x2,
        CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = 0x4,
        CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = 0x8,
        CLAIM_SECURITY_ATTRIBUTE_DISABLED = 0x10,
        CLAIM_SECURITY_ATTRIBUTE_MANDATORY = 0x20,
    };
    enum class CLAIM_SECURITY_ATTRIBUTE_VALUE_TYPE : uint16_t
    {
        CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = 0x1,
        CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = 0x2,
        CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = 0x3,
        CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 0x10,
        CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = 0x4,
        CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = 0x5,
        CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 0x6,
    };
    enum class CREATE_RESTRICTED_TOKEN_FLAGS : uint32_t
    {
        DISABLE_MAX_PRIVILEGE = 0x1,
        SANDBOX_INERT = 0x2,
        LUA_TOKEN = 0x4,
        WRITE_RESTRICTED = 0x8,
    };
    enum class ENUM_PERIOD : int32_t
    {
        ENUM_PERIOD_INVALID = -1,
        ENUM_PERIOD_SECONDS = 0,
        ENUM_PERIOD_MINUTES = 1,
        ENUM_PERIOD_HOURS = 2,
        ENUM_PERIOD_DAYS = 3,
        ENUM_PERIOD_WEEKS = 4,
        ENUM_PERIOD_MONTHS = 5,
        ENUM_PERIOD_YEARS = 6,
    };
    enum class LOGON32_LOGON : uint32_t
    {
        LOGON32_LOGON_BATCH = 0x4,
        LOGON32_LOGON_INTERACTIVE = 0x2,
        LOGON32_LOGON_NETWORK = 0x3,
        LOGON32_LOGON_NETWORK_CLEARTEXT = 0x8,
        LOGON32_LOGON_NEW_CREDENTIALS = 0x9,
        LOGON32_LOGON_SERVICE = 0x5,
        LOGON32_LOGON_UNLOCK = 0x7,
    };
    enum class LOGON32_PROVIDER : uint32_t
    {
        LOGON32_PROVIDER_DEFAULT = 0x0,
        LOGON32_PROVIDER_WINNT50 = 0x3,
        LOGON32_PROVIDER_WINNT40 = 0x2,
    };
    enum class MANDATORY_LEVEL : int32_t
    {
        MandatoryLevelUntrusted = 0,
        MandatoryLevelLow = 1,
        MandatoryLevelMedium = 2,
        MandatoryLevelHigh = 3,
        MandatoryLevelSystem = 4,
        MandatoryLevelSecureProcess = 5,
        MandatoryLevelCount = 6,
    };
    enum class OBJECT_SECURITY_INFORMATION : uint32_t
    {
        ATTRIBUTE_SECURITY_INFORMATION = 0x20,
        BACKUP_SECURITY_INFORMATION = 0x10000,
        DACL_SECURITY_INFORMATION = 0x4,
        GROUP_SECURITY_INFORMATION = 0x2,
        LABEL_SECURITY_INFORMATION = 0x10,
        OWNER_SECURITY_INFORMATION = 0x1,
        PROTECTED_DACL_SECURITY_INFORMATION = 0x80000000,
        PROTECTED_SACL_SECURITY_INFORMATION = 0x40000000,
        SACL_SECURITY_INFORMATION = 0x8,
        SCOPE_SECURITY_INFORMATION = 0x40,
        UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000,
        UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000,
    };
    enum class SECURITY_AUTO_INHERIT_FLAGS : uint32_t
    {
        SEF_AVOID_OWNER_CHECK = 0x10,
        SEF_AVOID_OWNER_RESTRICTION = 0x1000,
        SEF_AVOID_PRIVILEGE_CHECK = 0x8,
        SEF_DACL_AUTO_INHERIT = 0x1,
        SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 0x4,
        SEF_DEFAULT_GROUP_FROM_PARENT = 0x40,
        SEF_DEFAULT_OWNER_FROM_PARENT = 0x20,
        SEF_MACL_NO_EXECUTE_UP = 0x400,
        SEF_MACL_NO_READ_UP = 0x200,
        SEF_MACL_NO_WRITE_UP = 0x100,
        SEF_SACL_AUTO_INHERIT = 0x2,
    };
    enum class SECURITY_IMPERSONATION_LEVEL : int32_t
    {
        SecurityAnonymous = 0,
        SecurityIdentification = 1,
        SecurityImpersonation = 2,
        SecurityDelegation = 3,
    };
    enum class SID_NAME_USE : int32_t
    {
        SidTypeUser = 1,
        SidTypeGroup = 2,
        SidTypeDomain = 3,
        SidTypeAlias = 4,
        SidTypeWellKnownGroup = 5,
        SidTypeDeletedAccount = 6,
        SidTypeInvalid = 7,
        SidTypeUnknown = 8,
        SidTypeComputer = 9,
        SidTypeLabel = 10,
        SidTypeLogonSession = 11,
    };
    enum class SYSTEM_AUDIT_OBJECT_ACE_FLAGS : uint32_t
    {
        ACE_OBJECT_TYPE_PRESENT = 0x1,
        ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2,
    };
    enum class TOKEN_ACCESS_MASK : uint32_t
    {
        TOKEN_DELETE = 0x10000,
        TOKEN_READ_CONTROL = 0x20000,
        TOKEN_WRITE_DAC = 0x40000,
        TOKEN_WRITE_OWNER = 0x80000,
        TOKEN_ACCESS_SYSTEM_SECURITY = 0x1000000,
        TOKEN_ASSIGN_PRIMARY = 0x1,
        TOKEN_DUPLICATE = 0x2,
        TOKEN_IMPERSONATE = 0x4,
        TOKEN_QUERY = 0x8,
        TOKEN_QUERY_SOURCE = 0x10,
        TOKEN_ADJUST_PRIVILEGES = 0x20,
        TOKEN_ADJUST_GROUPS = 0x40,
        TOKEN_ADJUST_DEFAULT = 0x80,
        TOKEN_ADJUST_SESSIONID = 0x100,
        TOKEN_ALL_ACCESS = 0xf00ff,
    };
    enum class TOKEN_ELEVATION_TYPE : int32_t
    {
        TokenElevationTypeDefault = 1,
        TokenElevationTypeFull = 2,
        TokenElevationTypeLimited = 3,
    };
    enum class TOKEN_INFORMATION_CLASS : int32_t
    {
        TokenUser = 1,
        TokenGroups = 2,
        TokenPrivileges = 3,
        TokenOwner = 4,
        TokenPrimaryGroup = 5,
        TokenDefaultDacl = 6,
        TokenSource = 7,
        TokenType = 8,
        TokenImpersonationLevel = 9,
        TokenStatistics = 10,
        TokenRestrictedSids = 11,
        TokenSessionId = 12,
        TokenGroupsAndPrivileges = 13,
        TokenSessionReference = 14,
        TokenSandBoxInert = 15,
        TokenAuditPolicy = 16,
        TokenOrigin = 17,
        TokenElevationType = 18,
        TokenLinkedToken = 19,
        TokenElevation = 20,
        TokenHasRestrictions = 21,
        TokenAccessInformation = 22,
        TokenVirtualizationAllowed = 23,
        TokenVirtualizationEnabled = 24,
        TokenIntegrityLevel = 25,
        TokenUIAccess = 26,
        TokenMandatoryPolicy = 27,
        TokenLogonSid = 28,
        TokenIsAppContainer = 29,
        TokenCapabilities = 30,
        TokenAppContainerSid = 31,
        TokenAppContainerNumber = 32,
        TokenUserClaimAttributes = 33,
        TokenDeviceClaimAttributes = 34,
        TokenRestrictedUserClaimAttributes = 35,
        TokenRestrictedDeviceClaimAttributes = 36,
        TokenDeviceGroups = 37,
        TokenRestrictedDeviceGroups = 38,
        TokenSecurityAttributes = 39,
        TokenIsRestricted = 40,
        TokenProcessTrustLevel = 41,
        TokenPrivateNameSpace = 42,
        TokenSingletonAttributes = 43,
        TokenBnoIsolation = 44,
        TokenChildProcessFlags = 45,
        TokenIsLessPrivilegedAppContainer = 46,
        TokenIsSandboxed = 47,
        MaxTokenInfoClass = 48,
    };
    enum class TOKEN_MANDATORY_POLICY_ID : uint32_t
    {
        TOKEN_MANDATORY_POLICY_OFF = 0x0,
        TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 0x1,
        TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 0x2,
        TOKEN_MANDATORY_POLICY_VALID_MASK = 0x3,
    };
    enum class TOKEN_PRIVILEGES_ATTRIBUTES : uint32_t
    {
        SE_PRIVILEGE_ENABLED = 0x2,
        SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1,
        SE_PRIVILEGE_REMOVED = 0x4,
        SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000,
    };
    enum class TOKEN_TYPE : int32_t
    {
        TokenPrimary = 1,
        TokenImpersonation = 2,
    };
    enum class WELL_KNOWN_SID_TYPE : int32_t
    {
        WinNullSid = 0,
        WinWorldSid = 1,
        WinLocalSid = 2,
        WinCreatorOwnerSid = 3,
        WinCreatorGroupSid = 4,
        WinCreatorOwnerServerSid = 5,
        WinCreatorGroupServerSid = 6,
        WinNtAuthoritySid = 7,
        WinDialupSid = 8,
        WinNetworkSid = 9,
        WinBatchSid = 10,
        WinInteractiveSid = 11,
        WinServiceSid = 12,
        WinAnonymousSid = 13,
        WinProxySid = 14,
        WinEnterpriseControllersSid = 15,
        WinSelfSid = 16,
        WinAuthenticatedUserSid = 17,
        WinRestrictedCodeSid = 18,
        WinTerminalServerSid = 19,
        WinRemoteLogonIdSid = 20,
        WinLogonIdsSid = 21,
        WinLocalSystemSid = 22,
        WinLocalServiceSid = 23,
        WinNetworkServiceSid = 24,
        WinBuiltinDomainSid = 25,
        WinBuiltinAdministratorsSid = 26,
        WinBuiltinUsersSid = 27,
        WinBuiltinGuestsSid = 28,
        WinBuiltinPowerUsersSid = 29,
        WinBuiltinAccountOperatorsSid = 30,
        WinBuiltinSystemOperatorsSid = 31,
        WinBuiltinPrintOperatorsSid = 32,
        WinBuiltinBackupOperatorsSid = 33,
        WinBuiltinReplicatorSid = 34,
        WinBuiltinPreWindows2000CompatibleAccessSid = 35,
        WinBuiltinRemoteDesktopUsersSid = 36,
        WinBuiltinNetworkConfigurationOperatorsSid = 37,
        WinAccountAdministratorSid = 38,
        WinAccountGuestSid = 39,
        WinAccountKrbtgtSid = 40,
        WinAccountDomainAdminsSid = 41,
        WinAccountDomainUsersSid = 42,
        WinAccountDomainGuestsSid = 43,
        WinAccountComputersSid = 44,
        WinAccountControllersSid = 45,
        WinAccountCertAdminsSid = 46,
        WinAccountSchemaAdminsSid = 47,
        WinAccountEnterpriseAdminsSid = 48,
        WinAccountPolicyAdminsSid = 49,
        WinAccountRasAndIasServersSid = 50,
        WinNTLMAuthenticationSid = 51,
        WinDigestAuthenticationSid = 52,
        WinSChannelAuthenticationSid = 53,
        WinThisOrganizationSid = 54,
        WinOtherOrganizationSid = 55,
        WinBuiltinIncomingForestTrustBuildersSid = 56,
        WinBuiltinPerfMonitoringUsersSid = 57,
        WinBuiltinPerfLoggingUsersSid = 58,
        WinBuiltinAuthorizationAccessSid = 59,
        WinBuiltinTerminalServerLicenseServersSid = 60,
        WinBuiltinDCOMUsersSid = 61,
        WinBuiltinIUsersSid = 62,
        WinIUserSid = 63,
        WinBuiltinCryptoOperatorsSid = 64,
        WinUntrustedLabelSid = 65,
        WinLowLabelSid = 66,
        WinMediumLabelSid = 67,
        WinHighLabelSid = 68,
        WinSystemLabelSid = 69,
        WinWriteRestrictedCodeSid = 70,
        WinCreatorOwnerRightsSid = 71,
        WinCacheablePrincipalsGroupSid = 72,
        WinNonCacheablePrincipalsGroupSid = 73,
        WinEnterpriseReadonlyControllersSid = 74,
        WinAccountReadonlyControllersSid = 75,
        WinBuiltinEventLogReadersGroup = 76,
        WinNewEnterpriseReadonlyControllersSid = 77,
        WinBuiltinCertSvcDComAccessGroup = 78,
        WinMediumPlusLabelSid = 79,
        WinLocalLogonSid = 80,
        WinConsoleLogonSid = 81,
        WinThisOrganizationCertificateSid = 82,
        WinApplicationPackageAuthoritySid = 83,
        WinBuiltinAnyPackageSid = 84,
        WinCapabilityInternetClientSid = 85,
        WinCapabilityInternetClientServerSid = 86,
        WinCapabilityPrivateNetworkClientServerSid = 87,
        WinCapabilityPicturesLibrarySid = 88,
        WinCapabilityVideosLibrarySid = 89,
        WinCapabilityMusicLibrarySid = 90,
        WinCapabilityDocumentsLibrarySid = 91,
        WinCapabilitySharedUserCertificatesSid = 92,
        WinCapabilityEnterpriseAuthenticationSid = 93,
        WinCapabilityRemovableStorageSid = 94,
        WinBuiltinRDSRemoteAccessServersSid = 95,
        WinBuiltinRDSEndpointServersSid = 96,
        WinBuiltinRDSManagementServersSid = 97,
        WinUserModeDriversSid = 98,
        WinBuiltinHyperVAdminsSid = 99,
        WinAccountCloneableControllersSid = 100,
        WinBuiltinAccessControlAssistanceOperatorsSid = 101,
        WinBuiltinRemoteManagementUsersSid = 102,
        WinAuthenticationAuthorityAssertedSid = 103,
        WinAuthenticationServiceAssertedSid = 104,
        WinLocalAccountSid = 105,
        WinLocalAccountAndAdministratorSid = 106,
        WinAccountProtectedUsersSid = 107,
        WinCapabilityAppointmentsSid = 108,
        WinCapabilityContactsSid = 109,
        WinAccountDefaultSystemManagedSid = 110,
        WinBuiltinDefaultSystemManagedGroupSid = 111,
        WinBuiltinStorageReplicaAdminsSid = 112,
        WinAccountKeyAdminsSid = 113,
        WinAccountEnterpriseKeyAdminsSid = 114,
        WinAuthenticationKeyTrustSid = 115,
        WinAuthenticationKeyPropertyMFASid = 116,
        WinAuthenticationKeyPropertyAttestationSid = 117,
        WinAuthenticationFreshKeyAuthSid = 118,
        WinBuiltinDeviceOwnersSid = 119,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACCESS_ALLOWED_ACE;
    struct ACCESS_ALLOWED_CALLBACK_ACE;
    struct ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
    struct ACCESS_ALLOWED_OBJECT_ACE;
    struct ACCESS_DENIED_ACE;
    struct ACCESS_DENIED_CALLBACK_ACE;
    struct ACCESS_DENIED_CALLBACK_OBJECT_ACE;
    struct ACCESS_DENIED_OBJECT_ACE;
    struct ACE_HEADER;
    struct ACL;
    struct ACL_REVISION_INFORMATION;
    struct ACL_SIZE_INFORMATION;
    struct CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
    struct CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
    struct CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
    struct CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
    struct CLAIM_SECURITY_ATTRIBUTE_V1;
    struct GENERIC_MAPPING;
    struct HDIAGNOSTIC_DATA_QUERY_SESSION;
    struct HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION;
    struct HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION;
    struct HDIAGNOSTIC_EVENT_TAG_DESCRIPTION;
    struct HDIAGNOSTIC_RECORD;
    struct HDIAGNOSTIC_REPORT;
    struct LLFILETIME;
    struct LUID_AND_ATTRIBUTES;
    struct NCRYPT_DESCRIPTOR_HANDLE;
    struct NCRYPT_STREAM_HANDLE;
    struct OBJECT_TYPE_LIST;
    struct PRIVILEGE_SET;
    struct QUOTA_LIMITS;
    struct SAFER_LEVEL_HANDLE;
    struct SC_HANDLE;
    struct SECURITY_ATTRIBUTES;
    struct SECURITY_CAPABILITIES;
    struct SECURITY_DESCRIPTOR;
    struct SECURITY_QUALITY_OF_SERVICE;
    struct SID;
    struct SID_AND_ATTRIBUTES;
    struct SID_AND_ATTRIBUTES_HASH;
    struct SID_IDENTIFIER_AUTHORITY;
    struct SYSTEM_ALARM_ACE;
    struct SYSTEM_ALARM_CALLBACK_ACE;
    struct SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
    struct SYSTEM_ALARM_OBJECT_ACE;
    struct SYSTEM_AUDIT_ACE;
    struct SYSTEM_AUDIT_CALLBACK_ACE;
    struct SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
    struct SYSTEM_AUDIT_OBJECT_ACE;
    struct SYSTEM_MANDATORY_LABEL_ACE;
    struct SYSTEM_RESOURCE_ATTRIBUTE_ACE;
    struct SYSTEM_SCOPED_POLICY_ID_ACE;
    struct TOKEN_ACCESS_INFORMATION;
    struct TOKEN_APPCONTAINER_INFORMATION;
    struct TOKEN_AUDIT_POLICY;
    struct TOKEN_CONTROL;
    struct TOKEN_DEFAULT_DACL;
    struct TOKEN_DEVICE_CLAIMS;
    struct TOKEN_ELEVATION;
    struct TOKEN_GROUPS;
    struct TOKEN_GROUPS_AND_PRIVILEGES;
    struct TOKEN_LINKED_TOKEN;
    struct TOKEN_MANDATORY_LABEL;
    struct TOKEN_MANDATORY_POLICY;
    struct TOKEN_ORIGIN;
    struct TOKEN_OWNER;
    struct TOKEN_PRIMARY_GROUP;
    struct TOKEN_PRIVILEGES;
    struct TOKEN_SOURCE;
    struct TOKEN_STATISTICS;
    struct TOKEN_USER;
    struct TOKEN_USER_CLAIMS;
#pragma endregion forward_declarations

#pragma region delegates
    using PLSA_AP_CALL_PACKAGE_UNTRUSTED = Windows::Win32::Foundation::NTSTATUS __stdcall(void**, void*, void*, uint32_t, void**, uint32_t*, int32_t*);
    using SEC_THREAD_START = uint32_t __stdcall(void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
