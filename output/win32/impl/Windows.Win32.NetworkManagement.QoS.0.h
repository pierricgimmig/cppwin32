// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_QoS_0_H
#define WIN32_Windows_Win32_NetworkManagement_QoS_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct HANDLE;
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::QoS
{
#pragma region enums
    enum class FilterType : int32_t
    {
        FILTERSPECV4 = 1,
        FILTERSPECV6 = 2,
        FILTERSPECV6_FLOW = 3,
        FILTERSPECV4_GPI = 4,
        FILTERSPECV6_GPI = 5,
        FILTERSPEC_END = 6,
    };
    enum class QOS_FLOWRATE_REASON : int32_t
    {
        QOSFlowRateNotApplicable = 0,
        QOSFlowRateContentChange = 1,
        QOSFlowRateCongestion = 2,
        QOSFlowRateHigherContentEncoding = 3,
        QOSFlowRateUserCaused = 4,
    };
    enum class QOS_NOTIFY_FLOW : int32_t
    {
        QOSNotifyCongested = 0,
        QOSNotifyUncongested = 1,
        QOSNotifyAvailable = 2,
    };
    enum class QOS_QUERY_FLOW : int32_t
    {
        QOSQueryFlowFundamentals = 0,
        QOSQueryPacketPriority = 1,
        QOSQueryOutgoingRate = 2,
    };
    enum class QOS_SET_FLOW : int32_t
    {
        QOSSetTrafficType = 0,
        QOSSetOutgoingRate = 1,
        QOSSetOutgoingDSCPValue = 2,
    };
    enum class QOS_SHAPING : int32_t
    {
        QOSShapeOnly = 0,
        QOSShapeAndMark = 1,
        QOSUseNonConformantMarkings = 2,
    };
    enum class QOS_TRAFFIC_TYPE : int32_t
    {
        QOSTrafficTypeBestEffort = 0,
        QOSTrafficTypeBackground = 1,
        QOSTrafficTypeExcellentEffort = 2,
        QOSTrafficTypeAudioVideo = 3,
        QOSTrafficTypeVoice = 4,
        QOSTrafficTypeControl = 5,
    };
    enum class int_serv_wkp : int32_t
    {
        IS_WKP_HOP_CNT = 4,
        IS_WKP_PATH_BW = 6,
        IS_WKP_MIN_LATENCY = 8,
        IS_WKP_COMPOSED_MTU = 10,
        IS_WKP_TB_TSPEC = 127,
        IS_WKP_Q_TSPEC = 128,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ADDRESS_LIST_DESCRIPTOR;
    struct ADSPEC;
    struct AD_GENERAL_PARAMS;
    struct AD_GUARANTEED;
    struct CONTROL_SERVICE;
    struct CtrlLoadFlowspec;
    struct ENUMERATION_BUFFER;
    struct ERROR_SPEC;
    struct Error_Spec_IPv4;
    struct FILTER_SPEC;
    struct FLOWDESCRIPTOR;
    struct FLOWSPEC;
    struct Filter_Spec_IPv4;
    struct Filter_Spec_IPv4GPI;
    struct Gads_parms_t;
    struct GenAdspecParams;
    struct GenTspec;
    struct GenTspecParms;
    struct GuarFlowSpec;
    struct GuarRspec;
    struct IDPE_ATTR;
    struct ID_ERROR_OBJECT;
    union IN_ADDR_IPV4;
    struct IN_ADDR_IPV6;
    struct IPX_PATTERN;
    struct IP_PATTERN;
    struct IS_ADSPEC_BODY;
    struct IS_FLOWSPEC;
    struct IntServFlowSpec;
    struct IntServMainHdr;
    struct IntServParmHdr;
    struct IntServServiceHdr;
    struct IntServTspecBody;
    struct LPM_HANDLE;
    struct LPM_INIT_INFO;
    struct PARAM_BUFFER;
    struct POLICY_DATA;
    struct POLICY_ELEMENT;
    struct QOS;
    struct QOS_DESTADDR;
    struct QOS_DIFFSERV;
    struct QOS_DIFFSERV_RULE;
    struct QOS_DS_CLASS;
    struct QOS_FLOWRATE_OUTGOING;
    struct QOS_FLOW_FUNDAMENTALS;
    struct QOS_FRIENDLY_NAME;
    struct QOS_OBJECT_HDR;
    struct QOS_PACKET_PRIORITY;
    struct QOS_SD_MODE;
    struct QOS_SHAPING_RATE;
    struct QOS_TCP_TRAFFIC;
    struct QOS_TRAFFIC_CLASS;
    struct QOS_VERSION;
    struct QualAppFlowSpec;
    struct QualTspec;
    struct QualTspecParms;
    struct RESV_STYLE;
    struct RHANDLE;
    struct RSVP_ADSPEC;
    struct RSVP_FILTERSPEC;
    struct RSVP_FILTERSPEC_V4;
    struct RSVP_FILTERSPEC_V4_GPI;
    struct RSVP_FILTERSPEC_V6;
    struct RSVP_FILTERSPEC_V6_FLOW;
    struct RSVP_FILTERSPEC_V6_GPI;
    struct RSVP_HOP;
    struct RSVP_MSG_OBJS;
    struct RSVP_POLICY;
    struct RSVP_POLICY_INFO;
    struct RSVP_RESERVE_INFO;
    struct RSVP_SCOPE;
    struct RSVP_SESSION;
    struct RSVP_STATUS_INFO;
    struct RsvpObjHdr;
    struct Rsvp_Hop_IPv4;
    struct SENDER_TSPEC;
    struct Scope_list_ipv4;
    struct Session_IPv4;
    struct TCG_PCClientPCREventStruct;
    struct TCG_PCClientTaggedEventStruct;
    struct TCI_CLIENT_FUNC_LIST;
    struct TC_GEN_FILTER;
    struct TC_GEN_FLOW;
    struct TC_IFC_DESCRIPTOR;
    struct TC_SUPPORTED_INFO_BUFFER;
    struct WBCL_Iterator;
    struct WBCL_LogHdr;
    struct flow_desc;
    struct lpmiptable;
    struct policy_decision;
    struct tag_SIPAEVENT_KSR_SIGNATURE_PAYLOAD;
    struct tag_SIPAEVENT_REVOCATION_LIST_PAYLOAD;
    struct tag_SIPAEVENT_SBCP_INFO_PAYLOAD_V1;
    struct tag_SIPAEVENT_SI_POLICY_PAYLOAD;
    struct tag_SIPAEVENT_VSM_IDK_INFO_PAYLOAD;
    struct tag_SIPAEVENT_VSM_IDK_RSA_INFO;
#pragma endregion forward_declarations

#pragma region delegates
    using PALLOCMEM = void* __stdcall(uint32_t);
    using PFREEMEM = void __stdcall(void*);
    using CBADMITRESULT = uint32_t* __stdcall(Windows::Win32::NetworkManagement::QoS::LPM_HANDLE, Windows::Win32::NetworkManagement::QoS::RHANDLE, uint32_t, int32_t, int32_t, Windows::Win32::NetworkManagement::QoS::policy_decision*);
    using CBGETRSVPOBJECTS = uint32_t* __stdcall(Windows::Win32::NetworkManagement::QoS::LPM_HANDLE, Windows::Win32::NetworkManagement::QoS::RHANDLE, int32_t, int32_t, Windows::Win32::NetworkManagement::QoS::RsvpObjHdr**);
    using TCI_NOTIFY_HANDLER = void __stdcall(Windows::Win32::Foundation::HANDLE, Windows::Win32::Foundation::HANDLE, uint32_t, Windows::Win32::Foundation::HANDLE, uint32_t, void*);
    using TCI_ADD_FLOW_COMPLETE_HANDLER = void __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
    using TCI_MOD_FLOW_COMPLETE_HANDLER = void __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
    using TCI_DEL_FLOW_COMPLETE_HANDLER = void __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
