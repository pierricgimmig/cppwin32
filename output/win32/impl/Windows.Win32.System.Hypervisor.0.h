// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Hypervisor_0_H
#define WIN32_Windows_Win32_System_Hypervisor_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HRESULT;
    struct PSTR;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Hypervisor
{
#pragma region enums
    enum class GUEST_OS_MICROSOFT_IDS : int32_t
    {
        GuestOsMicrosoftUndefined = 0,
        GuestOsMicrosoftMSDOS = 1,
        GuestOsMicrosoftWindows3x = 2,
        GuestOsMicrosoftWindows9x = 3,
        GuestOsMicrosoftWindowsNT = 4,
        GuestOsMicrosoftWindowsCE = 5,
    };
    enum class GUEST_OS_OPENSOURCE_IDS : int32_t
    {
        GuestOsOpenSourceUndefined = 0,
        GuestOsOpenSourceLinux = 1,
        GuestOsOpenSourceFreeBSD = 2,
        GuestOsOpenSourceXen = 3,
        GuestOsOpenSourceIllumos = 4,
    };
    enum class GUEST_OS_VENDOR : int32_t
    {
        GuestOsVendorUndefined = 0,
        GuestOsVendorMicrosoft = 1,
        GuestOsVendorHPE = 2,
        GuestOsVendorLANCOM = 512,
    };
    enum class HDV_DEVICE_TYPE : int32_t
    {
        HdvDeviceTypeUndefined = 0,
        HdvDeviceTypePCI = 1,
    };
    enum class HDV_DOORBELL_FLAGS : int32_t
    {
        HDV_DOORBELL_FLAG_TRIGGER_SIZE_ANY = 0,
        HDV_DOORBELL_FLAG_TRIGGER_SIZE_BYTE = 1,
        HDV_DOORBELL_FLAG_TRIGGER_SIZE_WORD = 2,
        HDV_DOORBELL_FLAG_TRIGGER_SIZE_DWORD = 3,
        HDV_DOORBELL_FLAG_TRIGGER_SIZE_QWORD = 4,
        HDV_DOORBELL_FLAG_TRIGGER_ANY_VALUE = -2147483648,
    };
    enum class HDV_MMIO_MAPPING_FLAGS : uint32_t
    {
        HdvMmioMappingFlagNone = 0x0,
        HdvMmioMappingFlagWriteable = 0x1,
        HdvMmioMappingFlagExecutable = 0x2,
    };
    enum class HDV_PCI_BAR_SELECTOR : int32_t
    {
        HDV_PCI_BAR0 = 0,
        HDV_PCI_BAR1 = 1,
        HDV_PCI_BAR2 = 2,
        HDV_PCI_BAR3 = 3,
        HDV_PCI_BAR4 = 4,
        HDV_PCI_BAR5 = 5,
    };
    enum class HDV_PCI_INTERFACE_VERSION : int32_t
    {
        HdvPciDeviceInterfaceVersionInvalid = 0,
        HdvPciDeviceInterfaceVersion1 = 1,
    };
    enum class PAGING_MODE : int32_t
    {
        Paging_Invalid = 0,
        Paging_NonPaged = 1,
        Paging_32Bit = 2,
        Paging_Pae = 3,
        Paging_Long = 4,
        Paging_Armv8 = 5,
    };
    enum class REGISTER_ID : int32_t
    {
        X64_RegisterRax = 0,
        X64_RegisterRcx = 1,
        X64_RegisterRdx = 2,
        X64_RegisterRbx = 3,
        X64_RegisterRsp = 4,
        X64_RegisterRbp = 5,
        X64_RegisterRsi = 6,
        X64_RegisterRdi = 7,
        X64_RegisterR8 = 8,
        X64_RegisterR9 = 9,
        X64_RegisterR10 = 10,
        X64_RegisterR11 = 11,
        X64_RegisterR12 = 12,
        X64_RegisterR13 = 13,
        X64_RegisterR14 = 14,
        X64_RegisterR15 = 15,
        X64_RegisterRip = 16,
        X64_RegisterRFlags = 17,
        X64_RegisterXmm0 = 18,
        X64_RegisterXmm1 = 19,
        X64_RegisterXmm2 = 20,
        X64_RegisterXmm3 = 21,
        X64_RegisterXmm4 = 22,
        X64_RegisterXmm5 = 23,
        X64_RegisterXmm6 = 24,
        X64_RegisterXmm7 = 25,
        X64_RegisterXmm8 = 26,
        X64_RegisterXmm9 = 27,
        X64_RegisterXmm10 = 28,
        X64_RegisterXmm11 = 29,
        X64_RegisterXmm12 = 30,
        X64_RegisterXmm13 = 31,
        X64_RegisterXmm14 = 32,
        X64_RegisterXmm15 = 33,
        X64_RegisterFpMmx0 = 34,
        X64_RegisterFpMmx1 = 35,
        X64_RegisterFpMmx2 = 36,
        X64_RegisterFpMmx3 = 37,
        X64_RegisterFpMmx4 = 38,
        X64_RegisterFpMmx5 = 39,
        X64_RegisterFpMmx6 = 40,
        X64_RegisterFpMmx7 = 41,
        X64_RegisterFpControlStatus = 42,
        X64_RegisterXmmControlStatus = 43,
        X64_RegisterCr0 = 44,
        X64_RegisterCr2 = 45,
        X64_RegisterCr3 = 46,
        X64_RegisterCr4 = 47,
        X64_RegisterCr8 = 48,
        X64_RegisterEfer = 49,
        X64_RegisterDr0 = 50,
        X64_RegisterDr1 = 51,
        X64_RegisterDr2 = 52,
        X64_RegisterDr3 = 53,
        X64_RegisterDr6 = 54,
        X64_RegisterDr7 = 55,
        X64_RegisterEs = 56,
        X64_RegisterCs = 57,
        X64_RegisterSs = 58,
        X64_RegisterDs = 59,
        X64_RegisterFs = 60,
        X64_RegisterGs = 61,
        X64_RegisterLdtr = 62,
        X64_RegisterTr = 63,
        X64_RegisterIdtr = 64,
        X64_RegisterGdtr = 65,
        X64_RegisterMax = 66,
        ARM64_RegisterX0 = 67,
        ARM64_RegisterX1 = 68,
        ARM64_RegisterX2 = 69,
        ARM64_RegisterX3 = 70,
        ARM64_RegisterX4 = 71,
        ARM64_RegisterX5 = 72,
        ARM64_RegisterX6 = 73,
        ARM64_RegisterX7 = 74,
        ARM64_RegisterX8 = 75,
        ARM64_RegisterX9 = 76,
        ARM64_RegisterX10 = 77,
        ARM64_RegisterX11 = 78,
        ARM64_RegisterX12 = 79,
        ARM64_RegisterX13 = 80,
        ARM64_RegisterX14 = 81,
        ARM64_RegisterX15 = 82,
        ARM64_RegisterX16 = 83,
        ARM64_RegisterX17 = 84,
        ARM64_RegisterX18 = 85,
        ARM64_RegisterX19 = 86,
        ARM64_RegisterX20 = 87,
        ARM64_RegisterX21 = 88,
        ARM64_RegisterX22 = 89,
        ARM64_RegisterX23 = 90,
        ARM64_RegisterX24 = 91,
        ARM64_RegisterX25 = 92,
        ARM64_RegisterX26 = 93,
        ARM64_RegisterX27 = 94,
        ARM64_RegisterX28 = 95,
        ARM64_RegisterXFp = 96,
        ARM64_RegisterXLr = 97,
        ARM64_RegisterPc = 98,
        ARM64_RegisterSpEl0 = 99,
        ARM64_RegisterSpEl1 = 100,
        ARM64_RegisterCpsr = 101,
        ARM64_RegisterQ0 = 102,
        ARM64_RegisterQ1 = 103,
        ARM64_RegisterQ2 = 104,
        ARM64_RegisterQ3 = 105,
        ARM64_RegisterQ4 = 106,
        ARM64_RegisterQ5 = 107,
        ARM64_RegisterQ6 = 108,
        ARM64_RegisterQ7 = 109,
        ARM64_RegisterQ8 = 110,
        ARM64_RegisterQ9 = 111,
        ARM64_RegisterQ10 = 112,
        ARM64_RegisterQ11 = 113,
        ARM64_RegisterQ12 = 114,
        ARM64_RegisterQ13 = 115,
        ARM64_RegisterQ14 = 116,
        ARM64_RegisterQ15 = 117,
        ARM64_RegisterQ16 = 118,
        ARM64_RegisterQ17 = 119,
        ARM64_RegisterQ18 = 120,
        ARM64_RegisterQ19 = 121,
        ARM64_RegisterQ20 = 122,
        ARM64_RegisterQ21 = 123,
        ARM64_RegisterQ22 = 124,
        ARM64_RegisterQ23 = 125,
        ARM64_RegisterQ24 = 126,
        ARM64_RegisterQ25 = 127,
        ARM64_RegisterQ26 = 128,
        ARM64_RegisterQ27 = 129,
        ARM64_RegisterQ28 = 130,
        ARM64_RegisterQ29 = 131,
        ARM64_RegisterQ30 = 132,
        ARM64_RegisterQ31 = 133,
        ARM64_RegisterFpStatus = 134,
        ARM64_RegisterFpControl = 135,
        ARM64_RegisterEsrEl1 = 136,
        ARM64_RegisterSpsrEl1 = 137,
        ARM64_RegisterFarEl1 = 138,
        ARM64_RegisterParEl1 = 139,
        ARM64_RegisterElrEl1 = 140,
        ARM64_RegisterTtbr0El1 = 141,
        ARM64_RegisterTtbr1El1 = 142,
        ARM64_RegisterVbarEl1 = 143,
        ARM64_RegisterSctlrEl1 = 144,
        ARM64_RegisterActlrEl1 = 145,
        ARM64_RegisterTcrEl1 = 146,
        ARM64_RegisterMairEl1 = 147,
        ARM64_RegisterAmairEl1 = 148,
        ARM64_RegisterTpidrEl0 = 149,
        ARM64_RegisterTpidrroEl0 = 150,
        ARM64_RegisterTpidrEl1 = 151,
        ARM64_RegisterContextIdrEl1 = 152,
        ARM64_RegisterCpacrEl1 = 153,
        ARM64_RegisterCsselrEl1 = 154,
        ARM64_RegisterCntkctlEl1 = 155,
        ARM64_RegisterCntvCvalEl0 = 156,
        ARM64_RegisterCntvCtlEl0 = 157,
        ARM64_RegisterMax = 158,
    };
    enum class VIRTUAL_PROCESSOR_ARCH : int32_t
    {
        Arch_Unknown = 0,
        Arch_x86 = 1,
        Arch_x64 = 2,
        Arch_Armv8 = 3,
    };
    enum class VIRTUAL_PROCESSOR_VENDOR : int32_t
    {
        ProcessorVendor_Unknown = 0,
        ProcessorVendor_Amd = 1,
        ProcessorVendor_Intel = 2,
        ProcessorVendor_Hygon = 3,
        ProcessorVendor_Arm = 4,
    };
    enum class WHV_ADVISE_GPA_RANGE_CODE : int32_t
    {
        WHvAdviseGpaRangeCodePopulate = 0,
        WHvAdviseGpaRangeCodePin = 1,
        WHvAdviseGpaRangeCodeUnpin = 2,
    };
    enum class WHV_ALLOCATE_VPCI_RESOURCE_FLAGS : uint32_t
    {
        WHvAllocateVpciResourceFlagNone = 0x0,
        WHvAllocateVpciResourceFlagAllowDirectP2P = 0x1,
    };
    enum class WHV_CACHE_TYPE : int32_t
    {
        WHvCacheTypeUncached = 0,
        WHvCacheTypeWriteCombining = 1,
        WHvCacheTypeWriteThrough = 4,
        WHvCacheTypeWriteProtected = 5,
        WHvCacheTypeWriteBack = 6,
    };
    enum class WHV_CAPABILITY_CODE : int32_t
    {
        WHvCapabilityCodeHypervisorPresent = 0,
        WHvCapabilityCodeFeatures = 1,
        WHvCapabilityCodeExtendedVmExits = 2,
        WHvCapabilityCodeExceptionExitBitmap = 3,
        WHvCapabilityCodeX64MsrExitBitmap = 4,
        WHvCapabilityCodeGpaRangePopulateFlags = 5,
        WHvCapabilityCodeSchedulerFeatures = 6,
        WHvCapabilityCodeProcessorVendor = 4096,
        WHvCapabilityCodeProcessorFeatures = 4097,
        WHvCapabilityCodeProcessorClFlushSize = 4098,
        WHvCapabilityCodeProcessorXsaveFeatures = 4099,
        WHvCapabilityCodeProcessorClockFrequency = 4100,
        WHvCapabilityCodeInterruptClockFrequency = 4101,
        WHvCapabilityCodeProcessorFeaturesBanks = 4102,
        WHvCapabilityCodeProcessorFrequencyCap = 4103,
        WHvCapabilityCodeSyntheticProcessorFeaturesBanks = 4104,
        WHvCapabilityCodeProcessorPerfmonFeatures = 4105,
    };
    enum class WHV_CREATE_VPCI_DEVICE_FLAGS : uint32_t
    {
        WHvCreateVpciDeviceFlagNone = 0x0,
        WHvCreateVpciDeviceFlagPhysicallyBacked = 0x1,
        WHvCreateVpciDeviceFlagUseLogicalInterrupts = 0x2,
    };
    enum class WHV_EXCEPTION_TYPE : int32_t
    {
        WHvX64ExceptionTypeDivideErrorFault = 0,
        WHvX64ExceptionTypeDebugTrapOrFault = 1,
        WHvX64ExceptionTypeBreakpointTrap = 3,
        WHvX64ExceptionTypeOverflowTrap = 4,
        WHvX64ExceptionTypeBoundRangeFault = 5,
        WHvX64ExceptionTypeInvalidOpcodeFault = 6,
        WHvX64ExceptionTypeDeviceNotAvailableFault = 7,
        WHvX64ExceptionTypeDoubleFaultAbort = 8,
        WHvX64ExceptionTypeInvalidTaskStateSegmentFault = 10,
        WHvX64ExceptionTypeSegmentNotPresentFault = 11,
        WHvX64ExceptionTypeStackFault = 12,
        WHvX64ExceptionTypeGeneralProtectionFault = 13,
        WHvX64ExceptionTypePageFault = 14,
        WHvX64ExceptionTypeFloatingPointErrorFault = 16,
        WHvX64ExceptionTypeAlignmentCheckFault = 17,
        WHvX64ExceptionTypeMachineCheckAbort = 18,
        WHvX64ExceptionTypeSimdFloatingPointFault = 19,
    };
    enum class WHV_INTERRUPT_DESTINATION_MODE : int32_t
    {
        WHvX64InterruptDestinationModePhysical = 0,
        WHvX64InterruptDestinationModeLogical = 1,
    };
    enum class WHV_INTERRUPT_TRIGGER_MODE : int32_t
    {
        WHvX64InterruptTriggerModeEdge = 0,
        WHvX64InterruptTriggerModeLevel = 1,
    };
    enum class WHV_INTERRUPT_TYPE : int32_t
    {
        WHvX64InterruptTypeFixed = 0,
        WHvX64InterruptTypeLowestPriority = 1,
        WHvX64InterruptTypeNmi = 4,
        WHvX64InterruptTypeInit = 5,
        WHvX64InterruptTypeSipi = 6,
        WHvX64InterruptTypeLocalInt1 = 9,
    };
    enum class WHV_MAP_GPA_RANGE_FLAGS : uint32_t
    {
        WHvMapGpaRangeFlagNone = 0x0,
        WHvMapGpaRangeFlagRead = 0x1,
        WHvMapGpaRangeFlagWrite = 0x2,
        WHvMapGpaRangeFlagExecute = 0x4,
        WHvMapGpaRangeFlagTrackDirtyPages = 0x8,
    };
    enum class WHV_MEMORY_ACCESS_TYPE : int32_t
    {
        WHvMemoryAccessRead = 0,
        WHvMemoryAccessWrite = 1,
        WHvMemoryAccessExecute = 2,
    };
    enum class WHV_MSR_ACTION : int32_t
    {
        WHvMsrActionArchitectureDefault = 0,
        WHvMsrActionIgnoreWriteReadZero = 1,
        WHvMsrActionExit = 2,
    };
    enum class WHV_NOTIFICATION_PORT_PROPERTY_CODE : int32_t
    {
        WHvNotificationPortPropertyPreferredTargetVp = 1,
        WHvNotificationPortPropertyPreferredTargetDuration = 5,
    };
    enum class WHV_NOTIFICATION_PORT_TYPE : int32_t
    {
        WHvNotificationPortTypeEvent = 2,
        WHvNotificationPortTypeDoorbell = 4,
    };
    enum class WHV_PARTITION_COUNTER_SET : int32_t
    {
        WHvPartitionCounterSetMemory = 0,
    };
    enum class WHV_PARTITION_PROPERTY_CODE : int32_t
    {
        WHvPartitionPropertyCodeExtendedVmExits = 1,
        WHvPartitionPropertyCodeExceptionExitBitmap = 2,
        WHvPartitionPropertyCodeSeparateSecurityDomain = 3,
        WHvPartitionPropertyCodeNestedVirtualization = 4,
        WHvPartitionPropertyCodeX64MsrExitBitmap = 5,
        WHvPartitionPropertyCodePrimaryNumaNode = 6,
        WHvPartitionPropertyCodeCpuReserve = 7,
        WHvPartitionPropertyCodeCpuCap = 8,
        WHvPartitionPropertyCodeCpuWeight = 9,
        WHvPartitionPropertyCodeCpuGroupId = 10,
        WHvPartitionPropertyCodeProcessorFrequencyCap = 11,
        WHvPartitionPropertyCodeAllowDeviceAssignment = 12,
        WHvPartitionPropertyCodeDisableSmt = 13,
        WHvPartitionPropertyCodeProcessorFeatures = 4097,
        WHvPartitionPropertyCodeProcessorClFlushSize = 4098,
        WHvPartitionPropertyCodeCpuidExitList = 4099,
        WHvPartitionPropertyCodeCpuidResultList = 4100,
        WHvPartitionPropertyCodeLocalApicEmulationMode = 4101,
        WHvPartitionPropertyCodeProcessorXsaveFeatures = 4102,
        WHvPartitionPropertyCodeProcessorClockFrequency = 4103,
        WHvPartitionPropertyCodeInterruptClockFrequency = 4104,
        WHvPartitionPropertyCodeApicRemoteReadSupport = 4105,
        WHvPartitionPropertyCodeProcessorFeaturesBanks = 4106,
        WHvPartitionPropertyCodeReferenceTime = 4107,
        WHvPartitionPropertyCodeSyntheticProcessorFeaturesBanks = 4108,
        WHvPartitionPropertyCodeCpuidResultList2 = 4109,
        WHvPartitionPropertyCodeProcessorPerfmonFeatures = 4110,
        WHvPartitionPropertyCodeMsrActionList = 4111,
        WHvPartitionPropertyCodeUnimplementedMsrAction = 4112,
        WHvPartitionPropertyCodeProcessorCount = 8191,
    };
    enum class WHV_PROCESSOR_COUNTER_SET : int32_t
    {
        WHvProcessorCounterSetRuntime = 0,
        WHvProcessorCounterSetIntercepts = 1,
        WHvProcessorCounterSetEvents = 2,
        WHvProcessorCounterSetApic = 3,
        WHvProcessorCounterSetSyntheticFeatures = 4,
    };
    enum class WHV_PROCESSOR_VENDOR : int32_t
    {
        WHvProcessorVendorAmd = 0,
        WHvProcessorVendorIntel = 1,
        WHvProcessorVendorHygon = 2,
    };
    enum class WHV_REGISTER_NAME : int32_t
    {
        WHvX64RegisterRax = 0,
        WHvX64RegisterRcx = 1,
        WHvX64RegisterRdx = 2,
        WHvX64RegisterRbx = 3,
        WHvX64RegisterRsp = 4,
        WHvX64RegisterRbp = 5,
        WHvX64RegisterRsi = 6,
        WHvX64RegisterRdi = 7,
        WHvX64RegisterR8 = 8,
        WHvX64RegisterR9 = 9,
        WHvX64RegisterR10 = 10,
        WHvX64RegisterR11 = 11,
        WHvX64RegisterR12 = 12,
        WHvX64RegisterR13 = 13,
        WHvX64RegisterR14 = 14,
        WHvX64RegisterR15 = 15,
        WHvX64RegisterRip = 16,
        WHvX64RegisterRflags = 17,
        WHvX64RegisterEs = 18,
        WHvX64RegisterCs = 19,
        WHvX64RegisterSs = 20,
        WHvX64RegisterDs = 21,
        WHvX64RegisterFs = 22,
        WHvX64RegisterGs = 23,
        WHvX64RegisterLdtr = 24,
        WHvX64RegisterTr = 25,
        WHvX64RegisterIdtr = 26,
        WHvX64RegisterGdtr = 27,
        WHvX64RegisterCr0 = 28,
        WHvX64RegisterCr2 = 29,
        WHvX64RegisterCr3 = 30,
        WHvX64RegisterCr4 = 31,
        WHvX64RegisterCr8 = 32,
        WHvX64RegisterDr0 = 33,
        WHvX64RegisterDr1 = 34,
        WHvX64RegisterDr2 = 35,
        WHvX64RegisterDr3 = 36,
        WHvX64RegisterDr6 = 37,
        WHvX64RegisterDr7 = 38,
        WHvX64RegisterXCr0 = 39,
        WHvX64RegisterVirtualCr0 = 40,
        WHvX64RegisterVirtualCr3 = 41,
        WHvX64RegisterVirtualCr4 = 42,
        WHvX64RegisterVirtualCr8 = 43,
        WHvX64RegisterXmm0 = 4096,
        WHvX64RegisterXmm1 = 4097,
        WHvX64RegisterXmm2 = 4098,
        WHvX64RegisterXmm3 = 4099,
        WHvX64RegisterXmm4 = 4100,
        WHvX64RegisterXmm5 = 4101,
        WHvX64RegisterXmm6 = 4102,
        WHvX64RegisterXmm7 = 4103,
        WHvX64RegisterXmm8 = 4104,
        WHvX64RegisterXmm9 = 4105,
        WHvX64RegisterXmm10 = 4106,
        WHvX64RegisterXmm11 = 4107,
        WHvX64RegisterXmm12 = 4108,
        WHvX64RegisterXmm13 = 4109,
        WHvX64RegisterXmm14 = 4110,
        WHvX64RegisterXmm15 = 4111,
        WHvX64RegisterFpMmx0 = 4112,
        WHvX64RegisterFpMmx1 = 4113,
        WHvX64RegisterFpMmx2 = 4114,
        WHvX64RegisterFpMmx3 = 4115,
        WHvX64RegisterFpMmx4 = 4116,
        WHvX64RegisterFpMmx5 = 4117,
        WHvX64RegisterFpMmx6 = 4118,
        WHvX64RegisterFpMmx7 = 4119,
        WHvX64RegisterFpControlStatus = 4120,
        WHvX64RegisterXmmControlStatus = 4121,
        WHvX64RegisterTsc = 8192,
        WHvX64RegisterEfer = 8193,
        WHvX64RegisterKernelGsBase = 8194,
        WHvX64RegisterApicBase = 8195,
        WHvX64RegisterPat = 8196,
        WHvX64RegisterSysenterCs = 8197,
        WHvX64RegisterSysenterEip = 8198,
        WHvX64RegisterSysenterEsp = 8199,
        WHvX64RegisterStar = 8200,
        WHvX64RegisterLstar = 8201,
        WHvX64RegisterCstar = 8202,
        WHvX64RegisterSfmask = 8203,
        WHvX64RegisterInitialApicId = 8204,
        WHvX64RegisterMsrMtrrCap = 8205,
        WHvX64RegisterMsrMtrrDefType = 8206,
        WHvX64RegisterMsrMtrrPhysBase0 = 8208,
        WHvX64RegisterMsrMtrrPhysBase1 = 8209,
        WHvX64RegisterMsrMtrrPhysBase2 = 8210,
        WHvX64RegisterMsrMtrrPhysBase3 = 8211,
        WHvX64RegisterMsrMtrrPhysBase4 = 8212,
        WHvX64RegisterMsrMtrrPhysBase5 = 8213,
        WHvX64RegisterMsrMtrrPhysBase6 = 8214,
        WHvX64RegisterMsrMtrrPhysBase7 = 8215,
        WHvX64RegisterMsrMtrrPhysBase8 = 8216,
        WHvX64RegisterMsrMtrrPhysBase9 = 8217,
        WHvX64RegisterMsrMtrrPhysBaseA = 8218,
        WHvX64RegisterMsrMtrrPhysBaseB = 8219,
        WHvX64RegisterMsrMtrrPhysBaseC = 8220,
        WHvX64RegisterMsrMtrrPhysBaseD = 8221,
        WHvX64RegisterMsrMtrrPhysBaseE = 8222,
        WHvX64RegisterMsrMtrrPhysBaseF = 8223,
        WHvX64RegisterMsrMtrrPhysMask0 = 8256,
        WHvX64RegisterMsrMtrrPhysMask1 = 8257,
        WHvX64RegisterMsrMtrrPhysMask2 = 8258,
        WHvX64RegisterMsrMtrrPhysMask3 = 8259,
        WHvX64RegisterMsrMtrrPhysMask4 = 8260,
        WHvX64RegisterMsrMtrrPhysMask5 = 8261,
        WHvX64RegisterMsrMtrrPhysMask6 = 8262,
        WHvX64RegisterMsrMtrrPhysMask7 = 8263,
        WHvX64RegisterMsrMtrrPhysMask8 = 8264,
        WHvX64RegisterMsrMtrrPhysMask9 = 8265,
        WHvX64RegisterMsrMtrrPhysMaskA = 8266,
        WHvX64RegisterMsrMtrrPhysMaskB = 8267,
        WHvX64RegisterMsrMtrrPhysMaskC = 8268,
        WHvX64RegisterMsrMtrrPhysMaskD = 8269,
        WHvX64RegisterMsrMtrrPhysMaskE = 8270,
        WHvX64RegisterMsrMtrrPhysMaskF = 8271,
        WHvX64RegisterMsrMtrrFix64k00000 = 8304,
        WHvX64RegisterMsrMtrrFix16k80000 = 8305,
        WHvX64RegisterMsrMtrrFix16kA0000 = 8306,
        WHvX64RegisterMsrMtrrFix4kC0000 = 8307,
        WHvX64RegisterMsrMtrrFix4kC8000 = 8308,
        WHvX64RegisterMsrMtrrFix4kD0000 = 8309,
        WHvX64RegisterMsrMtrrFix4kD8000 = 8310,
        WHvX64RegisterMsrMtrrFix4kE0000 = 8311,
        WHvX64RegisterMsrMtrrFix4kE8000 = 8312,
        WHvX64RegisterMsrMtrrFix4kF0000 = 8313,
        WHvX64RegisterMsrMtrrFix4kF8000 = 8314,
        WHvX64RegisterTscAux = 8315,
        WHvX64RegisterBndcfgs = 8316,
        WHvX64RegisterMCount = 8318,
        WHvX64RegisterACount = 8319,
        WHvX64RegisterSpecCtrl = 8324,
        WHvX64RegisterPredCmd = 8325,
        WHvX64RegisterTscVirtualOffset = 8327,
        WHvX64RegisterTsxCtrl = 8328,
        WHvX64RegisterXss = 8331,
        WHvX64RegisterUCet = 8332,
        WHvX64RegisterSCet = 8333,
        WHvX64RegisterSsp = 8334,
        WHvX64RegisterPl0Ssp = 8335,
        WHvX64RegisterPl1Ssp = 8336,
        WHvX64RegisterPl2Ssp = 8337,
        WHvX64RegisterPl3Ssp = 8338,
        WHvX64RegisterInterruptSspTableAddr = 8339,
        WHvX64RegisterTscDeadline = 8341,
        WHvX64RegisterTscAdjust = 8342,
        WHvX64RegisterUmwaitControl = 8344,
        WHvX64RegisterXfd = 8345,
        WHvX64RegisterXfdErr = 8346,
        WHvX64RegisterApicId = 12290,
        WHvX64RegisterApicVersion = 12291,
        WHvX64RegisterApicTpr = 12296,
        WHvX64RegisterApicPpr = 12298,
        WHvX64RegisterApicEoi = 12299,
        WHvX64RegisterApicLdr = 12301,
        WHvX64RegisterApicSpurious = 12303,
        WHvX64RegisterApicIsr0 = 12304,
        WHvX64RegisterApicIsr1 = 12305,
        WHvX64RegisterApicIsr2 = 12306,
        WHvX64RegisterApicIsr3 = 12307,
        WHvX64RegisterApicIsr4 = 12308,
        WHvX64RegisterApicIsr5 = 12309,
        WHvX64RegisterApicIsr6 = 12310,
        WHvX64RegisterApicIsr7 = 12311,
        WHvX64RegisterApicTmr0 = 12312,
        WHvX64RegisterApicTmr1 = 12313,
        WHvX64RegisterApicTmr2 = 12314,
        WHvX64RegisterApicTmr3 = 12315,
        WHvX64RegisterApicTmr4 = 12316,
        WHvX64RegisterApicTmr5 = 12317,
        WHvX64RegisterApicTmr6 = 12318,
        WHvX64RegisterApicTmr7 = 12319,
        WHvX64RegisterApicIrr0 = 12320,
        WHvX64RegisterApicIrr1 = 12321,
        WHvX64RegisterApicIrr2 = 12322,
        WHvX64RegisterApicIrr3 = 12323,
        WHvX64RegisterApicIrr4 = 12324,
        WHvX64RegisterApicIrr5 = 12325,
        WHvX64RegisterApicIrr6 = 12326,
        WHvX64RegisterApicIrr7 = 12327,
        WHvX64RegisterApicEse = 12328,
        WHvX64RegisterApicIcr = 12336,
        WHvX64RegisterApicLvtTimer = 12338,
        WHvX64RegisterApicLvtThermal = 12339,
        WHvX64RegisterApicLvtPerfmon = 12340,
        WHvX64RegisterApicLvtLint0 = 12341,
        WHvX64RegisterApicLvtLint1 = 12342,
        WHvX64RegisterApicLvtError = 12343,
        WHvX64RegisterApicInitCount = 12344,
        WHvX64RegisterApicCurrentCount = 12345,
        WHvX64RegisterApicDivide = 12350,
        WHvX64RegisterApicSelfIpi = 12351,
        WHvRegisterSint0 = 16384,
        WHvRegisterSint1 = 16385,
        WHvRegisterSint2 = 16386,
        WHvRegisterSint3 = 16387,
        WHvRegisterSint4 = 16388,
        WHvRegisterSint5 = 16389,
        WHvRegisterSint6 = 16390,
        WHvRegisterSint7 = 16391,
        WHvRegisterSint8 = 16392,
        WHvRegisterSint9 = 16393,
        WHvRegisterSint10 = 16394,
        WHvRegisterSint11 = 16395,
        WHvRegisterSint12 = 16396,
        WHvRegisterSint13 = 16397,
        WHvRegisterSint14 = 16398,
        WHvRegisterSint15 = 16399,
        WHvRegisterScontrol = 16400,
        WHvRegisterSversion = 16401,
        WHvRegisterSiefp = 16402,
        WHvRegisterSimp = 16403,
        WHvRegisterEom = 16404,
        WHvRegisterVpRuntime = 20480,
        WHvX64RegisterHypercall = 20481,
        WHvRegisterGuestOsId = 20482,
        WHvRegisterVpAssistPage = 20499,
        WHvRegisterReferenceTsc = 20503,
        WHvRegisterReferenceTscSequence = 20506,
        WHvRegisterPendingInterruption = -2147483648,
        WHvRegisterInterruptState = -2147483647,
        WHvRegisterPendingEvent = -2147483646,
        WHvX64RegisterDeliverabilityNotifications = -2147483644,
        WHvRegisterInternalActivityState = -2147483643,
        WHvX64RegisterPendingDebugException = -2147483642,
    };
    enum class WHV_RUN_VP_CANCEL_REASON : int32_t
    {
        WHvRunVpCancelReasonUser = 0,
    };
    enum class WHV_RUN_VP_EXIT_REASON : int32_t
    {
        WHvRunVpExitReasonNone = 0,
        WHvRunVpExitReasonMemoryAccess = 1,
        WHvRunVpExitReasonX64IoPortAccess = 2,
        WHvRunVpExitReasonUnrecoverableException = 4,
        WHvRunVpExitReasonInvalidVpRegisterValue = 5,
        WHvRunVpExitReasonUnsupportedFeature = 6,
        WHvRunVpExitReasonX64InterruptWindow = 7,
        WHvRunVpExitReasonX64Halt = 8,
        WHvRunVpExitReasonX64ApicEoi = 9,
        WHvRunVpExitReasonSynicSintDeliverable = 10,
        WHvRunVpExitReasonX64MsrAccess = 4096,
        WHvRunVpExitReasonX64Cpuid = 4097,
        WHvRunVpExitReasonException = 4098,
        WHvRunVpExitReasonX64Rdtsc = 4099,
        WHvRunVpExitReasonX64ApicSmiTrap = 4100,
        WHvRunVpExitReasonHypercall = 4101,
        WHvRunVpExitReasonX64ApicInitSipiTrap = 4102,
        WHvRunVpExitReasonX64ApicWriteTrap = 4103,
        WHvRunVpExitReasonCanceled = 8193,
    };
    enum class WHV_TRANSLATE_GVA_FLAGS : uint32_t
    {
        WHvTranslateGvaFlagNone = 0x0,
        WHvTranslateGvaFlagValidateRead = 0x1,
        WHvTranslateGvaFlagValidateWrite = 0x2,
        WHvTranslateGvaFlagValidateExecute = 0x4,
        WHvTranslateGvaFlagPrivilegeExempt = 0x8,
        WHvTranslateGvaFlagSetPageTableBits = 0x10,
        WHvTranslateGvaFlagEnforceSmap = 0x100,
        WHvTranslateGvaFlagOverrideSmap = 0x200,
    };
    enum class WHV_TRANSLATE_GVA_RESULT_CODE : int32_t
    {
        WHvTranslateGvaResultSuccess = 0,
        WHvTranslateGvaResultPageNotPresent = 1,
        WHvTranslateGvaResultPrivilegeViolation = 2,
        WHvTranslateGvaResultInvalidPageTableFlags = 3,
        WHvTranslateGvaResultGpaUnmapped = 4,
        WHvTranslateGvaResultGpaNoReadAccess = 5,
        WHvTranslateGvaResultGpaNoWriteAccess = 6,
        WHvTranslateGvaResultGpaIllegalOverlayAccess = 7,
        WHvTranslateGvaResultIntercept = 8,
    };
    enum class WHV_TRIGGER_TYPE : int32_t
    {
        WHvTriggerTypeInterrupt = 0,
        WHvTriggerTypeSynicEvent = 1,
        WHvTriggerTypeDeviceInterrupt = 2,
    };
    enum class WHV_VIRTUAL_PROCESSOR_PROPERTY_CODE : int32_t
    {
        WHvVirtualProcessorPropertyCodeNumaNode = 0,
    };
    enum class WHV_VIRTUAL_PROCESSOR_STATE_TYPE : int32_t
    {
        WHvVirtualProcessorStateTypeSynicMessagePage = 0,
        WHvVirtualProcessorStateTypeSynicEventFlagPage = 1,
        WHvVirtualProcessorStateTypeSynicTimerState = 2,
        WHvVirtualProcessorStateTypeInterruptControllerState2 = 4096,
        WHvVirtualProcessorStateTypeXsaveState = 4097,
    };
    enum class WHV_VPCI_DEVICE_NOTIFICATION_TYPE : int32_t
    {
        WHvVpciDeviceNotificationUndefined = 0,
        WHvVpciDeviceNotificationMmioRemapping = 1,
        WHvVpciDeviceNotificationSurpriseRemoval = 2,
    };
    enum class WHV_VPCI_DEVICE_PROPERTY_CODE : int32_t
    {
        WHvVpciDevicePropertyCodeUndefined = 0,
        WHvVpciDevicePropertyCodeHardwareIDs = 1,
        WHvVpciDevicePropertyCodeProbedBARs = 2,
    };
    enum class WHV_VPCI_DEVICE_REGISTER_SPACE : int32_t
    {
        WHvVpciConfigSpace = -1,
        WHvVpciBar0 = 0,
        WHvVpciBar1 = 1,
        WHvVpciBar2 = 2,
        WHvVpciBar3 = 3,
        WHvVpciBar4 = 4,
        WHvVpciBar5 = 5,
    };
    enum class WHV_VPCI_INTERRUPT_TARGET_FLAGS : uint32_t
    {
        WHvVpciInterruptTargetFlagNone = 0x0,
        WHvVpciInterruptTargetFlagMulticast = 0x1,
    };
    enum class WHV_VPCI_MMIO_RANGE_FLAGS : uint32_t
    {
        WHvVpciMmioRangeFlagReadAccess = 0x1,
        WHvVpciMmioRangeFlagWriteAccess = 0x2,
    };
    enum class WHV_X64_APIC_WRITE_TYPE : int32_t
    {
        WHvX64ApicWriteTypeLdr = 208,
        WHvX64ApicWriteTypeDfr = 224,
        WHvX64ApicWriteTypeSvr = 240,
        WHvX64ApicWriteTypeLint0 = 848,
        WHvX64ApicWriteTypeLint1 = 864,
    };
    enum class WHV_X64_CPUID_RESULT2_FLAGS : uint32_t
    {
        WHvX64CpuidResult2FlagSubleafSpecific = 0x1,
        WHvX64CpuidResult2FlagVpSpecific = 0x2,
    };
    enum class WHV_X64_LOCAL_APIC_EMULATION_MODE : int32_t
    {
        WHvX64LocalApicEmulationModeNone = 0,
        WHvX64LocalApicEmulationModeXApic = 1,
        WHvX64LocalApicEmulationModeX2Apic = 2,
    };
    enum class WHV_X64_PENDING_EVENT_TYPE : int32_t
    {
        WHvX64PendingEventException = 0,
        WHvX64PendingEventExtInt = 5,
    };
    enum class WHV_X64_PENDING_INTERRUPTION_TYPE : int32_t
    {
        WHvX64PendingInterrupt = 0,
        WHvX64PendingNmi = 2,
        WHvX64PendingException = 3,
    };
    enum class WHV_X64_UNSUPPORTED_FEATURE_CODE : int32_t
    {
        WHvUnsupportedFeatureIntercept = 1,
        WHvUnsupportedFeatureTaskSwitchTss = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct DOS_IMAGE_INFO;
    struct GPA_MEMORY_CHUNK;
    union GUEST_OS_INFO;
    struct HDV_PCI_DEVICE_INTERFACE;
    struct HDV_PCI_PNP_ID;
    struct HVSOCKET_ADDRESS_INFO;
    struct MODULE_INFO;
    struct SOCKADDR_HV;
    union VIRTUAL_PROCESSOR_REGISTER;
    struct VM_GENCOUNTER;
    union WHV_ACCESS_GPA_CONTROLS;
    union WHV_ADVISE_GPA_RANGE;
    struct WHV_ADVISE_GPA_RANGE_POPULATE;
    union WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS;
    union WHV_CAPABILITY;
    union WHV_CAPABILITY_FEATURES;
    struct WHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP;
    struct WHV_CPUID_OUTPUT;
    struct WHV_DOORBELL_MATCH_DATA;
    struct WHV_EMULATOR_CALLBACKS;
    struct WHV_EMULATOR_IO_ACCESS_INFO;
    struct WHV_EMULATOR_MEMORY_ACCESS_INFO;
    union WHV_EMULATOR_STATUS;
    union WHV_EXTENDED_VM_EXITS;
    struct WHV_HYPERCALL_CONTEXT;
    union WHV_INTERNAL_ACTIVITY_REGISTER;
    struct WHV_INTERRUPT_CONTROL;
    struct WHV_MEMORY_ACCESS_CONTEXT;
    union WHV_MEMORY_ACCESS_INFO;
    struct WHV_MEMORY_RANGE_ENTRY;
    struct WHV_MSR_ACTION_ENTRY;
    struct WHV_NOTIFICATION_PORT_PARAMETERS;
    struct WHV_PARTITION_HANDLE;
    struct WHV_PARTITION_MEMORY_COUNTERS;
    union WHV_PARTITION_PROPERTY;
    struct WHV_PROCESSOR_APIC_COUNTERS;
    struct WHV_PROCESSOR_EVENT_COUNTERS;
    union WHV_PROCESSOR_FEATURES;
    union WHV_PROCESSOR_FEATURES1;
    struct WHV_PROCESSOR_FEATURES_BANKS;
    struct WHV_PROCESSOR_INTERCEPT_COUNTER;
    struct WHV_PROCESSOR_INTERCEPT_COUNTERS;
    union WHV_PROCESSOR_PERFMON_FEATURES;
    struct WHV_PROCESSOR_RUNTIME_COUNTERS;
    struct WHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS;
    union WHV_PROCESSOR_XSAVE_FEATURES;
    union WHV_REGISTER_VALUE;
    struct WHV_RUN_VP_CANCELED_CONTEXT;
    struct WHV_RUN_VP_EXIT_CONTEXT;
    union WHV_SCHEDULER_FEATURES;
    struct WHV_SRIOV_RESOURCE_DESCRIPTOR;
    struct WHV_SYNIC_EVENT_PARAMETERS;
    struct WHV_SYNIC_SINT_DELIVERABLE_CONTEXT;
    union WHV_SYNTHETIC_PROCESSOR_FEATURES;
    struct WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS;
    struct WHV_TRANSLATE_GVA_RESULT;
    struct WHV_TRIGGER_PARAMETERS;
    union WHV_UINT128;
    struct WHV_VIRTUAL_PROCESSOR_PROPERTY;
    struct WHV_VPCI_DEVICE_NOTIFICATION;
    struct WHV_VPCI_DEVICE_REGISTER;
    struct WHV_VPCI_HARDWARE_IDS;
    struct WHV_VPCI_INTERRUPT_TARGET;
    struct WHV_VPCI_MMIO_MAPPING;
    struct WHV_VPCI_PROBED_BARS;
    struct WHV_VP_EXCEPTION_CONTEXT;
    union WHV_VP_EXCEPTION_INFO;
    struct WHV_VP_EXIT_CONTEXT;
    struct WHV_X64_APIC_EOI_CONTEXT;
    struct WHV_X64_APIC_INIT_SIPI_CONTEXT;
    struct WHV_X64_APIC_SMI_CONTEXT;
    struct WHV_X64_APIC_WRITE_CONTEXT;
    struct WHV_X64_CPUID_ACCESS_CONTEXT;
    struct WHV_X64_CPUID_RESULT;
    struct WHV_X64_CPUID_RESULT2;
    union WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER;
    union WHV_X64_FP_CONTROL_STATUS_REGISTER;
    union WHV_X64_FP_REGISTER;
    struct WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT;
    union WHV_X64_INTERRUPT_STATE_REGISTER;
    struct WHV_X64_IO_PORT_ACCESS_CONTEXT;
    union WHV_X64_IO_PORT_ACCESS_INFO;
    struct WHV_X64_MSR_ACCESS_CONTEXT;
    union WHV_X64_MSR_ACCESS_INFO;
    union WHV_X64_MSR_EXIT_BITMAP;
    union WHV_X64_PENDING_DEBUG_EXCEPTION;
    union WHV_X64_PENDING_EXCEPTION_EVENT;
    union WHV_X64_PENDING_EXT_INT_EVENT;
    union WHV_X64_PENDING_INTERRUPTION_REGISTER;
    struct WHV_X64_RDTSC_CONTEXT;
    union WHV_X64_RDTSC_INFO;
    struct WHV_X64_SEGMENT_REGISTER;
    struct WHV_X64_TABLE_REGISTER;
    struct WHV_X64_UNSUPPORTED_FEATURE_CONTEXT;
    union WHV_X64_VP_EXECUTION_STATE;
    union WHV_X64_XMM_CONTROL_STATUS_REGISTER;
#pragma endregion forward_declarations

#pragma region delegates
    using WHV_EMULATOR_IO_PORT_CALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::WHV_EMULATOR_IO_ACCESS_INFO*);
    using WHV_EMULATOR_MEMORY_CALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::WHV_EMULATOR_MEMORY_ACCESS_INFO*);
    using WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::WHV_REGISTER_NAME*, uint32_t, Windows::Win32::System::Hypervisor::WHV_REGISTER_VALUE*);
    using WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::WHV_REGISTER_NAME*, uint32_t, Windows::Win32::System::Hypervisor::WHV_REGISTER_VALUE*);
    using WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint64_t, Windows::Win32::System::Hypervisor::WHV_TRANSLATE_GVA_FLAGS, Windows::Win32::System::Hypervisor::WHV_TRANSLATE_GVA_RESULT_CODE*, uint64_t*);
    using HDV_PCI_DEVICE_INITIALIZE = Windows::Win32::Foundation::HRESULT __stdcall(void*);
    using HDV_PCI_DEVICE_TEARDOWN = void __stdcall(void*);
    using HDV_PCI_DEVICE_SET_CONFIGURATION = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint32_t, Windows::Win32::Foundation::PWSTR*);
    using HDV_PCI_DEVICE_GET_DETAILS = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::HDV_PCI_PNP_ID*, uint32_t, uint32_t*);
    using HDV_PCI_DEVICE_START = Windows::Win32::Foundation::HRESULT __stdcall(void*);
    using HDV_PCI_DEVICE_STOP = void __stdcall(void*);
    using HDV_PCI_READ_CONFIG_SPACE = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint32_t, uint32_t*);
    using HDV_PCI_WRITE_CONFIG_SPACE = Windows::Win32::Foundation::HRESULT __stdcall(void*, uint32_t, uint32_t);
    using HDV_PCI_READ_INTERCEPTED_MEMORY = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::HDV_PCI_BAR_SELECTOR, uint64_t, uint64_t, uint8_t*);
    using HDV_PCI_WRITE_INTERCEPTED_MEMORY = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::Hypervisor::HDV_PCI_BAR_SELECTOR, uint64_t, uint64_t, uint8_t*);
    using GUEST_SYMBOLS_PROVIDER_DEBUG_INFO_CALLBACK = void __stdcall(Windows::Win32::Foundation::PSTR);
    using FOUND_IMAGE_CALLBACK = Windows::Win32::Foundation::BOOL __stdcall(void*, Windows::Win32::System::Hypervisor::DOS_IMAGE_INFO*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
