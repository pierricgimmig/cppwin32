// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_WNet_0_H
#define WIN32_Windows_Win32_NetworkManagement_WNet_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HANDLE;
    struct HWND;
    struct LUID;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::WNet
{
#pragma region enums
    enum class CONNECTDLGSTRUCT_FLAGS : uint32_t
    {
        CONNDLG_RO_PATH = 0x1,
        CONNDLG_CONN_POINT = 0x2,
        CONNDLG_USE_MRU = 0x4,
        CONNDLG_HIDE_BOX = 0x8,
        CONNDLG_PERSIST = 0x10,
        CONNDLG_NOT_PERSIST = 0x20,
    };
    enum class DISCDLGSTRUCT_FLAGS : uint32_t
    {
        DISC_UPDATE_PROFILE = 0x1,
        DISC_NO_FORCE = 0x40,
    };
    enum class NETINFOSTRUCT_CHARACTERISTICS : uint32_t
    {
        NETINFO_DLL16 = 0x1,
        NETINFO_DISKRED = 0x4,
        NETINFO_PRINTERRED = 0x8,
    };
    enum class NETWORK_NAME_FORMAT_FLAGS : uint32_t
    {
        WNFMT_MULTILINE = 0x1,
        WNFMT_ABBREVIATED = 0x2,
    };
    enum class NET_RESOURCE_SCOPE : uint32_t
    {
        RESOURCE_CONNECTED = 0x1,
        RESOURCE_CONTEXT = 0x5,
        RESOURCE_GLOBALNET = 0x2,
        RESOURCE_REMEMBERED = 0x3,
    };
    enum class NET_RESOURCE_TYPE : uint32_t
    {
        RESOURCETYPE_ANY = 0x0,
        RESOURCETYPE_DISK = 0x1,
        RESOURCETYPE_PRINT = 0x2,
    };
    enum class NET_USE_CONNECT_FLAGS : uint32_t
    {
        CONNECT_INTERACTIVE = 0x8,
        CONNECT_PROMPT = 0x10,
        CONNECT_REDIRECT = 0x80,
        CONNECT_UPDATE_PROFILE = 0x1,
        CONNECT_COMMANDLINE = 0x800,
        CONNECT_CMD_SAVECRED = 0x1000,
        CONNECT_TEMPORARY = 0x4,
        CONNECT_DEFERRED = 0x400,
        CONNECT_UPDATE_RECENT = 0x2,
    };
    enum class NPDIRECTORY_NOTIFY_OPERATION : uint32_t
    {
        WNDN_MKDIR = 0x1,
        WNDN_RMDIR = 0x2,
        WNDN_MVDIR = 0x3,
    };
    enum class NP_PROPERTY_DIALOG_SELECTION : uint32_t
    {
        WNPS_FILE = 0x0,
        WNPS_DIR = 0x1,
        WNPS_MULT = 0x2,
    };
    enum class UNC_INFO_LEVEL : uint32_t
    {
        UNIVERSAL_NAME_INFO_LEVEL = 0x1,
        REMOTE_NAME_INFO_LEVEL = 0x2,
    };
    enum class WNET_OPEN_ENUM_USAGE : uint32_t
    {
        RESOURCEUSAGE_NONE = 0x0,
        RESOURCEUSAGE_CONNECTABLE = 0x1,
        RESOURCEUSAGE_CONTAINER = 0x2,
        RESOURCEUSAGE_ATTACHED = 0x10,
        RESOURCEUSAGE_ALL = 0x13,
    };
    enum class WNPERM_DLG : uint32_t
    {
        WNPERM_DLG_PERM = 0x0,
        WNPERM_DLG_AUDIT = 0x1,
        WNPERM_DLG_OWNER = 0x2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct CONNECTDLGSTRUCTA;
    struct CONNECTDLGSTRUCTW;
    struct DISCDLGSTRUCTA;
    struct DISCDLGSTRUCTW;
    struct NETCONNECTINFOSTRUCT;
    struct NETINFOSTRUCT;
    struct NETRESOURCEA;
    struct NETRESOURCEW;
    struct NOTIFYADD;
    struct NOTIFYCANCEL;
    struct NOTIFYINFO;
    struct NetEnumHandle;
    struct REMOTE_NAME_INFOA;
    struct REMOTE_NAME_INFOW;
    struct UNIVERSAL_NAME_INFOA;
    struct UNIVERSAL_NAME_INFOW;
#pragma endregion forward_declarations

#pragma region delegates
    using PF_NPAddConnection = uint32_t __stdcall(Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR);
    using PF_NPAddConnection3 = uint32_t __stdcall(Windows::Win32::Foundation::HWND, Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint32_t);
    using PF_NPAddConnection4 = uint32_t __stdcall(Windows::Win32::Foundation::HWND, Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, void*, uint32_t, uint32_t, uint8_t*, uint32_t);
    using PF_NPCancelConnection = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::BOOL);
    using PF_NPCancelConnection2 = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::BOOL, uint32_t);
    using PF_NPGetConnection = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint32_t*);
    using PF_NPGetConnection3 = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, uint32_t, void*, uint32_t*);
    using PF_NPGetUniversalName = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, uint32_t, void*, uint32_t*);
    using PF_NPGetConnectionPerformance = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::NetworkManagement::WNet::NETCONNECTINFOSTRUCT*);
    using PF_NPOpenEnum = uint32_t __stdcall(uint32_t, uint32_t, uint32_t, Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, Windows::Win32::Foundation::HANDLE*);
    using PF_NPEnumResource = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t*, void*, uint32_t*);
    using PF_NPCloseEnum = uint32_t __stdcall(Windows::Win32::Foundation::HANDLE);
    using PF_NPGetCaps = uint32_t __stdcall(uint32_t);
    using PF_NPGetUser = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint32_t*);
    using PF_NPGetPersistentUseOptionsForConnection = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, uint8_t*, uint32_t, uint8_t*, uint32_t*);
    using PF_NPDeviceMode = uint32_t __stdcall(Windows::Win32::Foundation::HWND);
    using PF_NPSearchDialog = uint32_t __stdcall(Windows::Win32::Foundation::HWND, Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, void*, uint32_t, uint32_t*);
    using PF_NPGetResourceParent = uint32_t __stdcall(Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, void*, uint32_t*);
    using PF_NPGetResourceInformation = uint32_t __stdcall(Windows::Win32::NetworkManagement::WNet::NETRESOURCEW*, void*, uint32_t*, Windows::Win32::Foundation::PWSTR*);
    using PF_NPFormatNetworkName = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint32_t*, uint32_t, uint32_t);
    using PF_NPGetPropertyText = uint32_t __stdcall(uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::PWSTR, uint32_t, uint32_t);
    using PF_NPPropertyDialog = uint32_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, uint32_t, Windows::Win32::Foundation::PWSTR, uint32_t);
    using PF_NPGetDirectoryType = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, int32_t*, Windows::Win32::Foundation::BOOL);
    using PF_NPDirectoryNotify = uint32_t __stdcall(Windows::Win32::Foundation::HWND, Windows::Win32::Foundation::PWSTR, uint32_t);
    using PF_NPLogonNotify = uint32_t __stdcall(Windows::Win32::Foundation::LUID*, Windows::Win32::Foundation::PWSTR, void*, Windows::Win32::Foundation::PWSTR, void*, Windows::Win32::Foundation::PWSTR, void*, Windows::Win32::Foundation::PWSTR*);
    using PF_NPPasswordChangeNotify = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, void*, Windows::Win32::Foundation::PWSTR, void*, Windows::Win32::Foundation::PWSTR, void*, uint32_t);
    using PF_AddConnectNotify = uint32_t __stdcall(Windows::Win32::NetworkManagement::WNet::NOTIFYINFO*, Windows::Win32::NetworkManagement::WNet::NOTIFYADD*);
    using PF_CancelConnectNotify = uint32_t __stdcall(Windows::Win32::NetworkManagement::WNet::NOTIFYINFO*, Windows::Win32::NetworkManagement::WNet::NOTIFYCANCEL*);
    using PF_NPFMXGetPermCaps = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR);
    using PF_NPFMXEditPerm = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::HWND, uint32_t);
    using PF_NPFMXGetPermHelp = uint32_t __stdcall(Windows::Win32::Foundation::PWSTR, uint32_t, Windows::Win32::Foundation::BOOL, void*, uint32_t*, uint32_t*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
