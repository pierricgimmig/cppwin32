// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Display_2_H
#define WIN32_Windows_Win32_Devices_Display_2_H
#include "win32/Windows.Win32.Devices.Display.h"
#include "win32/impl/Windows.Win32.Devices.Display.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Display
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL_GetNumberOfPhysicalMonitorsFromHMONITOR(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, uint32_t* pdwNumberOfPhysicalMonitors) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pdwNumberOfPhysicalMonitors);

        auto win32_impl_result = g_api_table.GetNumberOfPhysicalMonitorsFromHMONITOR(hMonitor, pdwNumberOfPhysicalMonitors);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, uint32_t* pdwNumberOfPhysicalMonitors) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDirect3DDevice9);
        ORBIT_TRACK_PARAM(pdwNumberOfPhysicalMonitors);

        auto win32_impl_result = g_api_table.GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(pDirect3DDevice9, pdwNumberOfPhysicalMonitors);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetPhysicalMonitorsFromHMONITOR(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(dwPhysicalMonitorArraySize);
        ORBIT_TRACK_PARAM(pPhysicalMonitorArray);

        auto win32_impl_result = g_api_table.GetPhysicalMonitorsFromHMONITOR(hMonitor, dwPhysicalMonitorArraySize, pPhysicalMonitorArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetPhysicalMonitorsFromIDirect3DDevice9(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDirect3DDevice9);
        ORBIT_TRACK_PARAM(dwPhysicalMonitorArraySize);
        ORBIT_TRACK_PARAM(pPhysicalMonitorArray);

        auto win32_impl_result = g_api_table.GetPhysicalMonitorsFromIDirect3DDevice9(pDirect3DDevice9, dwPhysicalMonitorArraySize, pPhysicalMonitorArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_DestroyPhysicalMonitor(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);

        auto win32_impl_result = g_api_table.DestroyPhysicalMonitor(hMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_DestroyPhysicalMonitors(uint32_t dwPhysicalMonitorArraySize, win32::Windows::Win32::Devices::Display::PHYSICAL_MONITOR* pPhysicalMonitorArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwPhysicalMonitorArraySize);
        ORBIT_TRACK_PARAM(pPhysicalMonitorArray);

        auto win32_impl_result = g_api_table.DestroyPhysicalMonitors(dwPhysicalMonitorArraySize, pPhysicalMonitorArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetVCPFeatureAndVCPFeatureReply(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint8_t bVCPCode, win32::Windows::Win32::Devices::Display::MC_VCP_CODE_TYPE* pvct, uint32_t* pdwCurrentValue, uint32_t* pdwMaximumValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(bVCPCode);
        ORBIT_TRACK_PARAM(pvct);
        ORBIT_TRACK_PARAM(pdwCurrentValue);
        ORBIT_TRACK_PARAM(pdwMaximumValue);

        auto win32_impl_result = g_api_table.GetVCPFeatureAndVCPFeatureReply(hMonitor, bVCPCode, pvct, pdwCurrentValue, pdwMaximumValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetVCPFeature(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint8_t bVCPCode, uint32_t dwNewValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(bVCPCode);
        ORBIT_TRACK_PARAM(dwNewValue);

        auto win32_impl_result = g_api_table.SetVCPFeature(hMonitor, bVCPCode, dwNewValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SaveCurrentSettings(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);

        auto win32_impl_result = g_api_table.SaveCurrentSettings(hMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetCapabilitiesStringLength(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwCapabilitiesStringLengthInCharacters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pdwCapabilitiesStringLengthInCharacters);

        auto win32_impl_result = g_api_table.GetCapabilitiesStringLength(hMonitor, pdwCapabilitiesStringLengthInCharacters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CapabilitiesRequestAndCapabilitiesReply(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Foundation::PSTR pszASCIICapabilitiesString, uint32_t dwCapabilitiesStringLengthInCharacters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pszASCIICapabilitiesString);
        ORBIT_TRACK_PARAM(dwCapabilitiesStringLengthInCharacters);

        auto win32_impl_result = g_api_table.CapabilitiesRequestAndCapabilitiesReply(hMonitor, pszASCIICapabilitiesString, dwCapabilitiesStringLengthInCharacters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetTimingReport(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_TIMING_REPORT* pmtrMonitorTimingReport) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pmtrMonitorTimingReport);

        auto win32_impl_result = g_api_table.GetTimingReport(hMonitor, pmtrMonitorTimingReport);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorCapabilities(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMonitorCapabilities, uint32_t* pdwSupportedColorTemperatures) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pdwMonitorCapabilities);
        ORBIT_TRACK_PARAM(pdwSupportedColorTemperatures);

        auto win32_impl_result = g_api_table.GetMonitorCapabilities(hMonitor, pdwMonitorCapabilities, pdwSupportedColorTemperatures);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SaveCurrentMonitorSettings(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);

        auto win32_impl_result = g_api_table.SaveCurrentMonitorSettings(hMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorTechnologyType(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DISPLAY_TECHNOLOGY_TYPE* pdtyDisplayTechnologyType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pdtyDisplayTechnologyType);

        auto win32_impl_result = g_api_table.GetMonitorTechnologyType(hMonitor, pdtyDisplayTechnologyType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorBrightness(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMinimumBrightness, uint32_t* pdwCurrentBrightness, uint32_t* pdwMaximumBrightness) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pdwMinimumBrightness);
        ORBIT_TRACK_PARAM(pdwCurrentBrightness);
        ORBIT_TRACK_PARAM(pdwMaximumBrightness);

        auto win32_impl_result = g_api_table.GetMonitorBrightness(hMonitor, pdwMinimumBrightness, pdwCurrentBrightness, pdwMaximumBrightness);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorContrast(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t* pdwMinimumContrast, uint32_t* pdwCurrentContrast, uint32_t* pdwMaximumContrast) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pdwMinimumContrast);
        ORBIT_TRACK_PARAM(pdwCurrentContrast);
        ORBIT_TRACK_PARAM(pdwMaximumContrast);

        auto win32_impl_result = g_api_table.GetMonitorContrast(hMonitor, pdwMinimumContrast, pdwCurrentContrast, pdwMaximumContrast);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorColorTemperature(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_COLOR_TEMPERATURE* pctCurrentColorTemperature) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(pctCurrentColorTemperature);

        auto win32_impl_result = g_api_table.GetMonitorColorTemperature(hMonitor, pctCurrentColorTemperature);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorRedGreenOrBlueDrive(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DRIVE_TYPE dtDriveType, uint32_t* pdwMinimumDrive, uint32_t* pdwCurrentDrive, uint32_t* pdwMaximumDrive) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(dtDriveType);
        ORBIT_TRACK_PARAM(pdwMinimumDrive);
        ORBIT_TRACK_PARAM(pdwCurrentDrive);
        ORBIT_TRACK_PARAM(pdwMaximumDrive);

        auto win32_impl_result = g_api_table.GetMonitorRedGreenOrBlueDrive(hMonitor, dtDriveType, pdwMinimumDrive, pdwCurrentDrive, pdwMaximumDrive);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorRedGreenOrBlueGain(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_GAIN_TYPE gtGainType, uint32_t* pdwMinimumGain, uint32_t* pdwCurrentGain, uint32_t* pdwMaximumGain) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(gtGainType);
        ORBIT_TRACK_PARAM(pdwMinimumGain);
        ORBIT_TRACK_PARAM(pdwCurrentGain);
        ORBIT_TRACK_PARAM(pdwMaximumGain);

        auto win32_impl_result = g_api_table.GetMonitorRedGreenOrBlueGain(hMonitor, gtGainType, pdwMinimumGain, pdwCurrentGain, pdwMaximumGain);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorBrightness(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t dwNewBrightness) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(dwNewBrightness);

        auto win32_impl_result = g_api_table.SetMonitorBrightness(hMonitor, dwNewBrightness);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorContrast(win32::Windows::Win32::Foundation::HANDLE hMonitor, uint32_t dwNewContrast) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(dwNewContrast);

        auto win32_impl_result = g_api_table.SetMonitorContrast(hMonitor, dwNewContrast);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorColorTemperature(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_COLOR_TEMPERATURE ctCurrentColorTemperature) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(ctCurrentColorTemperature);

        auto win32_impl_result = g_api_table.SetMonitorColorTemperature(hMonitor, ctCurrentColorTemperature);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorRedGreenOrBlueDrive(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_DRIVE_TYPE dtDriveType, uint32_t dwNewDrive) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(dtDriveType);
        ORBIT_TRACK_PARAM(dwNewDrive);

        auto win32_impl_result = g_api_table.SetMonitorRedGreenOrBlueDrive(hMonitor, dtDriveType, dwNewDrive);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorRedGreenOrBlueGain(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_GAIN_TYPE gtGainType, uint32_t dwNewGain) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(gtGainType);
        ORBIT_TRACK_PARAM(dwNewGain);

        auto win32_impl_result = g_api_table.SetMonitorRedGreenOrBlueGain(hMonitor, gtGainType, dwNewGain);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_DegaussMonitor(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);

        auto win32_impl_result = g_api_table.DegaussMonitor(hMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorDisplayAreaSize(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_SIZE_TYPE stSizeType, uint32_t* pdwMinimumWidthOrHeight, uint32_t* pdwCurrentWidthOrHeight, uint32_t* pdwMaximumWidthOrHeight) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(stSizeType);
        ORBIT_TRACK_PARAM(pdwMinimumWidthOrHeight);
        ORBIT_TRACK_PARAM(pdwCurrentWidthOrHeight);
        ORBIT_TRACK_PARAM(pdwMaximumWidthOrHeight);

        auto win32_impl_result = g_api_table.GetMonitorDisplayAreaSize(hMonitor, stSizeType, pdwMinimumWidthOrHeight, pdwCurrentWidthOrHeight, pdwMaximumWidthOrHeight);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetMonitorDisplayAreaPosition(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_POSITION_TYPE ptPositionType, uint32_t* pdwMinimumPosition, uint32_t* pdwCurrentPosition, uint32_t* pdwMaximumPosition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(ptPositionType);
        ORBIT_TRACK_PARAM(pdwMinimumPosition);
        ORBIT_TRACK_PARAM(pdwCurrentPosition);
        ORBIT_TRACK_PARAM(pdwMaximumPosition);

        auto win32_impl_result = g_api_table.GetMonitorDisplayAreaPosition(hMonitor, ptPositionType, pdwMinimumPosition, pdwCurrentPosition, pdwMaximumPosition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorDisplayAreaSize(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_SIZE_TYPE stSizeType, uint32_t dwNewDisplayAreaWidthOrHeight) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(stSizeType);
        ORBIT_TRACK_PARAM(dwNewDisplayAreaWidthOrHeight);

        auto win32_impl_result = g_api_table.SetMonitorDisplayAreaSize(hMonitor, stSizeType, dwNewDisplayAreaWidthOrHeight);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_SetMonitorDisplayAreaPosition(win32::Windows::Win32::Foundation::HANDLE hMonitor, win32::Windows::Win32::Devices::Display::MC_POSITION_TYPE ptPositionType, uint32_t dwNewPosition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(ptPositionType);
        ORBIT_TRACK_PARAM(dwNewPosition);

        auto win32_impl_result = g_api_table.SetMonitorDisplayAreaPosition(hMonitor, ptPositionType, dwNewPosition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RestoreMonitorFactoryColorDefaults(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);

        auto win32_impl_result = g_api_table.RestoreMonitorFactoryColorDefaults(hMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_RestoreMonitorFactoryDefaults(win32::Windows::Win32::Foundation::HANDLE hMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);

        auto win32_impl_result = g_api_table.RestoreMonitorFactoryDefaults(hMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetAutoRotationState(win32::Windows::Win32::Devices::Display::AR_STATE* pState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pState);

        auto win32_impl_result = g_api_table.GetAutoRotationState(pState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetDisplayAutoRotationPreferences(win32::Windows::Win32::Devices::Display::ORIENTATION_PREFERENCE* pOrientation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOrientation);

        auto win32_impl_result = g_api_table.GetDisplayAutoRotationPreferences(pOrientation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetDisplayAutoRotationPreferences(win32::Windows::Win32::Devices::Display::ORIENTATION_PREFERENCE orientation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(orientation);

        auto win32_impl_result = g_api_table.SetDisplayAutoRotationPreferences(orientation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
