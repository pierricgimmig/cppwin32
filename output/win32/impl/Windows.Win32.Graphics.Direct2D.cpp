// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Graphics_Direct2D_2_H
#define WIN32_Windows_Win32_Graphics_Direct2D_2_H
#include "win32/Windows.Win32.Graphics.Direct2D.h"
#include "win32/impl/Windows.Win32.Graphics.Direct2D.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Graphics::Direct2D
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_D2D1CreateFactory(win32::Windows::Win32::Graphics::Direct2D::D2D1_FACTORY_TYPE factoryType, ::win32::guid* riid, win32::Windows::Win32::Graphics::Direct2D::D2D1_FACTORY_OPTIONS* pFactoryOptions, void** ppIFactory) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(factoryType);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(pFactoryOptions);
        ORBIT_TRACK_PARAM(ppIFactory);

        auto win32_impl_result = g_api_table.D2D1CreateFactory(factoryType, riid, pFactoryOptions, ppIFactory);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_D2D1MakeRotateMatrix(float angle, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F center, win32::Windows::Win32::Graphics::Direct2D::D2D_MATRIX_3X2_F* matrix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(angle);
        ORBIT_TRACK_PARAM(center);
        ORBIT_TRACK_PARAM(matrix);

        g_api_table.D2D1MakeRotateMatrix(angle, center, matrix);
        
    }

    void __stdcall ORBIT_IMPL_D2D1MakeSkewMatrix(float angleX, float angleY, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F center, win32::Windows::Win32::Graphics::Direct2D::D2D_MATRIX_3X2_F* matrix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(angleX);
        ORBIT_TRACK_PARAM(angleY);
        ORBIT_TRACK_PARAM(center);
        ORBIT_TRACK_PARAM(matrix);

        g_api_table.D2D1MakeSkewMatrix(angleX, angleY, center, matrix);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_D2D1IsMatrixInvertible(win32::Windows::Win32::Graphics::Direct2D::D2D_MATRIX_3X2_F* matrix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(matrix);

        auto win32_impl_result = g_api_table.D2D1IsMatrixInvertible(matrix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_D2D1InvertMatrix(win32::Windows::Win32::Graphics::Direct2D::D2D_MATRIX_3X2_F* matrix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(matrix);

        auto win32_impl_result = g_api_table.D2D1InvertMatrix(matrix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_D2D1CreateDevice(win32::Windows::Win32::Graphics::Dxgi::IDXGIDevice* dxgiDevice, win32::Windows::Win32::Graphics::Direct2D::D2D1_CREATION_PROPERTIES* creationProperties, win32::Windows::Win32::Graphics::Direct2D::ID2D1Device** d2dDevice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dxgiDevice);
        ORBIT_TRACK_PARAM(creationProperties);
        ORBIT_TRACK_PARAM(d2dDevice);

        auto win32_impl_result = g_api_table.D2D1CreateDevice(dxgiDevice, creationProperties, d2dDevice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_D2D1CreateDeviceContext(win32::Windows::Win32::Graphics::Dxgi::IDXGISurface* dxgiSurface, win32::Windows::Win32::Graphics::Direct2D::D2D1_CREATION_PROPERTIES* creationProperties, win32::Windows::Win32::Graphics::Direct2D::ID2D1DeviceContext** d2dDeviceContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dxgiSurface);
        ORBIT_TRACK_PARAM(creationProperties);
        ORBIT_TRACK_PARAM(d2dDeviceContext);

        auto win32_impl_result = g_api_table.D2D1CreateDeviceContext(dxgiSurface, creationProperties, d2dDeviceContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::Direct2D::D2D1_COLOR_F __stdcall ORBIT_IMPL_D2D1ConvertColorSpace(win32::Windows::Win32::Graphics::Direct2D::D2D1_COLOR_SPACE sourceColorSpace, win32::Windows::Win32::Graphics::Direct2D::D2D1_COLOR_SPACE destinationColorSpace, win32::Windows::Win32::Graphics::Direct2D::D2D1_COLOR_F* color) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sourceColorSpace);
        ORBIT_TRACK_PARAM(destinationColorSpace);
        ORBIT_TRACK_PARAM(color);

        auto win32_impl_result = g_api_table.D2D1ConvertColorSpace(sourceColorSpace, destinationColorSpace, color);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_D2D1SinCos(float angle, float* s, float* c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(angle);
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(c);

        g_api_table.D2D1SinCos(angle, s, c);
        
    }

    float __stdcall ORBIT_IMPL_D2D1Tan(float angle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(angle);

        auto win32_impl_result = g_api_table.D2D1Tan(angle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    float __stdcall ORBIT_IMPL_D2D1Vec3Length(float x, float y, float z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        auto win32_impl_result = g_api_table.D2D1Vec3Length(x, y, z);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    float __stdcall ORBIT_IMPL_D2D1ComputeMaximumScaleFactor(win32::Windows::Win32::Graphics::Direct2D::D2D_MATRIX_3X2_F* matrix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(matrix);

        auto win32_impl_result = g_api_table.D2D1ComputeMaximumScaleFactor(matrix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_D2D1GetGradientMeshInteriorPointsFromCoonsPatch(win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint0, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint1, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint2, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint3, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint4, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint5, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint6, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint7, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint8, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint9, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint10, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pPoint11, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pTensorPoint11, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pTensorPoint12, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pTensorPoint21, win32::Windows::Win32::Graphics::Direct2D::D2D_POINT_2F* pTensorPoint22) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPoint0);
        ORBIT_TRACK_PARAM(pPoint1);
        ORBIT_TRACK_PARAM(pPoint2);
        ORBIT_TRACK_PARAM(pPoint3);
        ORBIT_TRACK_PARAM(pPoint4);
        ORBIT_TRACK_PARAM(pPoint5);
        ORBIT_TRACK_PARAM(pPoint6);
        ORBIT_TRACK_PARAM(pPoint7);
        ORBIT_TRACK_PARAM(pPoint8);
        ORBIT_TRACK_PARAM(pPoint9);
        ORBIT_TRACK_PARAM(pPoint10);
        ORBIT_TRACK_PARAM(pPoint11);
        ORBIT_TRACK_PARAM(pTensorPoint11);
        ORBIT_TRACK_PARAM(pTensorPoint12);
        ORBIT_TRACK_PARAM(pTensorPoint21);
        ORBIT_TRACK_PARAM(pTensorPoint22);

        g_api_table.D2D1GetGradientMeshInteriorPointsFromCoonsPatch(pPoint0, pPoint1, pPoint2, pPoint3, pPoint4, pPoint5, pPoint6, pPoint7, pPoint8, pPoint9, pPoint10, pPoint11, pTensorPoint11, pTensorPoint12, pTensorPoint21, pTensorPoint22);
        
    }

}

#pragma endregion abi_methods

}
#endif
