// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UI_Input_2_H
#define WIN32_Windows_Win32_UI_Input_2_H
#include "win32/Windows.Win32.UI.Input.h"
#include "win32/impl/Windows.Win32.UI.Input.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::UI::Input
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_GetRawInputData(win32::Windows::Win32::UI::Input::HRAWINPUT hRawInput, win32::Windows::Win32::UI::Input::RAW_INPUT_DATA_COMMAND_FLAGS uiCommand, void* pData, uint32_t* pcbSize, uint32_t cbSizeHeader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRawInput);
        ORBIT_TRACK_PARAM(uiCommand);
        ORBIT_TRACK_PARAM(pData);
        ORBIT_TRACK_PARAM(pcbSize);
        ORBIT_TRACK_PARAM(cbSizeHeader);

        auto win32_impl_result = g_api_table.GetRawInputData(hRawInput, uiCommand, pData, pcbSize, cbSizeHeader);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetRawInputDeviceInfoA(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::UI::Input::RAW_INPUT_DEVICE_INFO_COMMAND uiCommand, void* pData, uint32_t* pcbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(uiCommand);
        ORBIT_TRACK_PARAM(pData);
        ORBIT_TRACK_PARAM(pcbSize);

        auto win32_impl_result = g_api_table.GetRawInputDeviceInfoA(hDevice, uiCommand, pData, pcbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetRawInputDeviceInfoW(win32::Windows::Win32::Foundation::HANDLE hDevice, win32::Windows::Win32::UI::Input::RAW_INPUT_DEVICE_INFO_COMMAND uiCommand, void* pData, uint32_t* pcbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDevice);
        ORBIT_TRACK_PARAM(uiCommand);
        ORBIT_TRACK_PARAM(pData);
        ORBIT_TRACK_PARAM(pcbSize);

        auto win32_impl_result = g_api_table.GetRawInputDeviceInfoW(hDevice, uiCommand, pData, pcbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetRawInputBuffer(win32::Windows::Win32::UI::Input::RAWINPUT* pData, uint32_t* pcbSize, uint32_t cbSizeHeader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pData);
        ORBIT_TRACK_PARAM(pcbSize);
        ORBIT_TRACK_PARAM(cbSizeHeader);

        auto win32_impl_result = g_api_table.GetRawInputBuffer(pData, pcbSize, cbSizeHeader);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RegisterRawInputDevices(win32::Windows::Win32::UI::Input::RAWINPUTDEVICE* pRawInputDevices, uint32_t uiNumDevices, uint32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRawInputDevices);
        ORBIT_TRACK_PARAM(uiNumDevices);
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.RegisterRawInputDevices(pRawInputDevices, uiNumDevices, cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetRegisteredRawInputDevices(win32::Windows::Win32::UI::Input::RAWINPUTDEVICE* pRawInputDevices, uint32_t* puiNumDevices, uint32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRawInputDevices);
        ORBIT_TRACK_PARAM(puiNumDevices);
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.GetRegisteredRawInputDevices(pRawInputDevices, puiNumDevices, cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetRawInputDeviceList(win32::Windows::Win32::UI::Input::RAWINPUTDEVICELIST* pRawInputDeviceList, uint32_t* puiNumDevices, uint32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pRawInputDeviceList);
        ORBIT_TRACK_PARAM(puiNumDevices);
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.GetRawInputDeviceList(pRawInputDeviceList, puiNumDevices, cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::LRESULT __stdcall ORBIT_IMPL_DefRawInputProc(win32::Windows::Win32::UI::Input::RAWINPUT** paRawInput, int32_t nInput, uint32_t cbSizeHeader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(paRawInput);
        ORBIT_TRACK_PARAM(nInput);
        ORBIT_TRACK_PARAM(cbSizeHeader);

        auto win32_impl_result = g_api_table.DefRawInputProc(paRawInput, nInput, cbSizeHeader);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetCurrentInputMessageSource(win32::Windows::Win32::UI::Input::INPUT_MESSAGE_SOURCE* inputMessageSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(inputMessageSource);

        auto win32_impl_result = g_api_table.GetCurrentInputMessageSource(inputMessageSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetCIMSSM(win32::Windows::Win32::UI::Input::INPUT_MESSAGE_SOURCE* inputMessageSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(inputMessageSource);

        auto win32_impl_result = g_api_table.GetCIMSSM(inputMessageSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
