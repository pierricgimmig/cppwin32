// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Rpc_0_H
#define WIN32_Windows_Win32_System_Rpc_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct PSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Rpc
{
#pragma region enums
    enum class EXPR_TOKEN : int32_t
    {
        FC_EXPR_START = 0,
        FC_EXPR_ILLEGAL = 0,
        FC_EXPR_CONST32 = 1,
        FC_EXPR_CONST64 = 2,
        FC_EXPR_VAR = 3,
        FC_EXPR_OPER = 4,
        FC_EXPR_NOOP = 5,
        FC_EXPR_END = 6,
    };
    enum class ExtendedErrorParamTypes : int32_t
    {
        eeptAnsiString = 1,
        eeptUnicodeString = 2,
        eeptLongVal = 3,
        eeptShortVal = 4,
        eeptPointerVal = 5,
        eeptNone = 6,
        eeptBinary = 7,
    };
    enum class GROUP_NAME_SYNTAX : uint32_t
    {
        RPC_C_NS_SYNTAX_DEFAULT = 0x0,
        RPC_C_NS_SYNTAX_DCE = 0x3,
    };
    enum class IDL_CS_CONVERT : int32_t
    {
        IDL_CS_NO_CONVERT = 0,
        IDL_CS_IN_PLACE_CONVERT = 1,
        IDL_CS_NEW_BUFFER_CONVERT = 2,
    };
    enum class LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION : int32_t
    {
        MarshalDirectionMarshal = 0,
        MarshalDirectionUnmarshal = 1,
    };
    enum class MIDL_ES_CODE : int32_t
    {
        MES_ENCODE = 0,
        MES_DECODE = 1,
        MES_ENCODE_NDR64 = 2,
    };
    enum class MIDL_ES_HANDLE_STYLE : int32_t
    {
        MES_INCREMENTAL_HANDLE = 0,
        MES_FIXED_BUFFER_HANDLE = 1,
        MES_DYNAMIC_BUFFER_HANDLE = 2,
    };
    enum class PROXY_PHASE : int32_t
    {
        PROXY_CALCSIZE = 0,
        PROXY_GETBUFFER = 1,
        PROXY_MARSHAL = 2,
        PROXY_SENDRECEIVE = 3,
        PROXY_UNMARSHAL = 4,
    };
    enum class RPC_ADDRESS_CHANGE_TYPE : int32_t
    {
        PROTOCOL_NOT_LOADED = 1,
        PROTOCOL_LOADED = 2,
        PROTOCOL_ADDRESS_CHANGE = 3,
    };
    enum class RPC_ASYNC_EVENT : int32_t
    {
        RpcCallComplete = 0,
        RpcSendComplete = 1,
        RpcReceiveComplete = 2,
        RpcClientDisconnect = 3,
        RpcClientCancel = 4,
    };
    enum class RPC_BINDING_HANDLE_OPTIONS_FLAGS : uint32_t
    {
        RPC_BHO_NONCAUSAL = 0x1,
        RPC_BHO_DONTLINGER = 0x2,
    };
    enum class RPC_C_AUTHN_INFO_TYPE : uint32_t
    {
        RPC_C_AUTHN_INFO_NONE = 0x0,
        RPC_C_AUTHN_INFO_TYPE_HTTP = 0x1,
    };
    enum class RPC_C_HTTP_AUTHN_TARGET : uint32_t
    {
        RPC_C_HTTP_AUTHN_TARGET_SERVER = 0x1,
        RPC_C_HTTP_AUTHN_TARGET_PROXY = 0x2,
    };
    enum class RPC_C_HTTP_FLAGS : uint32_t
    {
        RPC_C_HTTP_FLAG_USE_SSL = 0x1,
        RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME = 0x2,
        RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID = 0x8,
        RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK = 0x10,
    };
    enum class RPC_C_QOS_CAPABILITIES : uint32_t
    {
        RPC_C_QOS_CAPABILITIES_DEFAULT = 0x0,
        RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 0x1,
        RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = 0x2,
        RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = 0x4,
        RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE = 0x8,
        RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT = 0x10,
        RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY = 0x20,
    };
    enum class RPC_C_QOS_IDENTITY : uint32_t
    {
        RPC_C_QOS_IDENTITY_STATIC = 0x0,
        RPC_C_QOS_IDENTITY_DYNAMIC = 0x1,
    };
    enum class RPC_HTTP_REDIRECTOR_STAGE : int32_t
    {
        RPCHTTP_RS_REDIRECT = 1,
        RPCHTTP_RS_ACCESS_1 = 2,
        RPCHTTP_RS_SESSION = 3,
        RPCHTTP_RS_ACCESS_2 = 4,
        RPCHTTP_RS_INTERFACE = 5,
    };
    enum class RPC_NOTIFICATIONS : int32_t
    {
        RpcNotificationCallNone = 0,
        RpcNotificationClientDisconnect = 1,
        RpcNotificationCallCancel = 2,
    };
    enum class RPC_NOTIFICATION_TYPES : int32_t
    {
        RpcNotificationTypeNone = 0,
        RpcNotificationTypeEvent = 1,
        RpcNotificationTypeApc = 2,
        RpcNotificationTypeIoc = 3,
        RpcNotificationTypeHwnd = 4,
        RpcNotificationTypeCallback = 5,
    };
    enum class RPC_STATUS : int32_t
    {
        RPC_S_INVALID_STRING_BINDING = 1700,
        RPC_S_WRONG_KIND_OF_BINDING = 1701,
        RPC_S_INVALID_BINDING = 1702,
        RPC_S_PROTSEQ_NOT_SUPPORTED = 1703,
        RPC_S_INVALID_RPC_PROTSEQ = 1704,
        RPC_S_INVALID_STRING_UUID = 1705,
        RPC_S_INVALID_ENDPOINT_FORMAT = 1706,
        RPC_S_INVALID_NET_ADDR = 1707,
        RPC_S_NO_ENDPOINT_FOUND = 1708,
        RPC_S_INVALID_TIMEOUT = 1709,
        RPC_S_OBJECT_NOT_FOUND = 1710,
        RPC_S_ALREADY_REGISTERED = 1711,
        RPC_S_TYPE_ALREADY_REGISTERED = 1712,
        RPC_S_ALREADY_LISTENING = 1713,
        RPC_S_NO_PROTSEQS_REGISTERED = 1714,
        RPC_S_NOT_LISTENING = 1715,
        RPC_S_UNKNOWN_MGR_TYPE = 1716,
        RPC_S_UNKNOWN_IF = 1717,
        RPC_S_NO_BINDINGS = 1718,
        RPC_S_NO_PROTSEQS = 1719,
        RPC_S_CANT_CREATE_ENDPOINT = 1720,
        RPC_S_OUT_OF_RESOURCES = 1721,
        RPC_S_SERVER_UNAVAILABLE = 1722,
        RPC_S_SERVER_TOO_BUSY = 1723,
        RPC_S_INVALID_NETWORK_OPTIONS = 1724,
        RPC_S_NO_CALL_ACTIVE = 1725,
        RPC_S_CALL_FAILED = 1726,
        RPC_S_CALL_FAILED_DNE = 1727,
        RPC_S_PROTOCOL_ERROR = 1728,
        RPC_S_PROXY_ACCESS_DENIED = 1729,
        RPC_S_UNSUPPORTED_TRANS_SYN = 1730,
        RPC_S_UNSUPPORTED_TYPE = 1732,
        RPC_S_INVALID_TAG = 1733,
        RPC_S_INVALID_BOUND = 1734,
        RPC_S_NO_ENTRY_NAME = 1735,
        RPC_S_INVALID_NAME_SYNTAX = 1736,
        RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737,
        RPC_S_UUID_NO_ADDRESS = 1739,
        RPC_S_DUPLICATE_ENDPOINT = 1740,
        RPC_S_UNKNOWN_AUTHN_TYPE = 1741,
        RPC_S_MAX_CALLS_TOO_SMALL = 1742,
        RPC_S_STRING_TOO_LONG = 1743,
        RPC_S_PROTSEQ_NOT_FOUND = 1744,
        RPC_S_PROCNUM_OUT_OF_RANGE = 1745,
        RPC_S_BINDING_HAS_NO_AUTH = 1746,
        RPC_S_UNKNOWN_AUTHN_SERVICE = 1747,
        RPC_S_UNKNOWN_AUTHN_LEVEL = 1748,
        RPC_S_INVALID_AUTH_IDENTITY = 1749,
        RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750,
        EPT_S_INVALID_ENTRY = 1751,
        EPT_S_CANT_PERFORM_OP = 1752,
        EPT_S_NOT_REGISTERED = 1753,
        RPC_S_NOTHING_TO_EXPORT = 1754,
        RPC_S_INCOMPLETE_NAME = 1755,
        RPC_S_INVALID_VERS_OPTION = 1756,
        RPC_S_NO_MORE_MEMBERS = 1757,
        RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758,
        RPC_S_INTERFACE_NOT_FOUND = 1759,
        RPC_S_ENTRY_ALREADY_EXISTS = 1760,
        RPC_S_ENTRY_NOT_FOUND = 1761,
        RPC_S_NAME_SERVICE_UNAVAILABLE = 1762,
        RPC_S_INVALID_NAF_ID = 1763,
        RPC_S_CANNOT_SUPPORT = 1764,
        RPC_S_NO_CONTEXT_AVAILABLE = 1765,
        RPC_S_INTERNAL_ERROR = 1766,
        RPC_S_ZERO_DIVIDE = 1767,
        RPC_S_ADDRESS_ERROR = 1768,
        RPC_S_FP_DIV_ZERO = 1769,
        RPC_S_FP_UNDERFLOW = 1770,
        RPC_S_FP_OVERFLOW = 1771,
        RPC_S_CALL_IN_PROGRESS = 1791,
        RPC_S_NO_MORE_BINDINGS = 1806,
        RPC_S_NO_INTERFACES = 1817,
        RPC_S_CALL_CANCELLED = 1818,
        RPC_S_BINDING_INCOMPLETE = 1819,
        RPC_S_COMM_FAILURE = 1820,
        RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821,
        RPC_S_NO_PRINC_NAME = 1822,
        RPC_S_NOT_RPC_ERROR = 1823,
        RPC_S_UUID_LOCAL_ONLY = 1824,
        RPC_S_SEC_PKG_ERROR = 1825,
        RPC_S_NOT_CANCELLED = 1826,
        RPC_S_COOKIE_AUTH_FAILED = 1833,
        RPC_S_DO_NOT_DISTURB = 1834,
        RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED = 1835,
        RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH = 1836,
        RPC_S_GROUP_MEMBER_NOT_FOUND = 1898,
        EPT_S_CANT_CREATE = 1899,
        RPC_S_INVALID_OBJECT = 1900,
        RPC_S_SEND_INCOMPLETE = 1913,
        RPC_S_INVALID_ASYNC_HANDLE = 1914,
        RPC_S_INVALID_ASYNC_CALL = 1915,
        RPC_S_ENTRY_TYPE_MISMATCH = 1922,
        RPC_S_NOT_ALL_OBJS_EXPORTED = 1923,
        RPC_S_INTERFACE_NOT_EXPORTED = 1924,
        RPC_S_PROFILE_NOT_ADDED = 1925,
        RPC_S_PRF_ELT_NOT_ADDED = 1926,
        RPC_S_PRF_ELT_NOT_REMOVED = 1927,
        RPC_S_GRP_ELT_NOT_ADDED = 1928,
        RPC_S_GRP_ELT_NOT_REMOVED = 1929,
    };
    enum class RpcCallClientLocality : int32_t
    {
        rcclInvalid = 0,
        rcclLocal = 1,
        rcclRemote = 2,
        rcclClientUnknownLocality = 3,
    };
    enum class RpcCallType : int32_t
    {
        rctInvalid = 0,
        rctNormal = 1,
        rctTraining = 2,
        rctGuaranteed = 3,
    };
    enum class RpcLocalAddressFormat : int32_t
    {
        rlafInvalid = 0,
        rlafIPv4 = 1,
        rlafIPv6 = 2,
    };
    enum class RpcProxyPerfCounters : int32_t
    {
        RpcCurrentUniqueUser = 1,
        RpcBackEndConnectionAttempts = 2,
        RpcBackEndConnectionFailed = 3,
        RpcRequestsPerSecond = 4,
        RpcIncomingConnections = 5,
        RpcIncomingBandwidth = 6,
        RpcOutgoingBandwidth = 7,
        RpcAttemptedLbsDecisions = 8,
        RpcFailedLbsDecisions = 9,
        RpcAttemptedLbsMessages = 10,
        RpcFailedLbsMessages = 11,
        RpcLastCounter = 12,
    };
    enum class SEC_WINNT_AUTH_IDENTITY : uint32_t
    {
        SEC_WINNT_AUTH_IDENTITY_ANSI = 0x1,
        SEC_WINNT_AUTH_IDENTITY_UNICODE = 0x2,
    };
    enum class STUB_PHASE : int32_t
    {
        STUB_UNMARSHAL = 0,
        STUB_CALL_SERVER = 1,
        STUB_MARSHAL = 2,
        STUB_CALL_SERVER_NO_HRESULT = 3,
    };
    enum class USER_MARSHAL_CB_TYPE : int32_t
    {
        USER_MARSHAL_CB_BUFFER_SIZE = 0,
        USER_MARSHAL_CB_MARSHALL = 1,
        USER_MARSHAL_CB_UNMARSHALL = 2,
        USER_MARSHAL_CB_FREE = 3,
    };
    enum class XLAT_SIDE : int32_t
    {
        XLAT_SERVER = 1,
        XLAT_CLIENT = 2,
    };
    enum class system_handle_t : int32_t
    {
        SYSTEM_HANDLE_FILE = 0,
        SYSTEM_HANDLE_SEMAPHORE = 1,
        SYSTEM_HANDLE_EVENT = 2,
        SYSTEM_HANDLE_MUTEX = 3,
        SYSTEM_HANDLE_PROCESS = 4,
        SYSTEM_HANDLE_TOKEN = 5,
        SYSTEM_HANDLE_SECTION = 6,
        SYSTEM_HANDLE_REG_KEY = 7,
        SYSTEM_HANDLE_THREAD = 8,
        SYSTEM_HANDLE_COMPOSITION_OBJECT = 9,
        SYSTEM_HANDLE_SOCKET = 10,
        SYSTEM_HANDLE_JOB = 11,
        SYSTEM_HANDLE_PIPE = 12,
        SYSTEM_HANDLE_MAX = 12,
        SYSTEM_HANDLE_INVALID = 255,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ARRAY_INFO;
    struct BinaryParam;
    union CLIENT_CALL_RETURN;
    struct COMM_FAULT_OFFSETS;
    struct FULL_PTR_XLAT_TABLES;
    struct GENERIC_BINDING_INFO;
    struct GENERIC_BINDING_ROUTINE_PAIR;
    struct I_RpcProxyCallbackInterface;
    struct MALLOC_FREE_STRUCT;
    struct MIDL_FORMAT_STRING;
    struct MIDL_INTERCEPTION_INFO;
    struct MIDL_INTERFACE_METHOD_PROPERTIES;
    struct MIDL_METHOD_PROPERTY;
    struct MIDL_METHOD_PROPERTY_MAP;
    struct MIDL_SERVER_INFO;
    struct MIDL_STUBLESS_PROXY_INFO;
    struct MIDL_STUB_DESC;
    struct MIDL_STUB_MESSAGE;
    struct MIDL_SYNTAX_INFO;
    struct MIDL_TYPE_PICKLING_INFO;
    struct MIDL_WINRT_TYPE_SERIALIZATION_INFO;
    struct NDR64_ARRAY_ELEMENT_INFO;
    struct NDR64_ARRAY_FLAGS;
    union NDR64_BINDINGS;
    struct NDR64_BIND_AND_NOTIFY_EXTENSION;
    struct NDR64_BIND_CONTEXT;
    struct NDR64_BIND_GENERIC;
    struct NDR64_BIND_PRIMITIVE;
    struct NDR64_BOGUS_ARRAY_HEADER_FORMAT;
    struct NDR64_BOGUS_STRUCTURE_HEADER_FORMAT;
    struct NDR64_BUFFER_ALIGN_FORMAT;
    struct NDR64_CONFORMANT_STRING_FORMAT;
    struct NDR64_CONF_ARRAY_HEADER_FORMAT;
    struct NDR64_CONF_BOGUS_STRUCTURE_HEADER_FORMAT;
    struct NDR64_CONF_STRUCTURE_HEADER_FORMAT;
    struct NDR64_CONF_VAR_ARRAY_HEADER_FORMAT;
    struct NDR64_CONF_VAR_BOGUS_ARRAY_HEADER_FORMAT;
    struct NDR64_CONSTANT_IID_FORMAT;
    struct NDR64_CONTEXT_HANDLE_FLAGS;
    struct NDR64_CONTEXT_HANDLE_FORMAT;
    struct NDR64_EMBEDDED_COMPLEX_FORMAT;
    struct NDR64_ENCAPSULATED_UNION;
    struct NDR64_EXPR_CONST32;
    struct NDR64_EXPR_CONST64;
    struct NDR64_EXPR_NOOP;
    struct NDR64_EXPR_OPERATOR;
    struct NDR64_EXPR_VAR;
    struct NDR64_FIXED_REPEAT_FORMAT;
    struct NDR64_FIX_ARRAY_HEADER_FORMAT;
    struct NDR64_IID_FLAGS;
    struct NDR64_IID_FORMAT;
    struct NDR64_MEMPAD_FORMAT;
    struct NDR64_NON_CONFORMANT_STRING_FORMAT;
    struct NDR64_NON_ENCAPSULATED_UNION;
    struct NDR64_NO_REPEAT_FORMAT;
    struct NDR64_PARAM_FLAGS;
    struct NDR64_PARAM_FORMAT;
    struct NDR64_PIPE_FLAGS;
    struct NDR64_PIPE_FORMAT;
    struct NDR64_POINTER_FORMAT;
    struct NDR64_POINTER_INSTANCE_HEADER_FORMAT;
    struct NDR64_POINTER_REPEAT_FLAGS;
    struct NDR64_PROC_FLAGS;
    struct NDR64_PROC_FORMAT;
    struct NDR64_RANGED_STRING_FORMAT;
    struct NDR64_RANGE_FORMAT;
    struct NDR64_RANGE_PIPE_FORMAT;
    struct NDR64_REPEAT_FORMAT;
    struct NDR64_RPC_FLAGS;
    struct NDR64_SIMPLE_MEMBER_FORMAT;
    struct NDR64_SIMPLE_REGION_FORMAT;
    struct NDR64_SIZED_CONFORMANT_STRING_FORMAT;
    struct NDR64_STRING_FLAGS;
    struct NDR64_STRING_HEADER_FORMAT;
    struct NDR64_STRUCTURE_FLAGS;
    struct NDR64_STRUCTURE_HEADER_FORMAT;
    struct NDR64_SYSTEM_HANDLE_FORMAT;
    struct NDR64_TRANSMIT_AS_FLAGS;
    struct NDR64_TRANSMIT_AS_FORMAT;
    struct NDR64_TYPE_STRICT_CONTEXT_HANDLE;
    struct NDR64_UNION_ARM;
    struct NDR64_UNION_ARM_SELECTOR;
    struct NDR64_USER_MARSHAL_FLAGS;
    struct NDR64_USER_MARSHAL_FORMAT;
    struct NDR64_VAR_ARRAY_HEADER_FORMAT;
    struct NDR_ALLOC_ALL_NODES_CONTEXT;
    struct NDR_CS_ROUTINES;
    struct NDR_CS_SIZE_CONVERT_ROUTINES;
    struct NDR_EXPR_DESC;
    struct NDR_POINTER_QUEUE_STATE;
    struct NDR_SCONTEXT_1;
    struct NDR_USER_MARSHAL_INFO;
    struct NDR_USER_MARSHAL_INFO_LEVEL1;
    struct RDR_CALLOUT_STATE;
    union RPC_ASYNC_NOTIFICATION_INFO;
    struct RPC_ASYNC_STATE;
    struct RPC_BINDING_HANDLE_OPTIONS_V1;
    struct RPC_BINDING_HANDLE_SECURITY_V1_A;
    struct RPC_BINDING_HANDLE_SECURITY_V1_W;
    struct RPC_BINDING_HANDLE_TEMPLATE_V1_A;
    struct RPC_BINDING_HANDLE_TEMPLATE_V1_W;
    struct RPC_BINDING_VECTOR;
    struct RPC_CALL_ATTRIBUTES_V1_A;
    struct RPC_CALL_ATTRIBUTES_V1_W;
    struct RPC_CALL_ATTRIBUTES_V2_A;
    struct RPC_CALL_ATTRIBUTES_V2_W;
    struct RPC_CALL_ATTRIBUTES_V3_A;
    struct RPC_CALL_ATTRIBUTES_V3_W;
    struct RPC_CALL_LOCAL_ADDRESS_V1;
    struct RPC_CLIENT_INFORMATION1;
    struct RPC_CLIENT_INTERFACE;
    struct RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
    struct RPC_DISPATCH_TABLE;
    struct RPC_EE_INFO_PARAM;
    struct RPC_ENDPOINT_TEMPLATEA;
    struct RPC_ENDPOINT_TEMPLATEW;
    struct RPC_ERROR_ENUM_HANDLE;
    struct RPC_EXTENDED_ERROR_INFO;
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_A;
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
    struct RPC_HTTP_TRANSPORT_CREDENTIALS_W;
    struct RPC_IF_ID;
    struct RPC_IF_ID_VECTOR;
    struct RPC_INTERFACE_TEMPLATEA;
    struct RPC_INTERFACE_TEMPLATEW;
    struct RPC_MESSAGE;
    struct RPC_POLICY;
    struct RPC_PROTSEQ_ENDPOINT;
    struct RPC_PROTSEQ_VECTORA;
    struct RPC_PROTSEQ_VECTORW;
    struct RPC_SECURITY_QOS;
    struct RPC_SECURITY_QOS_V2_A;
    struct RPC_SECURITY_QOS_V2_W;
    struct RPC_SECURITY_QOS_V3_A;
    struct RPC_SECURITY_QOS_V3_W;
    struct RPC_SECURITY_QOS_V4_A;
    struct RPC_SECURITY_QOS_V4_W;
    struct RPC_SECURITY_QOS_V5_A;
    struct RPC_SECURITY_QOS_V5_W;
    struct RPC_SEC_CONTEXT_KEY_INFO;
    struct RPC_SERVER_INTERFACE;
    struct RPC_STATS_VECTOR;
    struct RPC_SYNTAX_IDENTIFIER;
    struct RPC_TRANSFER_SYNTAX;
    struct RPC_VERSION;
    struct SCONTEXT_QUEUE;
    struct SEC_WINNT_AUTH_IDENTITY_A;
    struct SEC_WINNT_AUTH_IDENTITY_W;
    struct USER_MARSHAL_CB;
    struct USER_MARSHAL_ROUTINE_QUADRUPLE;
    struct UUID_VECTOR;
    struct XMIT_ROUTINE_QUINTUPLE;
    struct _NDR_ASYNC_MESSAGE;
    struct _NDR_CORRELATION_INFO;
    struct _NDR_PROC_CONTEXT;
    struct _NDR_SCONTEXT;
#pragma endregion forward_declarations

#pragma region delegates
    using RPC_OBJECT_INQ_FN = void __stdcall(::win32::guid*, ::win32::guid*, Windows::Win32::System::Rpc::RPC_STATUS*);
    using RPC_IF_CALLBACK_FN = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(void*, void*);
    using RPC_SECURITY_CALLBACK_FN = void __stdcall(void*);
    using RPC_NEW_HTTP_PROXY_CHANNEL = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(Windows::Win32::System::Rpc::RPC_HTTP_REDIRECTOR_STAGE, uint16_t*, uint16_t*, uint16_t*, uint16_t*, void*, void*, void*, void*, uint32_t, uint16_t**, uint16_t**);
    using RPC_HTTP_PROXY_FREE_STRING = void __stdcall(uint16_t*);
    using RPC_AUTH_KEY_RETRIEVAL_FN = void __stdcall(void*, uint16_t*, uint32_t, void**, Windows::Win32::System::Rpc::RPC_STATUS*);
    using RPC_MGMT_AUTHORIZATION_FN = int32_t __stdcall(void*, uint32_t, Windows::Win32::System::Rpc::RPC_STATUS*);
    using RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN = void __stdcall(void*, void*, uint32_t);
    using RPC_FORWARD_FUNCTION = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(::win32::guid*, Windows::Win32::System::Rpc::RPC_VERSION*, ::win32::guid*, uint8_t*, void**);
    using RPC_ADDRESS_CHANGE_FN = void __stdcall(void*);
    using RPC_DISPATCH_FUNCTION = void __stdcall(Windows::Win32::System::Rpc::RPC_MESSAGE*);
    using PRPC_RUNDOWN = void __stdcall(void*);
    using RPCLT_PDU_FILTER_FUNC = void __stdcall(void*, uint32_t, int32_t);
    using RPC_SETFILTER_FUNC = void __stdcall(Windows::Win32::System::Rpc::RPCLT_PDU_FILTER_FUNC*);
    using RPC_BLOCKING_FN = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(void*, void*, void*);
    using I_RpcProxyIsValidMachineFn = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(uint16_t*, uint16_t*, uint32_t);
    using I_RpcProxyGetClientAddressFn = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(void*, Windows::Win32::Foundation::PSTR, uint32_t*);
    using I_RpcProxyGetConnectionTimeoutFn = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(uint32_t*);
    using I_RpcPerformCalloutFn = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(void*, Windows::Win32::System::Rpc::RDR_CALLOUT_STATE*, Windows::Win32::System::Rpc::RPC_HTTP_REDIRECTOR_STAGE);
    using I_RpcFreeCalloutStateFn = void __stdcall(Windows::Win32::System::Rpc::RDR_CALLOUT_STATE*);
    using I_RpcProxyGetClientSessionAndResourceUUID = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(void*, int32_t*, ::win32::guid*, int32_t*, ::win32::guid*);
    using I_RpcProxyFilterIfFn = Windows::Win32::System::Rpc::RPC_STATUS __stdcall(void*, ::win32::guid*, uint16_t, int32_t*);
    using I_RpcProxyUpdatePerfCounterFn = void __stdcall(Windows::Win32::System::Rpc::RpcProxyPerfCounters, int32_t, uint32_t);
    using I_RpcProxyUpdatePerfCounterBackendServerFn = void __stdcall(uint16_t*, int32_t);
    using PFN_RPCNOTIFICATION_ROUTINE = void __stdcall(Windows::Win32::System::Rpc::RPC_ASYNC_STATE*, void*, Windows::Win32::System::Rpc::RPC_ASYNC_EVENT);
    using NDR_RUNDOWN = void __stdcall(void*);
    using NDR_NOTIFY_ROUTINE = void __stdcall();
    using NDR_NOTIFY2_ROUTINE = void __stdcall(uint8_t);
    using EXPR_EVAL = void __stdcall(Windows::Win32::System::Rpc::MIDL_STUB_MESSAGE*);
    using GENERIC_BINDING_ROUTINE = void* __stdcall(void*);
    using GENERIC_UNBIND_ROUTINE = void __stdcall(void*, uint8_t*);
    using XMIT_HELPER_ROUTINE = void __stdcall(Windows::Win32::System::Rpc::MIDL_STUB_MESSAGE*);
    using USER_MARSHAL_SIZING_ROUTINE = uint32_t __stdcall(uint32_t*, uint32_t, void*);
    using USER_MARSHAL_MARSHALLING_ROUTINE = uint8_t* __stdcall(uint32_t*, uint8_t*, void*);
    using USER_MARSHAL_UNMARSHALLING_ROUTINE = uint8_t* __stdcall(uint32_t*, uint8_t*, void*);
    using USER_MARSHAL_FREEING_ROUTINE = void __stdcall(uint32_t*, void*);
    using CS_TYPE_NET_SIZE_ROUTINE = void __stdcall(void*, uint32_t, uint32_t, Windows::Win32::System::Rpc::IDL_CS_CONVERT*, uint32_t*, uint32_t*);
    using CS_TYPE_LOCAL_SIZE_ROUTINE = void __stdcall(void*, uint32_t, uint32_t, Windows::Win32::System::Rpc::IDL_CS_CONVERT*, uint32_t*, uint32_t*);
    using CS_TYPE_TO_NETCS_ROUTINE = void __stdcall(void*, uint32_t, void*, uint32_t, uint8_t*, uint32_t*, uint32_t*);
    using CS_TYPE_FROM_NETCS_ROUTINE = void __stdcall(void*, uint32_t, uint8_t*, uint32_t, uint32_t, void*, uint32_t*, uint32_t*);
    using CS_TAG_GETTING_ROUTINE = void __stdcall(void*, int32_t, uint32_t*, uint32_t*, uint32_t*, uint32_t*);
    using STUB_THUNK = void __stdcall(Windows::Win32::System::Rpc::MIDL_STUB_MESSAGE*);
    using SERVER_ROUTINE = int32_t __stdcall();
    using RPC_CLIENT_ALLOC = void* __stdcall(size_t);
    using RPC_CLIENT_FREE = void __stdcall(void*);
    using MIDL_ES_ALLOC = void __stdcall(void*, int8_t**, uint32_t*);
    using MIDL_ES_WRITE = void __stdcall(void*, Windows::Win32::Foundation::PSTR, uint32_t);
    using MIDL_ES_READ = void __stdcall(void*, int8_t**, uint32_t*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
