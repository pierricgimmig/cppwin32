// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_Vhd_2_H
#define WIN32_Windows_Win32_Storage_Vhd_2_H
#include "win32/Windows.Win32.Storage.Vhd.h"
#include "win32/impl/Windows.Win32.Storage.Vhd.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::Vhd
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_OpenVirtualDisk(win32::Windows::Win32::Storage::Vhd::VIRTUAL_STORAGE_TYPE* VirtualStorageType, win32::Windows::Win32::Foundation::PWSTR Path, win32::Windows::Win32::Storage::Vhd::VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, win32::Windows::Win32::Storage::Vhd::OPEN_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::OPEN_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::Foundation::HANDLE* Handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualStorageType);
        ORBIT_TRACK_PARAM(Path);
        ORBIT_TRACK_PARAM(VirtualDiskAccessMask);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Handle);

        auto win32_impl_result = g_api_table.OpenVirtualDisk(VirtualStorageType, Path, VirtualDiskAccessMask, Flags, Parameters, Handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateVirtualDisk(win32::Windows::Win32::Storage::Vhd::VIRTUAL_STORAGE_TYPE* VirtualStorageType, win32::Windows::Win32::Foundation::PWSTR Path, win32::Windows::Win32::Storage::Vhd::VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* SecurityDescriptor, win32::Windows::Win32::Storage::Vhd::CREATE_VIRTUAL_DISK_FLAG Flags, uint32_t ProviderSpecificFlags, win32::Windows::Win32::Storage::Vhd::CREATE_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Foundation::HANDLE* Handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualStorageType);
        ORBIT_TRACK_PARAM(Path);
        ORBIT_TRACK_PARAM(VirtualDiskAccessMask);
        ORBIT_TRACK_PARAM(SecurityDescriptor);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ProviderSpecificFlags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(Handle);

        auto win32_impl_result = g_api_table.CreateVirtualDisk(VirtualStorageType, Path, VirtualDiskAccessMask, SecurityDescriptor, Flags, ProviderSpecificFlags, Parameters, Overlapped, Handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AttachVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* SecurityDescriptor, win32::Windows::Win32::Storage::Vhd::ATTACH_VIRTUAL_DISK_FLAG Flags, uint32_t ProviderSpecificFlags, win32::Windows::Win32::Storage::Vhd::ATTACH_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(SecurityDescriptor);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ProviderSpecificFlags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.AttachVirtualDisk(VirtualDiskHandle, SecurityDescriptor, Flags, ProviderSpecificFlags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DetachVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::DETACH_VIRTUAL_DISK_FLAG Flags, uint32_t ProviderSpecificFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ProviderSpecificFlags);

        auto win32_impl_result = g_api_table.DetachVirtualDisk(VirtualDiskHandle, Flags, ProviderSpecificFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetVirtualDiskPhysicalPath(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, uint32_t* DiskPathSizeInBytes, win32::Windows::Win32::Foundation::PWSTR DiskPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(DiskPathSizeInBytes);
        ORBIT_TRACK_PARAM(DiskPath);

        auto win32_impl_result = g_api_table.GetVirtualDiskPhysicalPath(VirtualDiskHandle, DiskPathSizeInBytes, DiskPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetAllAttachedVirtualDiskPhysicalPaths(uint32_t* PathsBufferSizeInBytes, win32::Windows::Win32::Foundation::PWSTR PathsBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PathsBufferSizeInBytes);
        ORBIT_TRACK_PARAM(PathsBuffer);

        auto win32_impl_result = g_api_table.GetAllAttachedVirtualDiskPhysicalPaths(PathsBufferSizeInBytes, PathsBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetStorageDependencyInformation(win32::Windows::Win32::Foundation::HANDLE ObjectHandle, win32::Windows::Win32::Storage::Vhd::GET_STORAGE_DEPENDENCY_FLAG Flags, uint32_t StorageDependencyInfoSize, win32::Windows::Win32::Storage::Vhd::STORAGE_DEPENDENCY_INFO* StorageDependencyInfo, uint32_t* SizeUsed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ObjectHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(StorageDependencyInfoSize);
        ORBIT_TRACK_PARAM(StorageDependencyInfo);
        ORBIT_TRACK_PARAM(SizeUsed);

        auto win32_impl_result = g_api_table.GetStorageDependencyInformation(ObjectHandle, Flags, StorageDependencyInfoSize, StorageDependencyInfo, SizeUsed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetVirtualDiskInformation(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, uint32_t* VirtualDiskInfoSize, win32::Windows::Win32::Storage::Vhd::GET_VIRTUAL_DISK_INFO* VirtualDiskInfo, uint32_t* SizeUsed) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(VirtualDiskInfoSize);
        ORBIT_TRACK_PARAM(VirtualDiskInfo);
        ORBIT_TRACK_PARAM(SizeUsed);

        auto win32_impl_result = g_api_table.GetVirtualDiskInformation(VirtualDiskHandle, VirtualDiskInfoSize, VirtualDiskInfo, SizeUsed);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetVirtualDiskInformation(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::SET_VIRTUAL_DISK_INFO* VirtualDiskInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(VirtualDiskInfo);

        auto win32_impl_result = g_api_table.SetVirtualDiskInformation(VirtualDiskHandle, VirtualDiskInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EnumerateVirtualDiskMetadata(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, uint32_t* NumberOfItems, ::win32::guid* Items) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(NumberOfItems);
        ORBIT_TRACK_PARAM(Items);

        auto win32_impl_result = g_api_table.EnumerateVirtualDiskMetadata(VirtualDiskHandle, NumberOfItems, Items);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetVirtualDiskMetadata(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, ::win32::guid* Item, uint32_t* MetaDataSize, void* MetaData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Item);
        ORBIT_TRACK_PARAM(MetaDataSize);
        ORBIT_TRACK_PARAM(MetaData);

        auto win32_impl_result = g_api_table.GetVirtualDiskMetadata(VirtualDiskHandle, Item, MetaDataSize, MetaData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetVirtualDiskMetadata(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, ::win32::guid* Item, uint32_t MetaDataSize, void* MetaData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Item);
        ORBIT_TRACK_PARAM(MetaDataSize);
        ORBIT_TRACK_PARAM(MetaData);

        auto win32_impl_result = g_api_table.SetVirtualDiskMetadata(VirtualDiskHandle, Item, MetaDataSize, MetaData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteVirtualDiskMetadata(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, ::win32::guid* Item) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Item);

        auto win32_impl_result = g_api_table.DeleteVirtualDiskMetadata(VirtualDiskHandle, Item);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetVirtualDiskOperationProgress(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped, win32::Windows::Win32::Storage::Vhd::VIRTUAL_DISK_PROGRESS* Progress) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Overlapped);
        ORBIT_TRACK_PARAM(Progress);

        auto win32_impl_result = g_api_table.GetVirtualDiskOperationProgress(VirtualDiskHandle, Overlapped, Progress);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CompactVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::COMPACT_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::COMPACT_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.CompactVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MergeVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::MERGE_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::MERGE_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.MergeVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ExpandVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::EXPAND_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::EXPAND_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.ExpandVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResizeVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::RESIZE_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::RESIZE_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.ResizeVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MirrorVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::MIRROR_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::MIRROR_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.MirrorVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_BreakMirrorVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);

        auto win32_impl_result = g_api_table.BreakMirrorVirtualDisk(VirtualDiskHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddVirtualDiskParent(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Foundation::PWSTR ParentPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(ParentPath);

        auto win32_impl_result = g_api_table.AddVirtualDiskParent(VirtualDiskHandle, ParentPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryChangesVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Foundation::PWSTR ChangeTrackingId, uint64_t ByteOffset, uint64_t ByteLength, win32::Windows::Win32::Storage::Vhd::QUERY_CHANGES_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::QUERY_CHANGES_VIRTUAL_DISK_RANGE* Ranges, uint32_t* RangeCount, uint64_t* ProcessedLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(ChangeTrackingId);
        ORBIT_TRACK_PARAM(ByteOffset);
        ORBIT_TRACK_PARAM(ByteLength);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Ranges);
        ORBIT_TRACK_PARAM(RangeCount);
        ORBIT_TRACK_PARAM(ProcessedLength);

        auto win32_impl_result = g_api_table.QueryChangesVirtualDisk(VirtualDiskHandle, ChangeTrackingId, ByteOffset, ByteLength, Flags, Ranges, RangeCount, ProcessedLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TakeSnapshotVhdSet(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::TAKE_SNAPSHOT_VHDSET_PARAMETERS* Parameters, win32::Windows::Win32::Storage::Vhd::TAKE_SNAPSHOT_VHDSET_FLAG Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.TakeSnapshotVhdSet(VirtualDiskHandle, Parameters, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteSnapshotVhdSet(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::DELETE_SNAPSHOT_VHDSET_PARAMETERS* Parameters, win32::Windows::Win32::Storage::Vhd::DELETE_SNAPSHOT_VHDSET_FLAG Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.DeleteSnapshotVhdSet(VirtualDiskHandle, Parameters, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ModifyVhdSet(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::MODIFY_VHDSET_PARAMETERS* Parameters, win32::Windows::Win32::Storage::Vhd::MODIFY_VHDSET_FLAG Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.ModifyVhdSet(VirtualDiskHandle, Parameters, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ApplySnapshotVhdSet(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::APPLY_SNAPSHOT_VHDSET_PARAMETERS* Parameters, win32::Windows::Win32::Storage::Vhd::APPLY_SNAPSHOT_VHDSET_FLAG Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.ApplySnapshotVhdSet(VirtualDiskHandle, Parameters, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RawSCSIVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::RAW_SCSI_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::Storage::Vhd::RAW_SCSI_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::RAW_SCSI_VIRTUAL_DISK_RESPONSE* Response) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Response);

        auto win32_impl_result = g_api_table.RawSCSIVirtualDisk(VirtualDiskHandle, Parameters, Flags, Response);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ForkVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle, win32::Windows::Win32::Storage::Vhd::FORK_VIRTUAL_DISK_FLAG Flags, win32::Windows::Win32::Storage::Vhd::FORK_VIRTUAL_DISK_PARAMETERS* Parameters, win32::Windows::Win32::System::IO::OVERLAPPED* Overlapped) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Parameters);
        ORBIT_TRACK_PARAM(Overlapped);

        auto win32_impl_result = g_api_table.ForkVirtualDisk(VirtualDiskHandle, Flags, Parameters, Overlapped);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CompleteForkVirtualDisk(win32::Windows::Win32::Foundation::HANDLE VirtualDiskHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VirtualDiskHandle);

        auto win32_impl_result = g_api_table.CompleteForkVirtualDisk(VirtualDiskHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
