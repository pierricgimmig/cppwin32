// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_NetworkDiagnosticsFramework_2_H
#define WIN32_Windows_Win32_NetworkManagement_NetworkDiagnosticsFramework_2_H
#include "win32/Windows.Win32.NetworkManagement.NetworkDiagnosticsFramework.h"
#include "win32/impl/Windows.Win32.NetworkManagement.NetworkDiagnosticsFramework.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::NetworkDiagnosticsFramework
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateIncident(win32::Windows::Win32::Foundation::PWSTR helperClassName, uint32_t celt, win32::Windows::Win32::NetworkManagement::NetworkDiagnosticsFramework::HELPER_ATTRIBUTE* attributes, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(helperClassName);
        ORBIT_TRACK_PARAM(celt);
        ORBIT_TRACK_PARAM(attributes);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateIncident(helperClassName, celt, attributes, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateWinSockIncident(win32::Windows::Win32::Networking::WinSock::SOCKET sock, win32::Windows::Win32::Foundation::PWSTR host, uint16_t port, win32::Windows::Win32::Foundation::PWSTR appId, win32::Windows::Win32::Security::SID* userId, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sock);
        ORBIT_TRACK_PARAM(host);
        ORBIT_TRACK_PARAM(port);
        ORBIT_TRACK_PARAM(appId);
        ORBIT_TRACK_PARAM(userId);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateWinSockIncident(sock, host, port, appId, userId, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateWebIncident(win32::Windows::Win32::Foundation::PWSTR url, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(url);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateWebIncident(url, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateWebIncidentEx(win32::Windows::Win32::Foundation::PWSTR url, win32::Windows::Win32::Foundation::BOOL useWinHTTP, win32::Windows::Win32::Foundation::PWSTR moduleName, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(url);
        ORBIT_TRACK_PARAM(useWinHTTP);
        ORBIT_TRACK_PARAM(moduleName);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateWebIncidentEx(url, useWinHTTP, moduleName, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateSharingIncident(win32::Windows::Win32::Foundation::PWSTR UNCPath, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UNCPath);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateSharingIncident(UNCPath, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateDNSIncident(win32::Windows::Win32::Foundation::PWSTR hostname, uint16_t queryType, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hostname);
        ORBIT_TRACK_PARAM(queryType);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateDNSIncident(hostname, queryType, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateConnectivityIncident(void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateConnectivityIncident(handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateNetConnectionIncident(void** handle, ::win32::guid id) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);
        ORBIT_TRACK_PARAM(id);

        auto win32_impl_result = g_api_table.NdfCreateNetConnectionIncident(handle, id);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreatePnrpIncident(win32::Windows::Win32::Foundation::PWSTR cloudname, win32::Windows::Win32::Foundation::PWSTR peername, win32::Windows::Win32::Foundation::BOOL diagnosePublish, win32::Windows::Win32::Foundation::PWSTR appId, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cloudname);
        ORBIT_TRACK_PARAM(peername);
        ORBIT_TRACK_PARAM(diagnosePublish);
        ORBIT_TRACK_PARAM(appId);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreatePnrpIncident(cloudname, peername, diagnosePublish, appId, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCreateGroupingIncident(win32::Windows::Win32::Foundation::PWSTR CloudName, win32::Windows::Win32::Foundation::PWSTR GroupName, win32::Windows::Win32::Foundation::PWSTR Identity, win32::Windows::Win32::Foundation::PWSTR Invitation, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS_LIST* Addresses, win32::Windows::Win32::Foundation::PWSTR appId, void** handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CloudName);
        ORBIT_TRACK_PARAM(GroupName);
        ORBIT_TRACK_PARAM(Identity);
        ORBIT_TRACK_PARAM(Invitation);
        ORBIT_TRACK_PARAM(Addresses);
        ORBIT_TRACK_PARAM(appId);
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCreateGroupingIncident(CloudName, GroupName, Identity, Invitation, Addresses, appId, handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfExecuteDiagnosis(void* handle, win32::Windows::Win32::Foundation::HWND hwnd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);
        ORBIT_TRACK_PARAM(hwnd);

        auto win32_impl_result = g_api_table.NdfExecuteDiagnosis(handle, hwnd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCloseIncident(void* handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(handle);

        auto win32_impl_result = g_api_table.NdfCloseIncident(handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfDiagnoseIncident(void* Handle, uint32_t* RootCauseCount, win32::Windows::Win32::NetworkManagement::NetworkDiagnosticsFramework::RootCauseInfo** RootCauses, uint32_t dwWait, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(RootCauseCount);
        ORBIT_TRACK_PARAM(RootCauses);
        ORBIT_TRACK_PARAM(dwWait);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NdfDiagnoseIncident(Handle, RootCauseCount, RootCauses, dwWait, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfRepairIncident(void* Handle, win32::Windows::Win32::NetworkManagement::NetworkDiagnosticsFramework::RepairInfoEx* RepairEx, uint32_t dwWait) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(RepairEx);
        ORBIT_TRACK_PARAM(dwWait);

        auto win32_impl_result = g_api_table.NdfRepairIncident(Handle, RepairEx, dwWait);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfCancelIncident(void* Handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);

        auto win32_impl_result = g_api_table.NdfCancelIncident(Handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NdfGetTraceFile(void* Handle, win32::Windows::Win32::Foundation::PWSTR* TraceFileLocation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(TraceFileLocation);

        auto win32_impl_result = g_api_table.NdfGetTraceFile(Handle, TraceFileLocation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
