// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_SerialCommunication_2_H
#define WIN32_Windows_Win32_Devices_SerialCommunication_2_H
#include "win32/Windows.Win32.Devices.SerialCommunication.h"
#include "win32/impl/Windows.Win32.Devices.SerialCommunication.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Devices::SerialCommunication
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL_ComDBOpen(intptr_t* PHComDB) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PHComDB);

        auto win32_impl_result = g_api_table.ComDBOpen(PHComDB);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ComDBClose(win32::Windows::Win32::Devices::SerialCommunication::HCOMDB HComDB) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HComDB);

        auto win32_impl_result = g_api_table.ComDBClose(HComDB);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ComDBGetCurrentPortUsage(win32::Windows::Win32::Devices::SerialCommunication::HCOMDB HComDB, uint8_t* Buffer, uint32_t BufferSize, uint32_t ReportType, uint32_t* MaxPortsReported) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HComDB);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(ReportType);
        ORBIT_TRACK_PARAM(MaxPortsReported);

        auto win32_impl_result = g_api_table.ComDBGetCurrentPortUsage(HComDB, Buffer, BufferSize, ReportType, MaxPortsReported);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ComDBClaimNextFreePort(win32::Windows::Win32::Devices::SerialCommunication::HCOMDB HComDB, uint32_t* ComNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HComDB);
        ORBIT_TRACK_PARAM(ComNumber);

        auto win32_impl_result = g_api_table.ComDBClaimNextFreePort(HComDB, ComNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ComDBClaimPort(win32::Windows::Win32::Devices::SerialCommunication::HCOMDB HComDB, uint32_t ComNumber, win32::Windows::Win32::Foundation::BOOL ForceClaim, win32::Windows::Win32::Foundation::BOOL* Forced) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HComDB);
        ORBIT_TRACK_PARAM(ComNumber);
        ORBIT_TRACK_PARAM(ForceClaim);
        ORBIT_TRACK_PARAM(Forced);

        auto win32_impl_result = g_api_table.ComDBClaimPort(HComDB, ComNumber, ForceClaim, Forced);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ComDBReleasePort(win32::Windows::Win32::Devices::SerialCommunication::HCOMDB HComDB, uint32_t ComNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HComDB);
        ORBIT_TRACK_PARAM(ComNumber);

        auto win32_impl_result = g_api_table.ComDBReleasePort(HComDB, ComNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ComDBResizeDatabase(win32::Windows::Win32::Devices::SerialCommunication::HCOMDB HComDB, uint32_t NewSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HComDB);
        ORBIT_TRACK_PARAM(NewSize);

        auto win32_impl_result = g_api_table.ComDBResizeDatabase(HComDB, NewSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
