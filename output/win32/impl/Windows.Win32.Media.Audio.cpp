// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Media_Audio_2_H
#define WIN32_Windows_Win32_Media_Audio_2_H
#include "win32/Windows.Win32.Media.Audio.h"
#include "win32/impl/Windows.Win32.Media.Audio.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Media::Audio
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_sndPlaySoundA(win32::Windows::Win32::Foundation::PSTR pszSound, uint32_t fuSound) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSound);
        ORBIT_TRACK_PARAM(fuSound);

        auto win32_impl_result = g_api_table.sndPlaySoundA(pszSound, fuSound);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_sndPlaySoundW(win32::Windows::Win32::Foundation::PWSTR pszSound, uint32_t fuSound) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSound);
        ORBIT_TRACK_PARAM(fuSound);

        auto win32_impl_result = g_api_table.sndPlaySoundW(pszSound, fuSound);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PlaySoundA(win32::Windows::Win32::Foundation::PSTR pszSound, win32::Windows::Win32::Foundation::HINSTANCE hmod, uint32_t fdwSound) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSound);
        ORBIT_TRACK_PARAM(hmod);
        ORBIT_TRACK_PARAM(fdwSound);

        auto win32_impl_result = g_api_table.PlaySoundA(pszSound, hmod, fdwSound);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PlaySoundW(win32::Windows::Win32::Foundation::PWSTR pszSound, win32::Windows::Win32::Foundation::HINSTANCE hmod, uint32_t fdwSound) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSound);
        ORBIT_TRACK_PARAM(hmod);
        ORBIT_TRACK_PARAM(fdwSound);

        auto win32_impl_result = g_api_table.PlaySoundW(pszSound, hmod, fdwSound);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetNumDevs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.waveOutGetNumDevs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetDevCapsA(size_t uDeviceID, win32::Windows::Win32::Media::Audio::WAVEOUTCAPSA* pwoc, uint32_t cbwoc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pwoc);
        ORBIT_TRACK_PARAM(cbwoc);

        auto win32_impl_result = g_api_table.waveOutGetDevCapsA(uDeviceID, pwoc, cbwoc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetDevCapsW(size_t uDeviceID, win32::Windows::Win32::Media::Audio::WAVEOUTCAPSW* pwoc, uint32_t cbwoc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pwoc);
        ORBIT_TRACK_PARAM(cbwoc);

        auto win32_impl_result = g_api_table.waveOutGetDevCapsW(uDeviceID, pwoc, cbwoc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetVolume(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t* pdwVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pdwVolume);

        auto win32_impl_result = g_api_table.waveOutGetVolume(hwo, pdwVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutSetVolume(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t dwVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(dwVolume);

        auto win32_impl_result = g_api_table.waveOutSetVolume(hwo, dwVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetErrorTextA(uint32_t mmrError, win32::Windows::Win32::Foundation::PSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.waveOutGetErrorTextA(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetErrorTextW(uint32_t mmrError, win32::Windows::Win32::Foundation::PWSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.waveOutGetErrorTextW(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutOpen(win32::Windows::Win32::Media::Audio::HWAVEOUT* phwo, uint32_t uDeviceID, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pwfx, size_t dwCallback, size_t dwInstance, win32::Windows::Win32::Media::Audio::MIDI_WAVE_OPEN_TYPE fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phwo);
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pwfx);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.waveOutOpen(phwo, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutClose(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);

        auto win32_impl_result = g_api_table.waveOutClose(hwo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutPrepareHeader(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, win32::Windows::Win32::Media::Audio::WAVEHDR* pwh, uint32_t cbwh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pwh);
        ORBIT_TRACK_PARAM(cbwh);

        auto win32_impl_result = g_api_table.waveOutPrepareHeader(hwo, pwh, cbwh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutUnprepareHeader(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, win32::Windows::Win32::Media::Audio::WAVEHDR* pwh, uint32_t cbwh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pwh);
        ORBIT_TRACK_PARAM(cbwh);

        auto win32_impl_result = g_api_table.waveOutUnprepareHeader(hwo, pwh, cbwh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutWrite(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, win32::Windows::Win32::Media::Audio::WAVEHDR* pwh, uint32_t cbwh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pwh);
        ORBIT_TRACK_PARAM(cbwh);

        auto win32_impl_result = g_api_table.waveOutWrite(hwo, pwh, cbwh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutPause(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);

        auto win32_impl_result = g_api_table.waveOutPause(hwo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutRestart(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);

        auto win32_impl_result = g_api_table.waveOutRestart(hwo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutReset(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);

        auto win32_impl_result = g_api_table.waveOutReset(hwo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutBreakLoop(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);

        auto win32_impl_result = g_api_table.waveOutBreakLoop(hwo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetPosition(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, win32::Windows::Win32::Media::MMTIME* pmmt, uint32_t cbmmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pmmt);
        ORBIT_TRACK_PARAM(cbmmt);

        auto win32_impl_result = g_api_table.waveOutGetPosition(hwo, pmmt, cbmmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetPitch(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t* pdwPitch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pdwPitch);

        auto win32_impl_result = g_api_table.waveOutGetPitch(hwo, pdwPitch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutSetPitch(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t dwPitch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(dwPitch);

        auto win32_impl_result = g_api_table.waveOutSetPitch(hwo, dwPitch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetPlaybackRate(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t* pdwRate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(pdwRate);

        auto win32_impl_result = g_api_table.waveOutGetPlaybackRate(hwo, pdwRate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutSetPlaybackRate(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t dwRate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(dwRate);

        auto win32_impl_result = g_api_table.waveOutSetPlaybackRate(hwo, dwRate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutGetID(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t* puDeviceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(puDeviceID);

        auto win32_impl_result = g_api_table.waveOutGetID(hwo, puDeviceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveOutMessage(win32::Windows::Win32::Media::Audio::HWAVEOUT hwo, uint32_t uMsg, size_t dw1, size_t dw2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwo);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(dw1);
        ORBIT_TRACK_PARAM(dw2);

        auto win32_impl_result = g_api_table.waveOutMessage(hwo, uMsg, dw1, dw2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetNumDevs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.waveInGetNumDevs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetDevCapsA(size_t uDeviceID, win32::Windows::Win32::Media::Audio::WAVEINCAPSA* pwic, uint32_t cbwic) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pwic);
        ORBIT_TRACK_PARAM(cbwic);

        auto win32_impl_result = g_api_table.waveInGetDevCapsA(uDeviceID, pwic, cbwic);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetDevCapsW(size_t uDeviceID, win32::Windows::Win32::Media::Audio::WAVEINCAPSW* pwic, uint32_t cbwic) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pwic);
        ORBIT_TRACK_PARAM(cbwic);

        auto win32_impl_result = g_api_table.waveInGetDevCapsW(uDeviceID, pwic, cbwic);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetErrorTextA(uint32_t mmrError, win32::Windows::Win32::Foundation::PSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.waveInGetErrorTextA(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetErrorTextW(uint32_t mmrError, win32::Windows::Win32::Foundation::PWSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.waveInGetErrorTextW(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInOpen(win32::Windows::Win32::Media::Audio::HWAVEIN* phwi, uint32_t uDeviceID, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pwfx, size_t dwCallback, size_t dwInstance, win32::Windows::Win32::Media::Audio::MIDI_WAVE_OPEN_TYPE fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phwi);
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pwfx);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.waveInOpen(phwi, uDeviceID, pwfx, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInClose(win32::Windows::Win32::Media::Audio::HWAVEIN hwi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);

        auto win32_impl_result = g_api_table.waveInClose(hwi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInPrepareHeader(win32::Windows::Win32::Media::Audio::HWAVEIN hwi, win32::Windows::Win32::Media::Audio::WAVEHDR* pwh, uint32_t cbwh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);
        ORBIT_TRACK_PARAM(pwh);
        ORBIT_TRACK_PARAM(cbwh);

        auto win32_impl_result = g_api_table.waveInPrepareHeader(hwi, pwh, cbwh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInUnprepareHeader(win32::Windows::Win32::Media::Audio::HWAVEIN hwi, win32::Windows::Win32::Media::Audio::WAVEHDR* pwh, uint32_t cbwh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);
        ORBIT_TRACK_PARAM(pwh);
        ORBIT_TRACK_PARAM(cbwh);

        auto win32_impl_result = g_api_table.waveInUnprepareHeader(hwi, pwh, cbwh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInAddBuffer(win32::Windows::Win32::Media::Audio::HWAVEIN hwi, win32::Windows::Win32::Media::Audio::WAVEHDR* pwh, uint32_t cbwh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);
        ORBIT_TRACK_PARAM(pwh);
        ORBIT_TRACK_PARAM(cbwh);

        auto win32_impl_result = g_api_table.waveInAddBuffer(hwi, pwh, cbwh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInStart(win32::Windows::Win32::Media::Audio::HWAVEIN hwi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);

        auto win32_impl_result = g_api_table.waveInStart(hwi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInStop(win32::Windows::Win32::Media::Audio::HWAVEIN hwi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);

        auto win32_impl_result = g_api_table.waveInStop(hwi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInReset(win32::Windows::Win32::Media::Audio::HWAVEIN hwi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);

        auto win32_impl_result = g_api_table.waveInReset(hwi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetPosition(win32::Windows::Win32::Media::Audio::HWAVEIN hwi, win32::Windows::Win32::Media::MMTIME* pmmt, uint32_t cbmmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);
        ORBIT_TRACK_PARAM(pmmt);
        ORBIT_TRACK_PARAM(cbmmt);

        auto win32_impl_result = g_api_table.waveInGetPosition(hwi, pmmt, cbmmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInGetID(win32::Windows::Win32::Media::Audio::HWAVEIN hwi, uint32_t* puDeviceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);
        ORBIT_TRACK_PARAM(puDeviceID);

        auto win32_impl_result = g_api_table.waveInGetID(hwi, puDeviceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_waveInMessage(win32::Windows::Win32::Media::Audio::HWAVEIN hwi, uint32_t uMsg, size_t dw1, size_t dw2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwi);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(dw1);
        ORBIT_TRACK_PARAM(dw2);

        auto win32_impl_result = g_api_table.waveInMessage(hwi, uMsg, dw1, dw2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetNumDevs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.midiOutGetNumDevs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamOpen(win32::Windows::Win32::Media::Audio::HMIDISTRM* phms, uint32_t* puDeviceID, uint32_t cMidi, size_t dwCallback, size_t dwInstance, uint32_t fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phms);
        ORBIT_TRACK_PARAM(puDeviceID);
        ORBIT_TRACK_PARAM(cMidi);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.midiStreamOpen(phms, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamClose(win32::Windows::Win32::Media::Audio::HMIDISTRM hms) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);

        auto win32_impl_result = g_api_table.midiStreamClose(hms);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamProperty(win32::Windows::Win32::Media::Audio::HMIDISTRM hms, uint8_t* lppropdata, uint32_t dwProperty) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);
        ORBIT_TRACK_PARAM(lppropdata);
        ORBIT_TRACK_PARAM(dwProperty);

        auto win32_impl_result = g_api_table.midiStreamProperty(hms, lppropdata, dwProperty);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamPosition(win32::Windows::Win32::Media::Audio::HMIDISTRM hms, win32::Windows::Win32::Media::MMTIME* lpmmt, uint32_t cbmmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);
        ORBIT_TRACK_PARAM(lpmmt);
        ORBIT_TRACK_PARAM(cbmmt);

        auto win32_impl_result = g_api_table.midiStreamPosition(hms, lpmmt, cbmmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamOut(win32::Windows::Win32::Media::Audio::HMIDISTRM hms, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiStreamOut(hms, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamPause(win32::Windows::Win32::Media::Audio::HMIDISTRM hms) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);

        auto win32_impl_result = g_api_table.midiStreamPause(hms);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamRestart(win32::Windows::Win32::Media::Audio::HMIDISTRM hms) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);

        auto win32_impl_result = g_api_table.midiStreamRestart(hms);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiStreamStop(win32::Windows::Win32::Media::Audio::HMIDISTRM hms) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hms);

        auto win32_impl_result = g_api_table.midiStreamStop(hms);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiConnect(win32::Windows::Win32::Media::Audio::HMIDI hmi, win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.midiConnect(hmi, hmo, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiDisconnect(win32::Windows::Win32::Media::Audio::HMIDI hmi, win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, void* pReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(pReserved);

        auto win32_impl_result = g_api_table.midiDisconnect(hmi, hmo, pReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetDevCapsA(size_t uDeviceID, win32::Windows::Win32::Media::Audio::MIDIOUTCAPSA* pmoc, uint32_t cbmoc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pmoc);
        ORBIT_TRACK_PARAM(cbmoc);

        auto win32_impl_result = g_api_table.midiOutGetDevCapsA(uDeviceID, pmoc, cbmoc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetDevCapsW(size_t uDeviceID, win32::Windows::Win32::Media::Audio::MIDIOUTCAPSW* pmoc, uint32_t cbmoc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pmoc);
        ORBIT_TRACK_PARAM(cbmoc);

        auto win32_impl_result = g_api_table.midiOutGetDevCapsW(uDeviceID, pmoc, cbmoc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetVolume(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t* pdwVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(pdwVolume);

        auto win32_impl_result = g_api_table.midiOutGetVolume(hmo, pdwVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutSetVolume(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t dwVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(dwVolume);

        auto win32_impl_result = g_api_table.midiOutSetVolume(hmo, dwVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetErrorTextA(uint32_t mmrError, win32::Windows::Win32::Foundation::PSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.midiOutGetErrorTextA(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetErrorTextW(uint32_t mmrError, win32::Windows::Win32::Foundation::PWSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.midiOutGetErrorTextW(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutOpen(win32::Windows::Win32::Media::Audio::HMIDIOUT* phmo, uint32_t uDeviceID, size_t dwCallback, size_t dwInstance, win32::Windows::Win32::Media::Audio::MIDI_WAVE_OPEN_TYPE fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phmo);
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.midiOutOpen(phmo, uDeviceID, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutClose(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);

        auto win32_impl_result = g_api_table.midiOutClose(hmo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutPrepareHeader(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiOutPrepareHeader(hmo, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutUnprepareHeader(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiOutUnprepareHeader(hmo, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutShortMsg(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t dwMsg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(dwMsg);

        auto win32_impl_result = g_api_table.midiOutShortMsg(hmo, dwMsg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutLongMsg(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiOutLongMsg(hmo, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutReset(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);

        auto win32_impl_result = g_api_table.midiOutReset(hmo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutCachePatches(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t uBank, uint16_t* pwpa, uint32_t fuCache) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(uBank);
        ORBIT_TRACK_PARAM(pwpa);
        ORBIT_TRACK_PARAM(fuCache);

        auto win32_impl_result = g_api_table.midiOutCachePatches(hmo, uBank, pwpa, fuCache);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutCacheDrumPatches(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t uPatch, uint16_t* pwkya, uint32_t fuCache) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(uPatch);
        ORBIT_TRACK_PARAM(pwkya);
        ORBIT_TRACK_PARAM(fuCache);

        auto win32_impl_result = g_api_table.midiOutCacheDrumPatches(hmo, uPatch, pwkya, fuCache);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutGetID(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t* puDeviceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(puDeviceID);

        auto win32_impl_result = g_api_table.midiOutGetID(hmo, puDeviceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiOutMessage(win32::Windows::Win32::Media::Audio::HMIDIOUT hmo, uint32_t uMsg, size_t dw1, size_t dw2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmo);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(dw1);
        ORBIT_TRACK_PARAM(dw2);

        auto win32_impl_result = g_api_table.midiOutMessage(hmo, uMsg, dw1, dw2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInGetNumDevs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.midiInGetNumDevs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInGetDevCapsA(size_t uDeviceID, win32::Windows::Win32::Media::Audio::MIDIINCAPSA* pmic, uint32_t cbmic) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pmic);
        ORBIT_TRACK_PARAM(cbmic);

        auto win32_impl_result = g_api_table.midiInGetDevCapsA(uDeviceID, pmic, cbmic);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInGetDevCapsW(size_t uDeviceID, win32::Windows::Win32::Media::Audio::MIDIINCAPSW* pmic, uint32_t cbmic) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pmic);
        ORBIT_TRACK_PARAM(cbmic);

        auto win32_impl_result = g_api_table.midiInGetDevCapsW(uDeviceID, pmic, cbmic);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInGetErrorTextA(uint32_t mmrError, win32::Windows::Win32::Foundation::PSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.midiInGetErrorTextA(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInGetErrorTextW(uint32_t mmrError, win32::Windows::Win32::Foundation::PWSTR pszText, uint32_t cchText) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mmrError);
        ORBIT_TRACK_PARAM(pszText);
        ORBIT_TRACK_PARAM(cchText);

        auto win32_impl_result = g_api_table.midiInGetErrorTextW(mmrError, pszText, cchText);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInOpen(win32::Windows::Win32::Media::Audio::HMIDIIN* phmi, uint32_t uDeviceID, size_t dwCallback, size_t dwInstance, win32::Windows::Win32::Media::Audio::MIDI_WAVE_OPEN_TYPE fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phmi);
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.midiInOpen(phmi, uDeviceID, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInClose(win32::Windows::Win32::Media::Audio::HMIDIIN hmi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);

        auto win32_impl_result = g_api_table.midiInClose(hmi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInPrepareHeader(win32::Windows::Win32::Media::Audio::HMIDIIN hmi, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiInPrepareHeader(hmi, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInUnprepareHeader(win32::Windows::Win32::Media::Audio::HMIDIIN hmi, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiInUnprepareHeader(hmi, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInAddBuffer(win32::Windows::Win32::Media::Audio::HMIDIIN hmi, win32::Windows::Win32::Media::Audio::MIDIHDR* pmh, uint32_t cbmh) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(pmh);
        ORBIT_TRACK_PARAM(cbmh);

        auto win32_impl_result = g_api_table.midiInAddBuffer(hmi, pmh, cbmh);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInStart(win32::Windows::Win32::Media::Audio::HMIDIIN hmi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);

        auto win32_impl_result = g_api_table.midiInStart(hmi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInStop(win32::Windows::Win32::Media::Audio::HMIDIIN hmi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);

        auto win32_impl_result = g_api_table.midiInStop(hmi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInReset(win32::Windows::Win32::Media::Audio::HMIDIIN hmi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);

        auto win32_impl_result = g_api_table.midiInReset(hmi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInGetID(win32::Windows::Win32::Media::Audio::HMIDIIN hmi, uint32_t* puDeviceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(puDeviceID);

        auto win32_impl_result = g_api_table.midiInGetID(hmi, puDeviceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_midiInMessage(win32::Windows::Win32::Media::Audio::HMIDIIN hmi, uint32_t uMsg, size_t dw1, size_t dw2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmi);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(dw1);
        ORBIT_TRACK_PARAM(dw2);

        auto win32_impl_result = g_api_table.midiInMessage(hmi, uMsg, dw1, dw2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_auxGetNumDevs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.auxGetNumDevs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_auxGetDevCapsA(size_t uDeviceID, win32::Windows::Win32::Media::Audio::AUXCAPSA* pac, uint32_t cbac) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pac);
        ORBIT_TRACK_PARAM(cbac);

        auto win32_impl_result = g_api_table.auxGetDevCapsA(uDeviceID, pac, cbac);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_auxGetDevCapsW(size_t uDeviceID, win32::Windows::Win32::Media::Audio::AUXCAPSW* pac, uint32_t cbac) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pac);
        ORBIT_TRACK_PARAM(cbac);

        auto win32_impl_result = g_api_table.auxGetDevCapsW(uDeviceID, pac, cbac);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_auxSetVolume(uint32_t uDeviceID, uint32_t dwVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(dwVolume);

        auto win32_impl_result = g_api_table.auxSetVolume(uDeviceID, dwVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_auxGetVolume(uint32_t uDeviceID, uint32_t* pdwVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(pdwVolume);

        auto win32_impl_result = g_api_table.auxGetVolume(uDeviceID, pdwVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_auxOutMessage(uint32_t uDeviceID, uint32_t uMsg, size_t dw1, size_t dw2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uDeviceID);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(dw1);
        ORBIT_TRACK_PARAM(dw2);

        auto win32_impl_result = g_api_table.auxOutMessage(uDeviceID, uMsg, dw1, dw2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetNumDevs() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.mixerGetNumDevs();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetDevCapsA(size_t uMxId, win32::Windows::Win32::Media::Audio::MIXERCAPSA* pmxcaps, uint32_t cbmxcaps) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uMxId);
        ORBIT_TRACK_PARAM(pmxcaps);
        ORBIT_TRACK_PARAM(cbmxcaps);

        auto win32_impl_result = g_api_table.mixerGetDevCapsA(uMxId, pmxcaps, cbmxcaps);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetDevCapsW(size_t uMxId, win32::Windows::Win32::Media::Audio::MIXERCAPSW* pmxcaps, uint32_t cbmxcaps) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uMxId);
        ORBIT_TRACK_PARAM(pmxcaps);
        ORBIT_TRACK_PARAM(cbmxcaps);

        auto win32_impl_result = g_api_table.mixerGetDevCapsW(uMxId, pmxcaps, cbmxcaps);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerOpen(intptr_t* phmx, uint32_t uMxId, size_t dwCallback, size_t dwInstance, uint32_t fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phmx);
        ORBIT_TRACK_PARAM(uMxId);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.mixerOpen(phmx, uMxId, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerClose(win32::Windows::Win32::Media::Audio::HMIXER hmx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmx);

        auto win32_impl_result = g_api_table.mixerClose(hmx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerMessage(win32::Windows::Win32::Media::Audio::HMIXER hmx, uint32_t uMsg, size_t dwParam1, size_t dwParam2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmx);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(dwParam1);
        ORBIT_TRACK_PARAM(dwParam2);

        auto win32_impl_result = g_api_table.mixerMessage(hmx, uMsg, dwParam1, dwParam2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetLineInfoA(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERLINEA* pmxl, uint32_t fdwInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxl);
        ORBIT_TRACK_PARAM(fdwInfo);

        auto win32_impl_result = g_api_table.mixerGetLineInfoA(hmxobj, pmxl, fdwInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetLineInfoW(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERLINEW* pmxl, uint32_t fdwInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxl);
        ORBIT_TRACK_PARAM(fdwInfo);

        auto win32_impl_result = g_api_table.mixerGetLineInfoW(hmxobj, pmxl, fdwInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetID(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, uint32_t* puMxId, uint32_t fdwId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(puMxId);
        ORBIT_TRACK_PARAM(fdwId);

        auto win32_impl_result = g_api_table.mixerGetID(hmxobj, puMxId, fdwId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetLineControlsA(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERLINECONTROLSA* pmxlc, uint32_t fdwControls) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxlc);
        ORBIT_TRACK_PARAM(fdwControls);

        auto win32_impl_result = g_api_table.mixerGetLineControlsA(hmxobj, pmxlc, fdwControls);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetLineControlsW(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERLINECONTROLSW* pmxlc, uint32_t fdwControls) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxlc);
        ORBIT_TRACK_PARAM(fdwControls);

        auto win32_impl_result = g_api_table.mixerGetLineControlsW(hmxobj, pmxlc, fdwControls);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetControlDetailsA(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERCONTROLDETAILS* pmxcd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxcd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.mixerGetControlDetailsA(hmxobj, pmxcd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerGetControlDetailsW(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERCONTROLDETAILS* pmxcd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxcd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.mixerGetControlDetailsW(hmxobj, pmxcd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_mixerSetControlDetails(win32::Windows::Win32::Media::Audio::HMIXEROBJ hmxobj, win32::Windows::Win32::Media::Audio::MIXERCONTROLDETAILS* pmxcd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hmxobj);
        ORBIT_TRACK_PARAM(pmxcd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.mixerSetControlDetails(hmxobj, pmxcd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ActivateAudioInterfaceAsync(win32::Windows::Win32::Foundation::PWSTR deviceInterfacePath, ::win32::guid* riid, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* activationParams, win32::Windows::Win32::Media::Audio::IActivateAudioInterfaceCompletionHandler* completionHandler, win32::Windows::Win32::Media::Audio::IActivateAudioInterfaceAsyncOperation** activationOperation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(deviceInterfacePath);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(activationParams);
        ORBIT_TRACK_PARAM(completionHandler);
        ORBIT_TRACK_PARAM(activationOperation);

        auto win32_impl_result = g_api_table.ActivateAudioInterfaceAsync(deviceInterfacePath, riid, activationParams, completionHandler, activationOperation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateRenderAudioStateMonitor(win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateRenderAudioStateMonitor(audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateRenderAudioStateMonitorForCategory(win32::Windows::Win32::Media::Audio::AUDIO_STREAM_CATEGORY category, win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateRenderAudioStateMonitorForCategory(category, audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateRenderAudioStateMonitorForCategoryAndDeviceRole(win32::Windows::Win32::Media::Audio::AUDIO_STREAM_CATEGORY category, win32::Windows::Win32::Media::Audio::ERole role, win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(role);
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateRenderAudioStateMonitorForCategoryAndDeviceRole(category, role, audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateRenderAudioStateMonitorForCategoryAndDeviceId(win32::Windows::Win32::Media::Audio::AUDIO_STREAM_CATEGORY category, win32::Windows::Win32::Foundation::PWSTR deviceId, win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(deviceId);
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateRenderAudioStateMonitorForCategoryAndDeviceId(category, deviceId, audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateCaptureAudioStateMonitor(win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateCaptureAudioStateMonitor(audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateCaptureAudioStateMonitorForCategory(win32::Windows::Win32::Media::Audio::AUDIO_STREAM_CATEGORY category, win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateCaptureAudioStateMonitorForCategory(category, audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(win32::Windows::Win32::Media::Audio::AUDIO_STREAM_CATEGORY category, win32::Windows::Win32::Media::Audio::ERole role, win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(role);
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(category, role, audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateCaptureAudioStateMonitorForCategoryAndDeviceId(win32::Windows::Win32::Media::Audio::AUDIO_STREAM_CATEGORY category, win32::Windows::Win32::Foundation::PWSTR deviceId, win32::Windows::Win32::Media::Audio::IAudioStateMonitor** audioStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(category);
        ORBIT_TRACK_PARAM(deviceId);
        ORBIT_TRACK_PARAM(audioStateMonitor);

        auto win32_impl_result = g_api_table.CreateCaptureAudioStateMonitorForCategoryAndDeviceId(category, deviceId, audioStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmGetVersion() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.acmGetVersion();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmMetrics(win32::Windows::Win32::Media::Audio::HACMOBJ hao, uint32_t uMetric, void* pMetric) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hao);
        ORBIT_TRACK_PARAM(uMetric);
        ORBIT_TRACK_PARAM(pMetric);

        auto win32_impl_result = g_api_table.acmMetrics(hao, uMetric, pMetric);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverEnum(win32::Windows::Win32::Media::Audio::ACMDRIVERENUMCB* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmDriverEnum(fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverID(win32::Windows::Win32::Media::Audio::HACMOBJ hao, intptr_t* phadid, uint32_t fdwDriverID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hao);
        ORBIT_TRACK_PARAM(phadid);
        ORBIT_TRACK_PARAM(fdwDriverID);

        auto win32_impl_result = g_api_table.acmDriverID(hao, phadid, fdwDriverID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverAddA(intptr_t* phadid, win32::Windows::Win32::Foundation::HINSTANCE hinstModule, win32::Windows::Win32::Foundation::LPARAM lParam, uint32_t dwPriority, uint32_t fdwAdd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phadid);
        ORBIT_TRACK_PARAM(hinstModule);
        ORBIT_TRACK_PARAM(lParam);
        ORBIT_TRACK_PARAM(dwPriority);
        ORBIT_TRACK_PARAM(fdwAdd);

        auto win32_impl_result = g_api_table.acmDriverAddA(phadid, hinstModule, lParam, dwPriority, fdwAdd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverAddW(intptr_t* phadid, win32::Windows::Win32::Foundation::HINSTANCE hinstModule, win32::Windows::Win32::Foundation::LPARAM lParam, uint32_t dwPriority, uint32_t fdwAdd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phadid);
        ORBIT_TRACK_PARAM(hinstModule);
        ORBIT_TRACK_PARAM(lParam);
        ORBIT_TRACK_PARAM(dwPriority);
        ORBIT_TRACK_PARAM(fdwAdd);

        auto win32_impl_result = g_api_table.acmDriverAddW(phadid, hinstModule, lParam, dwPriority, fdwAdd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverRemove(win32::Windows::Win32::Media::Audio::HACMDRIVERID hadid, uint32_t fdwRemove) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hadid);
        ORBIT_TRACK_PARAM(fdwRemove);

        auto win32_impl_result = g_api_table.acmDriverRemove(hadid, fdwRemove);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverOpen(intptr_t* phad, win32::Windows::Win32::Media::Audio::HACMDRIVERID hadid, uint32_t fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phad);
        ORBIT_TRACK_PARAM(hadid);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.acmDriverOpen(phad, hadid, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverClose(win32::Windows::Win32::Media::Audio::HACMDRIVER had, uint32_t fdwClose) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(fdwClose);

        auto win32_impl_result = g_api_table.acmDriverClose(had, fdwClose);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::LRESULT __stdcall ORBIT_IMPL_acmDriverMessage(win32::Windows::Win32::Media::Audio::HACMDRIVER had, uint32_t uMsg, win32::Windows::Win32::Foundation::LPARAM lParam1, win32::Windows::Win32::Foundation::LPARAM lParam2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(lParam1);
        ORBIT_TRACK_PARAM(lParam2);

        auto win32_impl_result = g_api_table.acmDriverMessage(had, uMsg, lParam1, lParam2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverPriority(win32::Windows::Win32::Media::Audio::HACMDRIVERID hadid, uint32_t dwPriority, uint32_t fdwPriority) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hadid);
        ORBIT_TRACK_PARAM(dwPriority);
        ORBIT_TRACK_PARAM(fdwPriority);

        auto win32_impl_result = g_api_table.acmDriverPriority(hadid, dwPriority, fdwPriority);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverDetailsA(win32::Windows::Win32::Media::Audio::HACMDRIVERID hadid, win32::Windows::Win32::Media::Audio::ACMDRIVERDETAILSA* padd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hadid);
        ORBIT_TRACK_PARAM(padd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmDriverDetailsA(hadid, padd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmDriverDetailsW(win32::Windows::Win32::Media::Audio::HACMDRIVERID hadid, win32::Windows::Win32::Media::Audio::ACMDRIVERDETAILSW* padd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hadid);
        ORBIT_TRACK_PARAM(padd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmDriverDetailsW(hadid, padd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatTagDetailsA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFORMATTAGDETAILSA* paftd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFormatTagDetailsA(had, paftd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatTagDetailsW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFORMATTAGDETAILSW* paftd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFormatTagDetailsW(had, paftd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatTagEnumA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFORMATTAGDETAILSA* paftd, win32::Windows::Win32::Media::Audio::ACMFORMATTAGENUMCBA* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFormatTagEnumA(had, paftd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatTagEnumW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFORMATTAGDETAILSW* paftd, win32::Windows::Win32::Media::Audio::ACMFORMATTAGENUMCBW* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFormatTagEnumW(had, paftd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatDetailsA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFORMATDETAILSA* pafd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFormatDetailsA(had, pafd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatDetailsW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::tACMFORMATDETAILSW* pafd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFormatDetailsW(had, pafd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatEnumA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFORMATDETAILSA* pafd, win32::Windows::Win32::Media::Audio::ACMFORMATENUMCBA* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFormatEnumA(had, pafd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatEnumW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::tACMFORMATDETAILSW* pafd, win32::Windows::Win32::Media::Audio::ACMFORMATENUMCBW* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFormatEnumW(had, pafd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatSuggest(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pwfxSrc, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pwfxDst, uint32_t cbwfxDst, uint32_t fdwSuggest) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pwfxSrc);
        ORBIT_TRACK_PARAM(pwfxDst);
        ORBIT_TRACK_PARAM(cbwfxDst);
        ORBIT_TRACK_PARAM(fdwSuggest);

        auto win32_impl_result = g_api_table.acmFormatSuggest(had, pwfxSrc, pwfxDst, cbwfxDst, fdwSuggest);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatChooseA(win32::Windows::Win32::Media::Audio::ACMFORMATCHOOSEA* pafmtc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pafmtc);

        auto win32_impl_result = g_api_table.acmFormatChooseA(pafmtc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFormatChooseW(win32::Windows::Win32::Media::Audio::ACMFORMATCHOOSEW* pafmtc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pafmtc);

        auto win32_impl_result = g_api_table.acmFormatChooseW(pafmtc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterTagDetailsA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERTAGDETAILSA* paftd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFilterTagDetailsA(had, paftd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterTagDetailsW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERTAGDETAILSW* paftd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFilterTagDetailsW(had, paftd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterTagEnumA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERTAGDETAILSA* paftd, win32::Windows::Win32::Media::Audio::ACMFILTERTAGENUMCBA* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFilterTagEnumA(had, paftd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterTagEnumW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERTAGDETAILSW* paftd, win32::Windows::Win32::Media::Audio::ACMFILTERTAGENUMCBW* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(paftd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFilterTagEnumW(had, paftd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterDetailsA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERDETAILSA* pafd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFilterDetailsA(had, pafd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterDetailsW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERDETAILSW* pafd, uint32_t fdwDetails) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fdwDetails);

        auto win32_impl_result = g_api_table.acmFilterDetailsW(had, pafd, fdwDetails);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterEnumA(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERDETAILSA* pafd, win32::Windows::Win32::Media::Audio::ACMFILTERENUMCBA* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFilterEnumA(had, pafd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterEnumW(win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::ACMFILTERDETAILSW* pafd, win32::Windows::Win32::Media::Audio::ACMFILTERENUMCBW* fnCallback, size_t dwInstance, uint32_t fdwEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pafd);
        ORBIT_TRACK_PARAM(fnCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwEnum);

        auto win32_impl_result = g_api_table.acmFilterEnumW(had, pafd, fnCallback, dwInstance, fdwEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterChooseA(win32::Windows::Win32::Media::Audio::ACMFILTERCHOOSEA* pafltrc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pafltrc);

        auto win32_impl_result = g_api_table.acmFilterChooseA(pafltrc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmFilterChooseW(win32::Windows::Win32::Media::Audio::ACMFILTERCHOOSEW* pafltrc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pafltrc);

        auto win32_impl_result = g_api_table.acmFilterChooseW(pafltrc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamOpen(intptr_t* phas, win32::Windows::Win32::Media::Audio::HACMDRIVER had, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pwfxSrc, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pwfxDst, win32::Windows::Win32::Media::Audio::WAVEFILTER* pwfltr, size_t dwCallback, size_t dwInstance, uint32_t fdwOpen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phas);
        ORBIT_TRACK_PARAM(had);
        ORBIT_TRACK_PARAM(pwfxSrc);
        ORBIT_TRACK_PARAM(pwfxDst);
        ORBIT_TRACK_PARAM(pwfltr);
        ORBIT_TRACK_PARAM(dwCallback);
        ORBIT_TRACK_PARAM(dwInstance);
        ORBIT_TRACK_PARAM(fdwOpen);

        auto win32_impl_result = g_api_table.acmStreamOpen(phas, had, pwfxSrc, pwfxDst, pwfltr, dwCallback, dwInstance, fdwOpen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamClose(win32::Windows::Win32::Media::Audio::HACMSTREAM has, uint32_t fdwClose) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(fdwClose);

        auto win32_impl_result = g_api_table.acmStreamClose(has, fdwClose);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamSize(win32::Windows::Win32::Media::Audio::HACMSTREAM has, uint32_t cbInput, uint32_t* pdwOutputBytes, uint32_t fdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pdwOutputBytes);
        ORBIT_TRACK_PARAM(fdwSize);

        auto win32_impl_result = g_api_table.acmStreamSize(has, cbInput, pdwOutputBytes, fdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamReset(win32::Windows::Win32::Media::Audio::HACMSTREAM has, uint32_t fdwReset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(fdwReset);

        auto win32_impl_result = g_api_table.acmStreamReset(has, fdwReset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamMessage(win32::Windows::Win32::Media::Audio::HACMSTREAM has, uint32_t uMsg, win32::Windows::Win32::Foundation::LPARAM lParam1, win32::Windows::Win32::Foundation::LPARAM lParam2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(uMsg);
        ORBIT_TRACK_PARAM(lParam1);
        ORBIT_TRACK_PARAM(lParam2);

        auto win32_impl_result = g_api_table.acmStreamMessage(has, uMsg, lParam1, lParam2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamConvert(win32::Windows::Win32::Media::Audio::HACMSTREAM has, win32::Windows::Win32::Media::Audio::ACMSTREAMHEADER* pash, uint32_t fdwConvert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(pash);
        ORBIT_TRACK_PARAM(fdwConvert);

        auto win32_impl_result = g_api_table.acmStreamConvert(has, pash, fdwConvert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamPrepareHeader(win32::Windows::Win32::Media::Audio::HACMSTREAM has, win32::Windows::Win32::Media::Audio::ACMSTREAMHEADER* pash, uint32_t fdwPrepare) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(pash);
        ORBIT_TRACK_PARAM(fdwPrepare);

        auto win32_impl_result = g_api_table.acmStreamPrepareHeader(has, pash, fdwPrepare);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_acmStreamUnprepareHeader(win32::Windows::Win32::Media::Audio::HACMSTREAM has, win32::Windows::Win32::Media::Audio::ACMSTREAMHEADER* pash, uint32_t fdwUnprepare) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(has);
        ORBIT_TRACK_PARAM(pash);
        ORBIT_TRACK_PARAM(fdwUnprepare);

        auto win32_impl_result = g_api_table.acmStreamUnprepareHeader(has, pash, fdwUnprepare);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CoRegisterMessageFilter(win32::Windows::Win32::Media::Audio::IMessageFilter* lpMessageFilter, win32::Windows::Win32::Media::Audio::IMessageFilter** lplpMessageFilter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpMessageFilter);
        ORBIT_TRACK_PARAM(lplpMessageFilter);

        auto win32_impl_result = g_api_table.CoRegisterMessageFilter(lpMessageFilter, lplpMessageFilter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
