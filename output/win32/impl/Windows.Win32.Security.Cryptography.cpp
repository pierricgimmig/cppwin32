// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_Cryptography_2_H
#define WIN32_Windows_Win32_Security_Cryptography_2_H
#include "win32/Windows.Win32.Security.Cryptography.h"
#include "win32/impl/Windows.Win32.Security.Cryptography.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Security::Cryptography
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptAcquireContextA(size_t* phProv, win32::Windows::Win32::Foundation::PSTR szContainer, win32::Windows::Win32::Foundation::PSTR szProvider, uint32_t dwProvType, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phProv);
        ORBIT_TRACK_PARAM(szContainer);
        ORBIT_TRACK_PARAM(szProvider);
        ORBIT_TRACK_PARAM(dwProvType);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptAcquireContextA(phProv, szContainer, szProvider, dwProvType, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptAcquireContextW(size_t* phProv, win32::Windows::Win32::Foundation::PWSTR szContainer, win32::Windows::Win32::Foundation::PWSTR szProvider, uint32_t dwProvType, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phProv);
        ORBIT_TRACK_PARAM(szContainer);
        ORBIT_TRACK_PARAM(szProvider);
        ORBIT_TRACK_PARAM(dwProvType);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptAcquireContextW(phProv, szContainer, szProvider, dwProvType, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptReleaseContext(size_t hProv, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptReleaseContext(hProv, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGenKey(size_t hProv, uint32_t Algid, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_FLAGS dwFlags, size_t* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(Algid);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptGenKey(hProv, Algid, dwFlags, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDeriveKey(size_t hProv, uint32_t Algid, size_t hBaseData, uint32_t dwFlags, size_t* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(Algid);
        ORBIT_TRACK_PARAM(hBaseData);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptDeriveKey(hProv, Algid, hBaseData, dwFlags, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDestroyKey(size_t hKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);

        auto win32_impl_result = g_api_table.CryptDestroyKey(hKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetKeyParam(size_t hKey, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_PARAM_ID dwParam, uint8_t* pbData, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwParam);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptSetKeyParam(hKey, dwParam, pbData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetKeyParam(size_t hKey, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_PARAM_ID dwParam, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwParam);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(pdwDataLen);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptGetKeyParam(hKey, dwParam, pbData, pdwDataLen, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetHashParam(size_t hHash, win32::Windows::Win32::Security::Cryptography::CRYPT_SET_HASH_PARAM dwParam, uint8_t* pbData, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(dwParam);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptSetHashParam(hHash, dwParam, pbData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetHashParam(size_t hHash, uint32_t dwParam, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(dwParam);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(pdwDataLen);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptGetHashParam(hHash, dwParam, pbData, pdwDataLen, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetProvParam(size_t hProv, win32::Windows::Win32::Security::Cryptography::CRYPT_SET_PROV_PARAM_ID dwParam, uint8_t* pbData, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(dwParam);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptSetProvParam(hProv, dwParam, pbData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetProvParam(size_t hProv, uint32_t dwParam, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(dwParam);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(pdwDataLen);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptGetProvParam(hProv, dwParam, pbData, pdwDataLen, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGenRandom(size_t hProv, uint32_t dwLen, uint8_t* pbBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(dwLen);
        ORBIT_TRACK_PARAM(pbBuffer);

        auto win32_impl_result = g_api_table.CryptGenRandom(hProv, dwLen, pbBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetUserKey(size_t hProv, uint32_t dwKeySpec, size_t* phUserKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(phUserKey);

        auto win32_impl_result = g_api_table.CryptGetUserKey(hProv, dwKeySpec, phUserKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptExportKey(size_t hKey, size_t hExpKey, uint32_t dwBlobType, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_FLAGS dwFlags, uint8_t* pbData, uint32_t* pdwDataLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(hExpKey);
        ORBIT_TRACK_PARAM(dwBlobType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(pdwDataLen);

        auto win32_impl_result = g_api_table.CryptExportKey(hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptImportKey(size_t hProv, uint8_t* pbData, uint32_t dwDataLen, size_t hPubKey, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_FLAGS dwFlags, size_t* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(dwDataLen);
        ORBIT_TRACK_PARAM(hPubKey);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptImportKey(hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEncrypt(size_t hKey, size_t hHash, win32::Windows::Win32::Foundation::BOOL Final, uint32_t dwFlags, uint8_t* pbData, uint32_t* pdwDataLen, uint32_t dwBufLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(Final);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(pdwDataLen);
        ORBIT_TRACK_PARAM(dwBufLen);

        auto win32_impl_result = g_api_table.CryptEncrypt(hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDecrypt(size_t hKey, size_t hHash, win32::Windows::Win32::Foundation::BOOL Final, uint32_t dwFlags, uint8_t* pbData, uint32_t* pdwDataLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(Final);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(pdwDataLen);

        auto win32_impl_result = g_api_table.CryptDecrypt(hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptCreateHash(size_t hProv, uint32_t Algid, size_t hKey, uint32_t dwFlags, size_t* phHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(Algid);
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phHash);

        auto win32_impl_result = g_api_table.CryptCreateHash(hProv, Algid, hKey, dwFlags, phHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashData(size_t hHash, uint8_t* pbData, uint32_t dwDataLen, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(dwDataLen);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptHashData(hHash, pbData, dwDataLen, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashSessionKey(size_t hHash, size_t hKey, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptHashSessionKey(hHash, hKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDestroyHash(size_t hHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);

        auto win32_impl_result = g_api_table.CryptDestroyHash(hHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignHashA(size_t hHash, uint32_t dwKeySpec, win32::Windows::Win32::Foundation::PSTR szDescription, uint32_t dwFlags, uint8_t* pbSignature, uint32_t* pdwSigLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(szDescription);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(pdwSigLen);

        auto win32_impl_result = g_api_table.CryptSignHashA(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignHashW(size_t hHash, uint32_t dwKeySpec, win32::Windows::Win32::Foundation::PWSTR szDescription, uint32_t dwFlags, uint8_t* pbSignature, uint32_t* pdwSigLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(szDescription);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(pdwSigLen);

        auto win32_impl_result = g_api_table.CryptSignHashW(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifySignatureA(size_t hHash, uint8_t* pbSignature, uint32_t dwSigLen, size_t hPubKey, win32::Windows::Win32::Foundation::PSTR szDescription, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(dwSigLen);
        ORBIT_TRACK_PARAM(hPubKey);
        ORBIT_TRACK_PARAM(szDescription);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptVerifySignatureA(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifySignatureW(size_t hHash, uint8_t* pbSignature, uint32_t dwSigLen, size_t hPubKey, win32::Windows::Win32::Foundation::PWSTR szDescription, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(dwSigLen);
        ORBIT_TRACK_PARAM(hPubKey);
        ORBIT_TRACK_PARAM(szDescription);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptVerifySignatureW(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetProviderA(win32::Windows::Win32::Foundation::PSTR pszProvName, uint32_t dwProvType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszProvName);
        ORBIT_TRACK_PARAM(dwProvType);

        auto win32_impl_result = g_api_table.CryptSetProviderA(pszProvName, dwProvType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetProviderW(win32::Windows::Win32::Foundation::PWSTR pszProvName, uint32_t dwProvType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszProvName);
        ORBIT_TRACK_PARAM(dwProvType);

        auto win32_impl_result = g_api_table.CryptSetProviderW(pszProvName, dwProvType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetProviderExA(win32::Windows::Win32::Foundation::PSTR pszProvName, uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszProvName);
        ORBIT_TRACK_PARAM(dwProvType);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptSetProviderExA(pszProvName, dwProvType, pdwReserved, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetProviderExW(win32::Windows::Win32::Foundation::PWSTR pszProvName, uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszProvName);
        ORBIT_TRACK_PARAM(dwProvType);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptSetProviderExW(pszProvName, dwProvType, pdwReserved, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetDefaultProviderA(uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR pszProvName, uint32_t* pcbProvName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwProvType);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pszProvName);
        ORBIT_TRACK_PARAM(pcbProvName);

        auto win32_impl_result = g_api_table.CryptGetDefaultProviderA(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetDefaultProviderW(uint32_t dwProvType, uint32_t* pdwReserved, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pszProvName, uint32_t* pcbProvName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwProvType);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pszProvName);
        ORBIT_TRACK_PARAM(pcbProvName);

        auto win32_impl_result = g_api_table.CryptGetDefaultProviderW(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumProviderTypesA(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, win32::Windows::Win32::Foundation::PSTR szTypeName, uint32_t* pcbTypeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pdwProvType);
        ORBIT_TRACK_PARAM(szTypeName);
        ORBIT_TRACK_PARAM(pcbTypeName);

        auto win32_impl_result = g_api_table.CryptEnumProviderTypesA(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumProviderTypesW(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, win32::Windows::Win32::Foundation::PWSTR szTypeName, uint32_t* pcbTypeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pdwProvType);
        ORBIT_TRACK_PARAM(szTypeName);
        ORBIT_TRACK_PARAM(pcbTypeName);

        auto win32_impl_result = g_api_table.CryptEnumProviderTypesW(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumProvidersA(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, win32::Windows::Win32::Foundation::PSTR szProvName, uint32_t* pcbProvName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pdwProvType);
        ORBIT_TRACK_PARAM(szProvName);
        ORBIT_TRACK_PARAM(pcbProvName);

        auto win32_impl_result = g_api_table.CryptEnumProvidersA(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumProvidersW(uint32_t dwIndex, uint32_t* pdwReserved, uint32_t dwFlags, uint32_t* pdwProvType, win32::Windows::Win32::Foundation::PWSTR szProvName, uint32_t* pcbProvName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pdwProvType);
        ORBIT_TRACK_PARAM(szProvName);
        ORBIT_TRACK_PARAM(pcbProvName);

        auto win32_impl_result = g_api_table.CryptEnumProvidersW(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptContextAddRef(size_t hProv, uint32_t* pdwReserved, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptContextAddRef(hProv, pdwReserved, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDuplicateKey(size_t hKey, uint32_t* pdwReserved, uint32_t dwFlags, size_t* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptDuplicateKey(hKey, pdwReserved, dwFlags, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDuplicateHash(size_t hHash, uint32_t* pdwReserved, uint32_t dwFlags, size_t* phHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(pdwReserved);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phHash);

        auto win32_impl_result = g_api_table.CryptDuplicateHash(hHash, pdwReserved, dwFlags, phHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptOpenAlgorithmProvider(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE* phAlgorithm, win32::Windows::Win32::Foundation::PWSTR pszAlgId, win32::Windows::Win32::Foundation::PWSTR pszImplementation, win32::Windows::Win32::Security::Cryptography::BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phAlgorithm);
        ORBIT_TRACK_PARAM(pszAlgId);
        ORBIT_TRACK_PARAM(pszImplementation);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptOpenAlgorithmProvider(phAlgorithm, pszAlgId, pszImplementation, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEnumAlgorithms(win32::Windows::Win32::Security::Cryptography::BCRYPT_OPERATION dwAlgOperations, uint32_t* pAlgCount, win32::Windows::Win32::Security::Cryptography::BCRYPT_ALGORITHM_IDENTIFIER** ppAlgList, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwAlgOperations);
        ORBIT_TRACK_PARAM(pAlgCount);
        ORBIT_TRACK_PARAM(ppAlgList);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptEnumAlgorithms(dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEnumProviders(win32::Windows::Win32::Foundation::PWSTR pszAlgId, uint32_t* pImplCount, win32::Windows::Win32::Security::Cryptography::BCRYPT_PROVIDER_NAME** ppImplList, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszAlgId);
        ORBIT_TRACK_PARAM(pImplCount);
        ORBIT_TRACK_PARAM(ppImplList);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptEnumProviders(pszAlgId, pImplCount, ppImplList, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptGetProperty(void* hObject, win32::Windows::Win32::Foundation::PWSTR pszProperty, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(pszProperty);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptGetProperty(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptSetProperty(void* hObject, win32::Windows::Win32::Foundation::PWSTR pszProperty, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(pszProperty);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptSetProperty(hObject, pszProperty, pbInput, cbInput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptCloseAlgorithmProvider(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptCloseAlgorithmProvider(hAlgorithm, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_BCryptFreeBuffer(void* pvBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvBuffer);

        g_api_table.BCryptFreeBuffer(pvBuffer);
        
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptGenerateSymmetricKey(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phKey, uint8_t* pbKeyObject, uint32_t cbKeyObject, uint8_t* pbSecret, uint32_t cbSecret, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(pbKeyObject);
        ORBIT_TRACK_PARAM(cbKeyObject);
        ORBIT_TRACK_PARAM(pbSecret);
        ORBIT_TRACK_PARAM(cbSecret);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptGenerateSymmetricKey(hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptGenerateKeyPair(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phKey, uint32_t dwLength, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(dwLength);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptGenerateKeyPair(hAlgorithm, phKey, dwLength, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEncrypt(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbIV, uint32_t cbIV, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbIV);
        ORBIT_TRACK_PARAM(cbIV);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptEncrypt(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDecrypt(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbIV, uint32_t cbIV, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbIV);
        ORBIT_TRACK_PARAM(cbIV);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptDecrypt(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptExportKey(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hExportKey, win32::Windows::Win32::Foundation::PWSTR pszBlobType, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(hExportKey);
        ORBIT_TRACK_PARAM(pszBlobType);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptExportKey(hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptImportKey(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hImportKey, win32::Windows::Win32::Foundation::PWSTR pszBlobType, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phKey, uint8_t* pbKeyObject, uint32_t cbKeyObject, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(hImportKey);
        ORBIT_TRACK_PARAM(pszBlobType);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(pbKeyObject);
        ORBIT_TRACK_PARAM(cbKeyObject);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptImportKey(hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptImportKeyPair(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hImportKey, win32::Windows::Win32::Foundation::PWSTR pszBlobType, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phKey, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(hImportKey);
        ORBIT_TRACK_PARAM(pszBlobType);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptImportKeyPair(hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDuplicateKey(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phNewKey, uint8_t* pbKeyObject, uint32_t cbKeyObject, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(phNewKey);
        ORBIT_TRACK_PARAM(pbKeyObject);
        ORBIT_TRACK_PARAM(cbKeyObject);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptDuplicateKey(hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptFinalizeKeyPair(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptFinalizeKeyPair(hKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDestroyKey(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);

        auto win32_impl_result = g_api_table.BCryptDestroyKey(hKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDestroySecret(void* hSecret) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSecret);

        auto win32_impl_result = g_api_table.BCryptDestroySecret(hSecret);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptSignHash(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, uint8_t* pbInput, uint32_t cbInput, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptSignHash(hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptVerifySignature(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, void* pPaddingInfo, uint8_t* pbHash, uint32_t cbHash, uint8_t* pbSignature, uint32_t cbSignature, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbHash);
        ORBIT_TRACK_PARAM(cbHash);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(cbSignature);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptVerifySignature(hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptSecretAgreement(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hPrivKey, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hPubKey, void** phAgreedSecret, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPrivKey);
        ORBIT_TRACK_PARAM(hPubKey);
        ORBIT_TRACK_PARAM(phAgreedSecret);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptSecretAgreement(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDeriveKey(void* hSharedSecret, win32::Windows::Win32::Foundation::PWSTR pwszKDF, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSharedSecret);
        ORBIT_TRACK_PARAM(pwszKDF);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbDerivedKey);
        ORBIT_TRACK_PARAM(cbDerivedKey);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptDeriveKey(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptKeyDerivation(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbDerivedKey);
        ORBIT_TRACK_PARAM(cbDerivedKey);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptKeyDerivation(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptCreateHash(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, void** phHash, uint8_t* pbHashObject, uint32_t cbHashObject, uint8_t* pbSecret, uint32_t cbSecret, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(phHash);
        ORBIT_TRACK_PARAM(pbHashObject);
        ORBIT_TRACK_PARAM(cbHashObject);
        ORBIT_TRACK_PARAM(pbSecret);
        ORBIT_TRACK_PARAM(cbSecret);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptCreateHash(hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptHashData(void* hHash, uint8_t* pbInput, uint32_t cbInput, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptHashData(hHash, pbInput, cbInput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptFinishHash(void* hHash, uint8_t* pbOutput, uint32_t cbOutput, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptFinishHash(hHash, pbOutput, cbOutput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptCreateMultiHash(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, void** phHash, uint32_t nHashes, uint8_t* pbHashObject, uint32_t cbHashObject, uint8_t* pbSecret, uint32_t cbSecret, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(phHash);
        ORBIT_TRACK_PARAM(nHashes);
        ORBIT_TRACK_PARAM(pbHashObject);
        ORBIT_TRACK_PARAM(cbHashObject);
        ORBIT_TRACK_PARAM(pbSecret);
        ORBIT_TRACK_PARAM(cbSecret);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptCreateMultiHash(hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptProcessMultiOperations(void* hObject, win32::Windows::Win32::Security::Cryptography::BCRYPT_MULTI_OPERATION_TYPE operationType, void* pOperations, uint32_t cbOperations, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(operationType);
        ORBIT_TRACK_PARAM(pOperations);
        ORBIT_TRACK_PARAM(cbOperations);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptProcessMultiOperations(hObject, operationType, pOperations, cbOperations, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDuplicateHash(void* hHash, void** phNewHash, uint8_t* pbHashObject, uint32_t cbHashObject, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(phNewHash);
        ORBIT_TRACK_PARAM(pbHashObject);
        ORBIT_TRACK_PARAM(cbHashObject);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptDuplicateHash(hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDestroyHash(void* hHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);

        auto win32_impl_result = g_api_table.BCryptDestroyHash(hHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptHash(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, uint8_t* pbSecret, uint32_t cbSecret, uint8_t* pbInput, uint32_t cbInput, uint8_t* pbOutput, uint32_t cbOutput) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(pbSecret);
        ORBIT_TRACK_PARAM(cbSecret);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);

        auto win32_impl_result = g_api_table.BCryptHash(hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptGenRandom(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hAlgorithm, uint8_t* pbBuffer, uint32_t cbBuffer, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAlgorithm);
        ORBIT_TRACK_PARAM(pbBuffer);
        ORBIT_TRACK_PARAM(cbBuffer);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptGenRandom(hAlgorithm, pbBuffer, cbBuffer, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDeriveKeyCapi(void* hHash, win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hTargetAlg, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHash);
        ORBIT_TRACK_PARAM(hTargetAlg);
        ORBIT_TRACK_PARAM(pbDerivedKey);
        ORBIT_TRACK_PARAM(cbDerivedKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptDeriveKeyCapi(hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDeriveKeyPBKDF2(win32::Windows::Win32::Security::Cryptography::BCRYPT_ALG_HANDLE hPrf, uint8_t* pbPassword, uint32_t cbPassword, uint8_t* pbSalt, uint32_t cbSalt, uint64_t cIterations, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPrf);
        ORBIT_TRACK_PARAM(pbPassword);
        ORBIT_TRACK_PARAM(cbPassword);
        ORBIT_TRACK_PARAM(pbSalt);
        ORBIT_TRACK_PARAM(cbSalt);
        ORBIT_TRACK_PARAM(cIterations);
        ORBIT_TRACK_PARAM(pbDerivedKey);
        ORBIT_TRACK_PARAM(cbDerivedKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BCryptDeriveKeyPBKDF2(hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptQueryProviderRegistration(win32::Windows::Win32::Foundation::PWSTR pszProvider, win32::Windows::Win32::Security::Cryptography::BCRYPT_QUERY_PROVIDER_MODE dwMode, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_PROVIDER_REG** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszProvider);
        ORBIT_TRACK_PARAM(dwMode);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptQueryProviderRegistration(pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEnumRegisteredProviders(uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_PROVIDERS** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptEnumRegisteredProviders(pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptCreateContext(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_CONFIG* pConfig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(pConfig);

        auto win32_impl_result = g_api_table.BCryptCreateContext(dwTable, pszContext, pConfig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptDeleteContext(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);

        auto win32_impl_result = g_api_table.BCryptDeleteContext(dwTable, pszContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEnumContexts(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXTS** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptEnumContexts(dwTable, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptConfigureContext(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_CONFIG* pConfig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(pConfig);

        auto win32_impl_result = g_api_table.BCryptConfigureContext(dwTable, pszContext, pConfig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptQueryContextConfiguration(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_CONFIG** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptQueryContextConfiguration(dwTable, pszContext, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptAddContextFunction(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, uint32_t dwPosition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(dwPosition);

        auto win32_impl_result = g_api_table.BCryptAddContextFunction(dwTable, pszContext, dwInterface, pszFunction, dwPosition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptRemoveContextFunction(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);

        auto win32_impl_result = g_api_table.BCryptRemoveContextFunction(dwTable, pszContext, dwInterface, pszFunction);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEnumContextFunctions(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_FUNCTIONS** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptEnumContextFunctions(dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptConfigureContextFunction(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_FUNCTION_CONFIG* pConfig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(pConfig);

        auto win32_impl_result = g_api_table.BCryptConfigureContextFunction(dwTable, pszContext, dwInterface, pszFunction, pConfig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptQueryContextFunctionConfiguration(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_FUNCTION_CONFIG** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptQueryContextFunctionConfiguration(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptEnumContextFunctionProviders(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_CONTEXT_FUNCTION_PROVIDERS** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptEnumContextFunctionProviders(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptSetContextFunctionProperty(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, win32::Windows::Win32::Foundation::PWSTR pszProperty, uint32_t cbValue, uint8_t* pbValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(pszProperty);
        ORBIT_TRACK_PARAM(cbValue);
        ORBIT_TRACK_PARAM(pbValue);

        auto win32_impl_result = g_api_table.BCryptSetContextFunctionProperty(dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptQueryContextFunctionProperty(win32::Windows::Win32::Security::Cryptography::BCRYPT_TABLE dwTable, win32::Windows::Win32::Foundation::PWSTR pszContext, win32::Windows::Win32::Security::Cryptography::BCRYPT_INTERFACE dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, win32::Windows::Win32::Foundation::PWSTR pszProperty, uint32_t* pcbValue, uint8_t** ppbValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTable);
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(pszProperty);
        ORBIT_TRACK_PARAM(pcbValue);
        ORBIT_TRACK_PARAM(ppbValue);

        auto win32_impl_result = g_api_table.BCryptQueryContextFunctionProperty(dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptRegisterConfigChangeNotify(win32::Windows::Win32::Foundation::HANDLE* phEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phEvent);

        auto win32_impl_result = g_api_table.BCryptRegisterConfigChangeNotify(phEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptUnregisterConfigChangeNotify(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.BCryptUnregisterConfigChangeNotify(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptResolveProviders(win32::Windows::Win32::Foundation::PWSTR pszContext, uint32_t dwInterface, win32::Windows::Win32::Foundation::PWSTR pszFunction, win32::Windows::Win32::Foundation::PWSTR pszProvider, win32::Windows::Win32::Security::Cryptography::BCRYPT_QUERY_PROVIDER_MODE dwMode, win32::Windows::Win32::Security::Cryptography::BCRYPT_RESOLVE_PROVIDERS_FLAGS dwFlags, uint32_t* pcbBuffer, win32::Windows::Win32::Security::Cryptography::CRYPT_PROVIDER_REFS** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszContext);
        ORBIT_TRACK_PARAM(dwInterface);
        ORBIT_TRACK_PARAM(pszFunction);
        ORBIT_TRACK_PARAM(pszProvider);
        ORBIT_TRACK_PARAM(dwMode);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pcbBuffer);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.BCryptResolveProviders(pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_BCryptGetFipsAlgorithmMode(uint8_t* pfEnabled) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfEnabled);

        auto win32_impl_result = g_api_table.BCryptGetFipsAlgorithmMode(pfEnabled);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptOpenStorageProvider(size_t* phProvider, win32::Windows::Win32::Foundation::PWSTR pszProviderName, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phProvider);
        ORBIT_TRACK_PARAM(pszProviderName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptOpenStorageProvider(phProvider, pszProviderName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptEnumAlgorithms(size_t hProvider, win32::Windows::Win32::Security::Cryptography::NCRYPT_OPERATION dwAlgOperations, uint32_t* pdwAlgCount, win32::Windows::Win32::Security::Cryptography::NCryptAlgorithmName** ppAlgList, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(dwAlgOperations);
        ORBIT_TRACK_PARAM(pdwAlgCount);
        ORBIT_TRACK_PARAM(ppAlgList);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptEnumAlgorithms(hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptIsAlgSupported(size_t hProvider, win32::Windows::Win32::Foundation::PWSTR pszAlgId, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(pszAlgId);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptIsAlgSupported(hProvider, pszAlgId, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptEnumKeys(size_t hProvider, win32::Windows::Win32::Foundation::PWSTR pszScope, win32::Windows::Win32::Security::Cryptography::NCryptKeyName** ppKeyName, void** ppEnumState, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(pszScope);
        ORBIT_TRACK_PARAM(ppKeyName);
        ORBIT_TRACK_PARAM(ppEnumState);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptEnumKeys(hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptEnumStorageProviders(uint32_t* pdwProviderCount, win32::Windows::Win32::Security::Cryptography::NCryptProviderName** ppProviderList, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pdwProviderCount);
        ORBIT_TRACK_PARAM(ppProviderList);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptEnumStorageProviders(pdwProviderCount, ppProviderList, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptFreeBuffer(void* pvInput) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvInput);

        auto win32_impl_result = g_api_table.NCryptFreeBuffer(pvInput);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptOpenKey(size_t hProvider, size_t* phKey, win32::Windows::Win32::Foundation::PWSTR pszKeyName, win32::Windows::Win32::Security::Cryptography::CERT_KEY_SPEC dwLegacyKeySpec, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(pszKeyName);
        ORBIT_TRACK_PARAM(dwLegacyKeySpec);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptOpenKey(hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptCreatePersistedKey(size_t hProvider, size_t* phKey, win32::Windows::Win32::Foundation::PWSTR pszAlgId, win32::Windows::Win32::Foundation::PWSTR pszKeyName, win32::Windows::Win32::Security::Cryptography::CERT_KEY_SPEC dwLegacyKeySpec, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(pszAlgId);
        ORBIT_TRACK_PARAM(pszKeyName);
        ORBIT_TRACK_PARAM(dwLegacyKeySpec);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptCreatePersistedKey(hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptGetProperty(size_t hObject, win32::Windows::Win32::Foundation::PWSTR pszProperty, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::OBJECT_SECURITY_INFORMATION dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(pszProperty);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptGetProperty(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptSetProperty(size_t hObject, win32::Windows::Win32::Foundation::PWSTR pszProperty, uint8_t* pbInput, uint32_t cbInput, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(pszProperty);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptSetProperty(hObject, pszProperty, pbInput, cbInput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptFinalizeKey(size_t hKey, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptFinalizeKey(hKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptEncrypt(size_t hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptEncrypt(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptDecrypt(size_t hKey, uint8_t* pbInput, uint32_t cbInput, void* pPaddingInfo, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pbInput);
        ORBIT_TRACK_PARAM(cbInput);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptDecrypt(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptImportKey(size_t hProvider, size_t hImportKey, win32::Windows::Win32::Foundation::PWSTR pszBlobType, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, size_t* phKey, uint8_t* pbData, uint32_t cbData, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(hImportKey);
        ORBIT_TRACK_PARAM(pszBlobType);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptImportKey(hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptExportKey(size_t hKey, size_t hExportKey, win32::Windows::Win32::Foundation::PWSTR pszBlobType, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbOutput, uint32_t cbOutput, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(hExportKey);
        ORBIT_TRACK_PARAM(pszBlobType);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbOutput);
        ORBIT_TRACK_PARAM(cbOutput);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptExportKey(hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptSignHash(size_t hKey, void* pPaddingInfo, uint8_t* pbHashValue, uint32_t cbHashValue, uint8_t* pbSignature, uint32_t cbSignature, uint32_t* pcbResult, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbHashValue);
        ORBIT_TRACK_PARAM(cbHashValue);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(cbSignature);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptSignHash(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptVerifySignature(size_t hKey, void* pPaddingInfo, uint8_t* pbHashValue, uint32_t cbHashValue, uint8_t* pbSignature, uint32_t cbSignature, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pPaddingInfo);
        ORBIT_TRACK_PARAM(pbHashValue);
        ORBIT_TRACK_PARAM(cbHashValue);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(cbSignature);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptVerifySignature(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptDeleteKey(size_t hKey, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptDeleteKey(hKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptFreeObject(size_t hObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hObject);

        auto win32_impl_result = g_api_table.NCryptFreeObject(hObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_NCryptIsKeyHandle(size_t hKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);

        auto win32_impl_result = g_api_table.NCryptIsKeyHandle(hKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptTranslateHandle(size_t* phProvider, size_t* phKey, size_t hLegacyProv, size_t hLegacyKey, win32::Windows::Win32::Security::Cryptography::CERT_KEY_SPEC dwLegacyKeySpec, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phProvider);
        ORBIT_TRACK_PARAM(phKey);
        ORBIT_TRACK_PARAM(hLegacyProv);
        ORBIT_TRACK_PARAM(hLegacyKey);
        ORBIT_TRACK_PARAM(dwLegacyKeySpec);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptTranslateHandle(phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptNotifyChangeKey(size_t hProvider, win32::Windows::Win32::Foundation::HANDLE* phEvent, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProvider);
        ORBIT_TRACK_PARAM(phEvent);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptNotifyChangeKey(hProvider, phEvent, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptSecretAgreement(size_t hPrivKey, size_t hPubKey, size_t* phAgreedSecret, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hPrivKey);
        ORBIT_TRACK_PARAM(hPubKey);
        ORBIT_TRACK_PARAM(phAgreedSecret);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptSecretAgreement(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptDeriveKey(size_t hSharedSecret, win32::Windows::Win32::Foundation::PWSTR pwszKDF, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSharedSecret);
        ORBIT_TRACK_PARAM(pwszKDF);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbDerivedKey);
        ORBIT_TRACK_PARAM(cbDerivedKey);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptDeriveKey(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptKeyDerivation(size_t hKey, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbDerivedKey, uint32_t cbDerivedKey, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbDerivedKey);
        ORBIT_TRACK_PARAM(cbDerivedKey);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptKeyDerivation(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptCreateClaim(size_t hSubjectKey, size_t hAuthorityKey, uint32_t dwClaimType, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbClaimBlob, uint32_t cbClaimBlob, uint32_t* pcbResult, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSubjectKey);
        ORBIT_TRACK_PARAM(hAuthorityKey);
        ORBIT_TRACK_PARAM(dwClaimType);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbClaimBlob);
        ORBIT_TRACK_PARAM(cbClaimBlob);
        ORBIT_TRACK_PARAM(pcbResult);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptCreateClaim(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptVerifyClaim(size_t hSubjectKey, size_t hAuthorityKey, uint32_t dwClaimType, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pParameterList, uint8_t* pbClaimBlob, uint32_t cbClaimBlob, win32::Windows::Win32::Security::Cryptography::BCryptBufferDesc* pOutput, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSubjectKey);
        ORBIT_TRACK_PARAM(hAuthorityKey);
        ORBIT_TRACK_PARAM(dwClaimType);
        ORBIT_TRACK_PARAM(pParameterList);
        ORBIT_TRACK_PARAM(pbClaimBlob);
        ORBIT_TRACK_PARAM(cbClaimBlob);
        ORBIT_TRACK_PARAM(pOutput);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptVerifyClaim(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptFormatObject(uint32_t dwCertEncodingType, uint32_t dwFormatType, uint32_t dwFormatStrType, void* pFormatStruct, win32::Windows::Win32::Foundation::PSTR lpszStructType, uint8_t* pbEncoded, uint32_t cbEncoded, void* pbFormat, uint32_t* pcbFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(dwFormatType);
        ORBIT_TRACK_PARAM(dwFormatStrType);
        ORBIT_TRACK_PARAM(pFormatStruct);
        ORBIT_TRACK_PARAM(lpszStructType);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(pbFormat);
        ORBIT_TRACK_PARAM(pcbFormat);

        auto win32_impl_result = g_api_table.CryptFormatObject(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct, lpszStructType, pbEncoded, cbEncoded, pbFormat, pcbFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEncodeObjectEx(win32::Windows::Win32::Security::Cryptography::CERT_QUERY_ENCODING_TYPE dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR lpszStructType, void* pvStructInfo, win32::Windows::Win32::Security::Cryptography::CRYPT_ENCODE_OBJECT_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_ENCODE_PARA* pEncodePara, void* pvEncoded, uint32_t* pcbEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(lpszStructType);
        ORBIT_TRACK_PARAM(pvStructInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pEncodePara);
        ORBIT_TRACK_PARAM(pvEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);

        auto win32_impl_result = g_api_table.CryptEncodeObjectEx(dwCertEncodingType, lpszStructType, pvStructInfo, dwFlags, pEncodePara, pvEncoded, pcbEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEncodeObject(uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR lpszStructType, void* pvStructInfo, uint8_t* pbEncoded, uint32_t* pcbEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(lpszStructType);
        ORBIT_TRACK_PARAM(pvStructInfo);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);

        auto win32_impl_result = g_api_table.CryptEncodeObject(dwCertEncodingType, lpszStructType, pvStructInfo, pbEncoded, pcbEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDecodeObjectEx(uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR lpszStructType, uint8_t* pbEncoded, uint32_t cbEncoded, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_DECODE_PARA* pDecodePara, void* pvStructInfo, uint32_t* pcbStructInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(lpszStructType);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pDecodePara);
        ORBIT_TRACK_PARAM(pvStructInfo);
        ORBIT_TRACK_PARAM(pcbStructInfo);

        auto win32_impl_result = g_api_table.CryptDecodeObjectEx(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pDecodePara, pvStructInfo, pcbStructInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDecodeObject(uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR lpszStructType, uint8_t* pbEncoded, uint32_t cbEncoded, uint32_t dwFlags, void* pvStructInfo, uint32_t* pcbStructInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(lpszStructType);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvStructInfo);
        ORBIT_TRACK_PARAM(pcbStructInfo);

        auto win32_impl_result = g_api_table.CryptDecodeObject(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pvStructInfo, pcbStructInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptInstallOIDFunctionAddress(win32::Windows::Win32::Foundation::HINSTANCE hModule, uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, uint32_t cFuncEntry, win32::Windows::Win32::Security::Cryptography::CRYPT_OID_FUNC_ENTRY* rgFuncEntry, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hModule);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(cFuncEntry);
        ORBIT_TRACK_PARAM(rgFuncEntry);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptInstallOIDFunctionAddress(hModule, dwEncodingType, pszFuncName, cFuncEntry, rgFuncEntry, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptInitOIDFunctionSet(win32::Windows::Win32::Foundation::PSTR pszFuncName, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptInitOIDFunctionSet(pszFuncName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetOIDFunctionAddress(void* hFuncSet, uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszOID, uint32_t dwFlags, void** ppvFuncAddr, void** phFuncAddr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFuncSet);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszOID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(ppvFuncAddr);
        ORBIT_TRACK_PARAM(phFuncAddr);

        auto win32_impl_result = g_api_table.CryptGetOIDFunctionAddress(hFuncSet, dwEncodingType, pszOID, dwFlags, ppvFuncAddr, phFuncAddr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetDefaultOIDDllList(void* hFuncSet, uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PWSTR pwszDllList, uint32_t* pcchDllList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFuncSet);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pwszDllList);
        ORBIT_TRACK_PARAM(pcchDllList);

        auto win32_impl_result = g_api_table.CryptGetDefaultOIDDllList(hFuncSet, dwEncodingType, pwszDllList, pcchDllList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetDefaultOIDFunctionAddress(void* hFuncSet, uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PWSTR pwszDll, uint32_t dwFlags, void** ppvFuncAddr, void** phFuncAddr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFuncSet);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pwszDll);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(ppvFuncAddr);
        ORBIT_TRACK_PARAM(phFuncAddr);

        auto win32_impl_result = g_api_table.CryptGetDefaultOIDFunctionAddress(hFuncSet, dwEncodingType, pwszDll, dwFlags, ppvFuncAddr, phFuncAddr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptFreeOIDFunctionAddress(void* hFuncAddr, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFuncAddr);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptFreeOIDFunctionAddress(hFuncAddr, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptRegisterOIDFunction(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, win32::Windows::Win32::Foundation::PSTR pszOID, win32::Windows::Win32::Foundation::PWSTR pwszDll, win32::Windows::Win32::Foundation::PSTR pszOverrideFuncName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(pszOID);
        ORBIT_TRACK_PARAM(pwszDll);
        ORBIT_TRACK_PARAM(pszOverrideFuncName);

        auto win32_impl_result = g_api_table.CryptRegisterOIDFunction(dwEncodingType, pszFuncName, pszOID, pwszDll, pszOverrideFuncName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUnregisterOIDFunction(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, win32::Windows::Win32::Foundation::PSTR pszOID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(pszOID);

        auto win32_impl_result = g_api_table.CryptUnregisterOIDFunction(dwEncodingType, pszFuncName, pszOID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptRegisterDefaultOIDFunction(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, uint32_t dwIndex, win32::Windows::Win32::Foundation::PWSTR pwszDll) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pwszDll);

        auto win32_impl_result = g_api_table.CryptRegisterDefaultOIDFunction(dwEncodingType, pszFuncName, dwIndex, pwszDll);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUnregisterDefaultOIDFunction(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, win32::Windows::Win32::Foundation::PWSTR pwszDll) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(pwszDll);

        auto win32_impl_result = g_api_table.CryptUnregisterDefaultOIDFunction(dwEncodingType, pszFuncName, pwszDll);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetOIDFunctionValue(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, win32::Windows::Win32::Foundation::PSTR pszOID, win32::Windows::Win32::Foundation::PWSTR pwszValueName, win32::Windows::Win32::System::Registry::REG_VALUE_TYPE dwValueType, uint8_t* pbValueData, uint32_t cbValueData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(pszOID);
        ORBIT_TRACK_PARAM(pwszValueName);
        ORBIT_TRACK_PARAM(dwValueType);
        ORBIT_TRACK_PARAM(pbValueData);
        ORBIT_TRACK_PARAM(cbValueData);

        auto win32_impl_result = g_api_table.CryptSetOIDFunctionValue(dwEncodingType, pszFuncName, pszOID, pwszValueName, dwValueType, pbValueData, cbValueData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetOIDFunctionValue(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, win32::Windows::Win32::Foundation::PSTR pszOID, win32::Windows::Win32::Foundation::PWSTR pwszValueName, uint32_t* pdwValueType, uint8_t* pbValueData, uint32_t* pcbValueData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(pszOID);
        ORBIT_TRACK_PARAM(pwszValueName);
        ORBIT_TRACK_PARAM(pdwValueType);
        ORBIT_TRACK_PARAM(pbValueData);
        ORBIT_TRACK_PARAM(pcbValueData);

        auto win32_impl_result = g_api_table.CryptGetOIDFunctionValue(dwEncodingType, pszFuncName, pszOID, pwszValueName, pdwValueType, pbValueData, pcbValueData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumOIDFunction(uint32_t dwEncodingType, win32::Windows::Win32::Foundation::PSTR pszFuncName, win32::Windows::Win32::Foundation::PSTR pszOID, uint32_t dwFlags, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_ENUM_OID_FUNC* pfnEnumOIDFunc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pszFuncName);
        ORBIT_TRACK_PARAM(pszOID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnumOIDFunc);

        auto win32_impl_result = g_api_table.CryptEnumOIDFunction(dwEncodingType, pszFuncName, pszOID, dwFlags, pvArg, pfnEnumOIDFunc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRYPT_OID_INFO* __stdcall ORBIT_IMPL_CryptFindOIDInfo(uint32_t dwKeyType, void* pvKey, uint32_t dwGroupId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwKeyType);
        ORBIT_TRACK_PARAM(pvKey);
        ORBIT_TRACK_PARAM(dwGroupId);

        auto win32_impl_result = g_api_table.CryptFindOIDInfo(dwKeyType, pvKey, dwGroupId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptRegisterOIDInfo(win32::Windows::Win32::Security::Cryptography::CRYPT_OID_INFO* pInfo, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptRegisterOIDInfo(pInfo, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUnregisterOIDInfo(win32::Windows::Win32::Security::Cryptography::CRYPT_OID_INFO* pInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInfo);

        auto win32_impl_result = g_api_table.CryptUnregisterOIDInfo(pInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumOIDInfo(uint32_t dwGroupId, uint32_t dwFlags, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_ENUM_OID_INFO* pfnEnumOIDInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwGroupId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnumOIDInfo);

        auto win32_impl_result = g_api_table.CryptEnumOIDInfo(dwGroupId, dwFlags, pvArg, pfnEnumOIDInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_CryptFindLocalizedName(win32::Windows::Win32::Foundation::PWSTR pwszCryptName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszCryptName);

        auto win32_impl_result = g_api_table.CryptFindLocalizedName(pwszCryptName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptMsgOpenToEncode(uint32_t dwMsgEncodingType, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_MSG_TYPE dwMsgType, void* pvMsgEncodeInfo, win32::Windows::Win32::Foundation::PSTR pszInnerContentObjID, win32::Windows::Win32::Security::Cryptography::CMSG_STREAM_INFO* pStreamInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgEncodingType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwMsgType);
        ORBIT_TRACK_PARAM(pvMsgEncodeInfo);
        ORBIT_TRACK_PARAM(pszInnerContentObjID);
        ORBIT_TRACK_PARAM(pStreamInfo);

        auto win32_impl_result = g_api_table.CryptMsgOpenToEncode(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, pStreamInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CryptMsgCalculateEncodedLength(uint32_t dwMsgEncodingType, uint32_t dwFlags, uint32_t dwMsgType, void* pvMsgEncodeInfo, win32::Windows::Win32::Foundation::PSTR pszInnerContentObjID, uint32_t cbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgEncodingType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwMsgType);
        ORBIT_TRACK_PARAM(pvMsgEncodeInfo);
        ORBIT_TRACK_PARAM(pszInnerContentObjID);
        ORBIT_TRACK_PARAM(cbData);

        auto win32_impl_result = g_api_table.CryptMsgCalculateEncodedLength(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, cbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptMsgOpenToDecode(uint32_t dwMsgEncodingType, uint32_t dwFlags, uint32_t dwMsgType, size_t hCryptProv, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pRecipientInfo, win32::Windows::Win32::Security::Cryptography::CMSG_STREAM_INFO* pStreamInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgEncodingType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwMsgType);
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(pRecipientInfo);
        ORBIT_TRACK_PARAM(pStreamInfo);

        auto win32_impl_result = g_api_table.CryptMsgOpenToDecode(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo, pStreamInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptMsgDuplicate(void* hCryptMsg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);

        auto win32_impl_result = g_api_table.CryptMsgDuplicate(hCryptMsg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgClose(void* hCryptMsg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);

        auto win32_impl_result = g_api_table.CryptMsgClose(hCryptMsg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgUpdate(void* hCryptMsg, uint8_t* pbData, uint32_t cbData, win32::Windows::Win32::Foundation::BOOL fFinal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(fFinal);

        auto win32_impl_result = g_api_table.CryptMsgUpdate(hCryptMsg, pbData, cbData, fFinal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgGetParam(void* hCryptMsg, uint32_t dwParamType, uint32_t dwIndex, void* pvData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);
        ORBIT_TRACK_PARAM(dwParamType);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.CryptMsgGetParam(hCryptMsg, dwParamType, dwIndex, pvData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgControl(void* hCryptMsg, uint32_t dwFlags, uint32_t dwCtrlType, void* pvCtrlPara) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwCtrlType);
        ORBIT_TRACK_PARAM(pvCtrlPara);

        auto win32_impl_result = g_api_table.CryptMsgControl(hCryptMsg, dwFlags, dwCtrlType, pvCtrlPara);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgVerifyCountersignatureEncoded(size_t hCryptProv, uint32_t dwEncodingType, uint8_t* pbSignerInfo, uint32_t cbSignerInfo, uint8_t* pbSignerInfoCountersignature, uint32_t cbSignerInfoCountersignature, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pciCountersigner) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pbSignerInfo);
        ORBIT_TRACK_PARAM(cbSignerInfo);
        ORBIT_TRACK_PARAM(pbSignerInfoCountersignature);
        ORBIT_TRACK_PARAM(cbSignerInfoCountersignature);
        ORBIT_TRACK_PARAM(pciCountersigner);

        auto win32_impl_result = g_api_table.CryptMsgVerifyCountersignatureEncoded(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, pciCountersigner);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgVerifyCountersignatureEncodedEx(size_t hCryptProv, uint32_t dwEncodingType, uint8_t* pbSignerInfo, uint32_t cbSignerInfo, uint8_t* pbSignerInfoCountersignature, uint32_t cbSignerInfoCountersignature, uint32_t dwSignerType, void* pvSigner, uint32_t dwFlags, void* pvExtra) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pbSignerInfo);
        ORBIT_TRACK_PARAM(cbSignerInfo);
        ORBIT_TRACK_PARAM(pbSignerInfoCountersignature);
        ORBIT_TRACK_PARAM(cbSignerInfoCountersignature);
        ORBIT_TRACK_PARAM(dwSignerType);
        ORBIT_TRACK_PARAM(pvSigner);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvExtra);

        auto win32_impl_result = g_api_table.CryptMsgVerifyCountersignatureEncodedEx(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, dwSignerType, pvSigner, dwFlags, pvExtra);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgCountersign(void* hCryptMsg, uint32_t dwIndex, uint32_t cCountersigners, win32::Windows::Win32::Security::Cryptography::CMSG_SIGNER_ENCODE_INFO* rgCountersigners) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(cCountersigners);
        ORBIT_TRACK_PARAM(rgCountersigners);

        auto win32_impl_result = g_api_table.CryptMsgCountersign(hCryptMsg, dwIndex, cCountersigners, rgCountersigners);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgCountersignEncoded(uint32_t dwEncodingType, uint8_t* pbSignerInfo, uint32_t cbSignerInfo, uint32_t cCountersigners, win32::Windows::Win32::Security::Cryptography::CMSG_SIGNER_ENCODE_INFO* rgCountersigners, uint8_t* pbCountersignature, uint32_t* pcbCountersignature) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pbSignerInfo);
        ORBIT_TRACK_PARAM(cbSignerInfo);
        ORBIT_TRACK_PARAM(cCountersigners);
        ORBIT_TRACK_PARAM(rgCountersigners);
        ORBIT_TRACK_PARAM(pbCountersignature);
        ORBIT_TRACK_PARAM(pcbCountersignature);

        auto win32_impl_result = g_api_table.CryptMsgCountersignEncoded(dwEncodingType, pbSignerInfo, cbSignerInfo, cCountersigners, rgCountersigners, pbCountersignature, pcbCountersignature);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CertOpenStore(win32::Windows::Win32::Foundation::PSTR lpszStoreProvider, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_ENCODING_TYPE dwEncodingType, size_t hCryptProv, win32::Windows::Win32::Security::Cryptography::CERT_OPEN_STORE_FLAGS dwFlags, void* pvPara) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszStoreProvider);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvPara);

        auto win32_impl_result = g_api_table.CertOpenStore(lpszStoreProvider, dwEncodingType, hCryptProv, dwFlags, pvPara);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CertDuplicateStore(void* hCertStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);

        auto win32_impl_result = g_api_table.CertDuplicateStore(hCertStore);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSaveStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_ENCODING_TYPE dwEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_STORE_SAVE_AS dwSaveAs, win32::Windows::Win32::Security::Cryptography::CERT_STORE_SAVE_TO dwSaveTo, void* pvSaveToPara, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(dwSaveAs);
        ORBIT_TRACK_PARAM(dwSaveTo);
        ORBIT_TRACK_PARAM(pvSaveToPara);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CertSaveStore(hCertStore, dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertCloseStore(void* hCertStore, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CertCloseStore(hCertStore, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertGetSubjectCertificateFromStore(void* hCertStore, uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pCertId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pCertId);

        auto win32_impl_result = g_api_table.CertGetSubjectCertificateFromStore(hCertStore, dwCertEncodingType, pCertId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertEnumCertificatesInStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pPrevCertContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pPrevCertContext);

        auto win32_impl_result = g_api_table.CertEnumCertificatesInStore(hCertStore, pPrevCertContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertFindCertificateInStore(void* hCertStore, uint32_t dwCertEncodingType, uint32_t dwFindFlags, win32::Windows::Win32::Security::Cryptography::CERT_FIND_FLAGS dwFindType, void* pvFindPara, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pPrevCertContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(dwFindFlags);
        ORBIT_TRACK_PARAM(dwFindType);
        ORBIT_TRACK_PARAM(pvFindPara);
        ORBIT_TRACK_PARAM(pPrevCertContext);

        auto win32_impl_result = g_api_table.CertFindCertificateInStore(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCertContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertGetIssuerCertificateFromStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pSubjectContext, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pPrevIssuerContext, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pSubjectContext);
        ORBIT_TRACK_PARAM(pPrevIssuerContext);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.CertGetIssuerCertificateFromStore(hCertStore, pSubjectContext, pPrevIssuerContext, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertVerifySubjectCertificateContext(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pSubject, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pIssuer, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSubject);
        ORBIT_TRACK_PARAM(pIssuer);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.CertVerifySubjectCertificateContext(pSubject, pIssuer, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertDuplicateCertificateContext(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);

        auto win32_impl_result = g_api_table.CertDuplicateCertificateContext(pCertContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertCreateCertificateContext(uint32_t dwCertEncodingType, uint8_t* pbCertEncoded, uint32_t cbCertEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbCertEncoded);
        ORBIT_TRACK_PARAM(cbCertEncoded);

        auto win32_impl_result = g_api_table.CertCreateCertificateContext(dwCertEncodingType, pbCertEncoded, cbCertEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertFreeCertificateContext(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);

        auto win32_impl_result = g_api_table.CertFreeCertificateContext(pCertContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSetCertificateContextProperty(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwPropId, uint32_t dwFlags, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.CertSetCertificateContextProperty(pCertContext, dwPropId, dwFlags, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetCertificateContextProperty(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwPropId, void* pvData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.CertGetCertificateContextProperty(pCertContext, dwPropId, pvData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertEnumCertificateContextProperties(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwPropId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwPropId);

        auto win32_impl_result = g_api_table.CertEnumCertificateContextProperties(pCertContext, dwPropId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertCreateCTLEntryFromCertificateContextProperties(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t cOptAttr, win32::Windows::Win32::Security::Cryptography::CRYPT_ATTRIBUTE* rgOptAttr, uint32_t dwFlags, void* pvReserved, win32::Windows::Win32::Security::Cryptography::CTL_ENTRY* pCtlEntry, uint32_t* pcbCtlEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(cOptAttr);
        ORBIT_TRACK_PARAM(rgOptAttr);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pCtlEntry);
        ORBIT_TRACK_PARAM(pcbCtlEntry);

        auto win32_impl_result = g_api_table.CertCreateCTLEntryFromCertificateContextProperties(pCertContext, cOptAttr, rgOptAttr, dwFlags, pvReserved, pCtlEntry, pcbCtlEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSetCertificateContextPropertiesFromCTLEntry(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, win32::Windows::Win32::Security::Cryptography::CTL_ENTRY* pCtlEntry, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(pCtlEntry);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CertSetCertificateContextPropertiesFromCTLEntry(pCertContext, pCtlEntry, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* __stdcall ORBIT_IMPL_CertGetCRLFromStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pIssuerContext, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pPrevCrlContext, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pIssuerContext);
        ORBIT_TRACK_PARAM(pPrevCrlContext);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.CertGetCRLFromStore(hCertStore, pIssuerContext, pPrevCrlContext, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* __stdcall ORBIT_IMPL_CertEnumCRLsInStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pPrevCrlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pPrevCrlContext);

        auto win32_impl_result = g_api_table.CertEnumCRLsInStore(hCertStore, pPrevCrlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* __stdcall ORBIT_IMPL_CertFindCRLInStore(void* hCertStore, uint32_t dwCertEncodingType, uint32_t dwFindFlags, uint32_t dwFindType, void* pvFindPara, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pPrevCrlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(dwFindFlags);
        ORBIT_TRACK_PARAM(dwFindType);
        ORBIT_TRACK_PARAM(pvFindPara);
        ORBIT_TRACK_PARAM(pPrevCrlContext);

        auto win32_impl_result = g_api_table.CertFindCRLInStore(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCrlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* __stdcall ORBIT_IMPL_CertDuplicateCRLContext(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);

        auto win32_impl_result = g_api_table.CertDuplicateCRLContext(pCrlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* __stdcall ORBIT_IMPL_CertCreateCRLContext(uint32_t dwCertEncodingType, uint8_t* pbCrlEncoded, uint32_t cbCrlEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbCrlEncoded);
        ORBIT_TRACK_PARAM(cbCrlEncoded);

        auto win32_impl_result = g_api_table.CertCreateCRLContext(dwCertEncodingType, pbCrlEncoded, cbCrlEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertFreeCRLContext(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);

        auto win32_impl_result = g_api_table.CertFreeCRLContext(pCrlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSetCRLContextProperty(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwPropId, uint32_t dwFlags, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.CertSetCRLContextProperty(pCrlContext, dwPropId, dwFlags, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetCRLContextProperty(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwPropId, void* pvData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.CertGetCRLContextProperty(pCrlContext, dwPropId, pvData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertEnumCRLContextProperties(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwPropId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwPropId);

        auto win32_impl_result = g_api_table.CertEnumCRLContextProperties(pCrlContext, dwPropId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertFindCertificateInCRL(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCert, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwFlags, void* pvReserved, win32::Windows::Win32::Security::Cryptography::CRL_ENTRY** ppCrlEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCert);
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(ppCrlEntry);

        auto win32_impl_result = g_api_table.CertFindCertificateInCRL(pCert, pCrlContext, dwFlags, pvReserved, ppCrlEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertIsValidCRLForCertificate(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCert, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrl, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCert);
        ORBIT_TRACK_PARAM(pCrl);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CertIsValidCRLForCertificate(pCert, pCrl, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddEncodedCertificateToStore(void* hCertStore, uint32_t dwCertEncodingType, uint8_t* pbCertEncoded, uint32_t cbCertEncoded, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppCertContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbCertEncoded);
        ORBIT_TRACK_PARAM(cbCertEncoded);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppCertContext);

        auto win32_impl_result = g_api_table.CertAddEncodedCertificateToStore(hCertStore, dwCertEncodingType, pbCertEncoded, cbCertEncoded, dwAddDisposition, ppCertContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddCertificateContextToStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppStoreContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppStoreContext);

        auto win32_impl_result = g_api_table.CertAddCertificateContextToStore(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddSerializedElementToStore(void* hCertStore, uint8_t* pbElement, uint32_t cbElement, uint32_t dwAddDisposition, uint32_t dwFlags, uint32_t dwContextTypeFlags, uint32_t* pdwContextType, void** ppvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pbElement);
        ORBIT_TRACK_PARAM(cbElement);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwContextTypeFlags);
        ORBIT_TRACK_PARAM(pdwContextType);
        ORBIT_TRACK_PARAM(ppvContext);

        auto win32_impl_result = g_api_table.CertAddSerializedElementToStore(hCertStore, pbElement, cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType, ppvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertDeleteCertificateFromStore(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);

        auto win32_impl_result = g_api_table.CertDeleteCertificateFromStore(pCertContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddEncodedCRLToStore(void* hCertStore, uint32_t dwCertEncodingType, uint8_t* pbCrlEncoded, uint32_t cbCrlEncoded, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT** ppCrlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbCrlEncoded);
        ORBIT_TRACK_PARAM(cbCrlEncoded);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppCrlContext);

        auto win32_impl_result = g_api_table.CertAddEncodedCRLToStore(hCertStore, dwCertEncodingType, pbCrlEncoded, cbCrlEncoded, dwAddDisposition, ppCrlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddCRLContextToStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT** ppStoreContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppStoreContext);

        auto win32_impl_result = g_api_table.CertAddCRLContextToStore(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertDeleteCRLFromStore(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);

        auto win32_impl_result = g_api_table.CertDeleteCRLFromStore(pCrlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSerializeCertificateStoreElement(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwFlags, uint8_t* pbElement, uint32_t* pcbElement) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbElement);
        ORBIT_TRACK_PARAM(pcbElement);

        auto win32_impl_result = g_api_table.CertSerializeCertificateStoreElement(pCertContext, dwFlags, pbElement, pcbElement);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSerializeCRLStoreElement(win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwFlags, uint8_t* pbElement, uint32_t* pcbElement) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbElement);
        ORBIT_TRACK_PARAM(pcbElement);

        auto win32_impl_result = g_api_table.CertSerializeCRLStoreElement(pCrlContext, dwFlags, pbElement, pcbElement);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* __stdcall ORBIT_IMPL_CertDuplicateCTLContext(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);

        auto win32_impl_result = g_api_table.CertDuplicateCTLContext(pCtlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* __stdcall ORBIT_IMPL_CertCreateCTLContext(uint32_t dwMsgAndCertEncodingType, uint8_t* pbCtlEncoded, uint32_t cbCtlEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgAndCertEncodingType);
        ORBIT_TRACK_PARAM(pbCtlEncoded);
        ORBIT_TRACK_PARAM(cbCtlEncoded);

        auto win32_impl_result = g_api_table.CertCreateCTLContext(dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertFreeCTLContext(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);

        auto win32_impl_result = g_api_table.CertFreeCTLContext(pCtlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSetCTLContextProperty(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwPropId, uint32_t dwFlags, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.CertSetCTLContextProperty(pCtlContext, dwPropId, dwFlags, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetCTLContextProperty(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwPropId, void* pvData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.CertGetCTLContextProperty(pCtlContext, dwPropId, pvData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertEnumCTLContextProperties(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwPropId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwPropId);

        auto win32_impl_result = g_api_table.CertEnumCTLContextProperties(pCtlContext, dwPropId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* __stdcall ORBIT_IMPL_CertEnumCTLsInStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pPrevCtlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pPrevCtlContext);

        auto win32_impl_result = g_api_table.CertEnumCTLsInStore(hCertStore, pPrevCtlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CTL_ENTRY* __stdcall ORBIT_IMPL_CertFindSubjectInCTL(uint32_t dwEncodingType, uint32_t dwSubjectType, void* pvSubject, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(dwSubjectType);
        ORBIT_TRACK_PARAM(pvSubject);
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CertFindSubjectInCTL(dwEncodingType, dwSubjectType, pvSubject, pCtlContext, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* __stdcall ORBIT_IMPL_CertFindCTLInStore(void* hCertStore, uint32_t dwMsgAndCertEncodingType, uint32_t dwFindFlags, win32::Windows::Win32::Security::Cryptography::CERT_FIND_TYPE dwFindType, void* pvFindPara, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pPrevCtlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwMsgAndCertEncodingType);
        ORBIT_TRACK_PARAM(dwFindFlags);
        ORBIT_TRACK_PARAM(dwFindType);
        ORBIT_TRACK_PARAM(pvFindPara);
        ORBIT_TRACK_PARAM(pPrevCtlContext);

        auto win32_impl_result = g_api_table.CertFindCTLInStore(hCertStore, dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCtlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddEncodedCTLToStore(void* hCertStore, uint32_t dwMsgAndCertEncodingType, uint8_t* pbCtlEncoded, uint32_t cbCtlEncoded, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT** ppCtlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwMsgAndCertEncodingType);
        ORBIT_TRACK_PARAM(pbCtlEncoded);
        ORBIT_TRACK_PARAM(cbCtlEncoded);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppCtlContext);

        auto win32_impl_result = g_api_table.CertAddEncodedCTLToStore(hCertStore, dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded, dwAddDisposition, ppCtlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddCTLContextToStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT** ppStoreContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppStoreContext);

        auto win32_impl_result = g_api_table.CertAddCTLContextToStore(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSerializeCTLStoreElement(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwFlags, uint8_t* pbElement, uint32_t* pcbElement) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbElement);
        ORBIT_TRACK_PARAM(pcbElement);

        auto win32_impl_result = g_api_table.CertSerializeCTLStoreElement(pCtlContext, dwFlags, pbElement, pcbElement);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertDeleteCTLFromStore(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);

        auto win32_impl_result = g_api_table.CertDeleteCTLFromStore(pCtlContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddCertificateLinkToStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppStoreContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppStoreContext);

        auto win32_impl_result = g_api_table.CertAddCertificateLinkToStore(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddCRLLinkToStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT* pCrlContext, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CRL_CONTEXT** ppStoreContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pCrlContext);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppStoreContext);

        auto win32_impl_result = g_api_table.CertAddCRLLinkToStore(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddCTLLinkToStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwAddDisposition, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT** ppStoreContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwAddDisposition);
        ORBIT_TRACK_PARAM(ppStoreContext);

        auto win32_impl_result = g_api_table.CertAddCTLLinkToStore(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddStoreToCollection(void* hCollectionStore, void* hSiblingStore, uint32_t dwUpdateFlags, uint32_t dwPriority) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCollectionStore);
        ORBIT_TRACK_PARAM(hSiblingStore);
        ORBIT_TRACK_PARAM(dwUpdateFlags);
        ORBIT_TRACK_PARAM(dwPriority);

        auto win32_impl_result = g_api_table.CertAddStoreToCollection(hCollectionStore, hSiblingStore, dwUpdateFlags, dwPriority);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CertRemoveStoreFromCollection(void* hCollectionStore, void* hSiblingStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCollectionStore);
        ORBIT_TRACK_PARAM(hSiblingStore);

        g_api_table.CertRemoveStoreFromCollection(hCollectionStore, hSiblingStore);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertControlStore(void* hCertStore, win32::Windows::Win32::Security::Cryptography::CERT_CONTROL_STORE_FLAGS dwFlags, uint32_t dwCtrlType, void* pvCtrlPara) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwCtrlType);
        ORBIT_TRACK_PARAM(pvCtrlPara);

        auto win32_impl_result = g_api_table.CertControlStore(hCertStore, dwFlags, dwCtrlType, pvCtrlPara);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSetStoreProperty(void* hCertStore, uint32_t dwPropId, uint32_t dwFlags, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.CertSetStoreProperty(hCertStore, dwPropId, dwFlags, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetStoreProperty(void* hCertStore, uint32_t dwPropId, void* pvData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.CertGetStoreProperty(hCertStore, dwPropId, pvData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CertCreateContext(uint32_t dwContextType, uint32_t dwEncodingType, uint8_t* pbEncoded, uint32_t cbEncoded, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_CREATE_CONTEXT_PARA* pCreatePara) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwContextType);
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pCreatePara);

        auto win32_impl_result = g_api_table.CertCreateContext(dwContextType, dwEncodingType, pbEncoded, cbEncoded, dwFlags, pCreatePara);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertRegisterSystemStore(void* pvSystemStore, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_SYSTEM_STORE_INFO* pStoreInfo, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvSystemStore);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pStoreInfo);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CertRegisterSystemStore(pvSystemStore, dwFlags, pStoreInfo, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertRegisterPhysicalStore(void* pvSystemStore, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszStoreName, win32::Windows::Win32::Security::Cryptography::CERT_PHYSICAL_STORE_INFO* pStoreInfo, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvSystemStore);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszStoreName);
        ORBIT_TRACK_PARAM(pStoreInfo);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CertRegisterPhysicalStore(pvSystemStore, dwFlags, pwszStoreName, pStoreInfo, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertUnregisterSystemStore(void* pvSystemStore, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvSystemStore);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CertUnregisterSystemStore(pvSystemStore, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertUnregisterPhysicalStore(void* pvSystemStore, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszStoreName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvSystemStore);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszStoreName);

        auto win32_impl_result = g_api_table.CertUnregisterPhysicalStore(pvSystemStore, dwFlags, pwszStoreName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertEnumSystemStoreLocation(uint32_t dwFlags, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CERT_ENUM_SYSTEM_STORE_LOCATION* pfnEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnum);

        auto win32_impl_result = g_api_table.CertEnumSystemStoreLocation(dwFlags, pvArg, pfnEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertEnumSystemStore(uint32_t dwFlags, void* pvSystemStoreLocationPara, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CERT_ENUM_SYSTEM_STORE* pfnEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvSystemStoreLocationPara);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnum);

        auto win32_impl_result = g_api_table.CertEnumSystemStore(dwFlags, pvSystemStoreLocationPara, pvArg, pfnEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertEnumPhysicalStore(void* pvSystemStore, uint32_t dwFlags, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CERT_ENUM_PHYSICAL_STORE* pfnEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pvSystemStore);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnum);

        auto win32_impl_result = g_api_table.CertEnumPhysicalStore(pvSystemStore, dwFlags, pvArg, pfnEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetEnhancedKeyUsage(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CTL_USAGE* pUsage, uint32_t* pcbUsage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pUsage);
        ORBIT_TRACK_PARAM(pcbUsage);

        auto win32_impl_result = g_api_table.CertGetEnhancedKeyUsage(pCertContext, dwFlags, pUsage, pcbUsage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSetEnhancedKeyUsage(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, win32::Windows::Win32::Security::Cryptography::CTL_USAGE* pUsage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(pUsage);

        auto win32_impl_result = g_api_table.CertSetEnhancedKeyUsage(pCertContext, pUsage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddEnhancedKeyUsageIdentifier(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, win32::Windows::Win32::Foundation::PSTR pszUsageIdentifier) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(pszUsageIdentifier);

        auto win32_impl_result = g_api_table.CertAddEnhancedKeyUsageIdentifier(pCertContext, pszUsageIdentifier);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertRemoveEnhancedKeyUsageIdentifier(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, win32::Windows::Win32::Foundation::PSTR pszUsageIdentifier) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(pszUsageIdentifier);

        auto win32_impl_result = g_api_table.CertRemoveEnhancedKeyUsageIdentifier(pCertContext, pszUsageIdentifier);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetValidUsages(uint32_t cCerts, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** rghCerts, int32_t* cNumOIDs, win32::Windows::Win32::Foundation::PSTR* rghOIDs, uint32_t* pcbOIDs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cCerts);
        ORBIT_TRACK_PARAM(rghCerts);
        ORBIT_TRACK_PARAM(cNumOIDs);
        ORBIT_TRACK_PARAM(rghOIDs);
        ORBIT_TRACK_PARAM(pcbOIDs);

        auto win32_impl_result = g_api_table.CertGetValidUsages(cCerts, rghCerts, cNumOIDs, rghOIDs, pcbOIDs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgGetAndVerifySigner(void* hCryptMsg, uint32_t cSignerStore, void** rghSignerStore, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppSigner, uint32_t* pdwSignerIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptMsg);
        ORBIT_TRACK_PARAM(cSignerStore);
        ORBIT_TRACK_PARAM(rghSignerStore);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(ppSigner);
        ORBIT_TRACK_PARAM(pdwSignerIndex);

        auto win32_impl_result = g_api_table.CryptMsgGetAndVerifySigner(hCryptMsg, cSignerStore, rghSignerStore, dwFlags, ppSigner, pdwSignerIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgSignCTL(uint32_t dwMsgEncodingType, uint8_t* pbCtlContent, uint32_t cbCtlContent, win32::Windows::Win32::Security::Cryptography::CMSG_SIGNED_ENCODE_INFO* pSignInfo, uint32_t dwFlags, uint8_t* pbEncoded, uint32_t* pcbEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgEncodingType);
        ORBIT_TRACK_PARAM(pbCtlContent);
        ORBIT_TRACK_PARAM(cbCtlContent);
        ORBIT_TRACK_PARAM(pSignInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);

        auto win32_impl_result = g_api_table.CryptMsgSignCTL(dwMsgEncodingType, pbCtlContent, cbCtlContent, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptMsgEncodeAndSignCTL(uint32_t dwMsgEncodingType, win32::Windows::Win32::Security::Cryptography::CTL_INFO* pCtlInfo, win32::Windows::Win32::Security::Cryptography::CMSG_SIGNED_ENCODE_INFO* pSignInfo, uint32_t dwFlags, uint8_t* pbEncoded, uint32_t* pcbEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgEncodingType);
        ORBIT_TRACK_PARAM(pCtlInfo);
        ORBIT_TRACK_PARAM(pSignInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);

        auto win32_impl_result = g_api_table.CryptMsgEncodeAndSignCTL(dwMsgEncodingType, pCtlInfo, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertFindSubjectInSortedCTL(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pSubjectIdentifier, win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, uint32_t dwFlags, void* pvReserved, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pEncodedAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSubjectIdentifier);
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pEncodedAttributes);

        auto win32_impl_result = g_api_table.CertFindSubjectInSortedCTL(pSubjectIdentifier, pCtlContext, dwFlags, pvReserved, pEncodedAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertEnumSubjectInSortedCTL(win32::Windows::Win32::Security::Cryptography::CTL_CONTEXT* pCtlContext, void** ppvNextSubject, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pSubjectIdentifier, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pEncodedAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCtlContext);
        ORBIT_TRACK_PARAM(ppvNextSubject);
        ORBIT_TRACK_PARAM(pSubjectIdentifier);
        ORBIT_TRACK_PARAM(pEncodedAttributes);

        auto win32_impl_result = g_api_table.CertEnumSubjectInSortedCTL(pCtlContext, ppvNextSubject, pSubjectIdentifier, pEncodedAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertVerifyCTLUsage(uint32_t dwEncodingType, uint32_t dwSubjectType, void* pvSubject, win32::Windows::Win32::Security::Cryptography::CTL_USAGE* pSubjectUsage, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CTL_VERIFY_USAGE_PARA* pVerifyUsagePara, win32::Windows::Win32::Security::Cryptography::CTL_VERIFY_USAGE_STATUS* pVerifyUsageStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(dwSubjectType);
        ORBIT_TRACK_PARAM(pvSubject);
        ORBIT_TRACK_PARAM(pSubjectUsage);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pVerifyUsagePara);
        ORBIT_TRACK_PARAM(pVerifyUsageStatus);

        auto win32_impl_result = g_api_table.CertVerifyCTLUsage(dwEncodingType, dwSubjectType, pvSubject, pSubjectUsage, dwFlags, pVerifyUsagePara, pVerifyUsageStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertVerifyRevocation(uint32_t dwEncodingType, uint32_t dwRevType, uint32_t cContext, void** rgpvContext, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_REVOCATION_PARA* pRevPara, win32::Windows::Win32::Security::Cryptography::CERT_REVOCATION_STATUS* pRevStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwEncodingType);
        ORBIT_TRACK_PARAM(dwRevType);
        ORBIT_TRACK_PARAM(cContext);
        ORBIT_TRACK_PARAM(rgpvContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pRevPara);
        ORBIT_TRACK_PARAM(pRevStatus);

        auto win32_impl_result = g_api_table.CertVerifyRevocation(dwEncodingType, dwRevType, cContext, rgpvContext, dwFlags, pRevPara, pRevStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertCompareIntegerBlob(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pInt1, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pInt2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInt1);
        ORBIT_TRACK_PARAM(pInt2);

        auto win32_impl_result = g_api_table.CertCompareIntegerBlob(pInt1, pInt2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertCompareCertificate(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pCertId1, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pCertId2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pCertId1);
        ORBIT_TRACK_PARAM(pCertId2);

        auto win32_impl_result = g_api_table.CertCompareCertificate(dwCertEncodingType, pCertId1, pCertId2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertCompareCertificateName(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pCertName1, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pCertName2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pCertName1);
        ORBIT_TRACK_PARAM(pCertName2);

        auto win32_impl_result = g_api_table.CertCompareCertificateName(dwCertEncodingType, pCertName1, pCertName2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertIsRDNAttrsInCertificateName(uint32_t dwCertEncodingType, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pCertName, win32::Windows::Win32::Security::Cryptography::CERT_RDN* pRDN) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pCertName);
        ORBIT_TRACK_PARAM(pRDN);

        auto win32_impl_result = g_api_table.CertIsRDNAttrsInCertificateName(dwCertEncodingType, dwFlags, pCertName, pRDN);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertComparePublicKeyInfo(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pPublicKey1, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pPublicKey2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pPublicKey1);
        ORBIT_TRACK_PARAM(pPublicKey2);

        auto win32_impl_result = g_api_table.CertComparePublicKeyInfo(dwCertEncodingType, pPublicKey1, pPublicKey2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertGetPublicKeyLength(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pPublicKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pPublicKey);

        auto win32_impl_result = g_api_table.CertGetPublicKeyLength(dwCertEncodingType, pPublicKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyCertificateSignature(size_t hCryptProv, uint32_t dwCertEncodingType, uint8_t* pbEncoded, uint32_t cbEncoded, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pPublicKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(pPublicKey);

        auto win32_impl_result = g_api_table.CryptVerifyCertificateSignature(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pPublicKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyCertificateSignatureEx(size_t hCryptProv, uint32_t dwCertEncodingType, uint32_t dwSubjectType, void* pvSubject, uint32_t dwIssuerType, void* pvIssuer, win32::Windows::Win32::Security::Cryptography::CRYPT_VERIFY_CERT_FLAGS dwFlags, void* pvExtra) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(dwSubjectType);
        ORBIT_TRACK_PARAM(pvSubject);
        ORBIT_TRACK_PARAM(dwIssuerType);
        ORBIT_TRACK_PARAM(pvIssuer);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvExtra);

        auto win32_impl_result = g_api_table.CryptVerifyCertificateSignatureEx(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject, dwIssuerType, pvIssuer, dwFlags, pvExtra);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertIsStrongHashToSign(win32::Windows::Win32::Security::Cryptography::CERT_STRONG_SIGN_PARA* pStrongSignPara, win32::Windows::Win32::Foundation::PWSTR pwszCNGHashAlgid, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pSigningCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStrongSignPara);
        ORBIT_TRACK_PARAM(pwszCNGHashAlgid);
        ORBIT_TRACK_PARAM(pSigningCert);

        auto win32_impl_result = g_api_table.CertIsStrongHashToSign(pStrongSignPara, pwszCNGHashAlgid, pSigningCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashToBeSigned(size_t hCryptProv, uint32_t dwCertEncodingType, uint8_t* pbEncoded, uint32_t cbEncoded, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptHashToBeSigned(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashCertificate(size_t hCryptProv, uint32_t Algid, uint32_t dwFlags, uint8_t* pbEncoded, uint32_t cbEncoded, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(Algid);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptHashCertificate(hCryptProv, Algid, dwFlags, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashCertificate2(win32::Windows::Win32::Foundation::PWSTR pwszCNGHashAlgid, uint32_t dwFlags, void* pvReserved, uint8_t* pbEncoded, uint32_t cbEncoded, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszCNGHashAlgid);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(cbEncoded);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptHashCertificate2(pwszCNGHashAlgid, dwFlags, pvReserved, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignCertificate(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, uint8_t* pbEncodedToBeSigned, uint32_t cbEncodedToBeSigned, win32::Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, void* pvHashAuxInfo, uint8_t* pbSignature, uint32_t* pcbSignature) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProvOrNCryptKey);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pbEncodedToBeSigned);
        ORBIT_TRACK_PARAM(cbEncodedToBeSigned);
        ORBIT_TRACK_PARAM(pSignatureAlgorithm);
        ORBIT_TRACK_PARAM(pvHashAuxInfo);
        ORBIT_TRACK_PARAM(pbSignature);
        ORBIT_TRACK_PARAM(pcbSignature);

        auto win32_impl_result = g_api_table.CryptSignCertificate(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned, cbEncodedToBeSigned, pSignatureAlgorithm, pvHashAuxInfo, pbSignature, pcbSignature);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignAndEncodeCertificate(size_t hCryptProvOrNCryptKey, win32::Windows::Win32::Security::Cryptography::CERT_KEY_SPEC dwKeySpec, uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR lpszStructType, void* pvStructInfo, win32::Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, void* pvHashAuxInfo, uint8_t* pbEncoded, uint32_t* pcbEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProvOrNCryptKey);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(lpszStructType);
        ORBIT_TRACK_PARAM(pvStructInfo);
        ORBIT_TRACK_PARAM(pSignatureAlgorithm);
        ORBIT_TRACK_PARAM(pvHashAuxInfo);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);

        auto win32_impl_result = g_api_table.CryptSignAndEncodeCertificate(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType, pvStructInfo, pSignatureAlgorithm, pvHashAuxInfo, pbEncoded, pcbEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CertVerifyTimeValidity(win32::Windows::Win32::Foundation::FILETIME* pTimeToVerify, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pCertInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTimeToVerify);
        ORBIT_TRACK_PARAM(pCertInfo);

        auto win32_impl_result = g_api_table.CertVerifyTimeValidity(pTimeToVerify, pCertInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CertVerifyCRLTimeValidity(win32::Windows::Win32::Foundation::FILETIME* pTimeToVerify, win32::Windows::Win32::Security::Cryptography::CRL_INFO* pCrlInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTimeToVerify);
        ORBIT_TRACK_PARAM(pCrlInfo);

        auto win32_impl_result = g_api_table.CertVerifyCRLTimeValidity(pTimeToVerify, pCrlInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertVerifyValidityNesting(win32::Windows::Win32::Security::Cryptography::CERT_INFO* pSubjectInfo, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pIssuerInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSubjectInfo);
        ORBIT_TRACK_PARAM(pIssuerInfo);

        auto win32_impl_result = g_api_table.CertVerifyValidityNesting(pSubjectInfo, pIssuerInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertVerifyCRLRevocation(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pCertId, uint32_t cCrlInfo, win32::Windows::Win32::Security::Cryptography::CRL_INFO** rgpCrlInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pCertId);
        ORBIT_TRACK_PARAM(cCrlInfo);
        ORBIT_TRACK_PARAM(rgpCrlInfo);

        auto win32_impl_result = g_api_table.CertVerifyCRLRevocation(dwCertEncodingType, pCertId, cCrlInfo, rgpCrlInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PSTR __stdcall ORBIT_IMPL_CertAlgIdToOID(uint32_t dwAlgId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwAlgId);

        auto win32_impl_result = g_api_table.CertAlgIdToOID(dwAlgId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertOIDToAlgId(win32::Windows::Win32::Foundation::PSTR pszObjId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszObjId);

        auto win32_impl_result = g_api_table.CertOIDToAlgId(pszObjId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_EXTENSION* __stdcall ORBIT_IMPL_CertFindExtension(win32::Windows::Win32::Foundation::PSTR pszObjId, uint32_t cExtensions, win32::Windows::Win32::Security::Cryptography::CERT_EXTENSION* rgExtensions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszObjId);
        ORBIT_TRACK_PARAM(cExtensions);
        ORBIT_TRACK_PARAM(rgExtensions);

        auto win32_impl_result = g_api_table.CertFindExtension(pszObjId, cExtensions, rgExtensions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRYPT_ATTRIBUTE* __stdcall ORBIT_IMPL_CertFindAttribute(win32::Windows::Win32::Foundation::PSTR pszObjId, uint32_t cAttr, win32::Windows::Win32::Security::Cryptography::CRYPT_ATTRIBUTE* rgAttr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszObjId);
        ORBIT_TRACK_PARAM(cAttr);
        ORBIT_TRACK_PARAM(rgAttr);

        auto win32_impl_result = g_api_table.CertFindAttribute(pszObjId, cAttr, rgAttr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_RDN_ATTR* __stdcall ORBIT_IMPL_CertFindRDNAttr(win32::Windows::Win32::Foundation::PSTR pszObjId, win32::Windows::Win32::Security::Cryptography::CERT_NAME_INFO* pName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszObjId);
        ORBIT_TRACK_PARAM(pName);

        auto win32_impl_result = g_api_table.CertFindRDNAttr(pszObjId, pName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetIntendedKeyUsage(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_INFO* pCertInfo, uint8_t* pbKeyUsage, uint32_t cbKeyUsage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pCertInfo);
        ORBIT_TRACK_PARAM(pbKeyUsage);
        ORBIT_TRACK_PARAM(cbKeyUsage);

        auto win32_impl_result = g_api_table.CertGetIntendedKeyUsage(dwCertEncodingType, pCertInfo, pbKeyUsage, cbKeyUsage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptInstallDefaultContext(size_t hCryptProv, win32::Windows::Win32::Security::Cryptography::CRYPT_DEFAULT_CONTEXT_TYPE dwDefaultType, void* pvDefaultPara, win32::Windows::Win32::Security::Cryptography::CRYPT_DEFAULT_CONTEXT_FLAGS dwFlags, void* pvReserved, void** phDefaultContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwDefaultType);
        ORBIT_TRACK_PARAM(pvDefaultPara);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(phDefaultContext);

        auto win32_impl_result = g_api_table.CryptInstallDefaultContext(hCryptProv, dwDefaultType, pvDefaultPara, dwFlags, pvReserved, phDefaultContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUninstallDefaultContext(void* hDefaultContext, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDefaultContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptUninstallDefaultContext(hDefaultContext, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptExportPublicKeyInfo(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t* pcbInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProvOrNCryptKey);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pcbInfo);

        auto win32_impl_result = g_api_table.CryptExportPublicKeyInfo(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo, pcbInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptExportPublicKeyInfoEx(size_t hCryptProvOrNCryptKey, uint32_t dwKeySpec, uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR pszPublicKeyObjId, uint32_t dwFlags, void* pvAuxInfo, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t* pcbInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProvOrNCryptKey);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pszPublicKeyObjId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvAuxInfo);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pcbInfo);

        auto win32_impl_result = g_api_table.CryptExportPublicKeyInfoEx(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptExportPublicKeyInfoFromBCryptKeyHandle(win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hBCryptKey, uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR pszPublicKeyObjId, uint32_t dwFlags, void* pvAuxInfo, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t* pcbInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBCryptKey);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pszPublicKeyObjId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvAuxInfo);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pcbInfo);

        auto win32_impl_result = g_api_table.CryptExportPublicKeyInfoFromBCryptKeyHandle(hBCryptKey, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptImportPublicKeyInfo(size_t hCryptProv, uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, size_t* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptImportPublicKeyInfo(hCryptProv, dwCertEncodingType, pInfo, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptImportPublicKeyInfoEx(size_t hCryptProv, uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, uint32_t aiKeyAlg, uint32_t dwFlags, void* pvAuxInfo, size_t* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(aiKeyAlg);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvAuxInfo);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptImportPublicKeyInfoEx(hCryptProv, dwCertEncodingType, pInfo, aiKeyAlg, dwFlags, pvAuxInfo, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptImportPublicKeyInfoEx2(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, win32::Windows::Win32::Security::Cryptography::CRYPT_IMPORT_PUBLIC_KEY_FLAGS dwFlags, void* pvAuxInfo, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvAuxInfo);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptImportPublicKeyInfoEx2(dwCertEncodingType, pInfo, dwFlags, pvAuxInfo, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptAcquireCertificatePrivateKey(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCert, win32::Windows::Win32::Security::Cryptography::CRYPT_ACQUIRE_FLAGS dwFlags, void* pvParameters, size_t* phCryptProvOrNCryptKey, win32::Windows::Win32::Security::Cryptography::CERT_KEY_SPEC* pdwKeySpec, win32::Windows::Win32::Foundation::BOOL* pfCallerFreeProvOrNCryptKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCert);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvParameters);
        ORBIT_TRACK_PARAM(phCryptProvOrNCryptKey);
        ORBIT_TRACK_PARAM(pdwKeySpec);
        ORBIT_TRACK_PARAM(pfCallerFreeProvOrNCryptKey);

        auto win32_impl_result = g_api_table.CryptAcquireCertificatePrivateKey(pCert, dwFlags, pvParameters, phCryptProvOrNCryptKey, pdwKeySpec, pfCallerFreeProvOrNCryptKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptFindCertificateKeyProvInfo(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCert, win32::Windows::Win32::Security::Cryptography::CRYPT_FIND_FLAGS dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCert);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptFindCertificateKeyProvInfo(pCert, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptImportPKCS8(win32::Windows::Win32::Security::Cryptography::CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_FLAGS dwFlags, size_t* phCryptProv, void* pvAuxInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sPrivateKeyAndParams);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phCryptProv);
        ORBIT_TRACK_PARAM(pvAuxInfo);

        auto win32_impl_result = g_api_table.CryptImportPKCS8(sPrivateKeyAndParams, dwFlags, phCryptProv, pvAuxInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptExportPKCS8(size_t hCryptProv, uint32_t dwKeySpec, win32::Windows::Win32::Foundation::PSTR pszPrivateKeyObjId, uint32_t dwFlags, void* pvAuxInfo, uint8_t* pbPrivateKeyBlob, uint32_t* pcbPrivateKeyBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(pszPrivateKeyObjId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvAuxInfo);
        ORBIT_TRACK_PARAM(pbPrivateKeyBlob);
        ORBIT_TRACK_PARAM(pcbPrivateKeyBlob);

        auto win32_impl_result = g_api_table.CryptExportPKCS8(hCryptProv, dwKeySpec, pszPrivateKeyObjId, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashPublicKeyInfo(size_t hCryptProv, uint32_t Algid, uint32_t dwFlags, uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pInfo, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(Algid);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pInfo);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptHashPublicKeyInfo(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertRDNValueToStrA(uint32_t dwValueType, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pValue, win32::Windows::Win32::Foundation::PSTR psz, uint32_t csz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwValueType);
        ORBIT_TRACK_PARAM(pValue);
        ORBIT_TRACK_PARAM(psz);
        ORBIT_TRACK_PARAM(csz);

        auto win32_impl_result = g_api_table.CertRDNValueToStrA(dwValueType, pValue, psz, csz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertRDNValueToStrW(uint32_t dwValueType, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pValue, win32::Windows::Win32::Foundation::PWSTR psz, uint32_t csz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwValueType);
        ORBIT_TRACK_PARAM(pValue);
        ORBIT_TRACK_PARAM(psz);
        ORBIT_TRACK_PARAM(csz);

        auto win32_impl_result = g_api_table.CertRDNValueToStrW(dwValueType, pValue, psz, csz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertNameToStrA(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pName, win32::Windows::Win32::Security::Cryptography::CERT_STRING_TYPE dwStrType, win32::Windows::Win32::Foundation::PSTR psz, uint32_t csz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(dwStrType);
        ORBIT_TRACK_PARAM(psz);
        ORBIT_TRACK_PARAM(csz);

        auto win32_impl_result = g_api_table.CertNameToStrA(dwCertEncodingType, pName, dwStrType, psz, csz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertNameToStrW(uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pName, win32::Windows::Win32::Security::Cryptography::CERT_STRING_TYPE dwStrType, win32::Windows::Win32::Foundation::PWSTR psz, uint32_t csz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(dwStrType);
        ORBIT_TRACK_PARAM(psz);
        ORBIT_TRACK_PARAM(csz);

        auto win32_impl_result = g_api_table.CertNameToStrW(dwCertEncodingType, pName, dwStrType, psz, csz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertStrToNameA(uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR pszX500, win32::Windows::Win32::Security::Cryptography::CERT_STRING_TYPE dwStrType, void* pvReserved, uint8_t* pbEncoded, uint32_t* pcbEncoded, win32::Windows::Win32::Foundation::PSTR* ppszError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pszX500);
        ORBIT_TRACK_PARAM(dwStrType);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);
        ORBIT_TRACK_PARAM(ppszError);

        auto win32_impl_result = g_api_table.CertStrToNameA(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertStrToNameW(uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PWSTR pszX500, win32::Windows::Win32::Security::Cryptography::CERT_STRING_TYPE dwStrType, void* pvReserved, uint8_t* pbEncoded, uint32_t* pcbEncoded, win32::Windows::Win32::Foundation::PWSTR* ppszError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pszX500);
        ORBIT_TRACK_PARAM(dwStrType);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pbEncoded);
        ORBIT_TRACK_PARAM(pcbEncoded);
        ORBIT_TRACK_PARAM(ppszError);

        auto win32_impl_result = g_api_table.CertStrToNameW(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertGetNameStringA(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwType, uint32_t dwFlags, void* pvTypePara, win32::Windows::Win32::Foundation::PSTR pszNameString, uint32_t cchNameString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvTypePara);
        ORBIT_TRACK_PARAM(pszNameString);
        ORBIT_TRACK_PARAM(cchNameString);

        auto win32_impl_result = g_api_table.CertGetNameStringA(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CertGetNameStringW(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, uint32_t dwType, uint32_t dwFlags, void* pvTypePara, win32::Windows::Win32::Foundation::PWSTR pszNameString, uint32_t cchNameString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvTypePara);
        ORBIT_TRACK_PARAM(pszNameString);
        ORBIT_TRACK_PARAM(cchNameString);

        auto win32_impl_result = g_api_table.CertGetNameStringW(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignMessage(win32::Windows::Win32::Security::Cryptography::CRYPT_SIGN_MESSAGE_PARA* pSignPara, win32::Windows::Win32::Foundation::BOOL fDetachedSignature, uint32_t cToBeSigned, uint8_t** rgpbToBeSigned, uint32_t* rgcbToBeSigned, uint8_t* pbSignedBlob, uint32_t* pcbSignedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSignPara);
        ORBIT_TRACK_PARAM(fDetachedSignature);
        ORBIT_TRACK_PARAM(cToBeSigned);
        ORBIT_TRACK_PARAM(rgpbToBeSigned);
        ORBIT_TRACK_PARAM(rgcbToBeSigned);
        ORBIT_TRACK_PARAM(pbSignedBlob);
        ORBIT_TRACK_PARAM(pcbSignedBlob);

        auto win32_impl_result = g_api_table.CryptSignMessage(pSignPara, fDetachedSignature, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, pbSignedBlob, pcbSignedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyMessageSignature(win32::Windows::Win32::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbSignedBlob, uint32_t cbSignedBlob, uint8_t* pbDecoded, uint32_t* pcbDecoded, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppSignerCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVerifyPara);
        ORBIT_TRACK_PARAM(dwSignerIndex);
        ORBIT_TRACK_PARAM(pbSignedBlob);
        ORBIT_TRACK_PARAM(cbSignedBlob);
        ORBIT_TRACK_PARAM(pbDecoded);
        ORBIT_TRACK_PARAM(pcbDecoded);
        ORBIT_TRACK_PARAM(ppSignerCert);

        auto win32_impl_result = g_api_table.CryptVerifyMessageSignature(pVerifyPara, dwSignerIndex, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded, ppSignerCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_CryptGetMessageSignerCount(uint32_t dwMsgEncodingType, uint8_t* pbSignedBlob, uint32_t cbSignedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgEncodingType);
        ORBIT_TRACK_PARAM(pbSignedBlob);
        ORBIT_TRACK_PARAM(cbSignedBlob);

        auto win32_impl_result = g_api_table.CryptGetMessageSignerCount(dwMsgEncodingType, pbSignedBlob, cbSignedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptGetMessageCertificates(uint32_t dwMsgAndCertEncodingType, size_t hCryptProv, uint32_t dwFlags, uint8_t* pbSignedBlob, uint32_t cbSignedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgAndCertEncodingType);
        ORBIT_TRACK_PARAM(hCryptProv);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbSignedBlob);
        ORBIT_TRACK_PARAM(cbSignedBlob);

        auto win32_impl_result = g_api_table.CryptGetMessageCertificates(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob, cbSignedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyDetachedMessageSignature(win32::Windows::Win32::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbDetachedSignBlob, uint32_t cbDetachedSignBlob, uint32_t cToBeSigned, uint8_t** rgpbToBeSigned, uint32_t* rgcbToBeSigned, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppSignerCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVerifyPara);
        ORBIT_TRACK_PARAM(dwSignerIndex);
        ORBIT_TRACK_PARAM(pbDetachedSignBlob);
        ORBIT_TRACK_PARAM(cbDetachedSignBlob);
        ORBIT_TRACK_PARAM(cToBeSigned);
        ORBIT_TRACK_PARAM(rgpbToBeSigned);
        ORBIT_TRACK_PARAM(rgcbToBeSigned);
        ORBIT_TRACK_PARAM(ppSignerCert);

        auto win32_impl_result = g_api_table.CryptVerifyDetachedMessageSignature(pVerifyPara, dwSignerIndex, pbDetachedSignBlob, cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, ppSignerCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEncryptMessage(win32::Windows::Win32::Security::Cryptography::CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, uint32_t cRecipientCert, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** rgpRecipientCert, uint8_t* pbToBeEncrypted, uint32_t cbToBeEncrypted, uint8_t* pbEncryptedBlob, uint32_t* pcbEncryptedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEncryptPara);
        ORBIT_TRACK_PARAM(cRecipientCert);
        ORBIT_TRACK_PARAM(rgpRecipientCert);
        ORBIT_TRACK_PARAM(pbToBeEncrypted);
        ORBIT_TRACK_PARAM(cbToBeEncrypted);
        ORBIT_TRACK_PARAM(pbEncryptedBlob);
        ORBIT_TRACK_PARAM(pcbEncryptedBlob);

        auto win32_impl_result = g_api_table.CryptEncryptMessage(pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeEncrypted, cbToBeEncrypted, pbEncryptedBlob, pcbEncryptedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDecryptMessage(win32::Windows::Win32::Security::Cryptography::CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, uint8_t* pbEncryptedBlob, uint32_t cbEncryptedBlob, uint8_t* pbDecrypted, uint32_t* pcbDecrypted, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppXchgCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDecryptPara);
        ORBIT_TRACK_PARAM(pbEncryptedBlob);
        ORBIT_TRACK_PARAM(cbEncryptedBlob);
        ORBIT_TRACK_PARAM(pbDecrypted);
        ORBIT_TRACK_PARAM(pcbDecrypted);
        ORBIT_TRACK_PARAM(ppXchgCert);

        auto win32_impl_result = g_api_table.CryptDecryptMessage(pDecryptPara, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignAndEncryptMessage(win32::Windows::Win32::Security::Cryptography::CRYPT_SIGN_MESSAGE_PARA* pSignPara, win32::Windows::Win32::Security::Cryptography::CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, uint32_t cRecipientCert, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** rgpRecipientCert, uint8_t* pbToBeSignedAndEncrypted, uint32_t cbToBeSignedAndEncrypted, uint8_t* pbSignedAndEncryptedBlob, uint32_t* pcbSignedAndEncryptedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSignPara);
        ORBIT_TRACK_PARAM(pEncryptPara);
        ORBIT_TRACK_PARAM(cRecipientCert);
        ORBIT_TRACK_PARAM(rgpRecipientCert);
        ORBIT_TRACK_PARAM(pbToBeSignedAndEncrypted);
        ORBIT_TRACK_PARAM(cbToBeSignedAndEncrypted);
        ORBIT_TRACK_PARAM(pbSignedAndEncryptedBlob);
        ORBIT_TRACK_PARAM(pcbSignedAndEncryptedBlob);

        auto win32_impl_result = g_api_table.CryptSignAndEncryptMessage(pSignPara, pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeSignedAndEncrypted, cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob, pcbSignedAndEncryptedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDecryptAndVerifyMessageSignature(win32::Windows::Win32::Security::Cryptography::CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, win32::Windows::Win32::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbEncryptedBlob, uint32_t cbEncryptedBlob, uint8_t* pbDecrypted, uint32_t* pcbDecrypted, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppXchgCert, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppSignerCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDecryptPara);
        ORBIT_TRACK_PARAM(pVerifyPara);
        ORBIT_TRACK_PARAM(dwSignerIndex);
        ORBIT_TRACK_PARAM(pbEncryptedBlob);
        ORBIT_TRACK_PARAM(cbEncryptedBlob);
        ORBIT_TRACK_PARAM(pbDecrypted);
        ORBIT_TRACK_PARAM(pcbDecrypted);
        ORBIT_TRACK_PARAM(ppXchgCert);
        ORBIT_TRACK_PARAM(ppSignerCert);

        auto win32_impl_result = g_api_table.CryptDecryptAndVerifyMessageSignature(pDecryptPara, pVerifyPara, dwSignerIndex, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert, ppSignerCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptDecodeMessage(uint32_t dwMsgTypeFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, win32::Windows::Win32::Security::Cryptography::CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, uint32_t dwSignerIndex, uint8_t* pbEncodedBlob, uint32_t cbEncodedBlob, uint32_t dwPrevInnerContentType, uint32_t* pdwMsgType, uint32_t* pdwInnerContentType, uint8_t* pbDecoded, uint32_t* pcbDecoded, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppXchgCert, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppSignerCert) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMsgTypeFlags);
        ORBIT_TRACK_PARAM(pDecryptPara);
        ORBIT_TRACK_PARAM(pVerifyPara);
        ORBIT_TRACK_PARAM(dwSignerIndex);
        ORBIT_TRACK_PARAM(pbEncodedBlob);
        ORBIT_TRACK_PARAM(cbEncodedBlob);
        ORBIT_TRACK_PARAM(dwPrevInnerContentType);
        ORBIT_TRACK_PARAM(pdwMsgType);
        ORBIT_TRACK_PARAM(pdwInnerContentType);
        ORBIT_TRACK_PARAM(pbDecoded);
        ORBIT_TRACK_PARAM(pcbDecoded);
        ORBIT_TRACK_PARAM(ppXchgCert);
        ORBIT_TRACK_PARAM(ppSignerCert);

        auto win32_impl_result = g_api_table.CryptDecodeMessage(dwMsgTypeFlags, pDecryptPara, pVerifyPara, dwSignerIndex, pbEncodedBlob, cbEncodedBlob, dwPrevInnerContentType, pdwMsgType, pdwInnerContentType, pbDecoded, pcbDecoded, ppXchgCert, ppSignerCert);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptHashMessage(win32::Windows::Win32::Security::Cryptography::CRYPT_HASH_MESSAGE_PARA* pHashPara, win32::Windows::Win32::Foundation::BOOL fDetachedHash, uint32_t cToBeHashed, uint8_t** rgpbToBeHashed, uint32_t* rgcbToBeHashed, uint8_t* pbHashedBlob, uint32_t* pcbHashedBlob, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHashPara);
        ORBIT_TRACK_PARAM(fDetachedHash);
        ORBIT_TRACK_PARAM(cToBeHashed);
        ORBIT_TRACK_PARAM(rgpbToBeHashed);
        ORBIT_TRACK_PARAM(rgcbToBeHashed);
        ORBIT_TRACK_PARAM(pbHashedBlob);
        ORBIT_TRACK_PARAM(pcbHashedBlob);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptHashMessage(pHashPara, fDetachedHash, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbHashedBlob, pcbHashedBlob, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyMessageHash(win32::Windows::Win32::Security::Cryptography::CRYPT_HASH_MESSAGE_PARA* pHashPara, uint8_t* pbHashedBlob, uint32_t cbHashedBlob, uint8_t* pbToBeHashed, uint32_t* pcbToBeHashed, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHashPara);
        ORBIT_TRACK_PARAM(pbHashedBlob);
        ORBIT_TRACK_PARAM(cbHashedBlob);
        ORBIT_TRACK_PARAM(pbToBeHashed);
        ORBIT_TRACK_PARAM(pcbToBeHashed);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptVerifyMessageHash(pHashPara, pbHashedBlob, cbHashedBlob, pbToBeHashed, pcbToBeHashed, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyDetachedMessageHash(win32::Windows::Win32::Security::Cryptography::CRYPT_HASH_MESSAGE_PARA* pHashPara, uint8_t* pbDetachedHashBlob, uint32_t cbDetachedHashBlob, uint32_t cToBeHashed, uint8_t** rgpbToBeHashed, uint32_t* rgcbToBeHashed, uint8_t* pbComputedHash, uint32_t* pcbComputedHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHashPara);
        ORBIT_TRACK_PARAM(pbDetachedHashBlob);
        ORBIT_TRACK_PARAM(cbDetachedHashBlob);
        ORBIT_TRACK_PARAM(cToBeHashed);
        ORBIT_TRACK_PARAM(rgpbToBeHashed);
        ORBIT_TRACK_PARAM(rgcbToBeHashed);
        ORBIT_TRACK_PARAM(pbComputedHash);
        ORBIT_TRACK_PARAM(pcbComputedHash);

        auto win32_impl_result = g_api_table.CryptVerifyDetachedMessageHash(pHashPara, pbDetachedHashBlob, cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbComputedHash, pcbComputedHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSignMessageWithKey(win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_SIGN_MESSAGE_PARA* pSignPara, uint8_t* pbToBeSigned, uint32_t cbToBeSigned, uint8_t* pbSignedBlob, uint32_t* pcbSignedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSignPara);
        ORBIT_TRACK_PARAM(pbToBeSigned);
        ORBIT_TRACK_PARAM(cbToBeSigned);
        ORBIT_TRACK_PARAM(pbSignedBlob);
        ORBIT_TRACK_PARAM(pcbSignedBlob);

        auto win32_impl_result = g_api_table.CryptSignMessageWithKey(pSignPara, pbToBeSigned, cbToBeSigned, pbSignedBlob, pcbSignedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyMessageSignatureWithKey(win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_VERIFY_MESSAGE_PARA* pVerifyPara, win32::Windows::Win32::Security::Cryptography::CERT_PUBLIC_KEY_INFO* pPublicKeyInfo, uint8_t* pbSignedBlob, uint32_t cbSignedBlob, uint8_t* pbDecoded, uint32_t* pcbDecoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVerifyPara);
        ORBIT_TRACK_PARAM(pPublicKeyInfo);
        ORBIT_TRACK_PARAM(pbSignedBlob);
        ORBIT_TRACK_PARAM(cbSignedBlob);
        ORBIT_TRACK_PARAM(pbDecoded);
        ORBIT_TRACK_PARAM(pcbDecoded);

        auto win32_impl_result = g_api_table.CryptVerifyMessageSignatureWithKey(pVerifyPara, pPublicKeyInfo, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CertOpenSystemStoreA(size_t hProv, win32::Windows::Win32::Foundation::PSTR szSubsystemProtocol) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(szSubsystemProtocol);

        auto win32_impl_result = g_api_table.CertOpenSystemStoreA(hProv, szSubsystemProtocol);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CertOpenSystemStoreW(size_t hProv, win32::Windows::Win32::Foundation::PWSTR szSubsystemProtocol) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProv);
        ORBIT_TRACK_PARAM(szSubsystemProtocol);

        auto win32_impl_result = g_api_table.CertOpenSystemStoreW(hProv, szSubsystemProtocol);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddEncodedCertificateToSystemStoreA(win32::Windows::Win32::Foundation::PSTR szCertStoreName, uint8_t* pbCertEncoded, uint32_t cbCertEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(szCertStoreName);
        ORBIT_TRACK_PARAM(pbCertEncoded);
        ORBIT_TRACK_PARAM(cbCertEncoded);

        auto win32_impl_result = g_api_table.CertAddEncodedCertificateToSystemStoreA(szCertStoreName, pbCertEncoded, cbCertEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertAddEncodedCertificateToSystemStoreW(win32::Windows::Win32::Foundation::PWSTR szCertStoreName, uint8_t* pbCertEncoded, uint32_t cbCertEncoded) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(szCertStoreName);
        ORBIT_TRACK_PARAM(pbCertEncoded);
        ORBIT_TRACK_PARAM(cbCertEncoded);

        auto win32_impl_result = g_api_table.CertAddEncodedCertificateToSystemStoreW(szCertStoreName, pbCertEncoded, cbCertEncoded);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FindCertsByIssuer(win32::Windows::Win32::Security::Cryptography::CERT_CHAIN* pCertChains, uint32_t* pcbCertChains, uint32_t* pcCertChains, uint8_t* pbEncodedIssuerName, uint32_t cbEncodedIssuerName, win32::Windows::Win32::Foundation::PWSTR pwszPurpose, uint32_t dwKeySpec) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertChains);
        ORBIT_TRACK_PARAM(pcbCertChains);
        ORBIT_TRACK_PARAM(pcCertChains);
        ORBIT_TRACK_PARAM(pbEncodedIssuerName);
        ORBIT_TRACK_PARAM(cbEncodedIssuerName);
        ORBIT_TRACK_PARAM(pwszPurpose);
        ORBIT_TRACK_PARAM(dwKeySpec);

        auto win32_impl_result = g_api_table.FindCertsByIssuer(pCertChains, pcbCertChains, pcCertChains, pbEncodedIssuerName, cbEncodedIssuerName, pwszPurpose, dwKeySpec);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptQueryObject(win32::Windows::Win32::Security::Cryptography::CERT_QUERY_OBJECT_TYPE dwObjectType, void* pvObject, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_CONTENT_TYPE_FLAGS dwExpectedContentTypeFlags, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_FORMAT_TYPE_FLAGS dwExpectedFormatTypeFlags, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_ENCODING_TYPE* pdwMsgAndCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_CONTENT_TYPE* pdwContentType, win32::Windows::Win32::Security::Cryptography::CERT_QUERY_FORMAT_TYPE* pdwFormatType, void** phCertStore, void** phMsg, void** ppvContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwObjectType);
        ORBIT_TRACK_PARAM(pvObject);
        ORBIT_TRACK_PARAM(dwExpectedContentTypeFlags);
        ORBIT_TRACK_PARAM(dwExpectedFormatTypeFlags);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pdwMsgAndCertEncodingType);
        ORBIT_TRACK_PARAM(pdwContentType);
        ORBIT_TRACK_PARAM(pdwFormatType);
        ORBIT_TRACK_PARAM(phCertStore);
        ORBIT_TRACK_PARAM(phMsg);
        ORBIT_TRACK_PARAM(ppvContext);

        auto win32_impl_result = g_api_table.CryptQueryObject(dwObjectType, pvObject, dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType, phCertStore, phMsg, ppvContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptMemAlloc(uint32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.CryptMemAlloc(cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CryptMemRealloc(void* pv, uint32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pv);
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.CryptMemRealloc(pv, cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CryptMemFree(void* pv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pv);

        g_api_table.CryptMemFree(pv);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptCreateAsyncHandle(uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::HCRYPTASYNC* phAsync) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phAsync);

        auto win32_impl_result = g_api_table.CryptCreateAsyncHandle(dwFlags, phAsync);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetAsyncParam(win32::Windows::Win32::Security::Cryptography::HCRYPTASYNC hAsync, win32::Windows::Win32::Foundation::PSTR pszParamOid, void* pvParam, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* pfnFree) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAsync);
        ORBIT_TRACK_PARAM(pszParamOid);
        ORBIT_TRACK_PARAM(pvParam);
        ORBIT_TRACK_PARAM(pfnFree);

        auto win32_impl_result = g_api_table.CryptSetAsyncParam(hAsync, pszParamOid, pvParam, pfnFree);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetAsyncParam(win32::Windows::Win32::Security::Cryptography::HCRYPTASYNC hAsync, win32::Windows::Win32::Foundation::PSTR pszParamOid, void** ppvParam, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_ASYNC_PARAM_FREE_FUNC** ppfnFree) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAsync);
        ORBIT_TRACK_PARAM(pszParamOid);
        ORBIT_TRACK_PARAM(ppvParam);
        ORBIT_TRACK_PARAM(ppfnFree);

        auto win32_impl_result = g_api_table.CryptGetAsyncParam(hAsync, pszParamOid, ppvParam, ppfnFree);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptCloseAsyncHandle(win32::Windows::Win32::Security::Cryptography::HCRYPTASYNC hAsync) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hAsync);

        auto win32_impl_result = g_api_table.CryptCloseAsyncHandle(hAsync);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptRetrieveObjectByUrlA(win32::Windows::Win32::Foundation::PSTR pszUrl, win32::Windows::Win32::Foundation::PSTR pszObjectOid, uint32_t dwRetrievalFlags, uint32_t dwTimeout, void** ppvObject, win32::Windows::Win32::Security::Cryptography::HCRYPTASYNC hAsyncRetrieve, win32::Windows::Win32::Security::Cryptography::CRYPT_CREDENTIALS* pCredentials, void* pvVerify, win32::Windows::Win32::Security::Cryptography::CRYPT_RETRIEVE_AUX_INFO* pAuxInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszUrl);
        ORBIT_TRACK_PARAM(pszObjectOid);
        ORBIT_TRACK_PARAM(dwRetrievalFlags);
        ORBIT_TRACK_PARAM(dwTimeout);
        ORBIT_TRACK_PARAM(ppvObject);
        ORBIT_TRACK_PARAM(hAsyncRetrieve);
        ORBIT_TRACK_PARAM(pCredentials);
        ORBIT_TRACK_PARAM(pvVerify);
        ORBIT_TRACK_PARAM(pAuxInfo);

        auto win32_impl_result = g_api_table.CryptRetrieveObjectByUrlA(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptRetrieveObjectByUrlW(win32::Windows::Win32::Foundation::PWSTR pszUrl, win32::Windows::Win32::Foundation::PSTR pszObjectOid, uint32_t dwRetrievalFlags, uint32_t dwTimeout, void** ppvObject, win32::Windows::Win32::Security::Cryptography::HCRYPTASYNC hAsyncRetrieve, win32::Windows::Win32::Security::Cryptography::CRYPT_CREDENTIALS* pCredentials, void* pvVerify, win32::Windows::Win32::Security::Cryptography::CRYPT_RETRIEVE_AUX_INFO* pAuxInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszUrl);
        ORBIT_TRACK_PARAM(pszObjectOid);
        ORBIT_TRACK_PARAM(dwRetrievalFlags);
        ORBIT_TRACK_PARAM(dwTimeout);
        ORBIT_TRACK_PARAM(ppvObject);
        ORBIT_TRACK_PARAM(hAsyncRetrieve);
        ORBIT_TRACK_PARAM(pCredentials);
        ORBIT_TRACK_PARAM(pvVerify);
        ORBIT_TRACK_PARAM(pAuxInfo);

        auto win32_impl_result = g_api_table.CryptRetrieveObjectByUrlW(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptInstallCancelRetrieval(win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_CANCEL_RETRIEVAL* pfnCancel, void* pvArg, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnCancel);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptInstallCancelRetrieval(pfnCancel, pvArg, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUninstallCancelRetrieval(uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptUninstallCancelRetrieval(dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetObjectUrl(win32::Windows::Win32::Foundation::PSTR pszUrlOid, void* pvPara, win32::Windows::Win32::Security::Cryptography::CRYPT_GET_URL_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_URL_ARRAY* pUrlArray, uint32_t* pcbUrlArray, win32::Windows::Win32::Security::Cryptography::CRYPT_URL_INFO* pUrlInfo, uint32_t* pcbUrlInfo, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszUrlOid);
        ORBIT_TRACK_PARAM(pvPara);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pUrlArray);
        ORBIT_TRACK_PARAM(pcbUrlArray);
        ORBIT_TRACK_PARAM(pUrlInfo);
        ORBIT_TRACK_PARAM(pcbUrlInfo);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptGetObjectUrl(pszUrlOid, pvPara, dwFlags, pUrlArray, pcbUrlArray, pUrlInfo, pcbUrlInfo, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CertCreateSelfSignCertificate(size_t hCryptProvOrNCryptKey, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pSubjectIssuerBlob, win32::Windows::Win32::Security::Cryptography::CERT_CREATE_SELFSIGN_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_PROV_INFO* pKeyProvInfo, win32::Windows::Win32::Security::Cryptography::CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, win32::Windows::Win32::Foundation::SYSTEMTIME* pStartTime, win32::Windows::Win32::Foundation::SYSTEMTIME* pEndTime, win32::Windows::Win32::Security::Cryptography::CERT_EXTENSIONS* pExtensions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptProvOrNCryptKey);
        ORBIT_TRACK_PARAM(pSubjectIssuerBlob);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pKeyProvInfo);
        ORBIT_TRACK_PARAM(pSignatureAlgorithm);
        ORBIT_TRACK_PARAM(pStartTime);
        ORBIT_TRACK_PARAM(pEndTime);
        ORBIT_TRACK_PARAM(pExtensions);

        auto win32_impl_result = g_api_table.CertCreateSelfSignCertificate(hCryptProvOrNCryptKey, pSubjectIssuerBlob, dwFlags, pKeyProvInfo, pSignatureAlgorithm, pStartTime, pEndTime, pExtensions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptGetKeyIdentifierProperty(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pKeyIdentifier, uint32_t dwPropId, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszComputerName, void* pvReserved, void* pvData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pKeyIdentifier);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszComputerName);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pvData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.CryptGetKeyIdentifierProperty(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptSetKeyIdentifierProperty(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pKeyIdentifier, uint32_t dwPropId, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszComputerName, void* pvReserved, void* pvData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pKeyIdentifier);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszComputerName);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pvData);

        auto win32_impl_result = g_api_table.CryptSetKeyIdentifierProperty(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptEnumKeyIdentifierProperties(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pKeyIdentifier, uint32_t dwPropId, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pwszComputerName, void* pvReserved, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_ENUM_KEYID_PROP* pfnEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pKeyIdentifier);
        ORBIT_TRACK_PARAM(dwPropId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pwszComputerName);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnum);

        auto win32_impl_result = g_api_table.CryptEnumKeyIdentifierProperties(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvArg, pfnEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptCreateKeyIdentifierFromCSP(uint32_t dwCertEncodingType, win32::Windows::Win32::Foundation::PSTR pszPubKeyOID, win32::Windows::Win32::Security::Cryptography::PUBLICKEYSTRUC* pPubKeyStruc, uint32_t cbPubKeyStruc, uint32_t dwFlags, void* pvReserved, uint8_t* pbHash, uint32_t* pcbHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(pszPubKeyOID);
        ORBIT_TRACK_PARAM(pPubKeyStruc);
        ORBIT_TRACK_PARAM(cbPubKeyStruc);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pbHash);
        ORBIT_TRACK_PARAM(pcbHash);

        auto win32_impl_result = g_api_table.CryptCreateKeyIdentifierFromCSP(dwCertEncodingType, pszPubKeyOID, pPubKeyStruc, cbPubKeyStruc, dwFlags, pvReserved, pbHash, pcbHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertCreateCertificateChainEngine(win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_ENGINE_CONFIG* pConfig, win32::Windows::Win32::Security::Cryptography::HCERTCHAINENGINE* phChainEngine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConfig);
        ORBIT_TRACK_PARAM(phChainEngine);

        auto win32_impl_result = g_api_table.CertCreateCertificateChainEngine(pConfig, phChainEngine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CertFreeCertificateChainEngine(win32::Windows::Win32::Security::Cryptography::HCERTCHAINENGINE hChainEngine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChainEngine);

        g_api_table.CertFreeCertificateChainEngine(hChainEngine);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertResyncCertificateChainEngine(win32::Windows::Win32::Security::Cryptography::HCERTCHAINENGINE hChainEngine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChainEngine);

        auto win32_impl_result = g_api_table.CertResyncCertificateChainEngine(hChainEngine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertGetCertificateChain(win32::Windows::Win32::Security::Cryptography::HCERTCHAINENGINE hChainEngine, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, win32::Windows::Win32::Foundation::FILETIME* pTime, void* hAdditionalStore, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_PARA* pChainPara, uint32_t dwFlags, void* pvReserved, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT** ppChainContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChainEngine);
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(pTime);
        ORBIT_TRACK_PARAM(hAdditionalStore);
        ORBIT_TRACK_PARAM(pChainPara);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(ppChainContext);

        auto win32_impl_result = g_api_table.CertGetCertificateChain(hChainEngine, pCertContext, pTime, hAdditionalStore, pChainPara, dwFlags, pvReserved, ppChainContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CertFreeCertificateChain(win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* pChainContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pChainContext);

        g_api_table.CertFreeCertificateChain(pChainContext);
        
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* __stdcall ORBIT_IMPL_CertDuplicateCertificateChain(win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* pChainContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pChainContext);

        auto win32_impl_result = g_api_table.CertDuplicateCertificateChain(pChainContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* __stdcall ORBIT_IMPL_CertFindChainInStore(void* hCertStore, uint32_t dwCertEncodingType, win32::Windows::Win32::Security::Cryptography::CERT_FIND_CHAIN_IN_STORE_FLAGS dwFindFlags, uint32_t dwFindType, void* pvFindPara, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* pPrevChainContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(dwCertEncodingType);
        ORBIT_TRACK_PARAM(dwFindFlags);
        ORBIT_TRACK_PARAM(dwFindType);
        ORBIT_TRACK_PARAM(pvFindPara);
        ORBIT_TRACK_PARAM(pPrevChainContext);

        auto win32_impl_result = g_api_table.CertFindChainInStore(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevChainContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertVerifyCertificateChainPolicy(win32::Windows::Win32::Foundation::PSTR pszPolicyOID, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* pChainContext, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_POLICY_PARA* pPolicyPara, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_POLICY_STATUS* pPolicyStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszPolicyOID);
        ORBIT_TRACK_PARAM(pChainContext);
        ORBIT_TRACK_PARAM(pPolicyPara);
        ORBIT_TRACK_PARAM(pPolicyStatus);

        auto win32_impl_result = g_api_table.CertVerifyCertificateChainPolicy(pszPolicyOID, pChainContext, pPolicyPara, pPolicyStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptStringToBinaryA(win32::Windows::Win32::Foundation::PSTR pszString, uint32_t cchString, win32::Windows::Win32::Security::Cryptography::CRYPT_STRING dwFlags, uint8_t* pbBinary, uint32_t* pcbBinary, uint32_t* pdwSkip, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszString);
        ORBIT_TRACK_PARAM(cchString);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbBinary);
        ORBIT_TRACK_PARAM(pcbBinary);
        ORBIT_TRACK_PARAM(pdwSkip);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.CryptStringToBinaryA(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptStringToBinaryW(win32::Windows::Win32::Foundation::PWSTR pszString, uint32_t cchString, win32::Windows::Win32::Security::Cryptography::CRYPT_STRING dwFlags, uint8_t* pbBinary, uint32_t* pcbBinary, uint32_t* pdwSkip, uint32_t* pdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszString);
        ORBIT_TRACK_PARAM(cchString);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbBinary);
        ORBIT_TRACK_PARAM(pcbBinary);
        ORBIT_TRACK_PARAM(pdwSkip);
        ORBIT_TRACK_PARAM(pdwFlags);

        auto win32_impl_result = g_api_table.CryptStringToBinaryW(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptBinaryToStringA(uint8_t* pbBinary, uint32_t cbBinary, win32::Windows::Win32::Security::Cryptography::CRYPT_STRING dwFlags, win32::Windows::Win32::Foundation::PSTR pszString, uint32_t* pcchString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbBinary);
        ORBIT_TRACK_PARAM(cbBinary);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pszString);
        ORBIT_TRACK_PARAM(pcchString);

        auto win32_impl_result = g_api_table.CryptBinaryToStringA(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptBinaryToStringW(uint8_t* pbBinary, uint32_t cbBinary, win32::Windows::Win32::Security::Cryptography::CRYPT_STRING dwFlags, win32::Windows::Win32::Foundation::PWSTR pszString, uint32_t* pcchString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbBinary);
        ORBIT_TRACK_PARAM(cbBinary);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pszString);
        ORBIT_TRACK_PARAM(pcchString);

        auto win32_impl_result = g_api_table.CryptBinaryToStringW(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_PFXImportCertStore(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pPFX, win32::Windows::Win32::Foundation::PWSTR szPassword, win32::Windows::Win32::Security::Cryptography::CRYPT_KEY_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPFX);
        ORBIT_TRACK_PARAM(szPassword);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.PFXImportCertStore(pPFX, szPassword, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PFXIsPFXBlob(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pPFX) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPFX);

        auto win32_impl_result = g_api_table.PFXIsPFXBlob(pPFX);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PFXVerifyPassword(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pPFX, win32::Windows::Win32::Foundation::PWSTR szPassword, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPFX);
        ORBIT_TRACK_PARAM(szPassword);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.PFXVerifyPassword(pPFX, szPassword, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PFXExportCertStoreEx(void* hStore, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pPFX, win32::Windows::Win32::Foundation::PWSTR szPassword, void* pvPara, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hStore);
        ORBIT_TRACK_PARAM(pPFX);
        ORBIT_TRACK_PARAM(szPassword);
        ORBIT_TRACK_PARAM(pvPara);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.PFXExportCertStoreEx(hStore, pPFX, szPassword, pvPara, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PFXExportCertStore(void* hStore, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pPFX, win32::Windows::Win32::Foundation::PWSTR szPassword, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hStore);
        ORBIT_TRACK_PARAM(pPFX);
        ORBIT_TRACK_PARAM(szPassword);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.PFXExportCertStore(hStore, pPFX, szPassword, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CertOpenServerOcspResponse(win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* pChainContext, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_OPEN_PARA* pOpenPara) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pChainContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pOpenPara);

        auto win32_impl_result = g_api_table.CertOpenServerOcspResponse(pChainContext, dwFlags, pOpenPara);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CertAddRefServerOcspResponse(void* hServerOcspResponse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hServerOcspResponse);

        g_api_table.CertAddRefServerOcspResponse(hServerOcspResponse);
        
    }

    void __stdcall ORBIT_IMPL_CertCloseServerOcspResponse(void* hServerOcspResponse, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hServerOcspResponse);
        ORBIT_TRACK_PARAM(dwFlags);

        g_api_table.CertCloseServerOcspResponse(hServerOcspResponse, dwFlags);
        
    }

    win32::Windows::Win32::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT* __stdcall ORBIT_IMPL_CertGetServerOcspResponseContext(void* hServerOcspResponse, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hServerOcspResponse);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CertGetServerOcspResponseContext(hServerOcspResponse, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CertAddRefServerOcspResponseContext(win32::Windows::Win32::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pServerOcspResponseContext);

        g_api_table.CertAddRefServerOcspResponseContext(pServerOcspResponseContext);
        
    }

    void __stdcall ORBIT_IMPL_CertFreeServerOcspResponseContext(win32::Windows::Win32::Security::Cryptography::CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pServerOcspResponseContext);

        g_api_table.CertFreeServerOcspResponseContext(pServerOcspResponseContext);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertRetrieveLogoOrBiometricInfo(win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* pCertContext, win32::Windows::Win32::Foundation::PSTR lpszLogoOrBiometricType, uint32_t dwRetrievalFlags, uint32_t dwTimeout, uint32_t dwFlags, void* pvReserved, uint8_t** ppbData, uint32_t* pcbData, win32::Windows::Win32::Foundation::PWSTR* ppwszMimeType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertContext);
        ORBIT_TRACK_PARAM(lpszLogoOrBiometricType);
        ORBIT_TRACK_PARAM(dwRetrievalFlags);
        ORBIT_TRACK_PARAM(dwTimeout);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(ppbData);
        ORBIT_TRACK_PARAM(pcbData);
        ORBIT_TRACK_PARAM(ppwszMimeType);

        auto win32_impl_result = g_api_table.CertRetrieveLogoOrBiometricInfo(pCertContext, lpszLogoOrBiometricType, dwRetrievalFlags, dwTimeout, dwFlags, pvReserved, ppbData, pcbData, ppwszMimeType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertSelectCertificateChains(::win32::guid* pSelectionContext, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CERT_SELECT_CHAIN_PARA* pChainParameters, uint32_t cCriteria, win32::Windows::Win32::Security::Cryptography::CERT_SELECT_CRITERIA* rgpCriteria, void* hStore, uint32_t* pcSelection, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT*** pprgpSelection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSelectionContext);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pChainParameters);
        ORBIT_TRACK_PARAM(cCriteria);
        ORBIT_TRACK_PARAM(rgpCriteria);
        ORBIT_TRACK_PARAM(hStore);
        ORBIT_TRACK_PARAM(pcSelection);
        ORBIT_TRACK_PARAM(pprgpSelection);

        auto win32_impl_result = g_api_table.CertSelectCertificateChains(pSelectionContext, dwFlags, pChainParameters, cCriteria, rgpCriteria, hStore, pcSelection, pprgpSelection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CertFreeCertificateChainList(win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT** prgpSelection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(prgpSelection);

        g_api_table.CertFreeCertificateChainList(prgpSelection);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptRetrieveTimeStamp(win32::Windows::Win32::Foundation::PWSTR wszUrl, uint32_t dwRetrievalFlags, uint32_t dwTimeout, win32::Windows::Win32::Foundation::PSTR pszHashId, win32::Windows::Win32::Security::Cryptography::CRYPT_TIMESTAMP_PARA* pPara, uint8_t* pbData, uint32_t cbData, win32::Windows::Win32::Security::Cryptography::CRYPT_TIMESTAMP_CONTEXT** ppTsContext, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppTsSigner, void** phStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszUrl);
        ORBIT_TRACK_PARAM(dwRetrievalFlags);
        ORBIT_TRACK_PARAM(dwTimeout);
        ORBIT_TRACK_PARAM(pszHashId);
        ORBIT_TRACK_PARAM(pPara);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(ppTsContext);
        ORBIT_TRACK_PARAM(ppTsSigner);
        ORBIT_TRACK_PARAM(phStore);

        auto win32_impl_result = g_api_table.CryptRetrieveTimeStamp(wszUrl, dwRetrievalFlags, dwTimeout, pszHashId, pPara, pbData, cbData, ppTsContext, ppTsSigner, phStore);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptVerifyTimeStampSignature(uint8_t* pbTSContentInfo, uint32_t cbTSContentInfo, uint8_t* pbData, uint32_t cbData, void* hAdditionalStore, win32::Windows::Win32::Security::Cryptography::CRYPT_TIMESTAMP_CONTEXT** ppTsContext, win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT** ppTsSigner, void** phStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbTSContentInfo);
        ORBIT_TRACK_PARAM(cbTSContentInfo);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(hAdditionalStore);
        ORBIT_TRACK_PARAM(ppTsContext);
        ORBIT_TRACK_PARAM(ppTsSigner);
        ORBIT_TRACK_PARAM(phStore);

        auto win32_impl_result = g_api_table.CryptVerifyTimeStampSignature(pbTSContentInfo, cbTSContentInfo, pbData, cbData, hAdditionalStore, ppTsContext, ppTsSigner, phStore);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CertIsWeakHash(uint32_t dwHashUseType, win32::Windows::Win32::Foundation::PWSTR pwszCNGHashAlgid, uint32_t dwChainFlags, win32::Windows::Win32::Security::Cryptography::CERT_CHAIN_CONTEXT* pSignerChainContext, win32::Windows::Win32::Foundation::FILETIME* pTimeStamp, win32::Windows::Win32::Foundation::PWSTR pwszFileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwHashUseType);
        ORBIT_TRACK_PARAM(pwszCNGHashAlgid);
        ORBIT_TRACK_PARAM(dwChainFlags);
        ORBIT_TRACK_PARAM(pSignerChainContext);
        ORBIT_TRACK_PARAM(pTimeStamp);
        ORBIT_TRACK_PARAM(pwszFileName);

        auto win32_impl_result = g_api_table.CertIsWeakHash(dwHashUseType, pwszCNGHashAlgid, dwChainFlags, pSignerChainContext, pTimeStamp, pwszFileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptProtectData(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pDataIn, win32::Windows::Win32::Foundation::PWSTR szDataDescr, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, win32::Windows::Win32::Security::Cryptography::CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pDataOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDataIn);
        ORBIT_TRACK_PARAM(szDataDescr);
        ORBIT_TRACK_PARAM(pOptionalEntropy);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pPromptStruct);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pDataOut);

        auto win32_impl_result = g_api_table.CryptProtectData(pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUnprotectData(win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pDataIn, win32::Windows::Win32::Foundation::PWSTR* ppszDataDescr, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, win32::Windows::Win32::Security::Cryptography::CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPTOAPI_BLOB* pDataOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDataIn);
        ORBIT_TRACK_PARAM(ppszDataDescr);
        ORBIT_TRACK_PARAM(pOptionalEntropy);
        ORBIT_TRACK_PARAM(pvReserved);
        ORBIT_TRACK_PARAM(pPromptStruct);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pDataOut);

        auto win32_impl_result = g_api_table.CryptUnprotectData(pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUpdateProtectedState(win32::Windows::Win32::Foundation::PSID pOldSid, win32::Windows::Win32::Foundation::PWSTR pwszOldPassword, uint32_t dwFlags, uint32_t* pdwSuccessCount, uint32_t* pdwFailureCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOldSid);
        ORBIT_TRACK_PARAM(pwszOldPassword);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pdwSuccessCount);
        ORBIT_TRACK_PARAM(pdwFailureCount);

        auto win32_impl_result = g_api_table.CryptUpdateProtectedState(pOldSid, pwszOldPassword, dwFlags, pdwSuccessCount, pdwFailureCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptProtectMemory(void* pDataIn, uint32_t cbDataIn, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDataIn);
        ORBIT_TRACK_PARAM(cbDataIn);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptProtectMemory(pDataIn, cbDataIn, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUnprotectMemory(void* pDataIn, uint32_t cbDataIn, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDataIn);
        ORBIT_TRACK_PARAM(cbDataIn);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptUnprotectMemory(pDataIn, cbDataIn, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptRegisterProtectionDescriptorName(win32::Windows::Win32::Foundation::PWSTR pwszName, win32::Windows::Win32::Foundation::PWSTR pwszDescriptorString, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszName);
        ORBIT_TRACK_PARAM(pwszDescriptorString);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptRegisterProtectionDescriptorName(pwszName, pwszDescriptorString, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptQueryProtectionDescriptorName(win32::Windows::Win32::Foundation::PWSTR pwszName, win32::Windows::Win32::Foundation::PWSTR pwszDescriptorString, size_t* pcDescriptorString, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszName);
        ORBIT_TRACK_PARAM(pwszDescriptorString);
        ORBIT_TRACK_PARAM(pcDescriptorString);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.NCryptQueryProtectionDescriptorName(pwszName, pwszDescriptorString, pcDescriptorString, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptCreateProtectionDescriptor(win32::Windows::Win32::Foundation::PWSTR pwszDescriptorString, uint32_t dwFlags, win32::Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE* phDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszDescriptorString);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(phDescriptor);

        auto win32_impl_result = g_api_table.NCryptCreateProtectionDescriptor(pwszDescriptorString, dwFlags, phDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptCloseProtectionDescriptor(win32::Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE hDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDescriptor);

        auto win32_impl_result = g_api_table.NCryptCloseProtectionDescriptor(hDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptGetProtectionDescriptorInfo(win32::Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE hDescriptor, win32::Windows::Win32::Security::Cryptography::NCRYPT_ALLOC_PARA* pMemPara, uint32_t dwInfoType, void** ppvInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDescriptor);
        ORBIT_TRACK_PARAM(pMemPara);
        ORBIT_TRACK_PARAM(dwInfoType);
        ORBIT_TRACK_PARAM(ppvInfo);

        auto win32_impl_result = g_api_table.NCryptGetProtectionDescriptorInfo(hDescriptor, pMemPara, dwInfoType, ppvInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptProtectSecret(win32::Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE hDescriptor, uint32_t dwFlags, uint8_t* pbData, uint32_t cbData, win32::Windows::Win32::Security::Cryptography::NCRYPT_ALLOC_PARA* pMemPara, win32::Windows::Win32::Foundation::HWND hWnd, uint8_t** ppbProtectedBlob, uint32_t* pcbProtectedBlob) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDescriptor);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(pMemPara);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(ppbProtectedBlob);
        ORBIT_TRACK_PARAM(pcbProtectedBlob);

        auto win32_impl_result = g_api_table.NCryptProtectSecret(hDescriptor, dwFlags, pbData, cbData, pMemPara, hWnd, ppbProtectedBlob, pcbProtectedBlob);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptUnprotectSecret(win32::Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE* phDescriptor, win32::Windows::Win32::Security::Cryptography::NCRYPT_FLAGS dwFlags, uint8_t* pbProtectedBlob, uint32_t cbProtectedBlob, win32::Windows::Win32::Security::Cryptography::NCRYPT_ALLOC_PARA* pMemPara, win32::Windows::Win32::Foundation::HWND hWnd, uint8_t** ppbData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phDescriptor);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pbProtectedBlob);
        ORBIT_TRACK_PARAM(cbProtectedBlob);
        ORBIT_TRACK_PARAM(pMemPara);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(ppbData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.NCryptUnprotectSecret(phDescriptor, dwFlags, pbProtectedBlob, cbProtectedBlob, pMemPara, hWnd, ppbData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptStreamOpenToProtect(win32::Windows::Win32::Security::NCRYPT_DESCRIPTOR_HANDLE hDescriptor, uint32_t dwFlags, win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Security::Cryptography::NCRYPT_PROTECT_STREAM_INFO* pStreamInfo, win32::Windows::Win32::Security::NCRYPT_STREAM_HANDLE* phStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDescriptor);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(pStreamInfo);
        ORBIT_TRACK_PARAM(phStream);

        auto win32_impl_result = g_api_table.NCryptStreamOpenToProtect(hDescriptor, dwFlags, hWnd, pStreamInfo, phStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptStreamOpenToUnprotect(win32::Windows::Win32::Security::Cryptography::NCRYPT_PROTECT_STREAM_INFO* pStreamInfo, uint32_t dwFlags, win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Security::NCRYPT_STREAM_HANDLE* phStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStreamInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(phStream);

        auto win32_impl_result = g_api_table.NCryptStreamOpenToUnprotect(pStreamInfo, dwFlags, hWnd, phStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptStreamOpenToUnprotectEx(win32::Windows::Win32::Security::Cryptography::NCRYPT_PROTECT_STREAM_INFO_EX* pStreamInfo, uint32_t dwFlags, win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Security::NCRYPT_STREAM_HANDLE* phStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStreamInfo);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(phStream);

        auto win32_impl_result = g_api_table.NCryptStreamOpenToUnprotectEx(pStreamInfo, dwFlags, hWnd, phStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptStreamUpdate(win32::Windows::Win32::Security::NCRYPT_STREAM_HANDLE hStream, uint8_t* pbData, size_t cbData, win32::Windows::Win32::Foundation::BOOL fFinal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hStream);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(fFinal);

        auto win32_impl_result = g_api_table.NCryptStreamUpdate(hStream, pbData, cbData, fFinal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_NCryptStreamClose(win32::Windows::Win32::Security::NCRYPT_STREAM_HANDLE hStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hStream);

        auto win32_impl_result = g_api_table.NCryptStreamClose(hStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlClose(void* hCryptXml) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);

        auto win32_impl_result = g_api_table.CryptXmlClose(hCryptXml);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlGetTransforms(win32::Windows::Win32::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG** ppConfig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppConfig);

        auto win32_impl_result = g_api_table.CryptXmlGetTransforms(ppConfig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlOpenToEncode(win32::Windows::Win32::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pConfig, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_FLAGS dwFlags, win32::Windows::Win32::Foundation::PWSTR wszId, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_BLOB* pEncoded, void** phSignature) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConfig);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(wszId);
        ORBIT_TRACK_PARAM(rgProperty);
        ORBIT_TRACK_PARAM(cProperty);
        ORBIT_TRACK_PARAM(pEncoded);
        ORBIT_TRACK_PARAM(phSignature);

        auto win32_impl_result = g_api_table.CryptXmlOpenToEncode(pConfig, dwFlags, wszId, rgProperty, cProperty, pEncoded, phSignature);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlOpenToDecode(win32::Windows::Win32::Security::Cryptography::CRYPT_XML_TRANSFORM_CHAIN_CONFIG* pConfig, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_BLOB* pEncoded, void** phCryptXml) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConfig);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(rgProperty);
        ORBIT_TRACK_PARAM(cProperty);
        ORBIT_TRACK_PARAM(pEncoded);
        ORBIT_TRACK_PARAM(phCryptXml);

        auto win32_impl_result = g_api_table.CryptXmlOpenToDecode(pConfig, dwFlags, rgProperty, cProperty, pEncoded, phCryptXml);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlAddObject(void* hSignatureOrObject, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_BLOB* pEncoded, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_OBJECT** ppObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSignatureOrObject);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(rgProperty);
        ORBIT_TRACK_PARAM(cProperty);
        ORBIT_TRACK_PARAM(pEncoded);
        ORBIT_TRACK_PARAM(ppObject);

        auto win32_impl_result = g_api_table.CryptXmlAddObject(hSignatureOrObject, dwFlags, rgProperty, cProperty, pEncoded, ppObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlCreateReference(void* hCryptXml, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR wszId, win32::Windows::Win32::Foundation::PWSTR wszURI, win32::Windows::Win32::Foundation::PWSTR wszType, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM* pDigestMethod, uint32_t cTransform, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM* rgTransform, void** phReference) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(wszId);
        ORBIT_TRACK_PARAM(wszURI);
        ORBIT_TRACK_PARAM(wszType);
        ORBIT_TRACK_PARAM(pDigestMethod);
        ORBIT_TRACK_PARAM(cTransform);
        ORBIT_TRACK_PARAM(rgTransform);
        ORBIT_TRACK_PARAM(phReference);

        auto win32_impl_result = g_api_table.CryptXmlCreateReference(hCryptXml, dwFlags, wszId, wszURI, wszType, pDigestMethod, cTransform, rgTransform, phReference);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlDigestReference(void* hReference, uint32_t dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_DATA_PROVIDER* pDataProviderIn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hReference);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pDataProviderIn);

        auto win32_impl_result = g_api_table.CryptXmlDigestReference(hReference, dwFlags, pDataProviderIn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlSetHMACSecret(void* hSignature, uint8_t* pbSecret, uint32_t cbSecret) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSignature);
        ORBIT_TRACK_PARAM(pbSecret);
        ORBIT_TRACK_PARAM(cbSecret);

        auto win32_impl_result = g_api_table.CryptXmlSetHMACSecret(hSignature, pbSecret, cbSecret);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlSign(void* hSignature, size_t hKey, win32::Windows::Win32::Security::Cryptography::CERT_KEY_SPEC dwKeySpec, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_KEYINFO_SPEC dwKeyInfoSpec, void* pvKeyInfoSpec, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM* pSignatureMethod, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM* pCanonicalization) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSignature);
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwKeySpec);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwKeyInfoSpec);
        ORBIT_TRACK_PARAM(pvKeyInfoSpec);
        ORBIT_TRACK_PARAM(pSignatureMethod);
        ORBIT_TRACK_PARAM(pCanonicalization);

        auto win32_impl_result = g_api_table.CryptXmlSign(hSignature, hKey, dwKeySpec, dwFlags, dwKeyInfoSpec, pvKeyInfoSpec, pSignatureMethod, pCanonicalization);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlImportPublicKey(win32::Windows::Win32::Security::Cryptography::CRYPT_XML_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_KEY_VALUE* pKeyValue, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE* phKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pKeyValue);
        ORBIT_TRACK_PARAM(phKey);

        auto win32_impl_result = g_api_table.CryptXmlImportPublicKey(dwFlags, pKeyValue, phKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlVerifySignature(void* hSignature, win32::Windows::Win32::Security::Cryptography::BCRYPT_KEY_HANDLE hKey, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSignature);
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptXmlVerifySignature(hSignature, hKey, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlGetDocContext(void* hCryptXml, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_DOC_CTXT** ppStruct) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);
        ORBIT_TRACK_PARAM(ppStruct);

        auto win32_impl_result = g_api_table.CryptXmlGetDocContext(hCryptXml, ppStruct);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlGetSignature(void* hCryptXml, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_SIGNATURE** ppStruct) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);
        ORBIT_TRACK_PARAM(ppStruct);

        auto win32_impl_result = g_api_table.CryptXmlGetSignature(hCryptXml, ppStruct);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlGetReference(void* hCryptXml, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_REFERENCE** ppStruct) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);
        ORBIT_TRACK_PARAM(ppStruct);

        auto win32_impl_result = g_api_table.CryptXmlGetReference(hCryptXml, ppStruct);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlGetStatus(void* hCryptXml, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_STATUS* pStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);
        ORBIT_TRACK_PARAM(pStatus);

        auto win32_impl_result = g_api_table.CryptXmlGetStatus(hCryptXml, pStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlEncode(void* hCryptXml, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_CHARSET dwCharset, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_PROPERTY* rgProperty, uint32_t cProperty, void* pvCallbackState, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_XML_WRITE_CALLBACK* pfnWrite) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCryptXml);
        ORBIT_TRACK_PARAM(dwCharset);
        ORBIT_TRACK_PARAM(rgProperty);
        ORBIT_TRACK_PARAM(cProperty);
        ORBIT_TRACK_PARAM(pvCallbackState);
        ORBIT_TRACK_PARAM(pfnWrite);

        auto win32_impl_result = g_api_table.CryptXmlEncode(hCryptXml, dwCharset, rgProperty, cProperty, pvCallbackState, pfnWrite);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlGetAlgorithmInfo(win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM* pXmlAlgorithm, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_FLAGS dwFlags, win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO** ppAlgInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pXmlAlgorithm);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(ppAlgInfo);

        auto win32_impl_result = g_api_table.CryptXmlGetAlgorithmInfo(pXmlAlgorithm, dwFlags, ppAlgInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CRYPT_XML_ALGORITHM_INFO* __stdcall ORBIT_IMPL_CryptXmlFindAlgorithmInfo(uint32_t dwFindByType, void* pvFindBy, uint32_t dwGroupId, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFindByType);
        ORBIT_TRACK_PARAM(pvFindBy);
        ORBIT_TRACK_PARAM(dwGroupId);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CryptXmlFindAlgorithmInfo(dwFindByType, pvFindBy, dwGroupId, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CryptXmlEnumAlgorithmInfo(uint32_t dwGroupId, uint32_t dwFlags, void* pvArg, win32::Windows::Win32::Security::Cryptography::PFN_CRYPT_XML_ENUM_ALG_INFO* pfnEnumAlgInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwGroupId);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvArg);
        ORBIT_TRACK_PARAM(pfnEnumAlgInfo);

        auto win32_impl_result = g_api_table.CryptXmlEnumAlgorithmInfo(dwGroupId, dwFlags, pvArg, pfnEnumAlgInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIDlgViewContext(uint32_t dwContextType, void* pvContext, win32::Windows::Win32::Foundation::HWND hwnd, win32::Windows::Win32::Foundation::PWSTR pwszTitle, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwContextType);
        ORBIT_TRACK_PARAM(pvContext);
        ORBIT_TRACK_PARAM(hwnd);
        ORBIT_TRACK_PARAM(pwszTitle);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptUIDlgViewContext(dwContextType, pvContext, hwnd, pwszTitle, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Security::Cryptography::CERT_CONTEXT* __stdcall ORBIT_IMPL_CryptUIDlgSelectCertificateFromStore(void* hCertStore, win32::Windows::Win32::Foundation::HWND hwnd, win32::Windows::Win32::Foundation::PWSTR pwszTitle, win32::Windows::Win32::Foundation::PWSTR pwszDisplayString, uint32_t dwDontUseColumn, uint32_t dwFlags, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCertStore);
        ORBIT_TRACK_PARAM(hwnd);
        ORBIT_TRACK_PARAM(pwszTitle);
        ORBIT_TRACK_PARAM(pwszDisplayString);
        ORBIT_TRACK_PARAM(dwDontUseColumn);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.CryptUIDlgSelectCertificateFromStore(hCertStore, hwnd, pwszTitle, pwszDisplayString, dwDontUseColumn, dwFlags, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CertSelectionGetSerializedBlob(win32::Windows::Win32::Security::Cryptography::CERT_SELECTUI_INPUT* pcsi, void** ppOutBuffer, uint32_t* pulOutBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcsi);
        ORBIT_TRACK_PARAM(ppOutBuffer);
        ORBIT_TRACK_PARAM(pulOutBufferSize);

        auto win32_impl_result = g_api_table.CertSelectionGetSerializedBlob(pcsi, ppOutBuffer, pulOutBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIDlgCertMgr(win32::Windows::Win32::Security::Cryptography::CRYPTUI_CERT_MGR_STRUCT* pCryptUICertMgr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCryptUICertMgr);

        auto win32_impl_result = g_api_table.CryptUIDlgCertMgr(pCryptUICertMgr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIWizDigitalSign(uint32_t dwFlags, win32::Windows::Win32::Foundation::HWND hwndParent, win32::Windows::Win32::Foundation::PWSTR pwszWizardTitle, win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_DIGITAL_SIGN_INFO* pDigitalSignInfo, win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT** ppSignContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(pwszWizardTitle);
        ORBIT_TRACK_PARAM(pDigitalSignInfo);
        ORBIT_TRACK_PARAM(ppSignContext);

        auto win32_impl_result = g_api_table.CryptUIWizDigitalSign(dwFlags, hwndParent, pwszWizardTitle, pDigitalSignInfo, ppSignContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIWizFreeDigitalSignContext(win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT* pSignContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSignContext);

        auto win32_impl_result = g_api_table.CryptUIWizFreeDigitalSignContext(pSignContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIDlgViewCertificateW(win32::Windows::Win32::Security::Cryptography::CRYPTUI_VIEWCERTIFICATE_STRUCTW* pCertViewInfo, win32::Windows::Win32::Foundation::BOOL* pfPropertiesChanged) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertViewInfo);
        ORBIT_TRACK_PARAM(pfPropertiesChanged);

        auto win32_impl_result = g_api_table.CryptUIDlgViewCertificateW(pCertViewInfo, pfPropertiesChanged);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIDlgViewCertificateA(win32::Windows::Win32::Security::Cryptography::CRYPTUI_VIEWCERTIFICATE_STRUCTA* pCertViewInfo, win32::Windows::Win32::Foundation::BOOL* pfPropertiesChanged) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCertViewInfo);
        ORBIT_TRACK_PARAM(pfPropertiesChanged);

        auto win32_impl_result = g_api_table.CryptUIDlgViewCertificateA(pCertViewInfo, pfPropertiesChanged);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIWizExport(win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_FLAGS dwFlags, win32::Windows::Win32::Foundation::HWND hwndParent, win32::Windows::Win32::Foundation::PWSTR pwszWizardTitle, win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_EXPORT_INFO* pExportInfo, void* pvoid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(pwszWizardTitle);
        ORBIT_TRACK_PARAM(pExportInfo);
        ORBIT_TRACK_PARAM(pvoid);

        auto win32_impl_result = g_api_table.CryptUIWizExport(dwFlags, hwndParent, pwszWizardTitle, pExportInfo, pvoid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CryptUIWizImport(win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_FLAGS dwFlags, win32::Windows::Win32::Foundation::HWND hwndParent, win32::Windows::Win32::Foundation::PWSTR pwszWizardTitle, win32::Windows::Win32::Security::Cryptography::CRYPTUI_WIZ_IMPORT_SRC_INFO* pImportSrc, void* hDestCertStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(pwszWizardTitle);
        ORBIT_TRACK_PARAM(pImportSrc);
        ORBIT_TRACK_PARAM(hDestCertStore);

        auto win32_impl_result = g_api_table.CryptUIWizImport(dwFlags, hwndParent, pwszWizardTitle, pImportSrc, hDestCertStore);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetToken(uint32_t cPolicyChain, win32::Windows::Win32::Security::Cryptography::POLICY_ELEMENT* pPolicyChain, win32::Windows::Win32::Security::Cryptography::GENERIC_XML_TOKEN** securityToken, win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE** phProofTokenCrypto) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cPolicyChain);
        ORBIT_TRACK_PARAM(pPolicyChain);
        ORBIT_TRACK_PARAM(securityToken);
        ORBIT_TRACK_PARAM(phProofTokenCrypto);

        auto win32_impl_result = g_api_table.GetToken(cPolicyChain, pPolicyChain, securityToken, phProofTokenCrypto);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ManageCardSpace() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ManageCardSpace();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ImportInformationCard(win32::Windows::Win32::Foundation::PWSTR fileName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fileName);

        auto win32_impl_result = g_api_table.ImportInformationCard(fileName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_Encrypt(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, win32::Windows::Win32::Foundation::BOOL fOAEP, uint32_t cbInData, uint8_t* pInData, uint32_t* pcbOutData, uint8_t** ppOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(fOAEP);
        ORBIT_TRACK_PARAM(cbInData);
        ORBIT_TRACK_PARAM(pInData);
        ORBIT_TRACK_PARAM(pcbOutData);
        ORBIT_TRACK_PARAM(ppOutData);

        auto win32_impl_result = g_api_table.Encrypt(hCrypto, fOAEP, cbInData, pInData, pcbOutData, ppOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_Decrypt(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, win32::Windows::Win32::Foundation::BOOL fOAEP, uint32_t cbInData, uint8_t* pInData, uint32_t* pcbOutData, uint8_t** ppOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(fOAEP);
        ORBIT_TRACK_PARAM(cbInData);
        ORBIT_TRACK_PARAM(pInData);
        ORBIT_TRACK_PARAM(pcbOutData);
        ORBIT_TRACK_PARAM(ppOutData);

        auto win32_impl_result = g_api_table.Decrypt(hCrypto, fOAEP, cbInData, pInData, pcbOutData, ppOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SignHash(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbHash, uint8_t* pHash, win32::Windows::Win32::Foundation::PWSTR hashAlgOid, uint32_t* pcbSig, uint8_t** ppSig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbHash);
        ORBIT_TRACK_PARAM(pHash);
        ORBIT_TRACK_PARAM(hashAlgOid);
        ORBIT_TRACK_PARAM(pcbSig);
        ORBIT_TRACK_PARAM(ppSig);

        auto win32_impl_result = g_api_table.SignHash(hCrypto, cbHash, pHash, hashAlgOid, pcbSig, ppSig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_VerifyHash(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbHash, uint8_t* pHash, win32::Windows::Win32::Foundation::PWSTR hashAlgOid, uint32_t cbSig, uint8_t* pSig, win32::Windows::Win32::Foundation::BOOL* pfVerified) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbHash);
        ORBIT_TRACK_PARAM(pHash);
        ORBIT_TRACK_PARAM(hashAlgOid);
        ORBIT_TRACK_PARAM(cbSig);
        ORBIT_TRACK_PARAM(pSig);
        ORBIT_TRACK_PARAM(pfVerified);

        auto win32_impl_result = g_api_table.VerifyHash(hCrypto, cbHash, pHash, hashAlgOid, cbSig, pSig, pfVerified);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetCryptoTransform(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hSymmetricCrypto, uint32_t mode, win32::Windows::Win32::Security::Cryptography::PaddingMode padding, uint32_t feedbackSize, win32::Windows::Win32::Security::Cryptography::Direction direction, uint32_t cbIV, uint8_t* pIV, win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE** pphTransform) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSymmetricCrypto);
        ORBIT_TRACK_PARAM(mode);
        ORBIT_TRACK_PARAM(padding);
        ORBIT_TRACK_PARAM(feedbackSize);
        ORBIT_TRACK_PARAM(direction);
        ORBIT_TRACK_PARAM(cbIV);
        ORBIT_TRACK_PARAM(pIV);
        ORBIT_TRACK_PARAM(pphTransform);

        auto win32_impl_result = g_api_table.GetCryptoTransform(hSymmetricCrypto, mode, padding, feedbackSize, direction, cbIV, pIV, pphTransform);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetKeyedHash(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hSymmetricCrypto, win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE** pphHash) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSymmetricCrypto);
        ORBIT_TRACK_PARAM(pphHash);

        auto win32_impl_result = g_api_table.GetKeyedHash(hSymmetricCrypto, pphHash);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_TransformBlock(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbInData, uint8_t* pInData, uint32_t* pcbOutData, uint8_t** ppOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbInData);
        ORBIT_TRACK_PARAM(pInData);
        ORBIT_TRACK_PARAM(pcbOutData);
        ORBIT_TRACK_PARAM(ppOutData);

        auto win32_impl_result = g_api_table.TransformBlock(hCrypto, cbInData, pInData, pcbOutData, ppOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_TransformFinalBlock(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbInData, uint8_t* pInData, uint32_t* pcbOutData, uint8_t** ppOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbInData);
        ORBIT_TRACK_PARAM(pInData);
        ORBIT_TRACK_PARAM(pcbOutData);
        ORBIT_TRACK_PARAM(ppOutData);

        auto win32_impl_result = g_api_table.TransformFinalBlock(hCrypto, cbInData, pInData, pcbOutData, ppOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HashCore(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbInData, uint8_t* pInData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbInData);
        ORBIT_TRACK_PARAM(pInData);

        auto win32_impl_result = g_api_table.HashCore(hCrypto, cbInData, pInData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_HashFinal(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbInData, uint8_t* pInData, uint32_t* pcbOutData, uint8_t** ppOutData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbInData);
        ORBIT_TRACK_PARAM(pInData);
        ORBIT_TRACK_PARAM(pcbOutData);
        ORBIT_TRACK_PARAM(ppOutData);

        auto win32_impl_result = g_api_table.HashFinal(hCrypto, cbInData, pInData, pcbOutData, ppOutData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FreeToken(win32::Windows::Win32::Security::Cryptography::GENERIC_XML_TOKEN* pAllocMemory) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAllocMemory);

        auto win32_impl_result = g_api_table.FreeToken(pAllocMemory);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CloseCryptoHandle(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);

        auto win32_impl_result = g_api_table.CloseCryptoHandle(hCrypto);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GenerateDerivedKey(win32::Windows::Win32::Security::Cryptography::INFORMATIONCARD_CRYPTO_HANDLE* hCrypto, uint32_t cbLabel, uint8_t* pLabel, uint32_t cbNonce, uint8_t* pNonce, uint32_t derivedKeyLength, uint32_t offset, win32::Windows::Win32::Foundation::PWSTR algId, uint32_t* pcbKey, uint8_t** ppKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCrypto);
        ORBIT_TRACK_PARAM(cbLabel);
        ORBIT_TRACK_PARAM(pLabel);
        ORBIT_TRACK_PARAM(cbNonce);
        ORBIT_TRACK_PARAM(pNonce);
        ORBIT_TRACK_PARAM(derivedKeyLength);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(algId);
        ORBIT_TRACK_PARAM(pcbKey);
        ORBIT_TRACK_PARAM(ppKey);

        auto win32_impl_result = g_api_table.GenerateDerivedKey(hCrypto, cbLabel, pLabel, cbNonce, pNonce, derivedKeyLength, offset, algId, pcbKey, ppKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetBrowserToken(uint32_t dwParamType, void* pParam, uint32_t* pcbToken, uint8_t** ppToken) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwParamType);
        ORBIT_TRACK_PARAM(pParam);
        ORBIT_TRACK_PARAM(pcbToken);
        ORBIT_TRACK_PARAM(ppToken);

        auto win32_impl_result = g_api_table.GetBrowserToken(dwParamType, pParam, pcbToken, ppToken);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
