// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_Compression_2_H
#define WIN32_Windows_Win32_Storage_Compression_2_H
#include "win32/Windows.Win32.Storage.Compression.h"
#include "win32/impl/Windows.Win32.Storage.Compression.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::Compression
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateCompressor(win32::Windows::Win32::Storage::Compression::COMPRESS_ALGORITHM Algorithm, win32::Windows::Win32::Storage::Compression::COMPRESS_ALLOCATION_ROUTINES* AllocationRoutines, intptr_t* CompressorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Algorithm);
        ORBIT_TRACK_PARAM(AllocationRoutines);
        ORBIT_TRACK_PARAM(CompressorHandle);

        auto win32_impl_result = g_api_table.CreateCompressor(Algorithm, AllocationRoutines, CompressorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetCompressorInformation(win32::Windows::Win32::Storage::Compression::COMPRESSOR_HANDLE CompressorHandle, win32::Windows::Win32::Storage::Compression::COMPRESS_INFORMATION_CLASS CompressInformationClass, void* CompressInformation, size_t CompressInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompressorHandle);
        ORBIT_TRACK_PARAM(CompressInformationClass);
        ORBIT_TRACK_PARAM(CompressInformation);
        ORBIT_TRACK_PARAM(CompressInformationSize);

        auto win32_impl_result = g_api_table.SetCompressorInformation(CompressorHandle, CompressInformationClass, CompressInformation, CompressInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryCompressorInformation(win32::Windows::Win32::Storage::Compression::COMPRESSOR_HANDLE CompressorHandle, win32::Windows::Win32::Storage::Compression::COMPRESS_INFORMATION_CLASS CompressInformationClass, void* CompressInformation, size_t CompressInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompressorHandle);
        ORBIT_TRACK_PARAM(CompressInformationClass);
        ORBIT_TRACK_PARAM(CompressInformation);
        ORBIT_TRACK_PARAM(CompressInformationSize);

        auto win32_impl_result = g_api_table.QueryCompressorInformation(CompressorHandle, CompressInformationClass, CompressInformation, CompressInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_Compress(win32::Windows::Win32::Storage::Compression::COMPRESSOR_HANDLE CompressorHandle, void* UncompressedData, size_t UncompressedDataSize, void* CompressedBuffer, size_t CompressedBufferSize, size_t* CompressedDataSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompressorHandle);
        ORBIT_TRACK_PARAM(UncompressedData);
        ORBIT_TRACK_PARAM(UncompressedDataSize);
        ORBIT_TRACK_PARAM(CompressedBuffer);
        ORBIT_TRACK_PARAM(CompressedBufferSize);
        ORBIT_TRACK_PARAM(CompressedDataSize);

        auto win32_impl_result = g_api_table.Compress(CompressorHandle, UncompressedData, UncompressedDataSize, CompressedBuffer, CompressedBufferSize, CompressedDataSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResetCompressor(win32::Windows::Win32::Storage::Compression::COMPRESSOR_HANDLE CompressorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompressorHandle);

        auto win32_impl_result = g_api_table.ResetCompressor(CompressorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseCompressor(win32::Windows::Win32::Storage::Compression::COMPRESSOR_HANDLE CompressorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(CompressorHandle);

        auto win32_impl_result = g_api_table.CloseCompressor(CompressorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateDecompressor(win32::Windows::Win32::Storage::Compression::COMPRESS_ALGORITHM Algorithm, win32::Windows::Win32::Storage::Compression::COMPRESS_ALLOCATION_ROUTINES* AllocationRoutines, intptr_t* DecompressorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Algorithm);
        ORBIT_TRACK_PARAM(AllocationRoutines);
        ORBIT_TRACK_PARAM(DecompressorHandle);

        auto win32_impl_result = g_api_table.CreateDecompressor(Algorithm, AllocationRoutines, DecompressorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetDecompressorInformation(intptr_t DecompressorHandle, win32::Windows::Win32::Storage::Compression::COMPRESS_INFORMATION_CLASS CompressInformationClass, void* CompressInformation, size_t CompressInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DecompressorHandle);
        ORBIT_TRACK_PARAM(CompressInformationClass);
        ORBIT_TRACK_PARAM(CompressInformation);
        ORBIT_TRACK_PARAM(CompressInformationSize);

        auto win32_impl_result = g_api_table.SetDecompressorInformation(DecompressorHandle, CompressInformationClass, CompressInformation, CompressInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryDecompressorInformation(intptr_t DecompressorHandle, win32::Windows::Win32::Storage::Compression::COMPRESS_INFORMATION_CLASS CompressInformationClass, void* CompressInformation, size_t CompressInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DecompressorHandle);
        ORBIT_TRACK_PARAM(CompressInformationClass);
        ORBIT_TRACK_PARAM(CompressInformation);
        ORBIT_TRACK_PARAM(CompressInformationSize);

        auto win32_impl_result = g_api_table.QueryDecompressorInformation(DecompressorHandle, CompressInformationClass, CompressInformation, CompressInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_Decompress(intptr_t DecompressorHandle, void* CompressedData, size_t CompressedDataSize, void* UncompressedBuffer, size_t UncompressedBufferSize, size_t* UncompressedDataSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DecompressorHandle);
        ORBIT_TRACK_PARAM(CompressedData);
        ORBIT_TRACK_PARAM(CompressedDataSize);
        ORBIT_TRACK_PARAM(UncompressedBuffer);
        ORBIT_TRACK_PARAM(UncompressedBufferSize);
        ORBIT_TRACK_PARAM(UncompressedDataSize);

        auto win32_impl_result = g_api_table.Decompress(DecompressorHandle, CompressedData, CompressedDataSize, UncompressedBuffer, UncompressedBufferSize, UncompressedDataSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResetDecompressor(intptr_t DecompressorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DecompressorHandle);

        auto win32_impl_result = g_api_table.ResetDecompressor(DecompressorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseDecompressor(intptr_t DecompressorHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DecompressorHandle);

        auto win32_impl_result = g_api_table.CloseDecompressor(DecompressorHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
