// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Security_ExtensibleAuthenticationProtocol_2_H
#define WIN32_Windows_Win32_Security_ExtensibleAuthenticationProtocol_2_H
#include "win32/Windows.Win32.Security.ExtensibleAuthenticationProtocol.h"
#include "win32/impl/Windows.Win32.Security.ExtensibleAuthenticationProtocol.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetMethods(win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_INFO_ARRAY* pEapMethodInfoArray, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEapMethodInfoArray);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetMethods(pEapMethodInfoArray, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetMethodProperties(uint32_t dwVersion, uint32_t dwFlags, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, win32::Windows::Win32::Foundation::HANDLE hUserImpersonationToken, uint32_t dwEapConnDataSize, uint8_t* pbEapConnData, uint32_t dwUserDataSize, uint8_t* pbUserData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_PROPERTY_ARRAY* pMethodPropertyArray, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(hUserImpersonationToken);
        ORBIT_TRACK_PARAM(dwEapConnDataSize);
        ORBIT_TRACK_PARAM(pbEapConnData);
        ORBIT_TRACK_PARAM(dwUserDataSize);
        ORBIT_TRACK_PARAM(pbUserData);
        ORBIT_TRACK_PARAM(pMethodPropertyArray);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetMethodProperties(dwVersion, dwFlags, eapMethodType, hUserImpersonationToken, dwEapConnDataSize, pbEapConnData, dwUserDataSize, pbUserData, pMethodPropertyArray, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerInvokeConfigUI(win32::Windows::Win32::Foundation::HWND hwndParent, uint32_t dwFlags, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, uint32_t dwSizeOfConfigIn, uint8_t* pConfigIn, uint32_t* pdwSizeOfConfigOut, uint8_t** ppConfigOut, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(dwSizeOfConfigIn);
        ORBIT_TRACK_PARAM(pConfigIn);
        ORBIT_TRACK_PARAM(pdwSizeOfConfigOut);
        ORBIT_TRACK_PARAM(ppConfigOut);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerInvokeConfigUI(hwndParent, dwFlags, eapMethodType, dwSizeOfConfigIn, pConfigIn, pdwSizeOfConfigOut, ppConfigOut, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerQueryCredentialInputFields(win32::Windows::Win32::Foundation::HANDLE hUserImpersonationToken, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, uint32_t dwFlags, uint32_t dwEapConnDataSize, uint8_t* pbEapConnData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_ARRAY* pEapConfigInputFieldArray, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hUserImpersonationToken);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwEapConnDataSize);
        ORBIT_TRACK_PARAM(pbEapConnData);
        ORBIT_TRACK_PARAM(pEapConfigInputFieldArray);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerQueryCredentialInputFields(hUserImpersonationToken, eapMethodType, dwFlags, dwEapConnDataSize, pbEapConnData, pEapConfigInputFieldArray, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerQueryUserBlobFromCredentialInputFields(win32::Windows::Win32::Foundation::HANDLE hUserImpersonationToken, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, uint32_t dwFlags, uint32_t dwEapConnDataSize, uint8_t* pbEapConnData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_CONFIG_INPUT_FIELD_ARRAY* pEapConfigInputFieldArray, uint32_t* pdwUserBlobSize, uint8_t** ppbUserBlob, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hUserImpersonationToken);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwEapConnDataSize);
        ORBIT_TRACK_PARAM(pbEapConnData);
        ORBIT_TRACK_PARAM(pEapConfigInputFieldArray);
        ORBIT_TRACK_PARAM(pdwUserBlobSize);
        ORBIT_TRACK_PARAM(ppbUserBlob);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerQueryUserBlobFromCredentialInputFields(hUserImpersonationToken, eapMethodType, dwFlags, dwEapConnDataSize, pbEapConnData, pEapConfigInputFieldArray, pdwUserBlobSize, ppbUserBlob, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerInvokeIdentityUI(uint32_t dwVersion, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, uint32_t dwFlags, win32::Windows::Win32::Foundation::HWND hwndParent, uint32_t dwSizeofConnectionData, uint8_t* pConnectionData, uint32_t dwSizeofUserData, uint8_t* pUserData, uint32_t* pdwSizeOfUserDataOut, uint8_t** ppUserDataOut, win32::Windows::Win32::Foundation::PWSTR* ppwszIdentity, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError, void** ppvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(dwSizeofConnectionData);
        ORBIT_TRACK_PARAM(pConnectionData);
        ORBIT_TRACK_PARAM(dwSizeofUserData);
        ORBIT_TRACK_PARAM(pUserData);
        ORBIT_TRACK_PARAM(pdwSizeOfUserDataOut);
        ORBIT_TRACK_PARAM(ppUserDataOut);
        ORBIT_TRACK_PARAM(ppwszIdentity);
        ORBIT_TRACK_PARAM(ppEapError);
        ORBIT_TRACK_PARAM(ppvReserved);

        auto win32_impl_result = g_api_table.EapHostPeerInvokeIdentityUI(dwVersion, eapMethodType, dwFlags, hwndParent, dwSizeofConnectionData, pConnectionData, dwSizeofUserData, pUserData, pdwSizeOfUserDataOut, ppUserDataOut, ppwszIdentity, ppEapError, ppvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerInvokeInteractiveUI(win32::Windows::Win32::Foundation::HWND hwndParent, uint32_t dwSizeofUIContextData, uint8_t* pUIContextData, uint32_t* pdwSizeOfDataFromInteractiveUI, uint8_t** ppDataFromInteractiveUI, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwndParent);
        ORBIT_TRACK_PARAM(dwSizeofUIContextData);
        ORBIT_TRACK_PARAM(pUIContextData);
        ORBIT_TRACK_PARAM(pdwSizeOfDataFromInteractiveUI);
        ORBIT_TRACK_PARAM(ppDataFromInteractiveUI);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerInvokeInteractiveUI(hwndParent, dwSizeofUIContextData, pUIContextData, pdwSizeOfDataFromInteractiveUI, ppDataFromInteractiveUI, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerQueryInteractiveUIInputFields(uint32_t dwVersion, uint32_t dwFlags, uint32_t dwSizeofUIContextData, uint8_t* pUIContextData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_INTERACTIVE_UI_DATA* pEapInteractiveUIData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError, void** ppvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwSizeofUIContextData);
        ORBIT_TRACK_PARAM(pUIContextData);
        ORBIT_TRACK_PARAM(pEapInteractiveUIData);
        ORBIT_TRACK_PARAM(ppEapError);
        ORBIT_TRACK_PARAM(ppvReserved);

        auto win32_impl_result = g_api_table.EapHostPeerQueryInteractiveUIInputFields(dwVersion, dwFlags, dwSizeofUIContextData, pUIContextData, pEapInteractiveUIData, ppEapError, ppvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerQueryUIBlobFromInteractiveUIInputFields(uint32_t dwVersion, uint32_t dwFlags, uint32_t dwSizeofUIContextData, uint8_t* pUIContextData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_INTERACTIVE_UI_DATA* pEapInteractiveUIData, uint32_t* pdwSizeOfDataFromInteractiveUI, uint8_t** ppDataFromInteractiveUI, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError, void** ppvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwSizeofUIContextData);
        ORBIT_TRACK_PARAM(pUIContextData);
        ORBIT_TRACK_PARAM(pEapInteractiveUIData);
        ORBIT_TRACK_PARAM(pdwSizeOfDataFromInteractiveUI);
        ORBIT_TRACK_PARAM(ppDataFromInteractiveUI);
        ORBIT_TRACK_PARAM(ppEapError);
        ORBIT_TRACK_PARAM(ppvReserved);

        auto win32_impl_result = g_api_table.EapHostPeerQueryUIBlobFromInteractiveUIInputFields(dwVersion, dwFlags, dwSizeofUIContextData, pUIContextData, pEapInteractiveUIData, pdwSizeOfDataFromInteractiveUI, ppDataFromInteractiveUI, ppEapError, ppvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerConfigXml2Blob(uint32_t dwFlags, win32::Windows::Win32::Data::Xml::MsXml::IXMLDOMNode* pConfigDoc, uint32_t* pdwSizeOfConfigOut, uint8_t** ppConfigOut, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE* pEapMethodType, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pConfigDoc);
        ORBIT_TRACK_PARAM(pdwSizeOfConfigOut);
        ORBIT_TRACK_PARAM(ppConfigOut);
        ORBIT_TRACK_PARAM(pEapMethodType);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerConfigXml2Blob(dwFlags, pConfigDoc, pdwSizeOfConfigOut, ppConfigOut, pEapMethodType, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerCredentialsXml2Blob(uint32_t dwFlags, win32::Windows::Win32::Data::Xml::MsXml::IXMLDOMNode* pCredentialsDoc, uint32_t dwSizeOfConfigIn, uint8_t* pConfigIn, uint32_t* pdwSizeOfCredentialsOut, uint8_t** ppCredentialsOut, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE* pEapMethodType, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pCredentialsDoc);
        ORBIT_TRACK_PARAM(dwSizeOfConfigIn);
        ORBIT_TRACK_PARAM(pConfigIn);
        ORBIT_TRACK_PARAM(pdwSizeOfCredentialsOut);
        ORBIT_TRACK_PARAM(ppCredentialsOut);
        ORBIT_TRACK_PARAM(pEapMethodType);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerCredentialsXml2Blob(dwFlags, pCredentialsDoc, dwSizeOfConfigIn, pConfigIn, pdwSizeOfCredentialsOut, ppCredentialsOut, pEapMethodType, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerConfigBlob2Xml(uint32_t dwFlags, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, uint32_t dwSizeOfConfigIn, uint8_t* pConfigIn, win32::Windows::Win32::Data::Xml::MsXml::IXMLDOMDocument2** ppConfigDoc, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(dwSizeOfConfigIn);
        ORBIT_TRACK_PARAM(pConfigIn);
        ORBIT_TRACK_PARAM(ppConfigDoc);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerConfigBlob2Xml(dwFlags, eapMethodType, dwSizeOfConfigIn, pConfigIn, ppConfigDoc, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_EapHostPeerFreeMemory(uint8_t* pData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pData);

        g_api_table.EapHostPeerFreeMemory(pData);
        
    }

    void __stdcall ORBIT_IMPL_EapHostPeerFreeErrorMemory(win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR* pEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEapError);

        g_api_table.EapHostPeerFreeErrorMemory(pEapError);
        
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerInitialize() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.EapHostPeerInitialize();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_EapHostPeerUninitialize() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.EapHostPeerUninitialize();
        
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerBeginSession(uint32_t dwFlags, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapType, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTES* pAttributeArray, win32::Windows::Win32::Foundation::HANDLE hTokenImpersonateUser, uint32_t dwSizeofConnectionData, uint8_t* pConnectionData, uint32_t dwSizeofUserData, uint8_t* pUserData, uint32_t dwMaxSendPacketSize, ::win32::guid* pConnectionId, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::NotificationHandler* func, void* pContextData, uint32_t* pSessionId, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(eapType);
        ORBIT_TRACK_PARAM(pAttributeArray);
        ORBIT_TRACK_PARAM(hTokenImpersonateUser);
        ORBIT_TRACK_PARAM(dwSizeofConnectionData);
        ORBIT_TRACK_PARAM(pConnectionData);
        ORBIT_TRACK_PARAM(dwSizeofUserData);
        ORBIT_TRACK_PARAM(pUserData);
        ORBIT_TRACK_PARAM(dwMaxSendPacketSize);
        ORBIT_TRACK_PARAM(pConnectionId);
        ORBIT_TRACK_PARAM(func);
        ORBIT_TRACK_PARAM(pContextData);
        ORBIT_TRACK_PARAM(pSessionId);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerBeginSession(dwFlags, eapType, pAttributeArray, hTokenImpersonateUser, dwSizeofConnectionData, pConnectionData, dwSizeofUserData, pUserData, dwMaxSendPacketSize, pConnectionId, func, pContextData, pSessionId, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerProcessReceivedPacket(uint32_t sessionHandle, uint32_t cbReceivePacket, uint8_t* pReceivePacket, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EapHostPeerResponseAction* pEapOutput, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(cbReceivePacket);
        ORBIT_TRACK_PARAM(pReceivePacket);
        ORBIT_TRACK_PARAM(pEapOutput);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerProcessReceivedPacket(sessionHandle, cbReceivePacket, pReceivePacket, pEapOutput, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetSendPacket(uint32_t sessionHandle, uint32_t* pcbSendPacket, uint8_t** ppSendPacket, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(pcbSendPacket);
        ORBIT_TRACK_PARAM(ppSendPacket);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetSendPacket(sessionHandle, pcbSendPacket, ppSendPacket, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetResult(uint32_t sessionHandle, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EapHostPeerMethodResultReason reason, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EapHostPeerMethodResult* ppResult, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(ppResult);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetResult(sessionHandle, reason, ppResult, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetUIContext(uint32_t sessionHandle, uint32_t* pdwSizeOfUIContextData, uint8_t** ppUIContextData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(pdwSizeOfUIContextData);
        ORBIT_TRACK_PARAM(ppUIContextData);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetUIContext(sessionHandle, pdwSizeOfUIContextData, ppUIContextData, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerSetUIContext(uint32_t sessionHandle, uint32_t dwSizeOfUIContextData, uint8_t* pUIContextData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EapHostPeerResponseAction* pEapOutput, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(dwSizeOfUIContextData);
        ORBIT_TRACK_PARAM(pUIContextData);
        ORBIT_TRACK_PARAM(pEapOutput);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerSetUIContext(sessionHandle, dwSizeOfUIContextData, pUIContextData, pEapOutput, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetResponseAttributes(uint32_t sessionHandle, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTES* pAttribs, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(pAttribs);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetResponseAttributes(sessionHandle, pAttribs, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerSetResponseAttributes(uint32_t sessionHandle, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ATTRIBUTES* pAttribs, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EapHostPeerResponseAction* pEapOutput, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(pAttribs);
        ORBIT_TRACK_PARAM(pEapOutput);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerSetResponseAttributes(sessionHandle, pAttribs, pEapOutput, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetAuthStatus(uint32_t sessionHandle, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EapHostPeerAuthParams authParam, uint32_t* pcbAuthData, uint8_t** ppAuthData, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(authParam);
        ORBIT_TRACK_PARAM(pcbAuthData);
        ORBIT_TRACK_PARAM(ppAuthData);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerGetAuthStatus(sessionHandle, authParam, pcbAuthData, ppAuthData, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerEndSession(uint32_t sessionHandle, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerEndSession(sessionHandle, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetDataToUnplumbCredentials(::win32::guid* pConnectionIdThatLastSavedCreds, intptr_t* phCredentialImpersonationToken, uint32_t sessionHandle, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError, win32::Windows::Win32::Foundation::BOOL* fSaveToCredMan) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConnectionIdThatLastSavedCreds);
        ORBIT_TRACK_PARAM(phCredentialImpersonationToken);
        ORBIT_TRACK_PARAM(sessionHandle);
        ORBIT_TRACK_PARAM(ppEapError);
        ORBIT_TRACK_PARAM(fSaveToCredMan);

        auto win32_impl_result = g_api_table.EapHostPeerGetDataToUnplumbCredentials(pConnectionIdThatLastSavedCreds, phCredentialImpersonationToken, sessionHandle, ppEapError, fSaveToCredMan);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerClearConnection(::win32::guid* pConnectionId, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConnectionId);
        ORBIT_TRACK_PARAM(ppEapError);

        auto win32_impl_result = g_api_table.EapHostPeerClearConnection(pConnectionId, ppEapError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_EapHostPeerFreeEapError(win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR* pEapError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEapError);

        g_api_table.EapHostPeerFreeEapError(pEapError);
        
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetIdentity(uint32_t dwVersion, uint32_t dwFlags, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_METHOD_TYPE eapMethodType, uint32_t dwSizeofConnectionData, uint8_t* pConnectionData, uint32_t dwSizeofUserData, uint8_t* pUserData, win32::Windows::Win32::Foundation::HANDLE hTokenImpersonateUser, win32::Windows::Win32::Foundation::BOOL* pfInvokeUI, uint32_t* pdwSizeOfUserDataOut, uint8_t** ppUserDataOut, win32::Windows::Win32::Foundation::PWSTR* ppwszIdentity, win32::Windows::Win32::Security::ExtensibleAuthenticationProtocol::EAP_ERROR** ppEapError, uint8_t** ppvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwVersion);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(eapMethodType);
        ORBIT_TRACK_PARAM(dwSizeofConnectionData);
        ORBIT_TRACK_PARAM(pConnectionData);
        ORBIT_TRACK_PARAM(dwSizeofUserData);
        ORBIT_TRACK_PARAM(pUserData);
        ORBIT_TRACK_PARAM(hTokenImpersonateUser);
        ORBIT_TRACK_PARAM(pfInvokeUI);
        ORBIT_TRACK_PARAM(pdwSizeOfUserDataOut);
        ORBIT_TRACK_PARAM(ppUserDataOut);
        ORBIT_TRACK_PARAM(ppwszIdentity);
        ORBIT_TRACK_PARAM(ppEapError);
        ORBIT_TRACK_PARAM(ppvReserved);

        auto win32_impl_result = g_api_table.EapHostPeerGetIdentity(dwVersion, dwFlags, eapMethodType, dwSizeofConnectionData, pConnectionData, dwSizeofUserData, pUserData, hTokenImpersonateUser, pfInvokeUI, pdwSizeOfUserDataOut, ppUserDataOut, ppwszIdentity, ppEapError, ppvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EapHostPeerGetEncryptedPassword(uint32_t dwSizeofPassword, win32::Windows::Win32::Foundation::PWSTR szPassword, win32::Windows::Win32::Foundation::PWSTR* ppszEncPassword) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwSizeofPassword);
        ORBIT_TRACK_PARAM(szPassword);
        ORBIT_TRACK_PARAM(ppszEncPassword);

        auto win32_impl_result = g_api_table.EapHostPeerGetEncryptedPassword(dwSizeofPassword, szPassword, ppszEncPassword);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_EapHostPeerFreeRuntimeMemory(uint8_t* pData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pData);

        g_api_table.EapHostPeerFreeRuntimeMemory(pData);
        
    }

}

#pragma endregion abi_methods

}
#endif
