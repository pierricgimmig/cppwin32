// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_NetManagement_2_H
#define WIN32_Windows_Win32_NetworkManagement_NetManagement_2_H
#include "win32/Windows.Win32.NetworkManagement.NetManagement.h"
#include "win32/impl/Windows.Win32.NetworkManagement.NetManagement.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::NetManagement
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_NetUserAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetUserAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, win32::Windows::Win32::NetworkManagement::NetManagement::NET_USER_ENUM_FILTER_FLAGS filter, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(filter);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetUserEnum(servername, level, filter, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetUserGetInfo(servername, username, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetUserSetInfo(servername, username, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR username) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(username);

        auto win32_impl_result = g_api_table.NetUserDel(servername, username);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserGetGroups(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);

        auto win32_impl_result = g_api_table.NetUserGetGroups(servername, username, level, bufptr, prefmaxlen, entriesread, totalentries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserSetGroups(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint8_t* buf, uint32_t num_entries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(num_entries);

        auto win32_impl_result = g_api_table.NetUserSetGroups(servername, username, level, buf, num_entries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserGetLocalGroups(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR username, uint32_t level, uint32_t flags, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);

        auto win32_impl_result = g_api_table.NetUserGetLocalGroups(servername, username, level, flags, bufptr, prefmaxlen, entriesread, totalentries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserModalsGet(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetUserModalsGet(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserModalsSet(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetUserModalsSet(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUserChangePassword(win32::Windows::Win32::Foundation::PWSTR domainname, win32::Windows::Win32::Foundation::PWSTR username, win32::Windows::Win32::Foundation::PWSTR oldpassword, win32::Windows::Win32::Foundation::PWSTR newpassword) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(domainname);
        ORBIT_TRACK_PARAM(username);
        ORBIT_TRACK_PARAM(oldpassword);
        ORBIT_TRACK_PARAM(newpassword);

        auto win32_impl_result = g_api_table.NetUserChangePassword(domainname, username, oldpassword, newpassword);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetGroupAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupAddUser(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR GroupName, win32::Windows::Win32::Foundation::PWSTR username) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(GroupName);
        ORBIT_TRACK_PARAM(username);

        auto win32_impl_result = g_api_table.NetGroupAddUser(servername, GroupName, username);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetGroupEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetGroupGetInfo(servername, groupname, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetGroupSetInfo(servername, groupname, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);

        auto win32_impl_result = g_api_table.NetGroupDel(servername, groupname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupDelUser(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR GroupName, win32::Windows::Win32::Foundation::PWSTR Username) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(GroupName);
        ORBIT_TRACK_PARAM(Username);

        auto win32_impl_result = g_api_table.NetGroupDelUser(servername, GroupName, Username);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupGetUsers(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* ResumeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(ResumeHandle);

        auto win32_impl_result = g_api_table.NetGroupGetUsers(servername, groupname, level, bufptr, prefmaxlen, entriesread, totalentries, ResumeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGroupSetUsers(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t* buf, uint32_t totalentries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(totalentries);

        auto win32_impl_result = g_api_table.NetGroupSetUsers(servername, groupname, level, buf, totalentries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetLocalGroupAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupAddMember(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, win32::Windows::Win32::Foundation::PSID membersid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(membersid);

        auto win32_impl_result = g_api_table.NetLocalGroupAddMember(servername, groupname, membersid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resumehandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resumehandle);

        auto win32_impl_result = g_api_table.NetLocalGroupEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetLocalGroupGetInfo(servername, groupname, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetLocalGroupSetInfo(servername, groupname, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);

        auto win32_impl_result = g_api_table.NetLocalGroupDel(servername, groupname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupDelMember(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, win32::Windows::Win32::Foundation::PSID membersid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(membersid);

        auto win32_impl_result = g_api_table.NetLocalGroupDelMember(servername, groupname, membersid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupGetMembers(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR localgroupname, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, size_t* resumehandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(localgroupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resumehandle);

        auto win32_impl_result = g_api_table.NetLocalGroupGetMembers(servername, localgroupname, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupSetMembers(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t* buf, uint32_t totalentries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(totalentries);

        auto win32_impl_result = g_api_table.NetLocalGroupSetMembers(servername, groupname, level, buf, totalentries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupAddMembers(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t* buf, uint32_t totalentries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(totalentries);

        auto win32_impl_result = g_api_table.NetLocalGroupAddMembers(servername, groupname, level, buf, totalentries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetLocalGroupDelMembers(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR groupname, uint32_t level, uint8_t* buf, uint32_t totalentries) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(groupname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(totalentries);

        auto win32_impl_result = g_api_table.NetLocalGroupDelMembers(servername, groupname, level, buf, totalentries);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetQueryDisplayInformation(win32::Windows::Win32::Foundation::PWSTR ServerName, uint32_t Level, uint32_t Index, uint32_t EntriesRequested, uint32_t PreferredMaximumLength, uint32_t* ReturnedEntryCount, void** SortedBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Index);
        ORBIT_TRACK_PARAM(EntriesRequested);
        ORBIT_TRACK_PARAM(PreferredMaximumLength);
        ORBIT_TRACK_PARAM(ReturnedEntryCount);
        ORBIT_TRACK_PARAM(SortedBuffer);

        auto win32_impl_result = g_api_table.NetQueryDisplayInformation(ServerName, Level, Index, EntriesRequested, PreferredMaximumLength, ReturnedEntryCount, SortedBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGetDisplayInformationIndex(win32::Windows::Win32::Foundation::PWSTR ServerName, uint32_t Level, win32::Windows::Win32::Foundation::PWSTR Prefix, uint32_t* Index) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Prefix);
        ORBIT_TRACK_PARAM(Index);

        auto win32_impl_result = g_api_table.NetGetDisplayInformationIndex(ServerName, Level, Prefix, Index);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAccessAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetAccessAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAccessEnum(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR BasePath, uint32_t Recursive, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(BasePath);
        ORBIT_TRACK_PARAM(Recursive);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetAccessEnum(servername, BasePath, Recursive, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAccessGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR resource, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(resource);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetAccessGetInfo(servername, resource, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAccessSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR resource, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(resource);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetAccessSetInfo(servername, resource, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAccessDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR resource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(resource);

        auto win32_impl_result = g_api_table.NetAccessDel(servername, resource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAccessGetUserPerms(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR UGname, win32::Windows::Win32::Foundation::PWSTR resource, uint32_t* Perms) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(UGname);
        ORBIT_TRACK_PARAM(resource);
        ORBIT_TRACK_PARAM(Perms);

        auto win32_impl_result = g_api_table.NetAccessGetUserPerms(servername, UGname, resource, Perms);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetValidatePasswordPolicy(win32::Windows::Win32::Foundation::PWSTR ServerName, void* Qualifier, win32::Windows::Win32::NetworkManagement::NetManagement::NET_VALIDATE_PASSWORD_TYPE ValidationType, void* InputArg, void** OutputArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Qualifier);
        ORBIT_TRACK_PARAM(ValidationType);
        ORBIT_TRACK_PARAM(InputArg);
        ORBIT_TRACK_PARAM(OutputArg);

        auto win32_impl_result = g_api_table.NetValidatePasswordPolicy(ServerName, Qualifier, ValidationType, InputArg, OutputArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetValidatePasswordPolicyFree(void** OutputArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(OutputArg);

        auto win32_impl_result = g_api_table.NetValidatePasswordPolicyFree(OutputArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGetDCName(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR DomainName, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetGetDCName(ServerName, DomainName, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGetAnyDCName(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR DomainName, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetGetAnyDCName(ServerName, DomainName, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_I_NetLogonControl2(win32::Windows::Win32::Foundation::PWSTR ServerName, uint32_t FunctionCode, uint32_t QueryLevel, uint8_t* Data, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(FunctionCode);
        ORBIT_TRACK_PARAM(QueryLevel);
        ORBIT_TRACK_PARAM(Data);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.I_NetLogonControl2(ServerName, FunctionCode, QueryLevel, Data, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NetAddServiceAccount(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR AccountName, win32::Windows::Win32::Foundation::PWSTR Password, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(AccountName);
        ORBIT_TRACK_PARAM(Password);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetAddServiceAccount(ServerName, AccountName, Password, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NetRemoveServiceAccount(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR AccountName, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(AccountName);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetRemoveServiceAccount(ServerName, AccountName, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NetEnumerateServiceAccounts(win32::Windows::Win32::Foundation::PWSTR ServerName, uint32_t Flags, uint32_t* AccountsCount, uint16_t*** Accounts) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(AccountsCount);
        ORBIT_TRACK_PARAM(Accounts);

        auto win32_impl_result = g_api_table.NetEnumerateServiceAccounts(ServerName, Flags, AccountsCount, Accounts);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NetIsServiceAccount(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR AccountName, win32::Windows::Win32::Foundation::BOOL* IsService) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(AccountName);
        ORBIT_TRACK_PARAM(IsService);

        auto win32_impl_result = g_api_table.NetIsServiceAccount(ServerName, AccountName, IsService);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NetQueryServiceAccount(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR AccountName, uint32_t InfoLevel, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(AccountName);
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetQueryServiceAccount(ServerName, AccountName, InfoLevel, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAlertRaise(win32::Windows::Win32::Foundation::PWSTR AlertType, void* Buffer, uint32_t BufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AlertType);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferSize);

        auto win32_impl_result = g_api_table.NetAlertRaise(AlertType, Buffer, BufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAlertRaiseEx(win32::Windows::Win32::Foundation::PWSTR AlertType, void* VariableInfo, uint32_t VariableInfoSize, win32::Windows::Win32::Foundation::PWSTR ServiceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AlertType);
        ORBIT_TRACK_PARAM(VariableInfo);
        ORBIT_TRACK_PARAM(VariableInfoSize);
        ORBIT_TRACK_PARAM(ServiceName);

        auto win32_impl_result = g_api_table.NetAlertRaiseEx(AlertType, VariableInfo, VariableInfoSize, ServiceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetMessageNameAdd(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR msgname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(msgname);

        auto win32_impl_result = g_api_table.NetMessageNameAdd(servername, msgname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetMessageNameEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetMessageNameEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetMessageNameGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR msgname, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(msgname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetMessageNameGetInfo(servername, msgname, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetMessageNameDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR msgname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(msgname);

        auto win32_impl_result = g_api_table.NetMessageNameDel(servername, msgname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetMessageBufferSend(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR msgname, win32::Windows::Win32::Foundation::PWSTR fromname, uint8_t* buf, uint32_t buflen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(msgname);
        ORBIT_TRACK_PARAM(fromname);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(buflen);

        auto win32_impl_result = g_api_table.NetMessageBufferSend(servername, msgname, fromname, buf, buflen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetRemoteTOD(win32::Windows::Win32::Foundation::PWSTR UncServerName, uint8_t** BufferPtr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(BufferPtr);

        auto win32_impl_result = g_api_table.NetRemoteTOD(UncServerName, BufferPtr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetRemoteComputerSupports(win32::Windows::Win32::Foundation::PWSTR UncServerName, win32::Windows::Win32::NetworkManagement::NetManagement::NET_REMOTE_COMPUTER_SUPPORTS_OPTIONS OptionsWanted, uint32_t* OptionsSupported) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(OptionsWanted);
        ORBIT_TRACK_PARAM(OptionsSupported);

        auto win32_impl_result = g_api_table.NetRemoteComputerSupports(UncServerName, OptionsWanted, OptionsSupported);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetReplGetInfo(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetReplSetInfo(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetReplExportDirAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);

        auto win32_impl_result = g_api_table.NetReplExportDirDel(servername, dirname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resumehandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resumehandle);

        auto win32_impl_result = g_api_table.NetReplExportDirEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetReplExportDirGetInfo(servername, dirname, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetReplExportDirSetInfo(servername, dirname, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirLock(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);

        auto win32_impl_result = g_api_table.NetReplExportDirLock(servername, dirname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplExportDirUnlock(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname, uint32_t unlockforce) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);
        ORBIT_TRACK_PARAM(unlockforce);

        auto win32_impl_result = g_api_table.NetReplExportDirUnlock(servername, dirname, unlockforce);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplImportDirAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetReplImportDirAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplImportDirDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);

        auto win32_impl_result = g_api_table.NetReplImportDirDel(servername, dirname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplImportDirEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resumehandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resumehandle);

        auto win32_impl_result = g_api_table.NetReplImportDirEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplImportDirGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetReplImportDirGetInfo(servername, dirname, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplImportDirLock(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);

        auto win32_impl_result = g_api_table.NetReplImportDirLock(servername, dirname);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetReplImportDirUnlock(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR dirname, uint32_t unlockforce) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(dirname);
        ORBIT_TRACK_PARAM(unlockforce);

        auto win32_impl_result = g_api_table.NetReplImportDirUnlock(servername, dirname, unlockforce);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, win32::Windows::Win32::NetworkManagement::NetManagement::NET_SERVER_TYPE servertype, win32::Windows::Win32::Foundation::PWSTR domain, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(servertype);
        ORBIT_TRACK_PARAM(domain);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetServerEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, servertype, domain, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServerGetInfo(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buf, uint32_t* ParmError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(ParmError);

        auto win32_impl_result = g_api_table.NetServerSetInfo(servername, level, buf, ParmError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerDiskEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetServerDiskEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerComputerNameAdd(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR EmulatedDomainName, win32::Windows::Win32::Foundation::PWSTR EmulatedServerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(EmulatedDomainName);
        ORBIT_TRACK_PARAM(EmulatedServerName);

        auto win32_impl_result = g_api_table.NetServerComputerNameAdd(ServerName, EmulatedDomainName, EmulatedServerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerComputerNameDel(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR EmulatedServerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(EmulatedServerName);

        auto win32_impl_result = g_api_table.NetServerComputerNameDel(ServerName, EmulatedServerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerTransportAdd(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServerTransportAdd(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerTransportAddEx(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServerTransportAddEx(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerTransportDel(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServerTransportDel(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServerTransportEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetServerTransportEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServiceControl(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR service, uint32_t opcode, uint32_t arg, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(service);
        ORBIT_TRACK_PARAM(opcode);
        ORBIT_TRACK_PARAM(arg);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServiceControl(servername, service, opcode, arg, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServiceEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetServiceEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServiceGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR service, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(service);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServiceGetInfo(servername, service, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetServiceInstall(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR service, uint32_t argc, win32::Windows::Win32::Foundation::PWSTR* argv, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(service);
        ORBIT_TRACK_PARAM(argc);
        ORBIT_TRACK_PARAM(argv);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetServiceInstall(servername, service, argc, argv, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUseAdd(int8_t* servername, uint32_t LevelFlags, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(LevelFlags);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetUseAdd(servername, LevelFlags, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUseDel(win32::Windows::Win32::Foundation::PWSTR UncServerName, win32::Windows::Win32::Foundation::PWSTR UseName, win32::Windows::Win32::NetworkManagement::NetManagement::FORCE_LEVEL_FLAGS ForceLevelFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(UseName);
        ORBIT_TRACK_PARAM(ForceLevelFlags);

        auto win32_impl_result = g_api_table.NetUseDel(UncServerName, UseName, ForceLevelFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUseEnum(win32::Windows::Win32::Foundation::PWSTR UncServerName, uint32_t LevelFlags, uint8_t** BufPtr, uint32_t PreferedMaximumSize, uint32_t* EntriesRead, uint32_t* TotalEntries, uint32_t* ResumeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(LevelFlags);
        ORBIT_TRACK_PARAM(BufPtr);
        ORBIT_TRACK_PARAM(PreferedMaximumSize);
        ORBIT_TRACK_PARAM(EntriesRead);
        ORBIT_TRACK_PARAM(TotalEntries);
        ORBIT_TRACK_PARAM(ResumeHandle);

        auto win32_impl_result = g_api_table.NetUseEnum(UncServerName, LevelFlags, BufPtr, PreferedMaximumSize, EntriesRead, TotalEntries, ResumeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUseGetInfo(win32::Windows::Win32::Foundation::PWSTR UncServerName, win32::Windows::Win32::Foundation::PWSTR UseName, uint32_t LevelFlags, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(UseName);
        ORBIT_TRACK_PARAM(LevelFlags);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetUseGetInfo(UncServerName, UseName, LevelFlags, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaGetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetWkstaGetInfo(servername, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaSetInfo(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t* buffer, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetWkstaSetInfo(servername, level, buffer, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaUserGetInfo(win32::Windows::Win32::Foundation::PWSTR reserved, uint32_t level, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reserved);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetWkstaUserGetInfo(reserved, level, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaUserSetInfo(win32::Windows::Win32::Foundation::PWSTR reserved, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reserved);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetWkstaUserSetInfo(reserved, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaUserEnum(win32::Windows::Win32::Foundation::PWSTR servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resumehandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resumehandle);

        auto win32_impl_result = g_api_table.NetWkstaUserEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resumehandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaTransportAdd(int8_t* servername, uint32_t level, uint8_t* buf, uint32_t* parm_err) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(parm_err);

        auto win32_impl_result = g_api_table.NetWkstaTransportAdd(servername, level, buf, parm_err);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaTransportDel(win32::Windows::Win32::Foundation::PWSTR servername, win32::Windows::Win32::Foundation::PWSTR transportname, win32::Windows::Win32::NetworkManagement::NetManagement::FORCE_LEVEL_FLAGS ucond) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(transportname);
        ORBIT_TRACK_PARAM(ucond);

        auto win32_impl_result = g_api_table.NetWkstaTransportDel(servername, transportname, ucond);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetWkstaTransportEnum(int8_t* servername, uint32_t level, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* entriesread, uint32_t* totalentries, uint32_t* resume_handle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(servername);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(entriesread);
        ORBIT_TRACK_PARAM(totalentries);
        ORBIT_TRACK_PARAM(resume_handle);

        auto win32_impl_result = g_api_table.NetWkstaTransportEnum(servername, level, bufptr, prefmaxlen, entriesread, totalentries, resume_handle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetApiBufferAllocate(uint32_t ByteCount, void** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ByteCount);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetApiBufferAllocate(ByteCount, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetApiBufferFree(void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetApiBufferFree(Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetApiBufferReallocate(void* OldBuffer, uint32_t NewByteCount, void** NewBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(OldBuffer);
        ORBIT_TRACK_PARAM(NewByteCount);
        ORBIT_TRACK_PARAM(NewBuffer);

        auto win32_impl_result = g_api_table.NetApiBufferReallocate(OldBuffer, NewByteCount, NewBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetApiBufferSize(void* Buffer, uint32_t* ByteCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(ByteCount);

        auto win32_impl_result = g_api_table.NetApiBufferSize(Buffer, ByteCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetErrorLogClear(win32::Windows::Win32::Foundation::PWSTR UncServerName, win32::Windows::Win32::Foundation::PWSTR BackupFile, uint8_t* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(BackupFile);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.NetErrorLogClear(UncServerName, BackupFile, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetErrorLogRead(win32::Windows::Win32::Foundation::PWSTR UncServerName, win32::Windows::Win32::Foundation::PWSTR Reserved1, win32::Windows::Win32::NetworkManagement::NetManagement::HLOG* ErrorLogHandle, uint32_t Offset, uint32_t* Reserved2, uint32_t Reserved3, uint32_t OffsetFlag, uint8_t** BufPtr, uint32_t PrefMaxSize, uint32_t* BytesRead, uint32_t* TotalAvailable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UncServerName);
        ORBIT_TRACK_PARAM(Reserved1);
        ORBIT_TRACK_PARAM(ErrorLogHandle);
        ORBIT_TRACK_PARAM(Offset);
        ORBIT_TRACK_PARAM(Reserved2);
        ORBIT_TRACK_PARAM(Reserved3);
        ORBIT_TRACK_PARAM(OffsetFlag);
        ORBIT_TRACK_PARAM(BufPtr);
        ORBIT_TRACK_PARAM(PrefMaxSize);
        ORBIT_TRACK_PARAM(BytesRead);
        ORBIT_TRACK_PARAM(TotalAvailable);

        auto win32_impl_result = g_api_table.NetErrorLogRead(UncServerName, Reserved1, ErrorLogHandle, Offset, Reserved2, Reserved3, OffsetFlag, BufPtr, PrefMaxSize, BytesRead, TotalAvailable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetErrorLogWrite(uint8_t* Reserved1, uint32_t Code, win32::Windows::Win32::Foundation::PWSTR Component, uint8_t* Buffer, uint32_t NumBytes, uint8_t* MsgBuf, uint32_t StrCount, uint8_t* Reserved2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Reserved1);
        ORBIT_TRACK_PARAM(Code);
        ORBIT_TRACK_PARAM(Component);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(NumBytes);
        ORBIT_TRACK_PARAM(MsgBuf);
        ORBIT_TRACK_PARAM(StrCount);
        ORBIT_TRACK_PARAM(Reserved2);

        auto win32_impl_result = g_api_table.NetErrorLogWrite(Reserved1, Code, Component, Buffer, NumBytes, MsgBuf, StrCount, Reserved2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetConfigGet(win32::Windows::Win32::Foundation::PWSTR server, win32::Windows::Win32::Foundation::PWSTR component, win32::Windows::Win32::Foundation::PWSTR parameter, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(component);
        ORBIT_TRACK_PARAM(parameter);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetConfigGet(server, component, parameter, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetConfigGetAll(win32::Windows::Win32::Foundation::PWSTR server, win32::Windows::Win32::Foundation::PWSTR component, uint8_t** bufptr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(component);
        ORBIT_TRACK_PARAM(bufptr);

        auto win32_impl_result = g_api_table.NetConfigGetAll(server, component, bufptr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetConfigSet(win32::Windows::Win32::Foundation::PWSTR server, win32::Windows::Win32::Foundation::PWSTR reserved1, win32::Windows::Win32::Foundation::PWSTR component, uint32_t level, uint32_t reserved2, uint8_t* buf, uint32_t reserved3) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(reserved1);
        ORBIT_TRACK_PARAM(component);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(reserved2);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(reserved3);

        auto win32_impl_result = g_api_table.NetConfigSet(server, reserved1, component, level, reserved2, buf, reserved3);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAuditClear(win32::Windows::Win32::Foundation::PWSTR server, win32::Windows::Win32::Foundation::PWSTR backupfile, win32::Windows::Win32::Foundation::PWSTR service) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(backupfile);
        ORBIT_TRACK_PARAM(service);

        auto win32_impl_result = g_api_table.NetAuditClear(server, backupfile, service);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAuditRead(win32::Windows::Win32::Foundation::PWSTR server, win32::Windows::Win32::Foundation::PWSTR service, win32::Windows::Win32::NetworkManagement::NetManagement::HLOG* auditloghandle, uint32_t offset, uint32_t* reserved1, uint32_t reserved2, uint32_t offsetflag, uint8_t** bufptr, uint32_t prefmaxlen, uint32_t* bytesread, uint32_t* totalavailable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(service);
        ORBIT_TRACK_PARAM(auditloghandle);
        ORBIT_TRACK_PARAM(offset);
        ORBIT_TRACK_PARAM(reserved1);
        ORBIT_TRACK_PARAM(reserved2);
        ORBIT_TRACK_PARAM(offsetflag);
        ORBIT_TRACK_PARAM(bufptr);
        ORBIT_TRACK_PARAM(prefmaxlen);
        ORBIT_TRACK_PARAM(bytesread);
        ORBIT_TRACK_PARAM(totalavailable);

        auto win32_impl_result = g_api_table.NetAuditRead(server, service, auditloghandle, offset, reserved1, reserved2, offsetflag, bufptr, prefmaxlen, bytesread, totalavailable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAuditWrite(uint32_t type, uint8_t* buf, uint32_t numbytes, win32::Windows::Win32::Foundation::PWSTR service, uint8_t* reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(buf);
        ORBIT_TRACK_PARAM(numbytes);
        ORBIT_TRACK_PARAM(service);
        ORBIT_TRACK_PARAM(reserved);

        auto win32_impl_result = g_api_table.NetAuditWrite(type, buf, numbytes, service, reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetJoinDomain(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Foundation::PWSTR lpDomain, win32::Windows::Win32::Foundation::PWSTR lpMachineAccountOU, win32::Windows::Win32::Foundation::PWSTR lpAccount, win32::Windows::Win32::Foundation::PWSTR lpPassword, win32::Windows::Win32::NetworkManagement::NetManagement::NET_JOIN_DOMAIN_JOIN_OPTIONS fJoinOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(lpDomain);
        ORBIT_TRACK_PARAM(lpMachineAccountOU);
        ORBIT_TRACK_PARAM(lpAccount);
        ORBIT_TRACK_PARAM(lpPassword);
        ORBIT_TRACK_PARAM(fJoinOptions);

        auto win32_impl_result = g_api_table.NetJoinDomain(lpServer, lpDomain, lpMachineAccountOU, lpAccount, lpPassword, fJoinOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetUnjoinDomain(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Foundation::PWSTR lpAccount, win32::Windows::Win32::Foundation::PWSTR lpPassword, uint32_t fUnjoinOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(lpAccount);
        ORBIT_TRACK_PARAM(lpPassword);
        ORBIT_TRACK_PARAM(fUnjoinOptions);

        auto win32_impl_result = g_api_table.NetUnjoinDomain(lpServer, lpAccount, lpPassword, fUnjoinOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetRenameMachineInDomain(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Foundation::PWSTR lpNewMachineName, win32::Windows::Win32::Foundation::PWSTR lpAccount, win32::Windows::Win32::Foundation::PWSTR lpPassword, uint32_t fRenameOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(lpNewMachineName);
        ORBIT_TRACK_PARAM(lpAccount);
        ORBIT_TRACK_PARAM(lpPassword);
        ORBIT_TRACK_PARAM(fRenameOptions);

        auto win32_impl_result = g_api_table.NetRenameMachineInDomain(lpServer, lpNewMachineName, lpAccount, lpPassword, fRenameOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetValidateName(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Foundation::PWSTR lpName, win32::Windows::Win32::Foundation::PWSTR lpAccount, win32::Windows::Win32::Foundation::PWSTR lpPassword, win32::Windows::Win32::NetworkManagement::NetManagement::NETSETUP_NAME_TYPE NameType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(lpAccount);
        ORBIT_TRACK_PARAM(lpPassword);
        ORBIT_TRACK_PARAM(NameType);

        auto win32_impl_result = g_api_table.NetValidateName(lpServer, lpName, lpAccount, lpPassword, NameType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetGetJoinableOUs(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Foundation::PWSTR lpDomain, win32::Windows::Win32::Foundation::PWSTR lpAccount, win32::Windows::Win32::Foundation::PWSTR lpPassword, uint32_t* OUCount, win32::Windows::Win32::Foundation::PWSTR** OUs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(lpDomain);
        ORBIT_TRACK_PARAM(lpAccount);
        ORBIT_TRACK_PARAM(lpPassword);
        ORBIT_TRACK_PARAM(OUCount);
        ORBIT_TRACK_PARAM(OUs);

        auto win32_impl_result = g_api_table.NetGetJoinableOUs(lpServer, lpDomain, lpAccount, lpPassword, OUCount, OUs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetAddAlternateComputerName(win32::Windows::Win32::Foundation::PWSTR Server, win32::Windows::Win32::Foundation::PWSTR AlternateName, win32::Windows::Win32::Foundation::PWSTR DomainAccount, win32::Windows::Win32::Foundation::PWSTR DomainAccountPassword, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Server);
        ORBIT_TRACK_PARAM(AlternateName);
        ORBIT_TRACK_PARAM(DomainAccount);
        ORBIT_TRACK_PARAM(DomainAccountPassword);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.NetAddAlternateComputerName(Server, AlternateName, DomainAccount, DomainAccountPassword, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetRemoveAlternateComputerName(win32::Windows::Win32::Foundation::PWSTR Server, win32::Windows::Win32::Foundation::PWSTR AlternateName, win32::Windows::Win32::Foundation::PWSTR DomainAccount, win32::Windows::Win32::Foundation::PWSTR DomainAccountPassword, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Server);
        ORBIT_TRACK_PARAM(AlternateName);
        ORBIT_TRACK_PARAM(DomainAccount);
        ORBIT_TRACK_PARAM(DomainAccountPassword);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.NetRemoveAlternateComputerName(Server, AlternateName, DomainAccount, DomainAccountPassword, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetSetPrimaryComputerName(win32::Windows::Win32::Foundation::PWSTR Server, win32::Windows::Win32::Foundation::PWSTR PrimaryName, win32::Windows::Win32::Foundation::PWSTR DomainAccount, win32::Windows::Win32::Foundation::PWSTR DomainAccountPassword, uint32_t Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Server);
        ORBIT_TRACK_PARAM(PrimaryName);
        ORBIT_TRACK_PARAM(DomainAccount);
        ORBIT_TRACK_PARAM(DomainAccountPassword);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.NetSetPrimaryComputerName(Server, PrimaryName, DomainAccount, DomainAccountPassword, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetEnumerateComputerNames(win32::Windows::Win32::Foundation::PWSTR Server, win32::Windows::Win32::NetworkManagement::NetManagement::NET_COMPUTER_NAME_TYPE NameType, uint32_t Reserved, uint32_t* EntryCount, win32::Windows::Win32::Foundation::PWSTR** ComputerNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Server);
        ORBIT_TRACK_PARAM(NameType);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(ComputerNames);

        auto win32_impl_result = g_api_table.NetEnumerateComputerNames(Server, NameType, Reserved, EntryCount, ComputerNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetProvisionComputerAccount(win32::Windows::Win32::Foundation::PWSTR lpDomain, win32::Windows::Win32::Foundation::PWSTR lpMachineName, win32::Windows::Win32::Foundation::PWSTR lpMachineAccountOU, win32::Windows::Win32::Foundation::PWSTR lpDcName, win32::Windows::Win32::NetworkManagement::NetManagement::NETSETUP_PROVISION dwOptions, uint8_t** pProvisionBinData, uint32_t* pdwProvisionBinDataSize, win32::Windows::Win32::Foundation::PWSTR* pProvisionTextData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpDomain);
        ORBIT_TRACK_PARAM(lpMachineName);
        ORBIT_TRACK_PARAM(lpMachineAccountOU);
        ORBIT_TRACK_PARAM(lpDcName);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(pProvisionBinData);
        ORBIT_TRACK_PARAM(pdwProvisionBinDataSize);
        ORBIT_TRACK_PARAM(pProvisionTextData);

        auto win32_impl_result = g_api_table.NetProvisionComputerAccount(lpDomain, lpMachineName, lpMachineAccountOU, lpDcName, dwOptions, pProvisionBinData, pdwProvisionBinDataSize, pProvisionTextData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetRequestOfflineDomainJoin(uint8_t* pProvisionBinData, uint32_t cbProvisionBinDataSize, win32::Windows::Win32::NetworkManagement::NetManagement::NET_REQUEST_PROVISION_OPTIONS dwOptions, win32::Windows::Win32::Foundation::PWSTR lpWindowsPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pProvisionBinData);
        ORBIT_TRACK_PARAM(cbProvisionBinDataSize);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(lpWindowsPath);

        auto win32_impl_result = g_api_table.NetRequestOfflineDomainJoin(pProvisionBinData, cbProvisionBinDataSize, dwOptions, lpWindowsPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetCreateProvisioningPackage(win32::Windows::Win32::NetworkManagement::NetManagement::NETSETUP_PROVISIONING_PARAMS* pProvisioningParams, uint8_t** ppPackageBinData, uint32_t* pdwPackageBinDataSize, win32::Windows::Win32::Foundation::PWSTR* ppPackageTextData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pProvisioningParams);
        ORBIT_TRACK_PARAM(ppPackageBinData);
        ORBIT_TRACK_PARAM(pdwPackageBinDataSize);
        ORBIT_TRACK_PARAM(ppPackageTextData);

        auto win32_impl_result = g_api_table.NetCreateProvisioningPackage(pProvisioningParams, ppPackageBinData, pdwPackageBinDataSize, ppPackageTextData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetRequestProvisioningPackageInstall(uint8_t* pPackageBinData, uint32_t dwPackageBinDataSize, win32::Windows::Win32::NetworkManagement::NetManagement::NET_REQUEST_PROVISION_OPTIONS dwProvisionOptions, win32::Windows::Win32::Foundation::PWSTR lpWindowsPath, void* pvReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPackageBinData);
        ORBIT_TRACK_PARAM(dwPackageBinDataSize);
        ORBIT_TRACK_PARAM(dwProvisionOptions);
        ORBIT_TRACK_PARAM(lpWindowsPath);
        ORBIT_TRACK_PARAM(pvReserved);

        auto win32_impl_result = g_api_table.NetRequestProvisioningPackageInstall(pPackageBinData, dwPackageBinDataSize, dwProvisionOptions, lpWindowsPath, pvReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_NetGetAadJoinInformation(win32::Windows::Win32::Foundation::PWSTR pcszTenantId, win32::Windows::Win32::NetworkManagement::NetManagement::DSREG_JOIN_INFO** ppJoinInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pcszTenantId);
        ORBIT_TRACK_PARAM(ppJoinInfo);

        auto win32_impl_result = g_api_table.NetGetAadJoinInformation(pcszTenantId, ppJoinInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_NetFreeAadJoinInformation(win32::Windows::Win32::NetworkManagement::NetManagement::DSREG_JOIN_INFO* pJoinInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pJoinInfo);

        g_api_table.NetFreeAadJoinInformation(pJoinInfo);
        
    }

    uint32_t __stdcall ORBIT_IMPL_NetGetJoinInformation(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Foundation::PWSTR* lpNameBuffer, win32::Windows::Win32::NetworkManagement::NetManagement::NETSETUP_JOIN_STATUS* BufferType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(lpNameBuffer);
        ORBIT_TRACK_PARAM(BufferType);

        auto win32_impl_result = g_api_table.NetGetJoinInformation(lpServer, lpNameBuffer, BufferType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetNetScheduleAccountInformation(win32::Windows::Win32::Foundation::PWSTR pwszServerName, uint32_t ccAccount, win32::Windows::Win32::Foundation::PWSTR wszAccount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszServerName);
        ORBIT_TRACK_PARAM(ccAccount);
        ORBIT_TRACK_PARAM(wszAccount);

        auto win32_impl_result = g_api_table.GetNetScheduleAccountInformation(pwszServerName, ccAccount, wszAccount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetNetScheduleAccountInformation(win32::Windows::Win32::Foundation::PWSTR pwszServerName, win32::Windows::Win32::Foundation::PWSTR pwszAccount, win32::Windows::Win32::Foundation::PWSTR pwszPassword) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszServerName);
        ORBIT_TRACK_PARAM(pwszAccount);
        ORBIT_TRACK_PARAM(pwszPassword);

        auto win32_impl_result = g_api_table.SetNetScheduleAccountInformation(pwszServerName, pwszAccount, pwszPassword);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetScheduleJobAdd(win32::Windows::Win32::Foundation::PWSTR Servername, uint8_t* Buffer, uint32_t* JobId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Servername);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(JobId);

        auto win32_impl_result = g_api_table.NetScheduleJobAdd(Servername, Buffer, JobId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetScheduleJobDel(win32::Windows::Win32::Foundation::PWSTR Servername, uint32_t MinJobId, uint32_t MaxJobId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Servername);
        ORBIT_TRACK_PARAM(MinJobId);
        ORBIT_TRACK_PARAM(MaxJobId);

        auto win32_impl_result = g_api_table.NetScheduleJobDel(Servername, MinJobId, MaxJobId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetScheduleJobEnum(win32::Windows::Win32::Foundation::PWSTR Servername, uint8_t** PointerToBuffer, uint32_t PrefferedMaximumLength, uint32_t* EntriesRead, uint32_t* TotalEntries, uint32_t* ResumeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Servername);
        ORBIT_TRACK_PARAM(PointerToBuffer);
        ORBIT_TRACK_PARAM(PrefferedMaximumLength);
        ORBIT_TRACK_PARAM(EntriesRead);
        ORBIT_TRACK_PARAM(TotalEntries);
        ORBIT_TRACK_PARAM(ResumeHandle);

        auto win32_impl_result = g_api_table.NetScheduleJobEnum(Servername, PointerToBuffer, PrefferedMaximumLength, EntriesRead, TotalEntries, ResumeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetScheduleJobGetInfo(win32::Windows::Win32::Foundation::PWSTR Servername, uint32_t JobId, uint8_t** PointerToBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Servername);
        ORBIT_TRACK_PARAM(JobId);
        ORBIT_TRACK_PARAM(PointerToBuffer);

        auto win32_impl_result = g_api_table.NetScheduleJobGetInfo(Servername, JobId, PointerToBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceRegisterExA(win32::Windows::Win32::Foundation::PSTR lpszCallerName, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszCallerName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.TraceRegisterExA(lpszCallerName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceDeregisterA(uint32_t dwTraceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);

        auto win32_impl_result = g_api_table.TraceDeregisterA(dwTraceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceDeregisterExA(uint32_t dwTraceID, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.TraceDeregisterExA(dwTraceID, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceGetConsoleA(uint32_t dwTraceID, win32::Windows::Win32::Foundation::HANDLE* lphConsole) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(lphConsole);

        auto win32_impl_result = g_api_table.TraceGetConsoleA(dwTraceID, lphConsole);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TracePrintfA(uint32_t dwTraceID, win32::Windows::Win32::Foundation::PSTR lpszFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(lpszFormat);

        auto win32_impl_result = g_api_table.TracePrintfA(dwTraceID, lpszFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TracePrintfExA(uint32_t dwTraceID, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR lpszFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpszFormat);

        auto win32_impl_result = g_api_table.TracePrintfExA(dwTraceID, dwFlags, lpszFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceVprintfExA(uint32_t dwTraceID, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR lpszFormat, int8_t* arglist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpszFormat);
        ORBIT_TRACK_PARAM(arglist);

        auto win32_impl_result = g_api_table.TraceVprintfExA(dwTraceID, dwFlags, lpszFormat, arglist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TracePutsExA(uint32_t dwTraceID, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR lpszString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpszString);

        auto win32_impl_result = g_api_table.TracePutsExA(dwTraceID, dwFlags, lpszString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceDumpExA(uint32_t dwTraceID, uint32_t dwFlags, uint8_t* lpbBytes, uint32_t dwByteCount, uint32_t dwGroupSize, win32::Windows::Win32::Foundation::BOOL bAddressPrefix, win32::Windows::Win32::Foundation::PSTR lpszPrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpbBytes);
        ORBIT_TRACK_PARAM(dwByteCount);
        ORBIT_TRACK_PARAM(dwGroupSize);
        ORBIT_TRACK_PARAM(bAddressPrefix);
        ORBIT_TRACK_PARAM(lpszPrefix);

        auto win32_impl_result = g_api_table.TraceDumpExA(dwTraceID, dwFlags, lpbBytes, dwByteCount, dwGroupSize, bAddressPrefix, lpszPrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceRegisterExW(win32::Windows::Win32::Foundation::PWSTR lpszCallerName, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszCallerName);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.TraceRegisterExW(lpszCallerName, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceDeregisterW(uint32_t dwTraceID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);

        auto win32_impl_result = g_api_table.TraceDeregisterW(dwTraceID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceDeregisterExW(uint32_t dwTraceID, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.TraceDeregisterExW(dwTraceID, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceGetConsoleW(uint32_t dwTraceID, win32::Windows::Win32::Foundation::HANDLE* lphConsole) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(lphConsole);

        auto win32_impl_result = g_api_table.TraceGetConsoleW(dwTraceID, lphConsole);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TracePrintfW(uint32_t dwTraceID, win32::Windows::Win32::Foundation::PWSTR lpszFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(lpszFormat);

        auto win32_impl_result = g_api_table.TracePrintfW(dwTraceID, lpszFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TracePrintfExW(uint32_t dwTraceID, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpszFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpszFormat);

        auto win32_impl_result = g_api_table.TracePrintfExW(dwTraceID, dwFlags, lpszFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceVprintfExW(uint32_t dwTraceID, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpszFormat, int8_t* arglist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpszFormat);
        ORBIT_TRACK_PARAM(arglist);

        auto win32_impl_result = g_api_table.TraceVprintfExW(dwTraceID, dwFlags, lpszFormat, arglist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TracePutsExW(uint32_t dwTraceID, uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR lpszString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpszString);

        auto win32_impl_result = g_api_table.TracePutsExW(dwTraceID, dwFlags, lpszString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TraceDumpExW(uint32_t dwTraceID, uint32_t dwFlags, uint8_t* lpbBytes, uint32_t dwByteCount, uint32_t dwGroupSize, win32::Windows::Win32::Foundation::BOOL bAddressPrefix, win32::Windows::Win32::Foundation::PWSTR lpszPrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTraceID);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpbBytes);
        ORBIT_TRACK_PARAM(dwByteCount);
        ORBIT_TRACK_PARAM(dwGroupSize);
        ORBIT_TRACK_PARAM(bAddressPrefix);
        ORBIT_TRACK_PARAM(lpszPrefix);

        auto win32_impl_result = g_api_table.TraceDumpExW(dwTraceID, dwFlags, lpbBytes, dwByteCount, dwGroupSize, bAddressPrefix, lpszPrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_LogErrorA(uint32_t dwMessageId, uint32_t cNumberOfSubStrings, win32::Windows::Win32::Foundation::PSTR* plpwsSubStrings, uint32_t dwErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(cNumberOfSubStrings);
        ORBIT_TRACK_PARAM(plpwsSubStrings);
        ORBIT_TRACK_PARAM(dwErrorCode);

        g_api_table.LogErrorA(dwMessageId, cNumberOfSubStrings, plpwsSubStrings, dwErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_LogEventA(uint32_t wEventType, uint32_t dwMessageId, uint32_t cNumberOfSubStrings, win32::Windows::Win32::Foundation::PSTR* plpwsSubStrings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(cNumberOfSubStrings);
        ORBIT_TRACK_PARAM(plpwsSubStrings);

        g_api_table.LogEventA(wEventType, dwMessageId, cNumberOfSubStrings, plpwsSubStrings);
        
    }

    void __stdcall ORBIT_IMPL_LogErrorW(uint32_t dwMessageId, uint32_t cNumberOfSubStrings, win32::Windows::Win32::Foundation::PWSTR* plpwsSubStrings, uint32_t dwErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(cNumberOfSubStrings);
        ORBIT_TRACK_PARAM(plpwsSubStrings);
        ORBIT_TRACK_PARAM(dwErrorCode);

        g_api_table.LogErrorW(dwMessageId, cNumberOfSubStrings, plpwsSubStrings, dwErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_LogEventW(uint32_t wEventType, uint32_t dwMessageId, uint32_t cNumberOfSubStrings, win32::Windows::Win32::Foundation::PWSTR* plpwsSubStrings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(cNumberOfSubStrings);
        ORBIT_TRACK_PARAM(plpwsSubStrings);

        g_api_table.LogEventW(wEventType, dwMessageId, cNumberOfSubStrings, plpwsSubStrings);
        
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_RouterLogRegisterA(win32::Windows::Win32::Foundation::PSTR lpszSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszSource);

        auto win32_impl_result = g_api_table.RouterLogRegisterA(lpszSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_RouterLogDeregisterA(win32::Windows::Win32::Foundation::HANDLE hLogHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);

        g_api_table.RouterLogDeregisterA(hLogHandle);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventA(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwMessageId, uint32_t dwSubStringCount, win32::Windows::Win32::Foundation::PSTR* plpszSubStringArray, uint32_t dwErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(dwSubStringCount);
        ORBIT_TRACK_PARAM(plpszSubStringArray);
        ORBIT_TRACK_PARAM(dwErrorCode);

        g_api_table.RouterLogEventA(hLogHandle, dwEventType, dwMessageId, dwSubStringCount, plpszSubStringArray, dwErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventDataA(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwMessageId, uint32_t dwSubStringCount, win32::Windows::Win32::Foundation::PSTR* plpszSubStringArray, uint32_t dwDataBytes, uint8_t* lpDataBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(dwSubStringCount);
        ORBIT_TRACK_PARAM(plpszSubStringArray);
        ORBIT_TRACK_PARAM(dwDataBytes);
        ORBIT_TRACK_PARAM(lpDataBytes);

        g_api_table.RouterLogEventDataA(hLogHandle, dwEventType, dwMessageId, dwSubStringCount, plpszSubStringArray, dwDataBytes, lpDataBytes);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventStringA(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwMessageId, uint32_t dwSubStringCount, win32::Windows::Win32::Foundation::PSTR* plpszSubStringArray, uint32_t dwErrorCode, uint32_t dwErrorIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(dwSubStringCount);
        ORBIT_TRACK_PARAM(plpszSubStringArray);
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(dwErrorIndex);

        g_api_table.RouterLogEventStringA(hLogHandle, dwEventType, dwMessageId, dwSubStringCount, plpszSubStringArray, dwErrorCode, dwErrorIndex);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventExA(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwErrorCode, uint32_t dwMessageId, win32::Windows::Win32::Foundation::PSTR ptszFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(ptszFormat);

        g_api_table.RouterLogEventExA(hLogHandle, dwEventType, dwErrorCode, dwMessageId, ptszFormat);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventValistExA(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwErrorCode, uint32_t dwMessageId, win32::Windows::Win32::Foundation::PSTR ptszFormat, int8_t* arglist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(ptszFormat);
        ORBIT_TRACK_PARAM(arglist);

        g_api_table.RouterLogEventValistExA(hLogHandle, dwEventType, dwErrorCode, dwMessageId, ptszFormat, arglist);
        
    }

    uint32_t __stdcall ORBIT_IMPL_RouterGetErrorStringA(uint32_t dwErrorCode, win32::Windows::Win32::Foundation::PSTR* lplpszErrorString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(lplpszErrorString);

        auto win32_impl_result = g_api_table.RouterGetErrorStringA(dwErrorCode, lplpszErrorString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_RouterLogRegisterW(win32::Windows::Win32::Foundation::PWSTR lpszSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszSource);

        auto win32_impl_result = g_api_table.RouterLogRegisterW(lpszSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_RouterLogDeregisterW(win32::Windows::Win32::Foundation::HANDLE hLogHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);

        g_api_table.RouterLogDeregisterW(hLogHandle);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventW(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwMessageId, uint32_t dwSubStringCount, win32::Windows::Win32::Foundation::PWSTR* plpszSubStringArray, uint32_t dwErrorCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(dwSubStringCount);
        ORBIT_TRACK_PARAM(plpszSubStringArray);
        ORBIT_TRACK_PARAM(dwErrorCode);

        g_api_table.RouterLogEventW(hLogHandle, dwEventType, dwMessageId, dwSubStringCount, plpszSubStringArray, dwErrorCode);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventDataW(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwMessageId, uint32_t dwSubStringCount, win32::Windows::Win32::Foundation::PWSTR* plpszSubStringArray, uint32_t dwDataBytes, uint8_t* lpDataBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(dwSubStringCount);
        ORBIT_TRACK_PARAM(plpszSubStringArray);
        ORBIT_TRACK_PARAM(dwDataBytes);
        ORBIT_TRACK_PARAM(lpDataBytes);

        g_api_table.RouterLogEventDataW(hLogHandle, dwEventType, dwMessageId, dwSubStringCount, plpszSubStringArray, dwDataBytes, lpDataBytes);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventStringW(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwMessageId, uint32_t dwSubStringCount, win32::Windows::Win32::Foundation::PWSTR* plpszSubStringArray, uint32_t dwErrorCode, uint32_t dwErrorIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(dwSubStringCount);
        ORBIT_TRACK_PARAM(plpszSubStringArray);
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(dwErrorIndex);

        g_api_table.RouterLogEventStringW(hLogHandle, dwEventType, dwMessageId, dwSubStringCount, plpszSubStringArray, dwErrorCode, dwErrorIndex);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventExW(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwErrorCode, uint32_t dwMessageId, win32::Windows::Win32::Foundation::PWSTR ptszFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(ptszFormat);

        g_api_table.RouterLogEventExW(hLogHandle, dwEventType, dwErrorCode, dwMessageId, ptszFormat);
        
    }

    void __stdcall ORBIT_IMPL_RouterLogEventValistExW(win32::Windows::Win32::Foundation::HANDLE hLogHandle, uint32_t dwEventType, uint32_t dwErrorCode, uint32_t dwMessageId, win32::Windows::Win32::Foundation::PWSTR ptszFormat, int8_t* arglist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hLogHandle);
        ORBIT_TRACK_PARAM(dwEventType);
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(dwMessageId);
        ORBIT_TRACK_PARAM(ptszFormat);
        ORBIT_TRACK_PARAM(arglist);

        g_api_table.RouterLogEventValistExW(hLogHandle, dwEventType, dwErrorCode, dwMessageId, ptszFormat, arglist);
        
    }

    uint32_t __stdcall ORBIT_IMPL_RouterGetErrorStringW(uint32_t dwErrorCode, win32::Windows::Win32::Foundation::PWSTR* lplpwszErrorString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwErrorCode);
        ORBIT_TRACK_PARAM(lplpwszErrorString);

        auto win32_impl_result = g_api_table.RouterGetErrorStringW(dwErrorCode, lplpwszErrorString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_RouterAssert(win32::Windows::Win32::Foundation::PSTR pszFailedAssertion, win32::Windows::Win32::Foundation::PSTR pszFileName, uint32_t dwLineNumber, win32::Windows::Win32::Foundation::PSTR pszMessage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszFailedAssertion);
        ORBIT_TRACK_PARAM(pszFileName);
        ORBIT_TRACK_PARAM(dwLineNumber);
        ORBIT_TRACK_PARAM(pszMessage);

        g_api_table.RouterAssert(pszFailedAssertion, pszFileName, dwLineNumber, pszMessage);
        
    }

    uint32_t __stdcall ORBIT_IMPL_MprSetupProtocolEnum(uint32_t dwTransportId, uint8_t** lplpBuffer, uint32_t* lpdwEntriesRead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTransportId);
        ORBIT_TRACK_PARAM(lplpBuffer);
        ORBIT_TRACK_PARAM(lpdwEntriesRead);

        auto win32_impl_result = g_api_table.MprSetupProtocolEnum(dwTransportId, lplpBuffer, lpdwEntriesRead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MprSetupProtocolFree(void* lpBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBuffer);

        auto win32_impl_result = g_api_table.MprSetupProtocolFree(lpBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
