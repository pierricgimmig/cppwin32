// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_FileHistory_2_H
#define WIN32_Windows_Win32_Storage_FileHistory_2_H
#include "win32/Windows.Win32.Storage.FileHistory.h"
#include "win32/impl/Windows.Win32.Storage.FileHistory.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::FileHistory
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceOpenPipe(win32::Windows::Win32::Foundation::BOOL StartServiceIfStopped, win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE* Pipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StartServiceIfStopped);
        ORBIT_TRACK_PARAM(Pipe);

        auto win32_impl_result = g_api_table.FhServiceOpenPipe(StartServiceIfStopped, Pipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceClosePipe(win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE Pipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);

        auto win32_impl_result = g_api_table.FhServiceClosePipe(Pipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceStartBackup(win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE Pipe, win32::Windows::Win32::Foundation::BOOL LowPriorityIo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(LowPriorityIo);

        auto win32_impl_result = g_api_table.FhServiceStartBackup(Pipe, LowPriorityIo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceStopBackup(win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE Pipe, win32::Windows::Win32::Foundation::BOOL StopTracking) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);
        ORBIT_TRACK_PARAM(StopTracking);

        auto win32_impl_result = g_api_table.FhServiceStopBackup(Pipe, StopTracking);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceReloadConfiguration(win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE Pipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);

        auto win32_impl_result = g_api_table.FhServiceReloadConfiguration(Pipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceBlockBackup(win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE Pipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);

        auto win32_impl_result = g_api_table.FhServiceBlockBackup(Pipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_FhServiceUnblockBackup(win32::Windows::Win32::System::WindowsProgramming::FH_SERVICE_PIPE_HANDLE Pipe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Pipe);

        auto win32_impl_result = g_api_table.FhServiceUnblockBackup(Pipe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
