// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_ErrorReporting_0_H
#define WIN32_Windows_Win32_System_ErrorReporting_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HRESULT;
    struct PSTR;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Diagnostics::Debug
{
    struct EXCEPTION_POINTERS;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::ErrorReporting
{
#pragma region enums
    enum class EFaultRepRetVal : int32_t
    {
        frrvOk = 0,
        frrvOkManifest = 1,
        frrvOkQueued = 2,
        frrvErr = 3,
        frrvErrNoDW = 4,
        frrvErrTimeout = 5,
        frrvLaunchDebugger = 6,
        frrvOkHeadless = 7,
        frrvErrAnotherInstance = 8,
        frrvErrNoMemory = 9,
        frrvErrDoubleFault = 10,
    };
    enum class REPORT_STORE_TYPES : int32_t
    {
        E_STORE_USER_ARCHIVE = 0,
        E_STORE_USER_QUEUE = 1,
        E_STORE_MACHINE_ARCHIVE = 2,
        E_STORE_MACHINE_QUEUE = 3,
        E_STORE_INVALID = 4,
    };
    enum class WER_CONSENT : int32_t
    {
        WerConsentNotAsked = 1,
        WerConsentApproved = 2,
        WerConsentDenied = 3,
        WerConsentAlwaysPrompt = 4,
        WerConsentMax = 5,
    };
    enum class WER_DUMP_TYPE : int32_t
    {
        WerDumpTypeNone = 0,
        WerDumpTypeMicroDump = 1,
        WerDumpTypeMiniDump = 2,
        WerDumpTypeHeapDump = 3,
        WerDumpTypeTriageDump = 4,
        WerDumpTypeMax = 5,
    };
    enum class WER_FAULT_REPORTING : uint32_t
    {
        WER_FAULT_REPORTING_FLAG_DISABLE_THREAD_SUSPENSION = 0x4,
        WER_FAULT_REPORTING_FLAG_NOHEAP = 0x1,
        WER_FAULT_REPORTING_FLAG_QUEUE = 0x2,
        WER_FAULT_REPORTING_FLAG_QUEUE_UPLOAD = 0x8,
        WER_FAULT_REPORTING_ALWAYS_SHOW_UI = 0x10,
    };
    enum class WER_FILE : uint32_t
    {
        WER_FILE_ANONYMOUS_DATA = 0x2,
        WER_FILE_DELETE_WHEN_DONE = 0x1,
    };
    enum class WER_FILE_TYPE : int32_t
    {
        WerFileTypeMicrodump = 1,
        WerFileTypeMinidump = 2,
        WerFileTypeHeapdump = 3,
        WerFileTypeUserDocument = 4,
        WerFileTypeOther = 5,
        WerFileTypeTriagedump = 6,
        WerFileTypeCustomDump = 7,
        WerFileTypeAuxiliaryDump = 8,
        WerFileTypeEtlTrace = 9,
        WerFileTypeMax = 10,
    };
    enum class WER_REGISTER_FILE_TYPE : int32_t
    {
        WerRegFileTypeUserDocument = 1,
        WerRegFileTypeOther = 2,
        WerRegFileTypeMax = 3,
    };
    enum class WER_REPORT_TYPE : int32_t
    {
        WerReportNonCritical = 0,
        WerReportCritical = 1,
        WerReportApplicationCrash = 2,
        WerReportApplicationHang = 3,
        WerReportKernel = 4,
        WerReportInvalid = 5,
    };
    enum class WER_REPORT_UI : int32_t
    {
        WerUIAdditionalDataDlgHeader = 1,
        WerUIIconFilePath = 2,
        WerUIConsentDlgHeader = 3,
        WerUIConsentDlgBody = 4,
        WerUIOnlineSolutionCheckText = 5,
        WerUIOfflineSolutionCheckText = 6,
        WerUICloseText = 7,
        WerUICloseDlgHeader = 8,
        WerUICloseDlgBody = 9,
        WerUICloseDlgButtonText = 10,
        WerUIMax = 11,
    };
    enum class WER_SUBMIT_FLAGS : uint32_t
    {
        WER_SUBMIT_ADD_REGISTERED_DATA = 0x10,
        WER_SUBMIT_HONOR_RECOVERY = 0x1,
        WER_SUBMIT_HONOR_RESTART = 0x2,
        WER_SUBMIT_NO_ARCHIVE = 0x100,
        WER_SUBMIT_NO_CLOSE_UI = 0x40,
        WER_SUBMIT_NO_QUEUE = 0x80,
        WER_SUBMIT_OUTOFPROCESS = 0x20,
        WER_SUBMIT_OUTOFPROCESS_ASYNC = 0x400,
        WER_SUBMIT_QUEUE = 0x4,
        WER_SUBMIT_SHOW_DEBUG = 0x8,
        WER_SUBMIT_START_MINIMIZED = 0x200,
        WER_SUBMIT_BYPASS_DATA_THROTTLING = 0x800,
        WER_SUBMIT_ARCHIVE_PARAMETERS_ONLY = 0x1000,
        WER_SUBMIT_REPORT_MACHINE_ID = 0x2000,
    };
    enum class WER_SUBMIT_RESULT : int32_t
    {
        WerReportQueued = 1,
        WerReportUploaded = 2,
        WerReportDebug = 3,
        WerReportFailed = 4,
        WerDisabled = 5,
        WerReportCancelled = 6,
        WerDisabledQueue = 7,
        WerReportAsync = 8,
        WerCustomAction = 9,
        WerThrottled = 10,
        WerReportUploadedCab = 11,
        WerStorageLocationNotFound = 12,
        WerSubmitResultMax = 13,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct HREPORT;
    struct HREPORTSTORE;
    struct WER_DUMP_CUSTOM_OPTIONS;
    struct WER_DUMP_CUSTOM_OPTIONS_V2;
    struct WER_DUMP_CUSTOM_OPTIONS_V3;
    struct WER_EXCEPTION_INFORMATION;
    struct WER_REPORT_INFORMATION;
    struct WER_REPORT_INFORMATION_V3;
    struct WER_REPORT_INFORMATION_V4;
    struct WER_REPORT_INFORMATION_V5;
    struct WER_REPORT_METADATA_V1;
    struct WER_REPORT_METADATA_V2;
    struct WER_REPORT_METADATA_V3;
    struct WER_REPORT_PARAMETER;
    struct WER_REPORT_SIGNATURE;
    struct WER_RUNTIME_EXCEPTION_INFORMATION;
#pragma endregion forward_declarations

#pragma region delegates
    using PFN_WER_RUNTIME_EXCEPTION_EVENT = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::ErrorReporting::WER_RUNTIME_EXCEPTION_INFORMATION*, Windows::Win32::Foundation::BOOL*, Windows::Win32::Foundation::PWSTR, uint32_t*, uint32_t*);
    using PFN_WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::ErrorReporting::WER_RUNTIME_EXCEPTION_INFORMATION*, uint32_t, Windows::Win32::Foundation::PWSTR, uint32_t*, Windows::Win32::Foundation::PWSTR, uint32_t*);
    using PFN_WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH = Windows::Win32::Foundation::HRESULT __stdcall(void*, Windows::Win32::System::ErrorReporting::WER_RUNTIME_EXCEPTION_INFORMATION*, Windows::Win32::Foundation::BOOL*, Windows::Win32::Foundation::PWSTR, uint32_t*, Windows::Win32::Foundation::BOOL*);
    using pfn_REPORTFAULT = Windows::Win32::System::ErrorReporting::EFaultRepRetVal __stdcall(Windows::Win32::System::Diagnostics::Debug::EXCEPTION_POINTERS*, uint32_t);
    using pfn_ADDEREXCLUDEDAPPLICATIONA = Windows::Win32::System::ErrorReporting::EFaultRepRetVal __stdcall(Windows::Win32::Foundation::PSTR);
    using pfn_ADDEREXCLUDEDAPPLICATIONW = Windows::Win32::System::ErrorReporting::EFaultRepRetVal __stdcall(Windows::Win32::Foundation::PWSTR);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
