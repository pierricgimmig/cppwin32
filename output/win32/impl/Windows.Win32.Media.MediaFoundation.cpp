// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Media_MediaFoundation_2_H
#define WIN32_Windows_Win32_Media_MediaFoundation_2_H
#include "win32/Windows.Win32.Media.MediaFoundation.h"
#include "win32/impl/Windows.Win32.Media.MediaFoundation.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Media::MediaFoundation
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DXVAHD_CreateDevice(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9Ex* pD3DDevice, win32::Windows::Win32::Media::MediaFoundation::DXVAHD_CONTENT_DESC* pContentDesc, win32::Windows::Win32::Media::MediaFoundation::DXVAHD_DEVICE_USAGE Usage, win32::Windows::Win32::Media::MediaFoundation::PDXVAHDSW_Plugin* pPlugin, win32::Windows::Win32::Media::MediaFoundation::IDXVAHD_Device** ppDevice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pD3DDevice);
        ORBIT_TRACK_PARAM(pContentDesc);
        ORBIT_TRACK_PARAM(Usage);
        ORBIT_TRACK_PARAM(pPlugin);
        ORBIT_TRACK_PARAM(ppDevice);

        auto win32_impl_result = g_api_table.DXVAHD_CreateDevice(pD3DDevice, pContentDesc, Usage, pPlugin, ppDevice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DXVA2CreateDirect3DDeviceManager9(uint32_t* pResetToken, win32::Windows::Win32::Media::MediaFoundation::IDirect3DDeviceManager9** ppDeviceManager) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResetToken);
        ORBIT_TRACK_PARAM(ppDeviceManager);

        auto win32_impl_result = g_api_table.DXVA2CreateDirect3DDeviceManager9(pResetToken, ppDeviceManager);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DXVA2CreateVideoService(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDD, ::win32::guid* riid, void** ppService) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDD);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppService);

        auto win32_impl_result = g_api_table.DXVA2CreateVideoService(pDD, riid, ppService);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_OPMGetVideoOutputsFromHMONITOR(win32::Windows::Win32::Graphics::Gdi::HMONITOR hMonitor, win32::Windows::Win32::Media::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS vos, uint32_t* pulNumVideoOutputs, win32::Windows::Win32::Media::MediaFoundation::IOPMVideoOutput*** pppOPMVideoOutputArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMonitor);
        ORBIT_TRACK_PARAM(vos);
        ORBIT_TRACK_PARAM(pulNumVideoOutputs);
        ORBIT_TRACK_PARAM(pppOPMVideoOutputArray);

        auto win32_impl_result = g_api_table.OPMGetVideoOutputsFromHMONITOR(hMonitor, vos, pulNumVideoOutputs, pppOPMVideoOutputArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_OPMGetVideoOutputForTarget(win32::Windows::Win32::Foundation::LUID* pAdapterLuid, uint32_t VidPnTarget, win32::Windows::Win32::Media::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS vos, win32::Windows::Win32::Media::MediaFoundation::IOPMVideoOutput** ppOPMVideoOutput) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAdapterLuid);
        ORBIT_TRACK_PARAM(VidPnTarget);
        ORBIT_TRACK_PARAM(vos);
        ORBIT_TRACK_PARAM(ppOPMVideoOutput);

        auto win32_impl_result = g_api_table.OPMGetVideoOutputForTarget(pAdapterLuid, VidPnTarget, vos, ppOPMVideoOutput);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_OPMGetVideoOutputsFromIDirect3DDevice9Object(win32::Windows::Win32::Graphics::Direct3D9::IDirect3DDevice9* pDirect3DDevice9, win32::Windows::Win32::Media::MediaFoundation::OPM_VIDEO_OUTPUT_SEMANTICS vos, uint32_t* pulNumVideoOutputs, win32::Windows::Win32::Media::MediaFoundation::IOPMVideoOutput*** pppOPMVideoOutputArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDirect3DDevice9);
        ORBIT_TRACK_PARAM(vos);
        ORBIT_TRACK_PARAM(pulNumVideoOutputs);
        ORBIT_TRACK_PARAM(pppOPMVideoOutputArray);

        auto win32_impl_result = g_api_table.OPMGetVideoOutputsFromIDirect3DDevice9Object(pDirect3DDevice9, vos, pulNumVideoOutputs, pppOPMVideoOutputArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFSerializeAttributesToStream(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttr, uint32_t dwOptions, win32::Windows::Win32::System::Com::IStream* pStm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttr);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(pStm);

        auto win32_impl_result = g_api_table.MFSerializeAttributesToStream(pAttr, dwOptions, pStm);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFDeserializeAttributesFromStream(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttr, uint32_t dwOptions, win32::Windows::Win32::System::Com::IStream* pStm) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttr);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(pStm);

        auto win32_impl_result = g_api_table.MFDeserializeAttributesFromStream(pAttr, dwOptions, pStm);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTransformActivate(win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateTransformActivate(ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaSession(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pConfiguration, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSession** ppMediaSession) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConfiguration);
        ORBIT_TRACK_PARAM(ppMediaSession);

        auto win32_impl_result = g_api_table.MFCreateMediaSession(pConfiguration, ppMediaSession);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreatePMPMediaSession(uint32_t dwCreationFlags, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pConfiguration, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSession** ppMediaSession, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppEnablerActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(pConfiguration);
        ORBIT_TRACK_PARAM(ppMediaSession);
        ORBIT_TRACK_PARAM(ppEnablerActivate);

        auto win32_impl_result = g_api_table.MFCreatePMPMediaSession(dwCreationFlags, pConfiguration, ppMediaSession, ppEnablerActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSourceResolver(win32::Windows::Win32::Media::MediaFoundation::IMFSourceResolver** ppISourceResolver) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppISourceResolver);

        auto win32_impl_result = g_api_table.MFCreateSourceResolver(ppISourceResolver);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreatePropertyStore(win32::Windows::Win32::System::PropertiesSystem::IPropertyStore** ppStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppStore);

        auto win32_impl_result = g_api_table.CreatePropertyStore(ppStore);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetSupportedSchemes(win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pPropVarSchemeArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropVarSchemeArray);

        auto win32_impl_result = g_api_table.MFGetSupportedSchemes(pPropVarSchemeArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetSupportedMimeTypes(win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pPropVarMimeTypeArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropVarMimeTypeArray);

        auto win32_impl_result = g_api_table.MFGetSupportedMimeTypes(pPropVarMimeTypeArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTopology(win32::Windows::Win32::Media::MediaFoundation::IMFTopology** ppTopo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppTopo);

        auto win32_impl_result = g_api_table.MFCreateTopology(ppTopo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTopologyNode(win32::Windows::Win32::Media::MediaFoundation::MF_TOPOLOGY_TYPE NodeType, win32::Windows::Win32::Media::MediaFoundation::IMFTopologyNode** ppNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NodeType);
        ORBIT_TRACK_PARAM(ppNode);

        auto win32_impl_result = g_api_table.MFCreateTopologyNode(NodeType, ppNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetTopoNodeCurrentType(win32::Windows::Win32::Media::MediaFoundation::IMFTopologyNode* pNode, uint32_t dwStreamIndex, win32::Windows::Win32::Foundation::BOOL fOutput, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pNode);
        ORBIT_TRACK_PARAM(dwStreamIndex);
        ORBIT_TRACK_PARAM(fOutput);
        ORBIT_TRACK_PARAM(ppType);

        auto win32_impl_result = g_api_table.MFGetTopoNodeCurrentType(pNode, dwStreamIndex, fOutput, ppType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetService(win32::Windows::Win32::System::Com::IUnknown* punkObject, ::win32::guid* guidService, ::win32::guid* riid, void** ppvObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(punkObject);
        ORBIT_TRACK_PARAM(guidService);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppvObject);

        auto win32_impl_result = g_api_table.MFGetService(punkObject, guidService, riid, ppvObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int64_t __stdcall ORBIT_IMPL_MFGetSystemTime() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.MFGetSystemTime();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreatePresentationClock(win32::Windows::Win32::Media::MediaFoundation::IMFPresentationClock** ppPresentationClock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppPresentationClock);

        auto win32_impl_result = g_api_table.MFCreatePresentationClock(ppPresentationClock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSystemTimeSource(win32::Windows::Win32::Media::MediaFoundation::IMFPresentationTimeSource** ppSystemTimeSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppSystemTimeSource);

        auto win32_impl_result = g_api_table.MFCreateSystemTimeSource(ppSystemTimeSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreatePresentationDescriptor(uint32_t cStreamDescriptors, win32::Windows::Win32::Media::MediaFoundation::IMFStreamDescriptor** apStreamDescriptors, win32::Windows::Win32::Media::MediaFoundation::IMFPresentationDescriptor** ppPresentationDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cStreamDescriptors);
        ORBIT_TRACK_PARAM(apStreamDescriptors);
        ORBIT_TRACK_PARAM(ppPresentationDescriptor);

        auto win32_impl_result = g_api_table.MFCreatePresentationDescriptor(cStreamDescriptors, apStreamDescriptors, ppPresentationDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFRequireProtectedEnvironment(win32::Windows::Win32::Media::MediaFoundation::IMFPresentationDescriptor* pPresentationDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPresentationDescriptor);

        auto win32_impl_result = g_api_table.MFRequireProtectedEnvironment(pPresentationDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFSerializePresentationDescriptor(win32::Windows::Win32::Media::MediaFoundation::IMFPresentationDescriptor* pPD, uint32_t* pcbData, uint8_t** ppbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPD);
        ORBIT_TRACK_PARAM(pcbData);
        ORBIT_TRACK_PARAM(ppbData);

        auto win32_impl_result = g_api_table.MFSerializePresentationDescriptor(pPD, pcbData, ppbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFDeserializePresentationDescriptor(uint32_t cbData, uint8_t* pbData, win32::Windows::Win32::Media::MediaFoundation::IMFPresentationDescriptor** ppPD) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(pbData);
        ORBIT_TRACK_PARAM(ppPD);

        auto win32_impl_result = g_api_table.MFDeserializePresentationDescriptor(cbData, pbData, ppPD);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateStreamDescriptor(uint32_t dwStreamIdentifier, uint32_t cMediaTypes, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** apMediaTypes, win32::Windows::Win32::Media::MediaFoundation::IMFStreamDescriptor** ppDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwStreamIdentifier);
        ORBIT_TRACK_PARAM(cMediaTypes);
        ORBIT_TRACK_PARAM(apMediaTypes);
        ORBIT_TRACK_PARAM(ppDescriptor);

        auto win32_impl_result = g_api_table.MFCreateStreamDescriptor(dwStreamIdentifier, cMediaTypes, apMediaTypes, ppDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSimpleTypeHandler(win32::Windows::Win32::Media::MediaFoundation::IMFMediaTypeHandler** ppHandler) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppHandler);

        auto win32_impl_result = g_api_table.MFCreateSimpleTypeHandler(ppHandler);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFShutdownObject(win32::Windows::Win32::System::Com::IUnknown* pUnk) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pUnk);

        auto win32_impl_result = g_api_table.MFShutdownObject(pUnk);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAudioRenderer(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAudioAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAudioAttributes);
        ORBIT_TRACK_PARAM(ppSink);

        auto win32_impl_result = g_api_table.MFCreateAudioRenderer(pAudioAttributes, ppSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAudioRendererActivate(win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateAudioRendererActivate(ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoRendererActivate(win32::Windows::Win32::Foundation::HWND hwndVideo, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hwndVideo);
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateVideoRendererActivate(hwndVideo, ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMPEG4MediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pVideoMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppIMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIByteStream);
        ORBIT_TRACK_PARAM(pVideoMediaType);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppIMediaSink);

        auto win32_impl_result = g_api_table.MFCreateMPEG4MediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreate3GPMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pVideoMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppIMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIByteStream);
        ORBIT_TRACK_PARAM(pVideoMediaType);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppIMediaSink);

        auto win32_impl_result = g_api_table.MFCreate3GPMediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMP3MediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pTargetByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTargetByteStream);
        ORBIT_TRACK_PARAM(ppMediaSink);

        auto win32_impl_result = g_api_table.MFCreateMP3MediaSink(pTargetByteStream, ppMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAC3MediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pTargetByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTargetByteStream);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppMediaSink);

        auto win32_impl_result = g_api_table.MFCreateAC3MediaSink(pTargetByteStream, pAudioMediaType, ppMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateADTSMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pTargetByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTargetByteStream);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppMediaSink);

        auto win32_impl_result = g_api_table.MFCreateADTSMediaSink(pTargetByteStream, pAudioMediaType, ppMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMuxSink(::win32::guid guidOutputSubType, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pOutputAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pOutputByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppMuxSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidOutputSubType);
        ORBIT_TRACK_PARAM(pOutputAttributes);
        ORBIT_TRACK_PARAM(pOutputByteStream);
        ORBIT_TRACK_PARAM(ppMuxSink);

        auto win32_impl_result = g_api_table.MFCreateMuxSink(guidOutputSubType, pOutputAttributes, pOutputByteStream, ppMuxSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateFMPEG4MediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pVideoMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppIMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIByteStream);
        ORBIT_TRACK_PARAM(pVideoMediaType);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppIMediaSink);

        auto win32_impl_result = g_api_table.MFCreateFMPEG4MediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAVIMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pVideoMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppIMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIByteStream);
        ORBIT_TRACK_PARAM(pVideoMediaType);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppIMediaSink);

        auto win32_impl_result = g_api_table.MFCreateAVIMediaSink(pIByteStream, pVideoMediaType, pAudioMediaType, ppIMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateWAVEMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pTargetByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pAudioMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pTargetByteStream);
        ORBIT_TRACK_PARAM(pAudioMediaType);
        ORBIT_TRACK_PARAM(ppMediaSink);

        auto win32_impl_result = g_api_table.MFCreateWAVEMediaSink(pTargetByteStream, pAudioMediaType, ppMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTopoLoader(win32::Windows::Win32::Media::MediaFoundation::IMFTopoLoader** ppObj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppObj);

        auto win32_impl_result = g_api_table.MFCreateTopoLoader(ppObj);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSampleGrabberSinkActivate(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pIMFMediaType, win32::Windows::Win32::Media::MediaFoundation::IMFSampleGrabberSinkCallback* pIMFSampleGrabberSinkCallback, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppIActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIMFMediaType);
        ORBIT_TRACK_PARAM(pIMFSampleGrabberSinkCallback);
        ORBIT_TRACK_PARAM(ppIActivate);

        auto win32_impl_result = g_api_table.MFCreateSampleGrabberSinkActivate(pIMFMediaType, pIMFSampleGrabberSinkCallback, ppIActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateStandardQualityManager(win32::Windows::Win32::Media::MediaFoundation::IMFQualityManager** ppQualityManager) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppQualityManager);

        auto win32_impl_result = g_api_table.MFCreateStandardQualityManager(ppQualityManager);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSequencerSource(win32::Windows::Win32::System::Com::IUnknown* pReserved, win32::Windows::Win32::Media::MediaFoundation::IMFSequencerSource** ppSequencerSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pReserved);
        ORBIT_TRACK_PARAM(ppSequencerSource);

        auto win32_impl_result = g_api_table.MFCreateSequencerSource(pReserved, ppSequencerSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSequencerSegmentOffset(uint32_t dwId, int64_t hnsOffset, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pvarSegmentOffset) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwId);
        ORBIT_TRACK_PARAM(hnsOffset);
        ORBIT_TRACK_PARAM(pvarSegmentOffset);

        auto win32_impl_result = g_api_table.MFCreateSequencerSegmentOffset(dwId, hnsOffset, pvarSegmentOffset);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAggregateSource(win32::Windows::Win32::Media::MediaFoundation::IMFCollection* pSourceCollection, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSource** ppAggSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSourceCollection);
        ORBIT_TRACK_PARAM(ppAggSource);

        auto win32_impl_result = g_api_table.MFCreateAggregateSource(pSourceCollection, ppAggSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateCredentialCache(win32::Windows::Win32::Media::MediaFoundation::IMFNetCredentialCache** ppCache) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppCache);

        auto win32_impl_result = g_api_table.MFCreateCredentialCache(ppCache);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateProxyLocator(win32::Windows::Win32::Foundation::PWSTR pszProtocol, win32::Windows::Win32::System::PropertiesSystem::IPropertyStore* pProxyConfig, win32::Windows::Win32::Media::MediaFoundation::IMFNetProxyLocator** ppProxyLocator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszProtocol);
        ORBIT_TRACK_PARAM(pProxyConfig);
        ORBIT_TRACK_PARAM(ppProxyLocator);

        auto win32_impl_result = g_api_table.MFCreateProxyLocator(pszProtocol, pProxyConfig, ppProxyLocator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateNetSchemePlugin(::win32::guid* riid, void** ppvHandler) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppvHandler);

        auto win32_impl_result = g_api_table.MFCreateNetSchemePlugin(riid, ppvHandler);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreatePMPServer(uint32_t dwCreationFlags, win32::Windows::Win32::Media::MediaFoundation::IMFPMPServer** ppPMPServer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(ppPMPServer);

        auto win32_impl_result = g_api_table.MFCreatePMPServer(dwCreationFlags, ppPMPServer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateRemoteDesktopPlugin(win32::Windows::Win32::Media::MediaFoundation::IMFRemoteDesktopPlugin** ppPlugin) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppPlugin);

        auto win32_impl_result = g_api_table.MFCreateRemoteDesktopPlugin(ppPlugin);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_CreateNamedPropertyStore(win32::Windows::Win32::System::PropertiesSystem::INamedPropertyStore** ppStore) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppStore);

        auto win32_impl_result = g_api_table.CreateNamedPropertyStore(ppStore);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSampleCopierMFT(win32::Windows::Win32::Media::MediaFoundation::IMFTransform** ppCopierMFT) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppCopierMFT);

        auto win32_impl_result = g_api_table.MFCreateSampleCopierMFT(ppCopierMFT);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTranscodeProfile(win32::Windows::Win32::Media::MediaFoundation::IMFTranscodeProfile** ppTranscodeProfile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppTranscodeProfile);

        auto win32_impl_result = g_api_table.MFCreateTranscodeProfile(ppTranscodeProfile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTranscodeTopology(win32::Windows::Win32::Media::MediaFoundation::IMFMediaSource* pSrc, win32::Windows::Win32::Foundation::PWSTR pwszOutputFilePath, win32::Windows::Win32::Media::MediaFoundation::IMFTranscodeProfile* pProfile, win32::Windows::Win32::Media::MediaFoundation::IMFTopology** ppTranscodeTopo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSrc);
        ORBIT_TRACK_PARAM(pwszOutputFilePath);
        ORBIT_TRACK_PARAM(pProfile);
        ORBIT_TRACK_PARAM(ppTranscodeTopo);

        auto win32_impl_result = g_api_table.MFCreateTranscodeTopology(pSrc, pwszOutputFilePath, pProfile, ppTranscodeTopo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTranscodeTopologyFromByteStream(win32::Windows::Win32::Media::MediaFoundation::IMFMediaSource* pSrc, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pOutputStream, win32::Windows::Win32::Media::MediaFoundation::IMFTranscodeProfile* pProfile, win32::Windows::Win32::Media::MediaFoundation::IMFTopology** ppTranscodeTopo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSrc);
        ORBIT_TRACK_PARAM(pOutputStream);
        ORBIT_TRACK_PARAM(pProfile);
        ORBIT_TRACK_PARAM(ppTranscodeTopo);

        auto win32_impl_result = g_api_table.MFCreateTranscodeTopologyFromByteStream(pSrc, pOutputStream, pProfile, ppTranscodeTopo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTranscodeGetAudioOutputAvailableTypes(::win32::guid* guidSubType, uint32_t dwMFTFlags, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pCodecConfig, win32::Windows::Win32::Media::MediaFoundation::IMFCollection** ppAvailableTypes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidSubType);
        ORBIT_TRACK_PARAM(dwMFTFlags);
        ORBIT_TRACK_PARAM(pCodecConfig);
        ORBIT_TRACK_PARAM(ppAvailableTypes);

        auto win32_impl_result = g_api_table.MFTranscodeGetAudioOutputAvailableTypes(guidSubType, dwMFTFlags, pCodecConfig, ppAvailableTypes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTranscodeSinkActivate(win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateTranscodeSinkActivate(ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTrackedSample(win32::Windows::Win32::Media::MediaFoundation::IMFTrackedSample** ppMFSample) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppMFSample);

        auto win32_impl_result = g_api_table.MFCreateTrackedSample(ppMFSample);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMFByteStreamOnStream(win32::Windows::Win32::System::Com::IStream* pStream, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** ppByteStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStream);
        ORBIT_TRACK_PARAM(ppByteStream);

        auto win32_impl_result = g_api_table.MFCreateMFByteStreamOnStream(pStream, ppByteStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateStreamOnMFByteStream(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pByteStream, win32::Windows::Win32::System::Com::IStream** ppStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pByteStream);
        ORBIT_TRACK_PARAM(ppStream);

        auto win32_impl_result = g_api_table.MFCreateStreamOnMFByteStream(pByteStream, ppStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMFByteStreamOnStreamEx(win32::Windows::Win32::System::Com::IUnknown* punkStream, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** ppByteStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(punkStream);
        ORBIT_TRACK_PARAM(ppByteStream);

        auto win32_impl_result = g_api_table.MFCreateMFByteStreamOnStreamEx(punkStream, ppByteStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateStreamOnMFByteStreamEx(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pByteStream, ::win32::guid* riid, void** ppv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pByteStream);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppv);

        auto win32_impl_result = g_api_table.MFCreateStreamOnMFByteStreamEx(pByteStream, riid, ppv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaTypeFromProperties(win32::Windows::Win32::System::Com::IUnknown* punkStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(punkStream);
        ORBIT_TRACK_PARAM(ppMediaType);

        auto win32_impl_result = g_api_table.MFCreateMediaTypeFromProperties(punkStream, ppMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreatePropertiesFromMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMediaType, ::win32::guid* riid, void** ppv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaType);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppv);

        auto win32_impl_result = g_api_table.MFCreatePropertiesFromMediaType(pMediaType, riid, ppv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFEnumDeviceSources(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFActivate*** pppSourceActivate, uint32_t* pcSourceActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(pppSourceActivate);
        ORBIT_TRACK_PARAM(pcSourceActivate);

        auto win32_impl_result = g_api_table.MFEnumDeviceSources(pAttributes, pppSourceActivate, pcSourceActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateDeviceSource(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSource** ppSource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppSource);

        auto win32_impl_result = g_api_table.MFCreateDeviceSource(pAttributes, ppSource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateDeviceSourceActivate(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateDeviceSourceActivate(pAttributes, ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateProtectedEnvironmentAccess(win32::Windows::Win32::Media::MediaFoundation::IMFProtectedEnvironmentAccess** ppAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppAccess);

        auto win32_impl_result = g_api_table.MFCreateProtectedEnvironmentAccess(ppAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFLoadSignedLibrary(win32::Windows::Win32::Foundation::PWSTR pszName, win32::Windows::Win32::Media::MediaFoundation::IMFSignedLibrary** ppLib) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszName);
        ORBIT_TRACK_PARAM(ppLib);

        auto win32_impl_result = g_api_table.MFLoadSignedLibrary(pszName, ppLib);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetSystemId(win32::Windows::Win32::Media::MediaFoundation::IMFSystemId** ppId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppId);

        auto win32_impl_result = g_api_table.MFGetSystemId(ppId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetLocalId(uint8_t* verifier, uint32_t size, win32::Windows::Win32::Foundation::PWSTR* id) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(verifier);
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(id);

        auto win32_impl_result = g_api_table.MFGetLocalId(verifier, size, id);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateContentProtectionDevice(::win32::guid* ProtectionSystemId, win32::Windows::Win32::Media::MediaFoundation::IMFContentProtectionDevice** ContentProtectionDevice) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProtectionSystemId);
        ORBIT_TRACK_PARAM(ContentProtectionDevice);

        auto win32_impl_result = g_api_table.MFCreateContentProtectionDevice(ProtectionSystemId, ContentProtectionDevice);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFIsContentProtectionDeviceSupported(::win32::guid* ProtectionSystemId, win32::Windows::Win32::Foundation::BOOL* isSupported) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProtectionSystemId);
        ORBIT_TRACK_PARAM(isSupported);

        auto win32_impl_result = g_api_table.MFIsContentProtectionDeviceSupported(ProtectionSystemId, isSupported);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateContentDecryptorContext(::win32::guid* guidMediaProtectionSystemId, win32::Windows::Win32::Media::MediaFoundation::IMFDXGIDeviceManager* pD3DManager, win32::Windows::Win32::Media::MediaFoundation::IMFContentProtectionDevice* pContentProtectionDevice, win32::Windows::Win32::Media::MediaFoundation::IMFContentDecryptorContext** ppContentDecryptorContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidMediaProtectionSystemId);
        ORBIT_TRACK_PARAM(pD3DManager);
        ORBIT_TRACK_PARAM(pContentProtectionDevice);
        ORBIT_TRACK_PARAM(ppContentDecryptorContext);

        auto win32_impl_result = g_api_table.MFCreateContentDecryptorContext(guidMediaProtectionSystemId, pD3DManager, pContentProtectionDevice, ppContentDecryptorContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSensorGroup(win32::Windows::Win32::Foundation::PWSTR SensorGroupSymbolicLink, win32::Windows::Win32::Media::MediaFoundation::IMFSensorGroup** ppSensorGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SensorGroupSymbolicLink);
        ORBIT_TRACK_PARAM(ppSensorGroup);

        auto win32_impl_result = g_api_table.MFCreateSensorGroup(SensorGroupSymbolicLink, ppSensorGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSensorStream(uint32_t StreamId, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFCollection* pMediaTypeCollection, win32::Windows::Win32::Media::MediaFoundation::IMFSensorStream** ppStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StreamId);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(pMediaTypeCollection);
        ORBIT_TRACK_PARAM(ppStream);

        auto win32_impl_result = g_api_table.MFCreateSensorStream(StreamId, pAttributes, pMediaTypeCollection, ppStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSensorProfile(::win32::guid* ProfileType, uint32_t ProfileIndex, win32::Windows::Win32::Foundation::PWSTR Constraints, win32::Windows::Win32::Media::MediaFoundation::IMFSensorProfile** ppProfile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProfileType);
        ORBIT_TRACK_PARAM(ProfileIndex);
        ORBIT_TRACK_PARAM(Constraints);
        ORBIT_TRACK_PARAM(ppProfile);

        auto win32_impl_result = g_api_table.MFCreateSensorProfile(ProfileType, ProfileIndex, Constraints, ppProfile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSensorProfileCollection(win32::Windows::Win32::Media::MediaFoundation::IMFSensorProfileCollection** ppSensorProfile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppSensorProfile);

        auto win32_impl_result = g_api_table.MFCreateSensorProfileCollection(ppSensorProfile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSensorActivityMonitor(win32::Windows::Win32::Media::MediaFoundation::IMFSensorActivitiesReportCallback* pCallback, win32::Windows::Win32::Media::MediaFoundation::IMFSensorActivityMonitor** ppActivityMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(ppActivityMonitor);

        auto win32_impl_result = g_api_table.MFCreateSensorActivityMonitor(pCallback, ppActivityMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateExtendedCameraIntrinsics(win32::Windows::Win32::Media::MediaFoundation::IMFExtendedCameraIntrinsics** ppExtendedCameraIntrinsics) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppExtendedCameraIntrinsics);

        auto win32_impl_result = g_api_table.MFCreateExtendedCameraIntrinsics(ppExtendedCameraIntrinsics);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateExtendedCameraIntrinsicModel(win32::Windows::Win32::Media::MediaFoundation::MFCameraIntrinsic_DistortionModelType distortionModelType, win32::Windows::Win32::Media::MediaFoundation::IMFExtendedCameraIntrinsicModel** ppExtendedCameraIntrinsicModel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(distortionModelType);
        ORBIT_TRACK_PARAM(ppExtendedCameraIntrinsicModel);

        auto win32_impl_result = g_api_table.MFCreateExtendedCameraIntrinsicModel(distortionModelType, ppExtendedCameraIntrinsicModel);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateRelativePanelWatcher(win32::Windows::Win32::Foundation::PWSTR videoDeviceId, win32::Windows::Win32::Foundation::PWSTR displayMonitorDeviceId, win32::Windows::Win32::Media::MediaFoundation::IMFRelativePanelWatcher** ppRelativePanelWatcher) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(videoDeviceId);
        ORBIT_TRACK_PARAM(displayMonitorDeviceId);
        ORBIT_TRACK_PARAM(ppRelativePanelWatcher);

        auto win32_impl_result = g_api_table.MFCreateRelativePanelWatcher(videoDeviceId, displayMonitorDeviceId, ppRelativePanelWatcher);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateCameraOcclusionStateMonitor(win32::Windows::Win32::Foundation::PWSTR symbolicLink, win32::Windows::Win32::Media::MediaFoundation::IMFCameraOcclusionStateReportCallback* callback, win32::Windows::Win32::Media::MediaFoundation::IMFCameraOcclusionStateMonitor** occlusionStateMonitor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(symbolicLink);
        ORBIT_TRACK_PARAM(callback);
        ORBIT_TRACK_PARAM(occlusionStateMonitor);

        auto win32_impl_result = g_api_table.MFCreateCameraOcclusionStateMonitor(symbolicLink, callback, occlusionStateMonitor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFContentInfo(win32::Windows::Win32::Media::MediaFoundation::IMFASFContentInfo** ppIContentInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppIContentInfo);

        auto win32_impl_result = g_api_table.MFCreateASFContentInfo(ppIContentInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFIndexer(win32::Windows::Win32::Media::MediaFoundation::IMFASFIndexer** ppIIndexer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppIIndexer);

        auto win32_impl_result = g_api_table.MFCreateASFIndexer(ppIIndexer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFIndexerByteStream(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIContentByteStream, uint64_t cbIndexStartOffset, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** pIIndexByteStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIContentByteStream);
        ORBIT_TRACK_PARAM(cbIndexStartOffset);
        ORBIT_TRACK_PARAM(pIIndexByteStream);

        auto win32_impl_result = g_api_table.MFCreateASFIndexerByteStream(pIContentByteStream, cbIndexStartOffset, pIIndexByteStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFSplitter(win32::Windows::Win32::Media::MediaFoundation::IMFASFSplitter** ppISplitter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppISplitter);

        auto win32_impl_result = g_api_table.MFCreateASFSplitter(ppISplitter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFProfile(win32::Windows::Win32::Media::MediaFoundation::IMFASFProfile** ppIProfile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppIProfile);

        auto win32_impl_result = g_api_table.MFCreateASFProfile(ppIProfile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFProfileFromPresentationDescriptor(win32::Windows::Win32::Media::MediaFoundation::IMFPresentationDescriptor* pIPD, win32::Windows::Win32::Media::MediaFoundation::IMFASFProfile** ppIProfile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIPD);
        ORBIT_TRACK_PARAM(ppIProfile);

        auto win32_impl_result = g_api_table.MFCreateASFProfileFromPresentationDescriptor(pIPD, ppIProfile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreatePresentationDescriptorFromASFProfile(win32::Windows::Win32::Media::MediaFoundation::IMFASFProfile* pIProfile, win32::Windows::Win32::Media::MediaFoundation::IMFPresentationDescriptor** ppIPD) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIProfile);
        ORBIT_TRACK_PARAM(ppIPD);

        auto win32_impl_result = g_api_table.MFCreatePresentationDescriptorFromASFProfile(pIProfile, ppIPD);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFMultiplexer(win32::Windows::Win32::Media::MediaFoundation::IMFASFMultiplexer** ppIMultiplexer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppIMultiplexer);

        auto win32_impl_result = g_api_table.MFCreateASFMultiplexer(ppIMultiplexer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFStreamSelector(win32::Windows::Win32::Media::MediaFoundation::IMFASFProfile* pIASFProfile, win32::Windows::Win32::Media::MediaFoundation::IMFASFStreamSelector** ppSelector) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIASFProfile);
        ORBIT_TRACK_PARAM(ppSelector);

        auto win32_impl_result = g_api_table.MFCreateASFStreamSelector(pIASFProfile, ppSelector);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppIMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIByteStream);
        ORBIT_TRACK_PARAM(ppIMediaSink);

        auto win32_impl_result = g_api_table.MFCreateASFMediaSink(pIByteStream, ppIMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFMediaSinkActivate(win32::Windows::Win32::Foundation::PWSTR pwszFileName, win32::Windows::Win32::Media::MediaFoundation::IMFASFContentInfo* pContentInfo, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppIActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszFileName);
        ORBIT_TRACK_PARAM(pContentInfo);
        ORBIT_TRACK_PARAM(ppIActivate);

        auto win32_impl_result = g_api_table.MFCreateASFMediaSinkActivate(pwszFileName, pContentInfo, ppIActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateWMVEncoderActivate(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMediaType, win32::Windows::Win32::System::PropertiesSystem::IPropertyStore* pEncodingConfigurationProperties, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaType);
        ORBIT_TRACK_PARAM(pEncodingConfigurationProperties);
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateWMVEncoderActivate(pMediaType, pEncodingConfigurationProperties, ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateWMAEncoderActivate(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMediaType, win32::Windows::Win32::System::PropertiesSystem::IPropertyStore* pEncodingConfigurationProperties, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaType);
        ORBIT_TRACK_PARAM(pEncodingConfigurationProperties);
        ORBIT_TRACK_PARAM(ppActivate);

        auto win32_impl_result = g_api_table.MFCreateWMAEncoderActivate(pMediaType, pEncodingConfigurationProperties, ppActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFStreamingMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pIByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink** ppIMediaSink) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pIByteStream);
        ORBIT_TRACK_PARAM(ppIMediaSink);

        auto win32_impl_result = g_api_table.MFCreateASFStreamingMediaSink(pIByteStream, ppIMediaSink);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateASFStreamingMediaSinkActivate(win32::Windows::Win32::Media::MediaFoundation::IMFActivate* pByteStreamActivate, win32::Windows::Win32::Media::MediaFoundation::IMFASFContentInfo* pContentInfo, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** ppIActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pByteStreamActivate);
        ORBIT_TRACK_PARAM(pContentInfo);
        ORBIT_TRACK_PARAM(ppIActivate);

        auto win32_impl_result = g_api_table.MFCreateASFStreamingMediaSinkActivate(pByteStreamActivate, pContentInfo, ppIActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFStartup(uint32_t Version, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Version);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.MFStartup(Version, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFShutdown() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.MFShutdown();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFLockPlatform() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.MFLockPlatform();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFUnlockPlatform() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.MFUnlockPlatform();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFPutWorkItem(uint32_t dwQueue, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pCallback, win32::Windows::Win32::System::Com::IUnknown* pState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwQueue);
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(pState);

        auto win32_impl_result = g_api_table.MFPutWorkItem(dwQueue, pCallback, pState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFPutWorkItem2(uint32_t dwQueue, int32_t Priority, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pCallback, win32::Windows::Win32::System::Com::IUnknown* pState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwQueue);
        ORBIT_TRACK_PARAM(Priority);
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(pState);

        auto win32_impl_result = g_api_table.MFPutWorkItem2(dwQueue, Priority, pCallback, pState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFPutWorkItemEx(uint32_t dwQueue, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwQueue);
        ORBIT_TRACK_PARAM(pResult);

        auto win32_impl_result = g_api_table.MFPutWorkItemEx(dwQueue, pResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFPutWorkItemEx2(uint32_t dwQueue, int32_t Priority, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwQueue);
        ORBIT_TRACK_PARAM(Priority);
        ORBIT_TRACK_PARAM(pResult);

        auto win32_impl_result = g_api_table.MFPutWorkItemEx2(dwQueue, Priority, pResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFPutWaitingWorkItem(win32::Windows::Win32::Foundation::HANDLE hEvent, int32_t Priority, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult, uint64_t* pKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);
        ORBIT_TRACK_PARAM(Priority);
        ORBIT_TRACK_PARAM(pResult);
        ORBIT_TRACK_PARAM(pKey);

        auto win32_impl_result = g_api_table.MFPutWaitingWorkItem(hEvent, Priority, pResult, pKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFAllocateSerialWorkQueue(uint32_t dwWorkQueue, uint32_t* pdwWorkQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueue);
        ORBIT_TRACK_PARAM(pdwWorkQueue);

        auto win32_impl_result = g_api_table.MFAllocateSerialWorkQueue(dwWorkQueue, pdwWorkQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFScheduleWorkItemEx(win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult, int64_t Timeout, uint64_t* pKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResult);
        ORBIT_TRACK_PARAM(Timeout);
        ORBIT_TRACK_PARAM(pKey);

        auto win32_impl_result = g_api_table.MFScheduleWorkItemEx(pResult, Timeout, pKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFScheduleWorkItem(win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pCallback, win32::Windows::Win32::System::Com::IUnknown* pState, int64_t Timeout, uint64_t* pKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(pState);
        ORBIT_TRACK_PARAM(Timeout);
        ORBIT_TRACK_PARAM(pKey);

        auto win32_impl_result = g_api_table.MFScheduleWorkItem(pCallback, pState, Timeout, pKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCancelWorkItem(uint64_t Key) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Key);

        auto win32_impl_result = g_api_table.MFCancelWorkItem(Key);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetTimerPeriodicity(uint32_t* Periodicity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Periodicity);

        auto win32_impl_result = g_api_table.MFGetTimerPeriodicity(Periodicity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFAddPeriodicCallback(win32::Windows::Win32::Media::MediaFoundation::MFPERIODICCALLBACK* Callback, win32::Windows::Win32::System::Com::IUnknown* pContext, uint32_t* pdwKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(pContext);
        ORBIT_TRACK_PARAM(pdwKey);

        auto win32_impl_result = g_api_table.MFAddPeriodicCallback(Callback, pContext, pdwKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFRemovePeriodicCallback(uint32_t dwKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwKey);

        auto win32_impl_result = g_api_table.MFRemovePeriodicCallback(dwKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFAllocateWorkQueueEx(win32::Windows::Win32::Media::MediaFoundation::MFASYNC_WORKQUEUE_TYPE WorkQueueType, uint32_t* pdwWorkQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WorkQueueType);
        ORBIT_TRACK_PARAM(pdwWorkQueue);

        auto win32_impl_result = g_api_table.MFAllocateWorkQueueEx(WorkQueueType, pdwWorkQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFAllocateWorkQueue(uint32_t* pdwWorkQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pdwWorkQueue);

        auto win32_impl_result = g_api_table.MFAllocateWorkQueue(pdwWorkQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFLockWorkQueue(uint32_t dwWorkQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueue);

        auto win32_impl_result = g_api_table.MFLockWorkQueue(dwWorkQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFUnlockWorkQueue(uint32_t dwWorkQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueue);

        auto win32_impl_result = g_api_table.MFUnlockWorkQueue(dwWorkQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFBeginRegisterWorkQueueWithMMCSS(uint32_t dwWorkQueueId, win32::Windows::Win32::Foundation::PWSTR wszClass, uint32_t dwTaskId, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pDoneCallback, win32::Windows::Win32::System::Com::IUnknown* pDoneState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueueId);
        ORBIT_TRACK_PARAM(wszClass);
        ORBIT_TRACK_PARAM(dwTaskId);
        ORBIT_TRACK_PARAM(pDoneCallback);
        ORBIT_TRACK_PARAM(pDoneState);

        auto win32_impl_result = g_api_table.MFBeginRegisterWorkQueueWithMMCSS(dwWorkQueueId, wszClass, dwTaskId, pDoneCallback, pDoneState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFBeginRegisterWorkQueueWithMMCSSEx(uint32_t dwWorkQueueId, win32::Windows::Win32::Foundation::PWSTR wszClass, uint32_t dwTaskId, int32_t lPriority, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pDoneCallback, win32::Windows::Win32::System::Com::IUnknown* pDoneState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueueId);
        ORBIT_TRACK_PARAM(wszClass);
        ORBIT_TRACK_PARAM(dwTaskId);
        ORBIT_TRACK_PARAM(lPriority);
        ORBIT_TRACK_PARAM(pDoneCallback);
        ORBIT_TRACK_PARAM(pDoneState);

        auto win32_impl_result = g_api_table.MFBeginRegisterWorkQueueWithMMCSSEx(dwWorkQueueId, wszClass, dwTaskId, lPriority, pDoneCallback, pDoneState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFEndRegisterWorkQueueWithMMCSS(win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult, uint32_t* pdwTaskId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResult);
        ORBIT_TRACK_PARAM(pdwTaskId);

        auto win32_impl_result = g_api_table.MFEndRegisterWorkQueueWithMMCSS(pResult, pdwTaskId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFBeginUnregisterWorkQueueWithMMCSS(uint32_t dwWorkQueueId, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pDoneCallback, win32::Windows::Win32::System::Com::IUnknown* pDoneState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueueId);
        ORBIT_TRACK_PARAM(pDoneCallback);
        ORBIT_TRACK_PARAM(pDoneState);

        auto win32_impl_result = g_api_table.MFBeginUnregisterWorkQueueWithMMCSS(dwWorkQueueId, pDoneCallback, pDoneState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFEndUnregisterWorkQueueWithMMCSS(win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResult);

        auto win32_impl_result = g_api_table.MFEndUnregisterWorkQueueWithMMCSS(pResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetWorkQueueMMCSSClass(uint32_t dwWorkQueueId, win32::Windows::Win32::Foundation::PWSTR pwszClass, uint32_t* pcchClass) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueueId);
        ORBIT_TRACK_PARAM(pwszClass);
        ORBIT_TRACK_PARAM(pcchClass);

        auto win32_impl_result = g_api_table.MFGetWorkQueueMMCSSClass(dwWorkQueueId, pwszClass, pcchClass);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetWorkQueueMMCSSTaskId(uint32_t dwWorkQueueId, uint32_t* pdwTaskId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueueId);
        ORBIT_TRACK_PARAM(pdwTaskId);

        auto win32_impl_result = g_api_table.MFGetWorkQueueMMCSSTaskId(dwWorkQueueId, pdwTaskId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFRegisterPlatformWithMMCSS(win32::Windows::Win32::Foundation::PWSTR wszClass, uint32_t* pdwTaskId, int32_t lPriority) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszClass);
        ORBIT_TRACK_PARAM(pdwTaskId);
        ORBIT_TRACK_PARAM(lPriority);

        auto win32_impl_result = g_api_table.MFRegisterPlatformWithMMCSS(wszClass, pdwTaskId, lPriority);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFUnregisterPlatformFromMMCSS() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.MFUnregisterPlatformFromMMCSS();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFLockSharedWorkQueue(win32::Windows::Win32::Foundation::PWSTR wszClass, int32_t BasePriority, uint32_t* pdwTaskId, uint32_t* pID) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(wszClass);
        ORBIT_TRACK_PARAM(BasePriority);
        ORBIT_TRACK_PARAM(pdwTaskId);
        ORBIT_TRACK_PARAM(pID);

        auto win32_impl_result = g_api_table.MFLockSharedWorkQueue(wszClass, BasePriority, pdwTaskId, pID);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetWorkQueueMMCSSPriority(uint32_t dwWorkQueueId, int32_t* lPriority) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWorkQueueId);
        ORBIT_TRACK_PARAM(lPriority);

        auto win32_impl_result = g_api_table.MFGetWorkQueueMMCSSPriority(dwWorkQueueId, lPriority);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAsyncResult(win32::Windows::Win32::System::Com::IUnknown* punkObject, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pCallback, win32::Windows::Win32::System::Com::IUnknown* punkState, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult** ppAsyncResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(punkObject);
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(punkState);
        ORBIT_TRACK_PARAM(ppAsyncResult);

        auto win32_impl_result = g_api_table.MFCreateAsyncResult(punkObject, pCallback, punkState, ppAsyncResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInvokeCallback(win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pAsyncResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAsyncResult);

        auto win32_impl_result = g_api_table.MFInvokeCallback(pAsyncResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateFile(win32::Windows::Win32::Media::MediaFoundation::MF_FILE_ACCESSMODE AccessMode, win32::Windows::Win32::Media::MediaFoundation::MF_FILE_OPENMODE OpenMode, win32::Windows::Win32::Media::MediaFoundation::MF_FILE_FLAGS fFlags, win32::Windows::Win32::Foundation::PWSTR pwszFileURL, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** ppIByteStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AccessMode);
        ORBIT_TRACK_PARAM(OpenMode);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(pwszFileURL);
        ORBIT_TRACK_PARAM(ppIByteStream);

        auto win32_impl_result = g_api_table.MFCreateFile(AccessMode, OpenMode, fFlags, pwszFileURL, ppIByteStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateTempFile(win32::Windows::Win32::Media::MediaFoundation::MF_FILE_ACCESSMODE AccessMode, win32::Windows::Win32::Media::MediaFoundation::MF_FILE_OPENMODE OpenMode, win32::Windows::Win32::Media::MediaFoundation::MF_FILE_FLAGS fFlags, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** ppIByteStream) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AccessMode);
        ORBIT_TRACK_PARAM(OpenMode);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(ppIByteStream);

        auto win32_impl_result = g_api_table.MFCreateTempFile(AccessMode, OpenMode, fFlags, ppIByteStream);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFBeginCreateFile(win32::Windows::Win32::Media::MediaFoundation::MF_FILE_ACCESSMODE AccessMode, win32::Windows::Win32::Media::MediaFoundation::MF_FILE_OPENMODE OpenMode, win32::Windows::Win32::Media::MediaFoundation::MF_FILE_FLAGS fFlags, win32::Windows::Win32::Foundation::PWSTR pwszFilePath, win32::Windows::Win32::Media::MediaFoundation::IMFAsyncCallback* pCallback, win32::Windows::Win32::System::Com::IUnknown* pState, win32::Windows::Win32::System::Com::IUnknown** ppCancelCookie) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AccessMode);
        ORBIT_TRACK_PARAM(OpenMode);
        ORBIT_TRACK_PARAM(fFlags);
        ORBIT_TRACK_PARAM(pwszFilePath);
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(pState);
        ORBIT_TRACK_PARAM(ppCancelCookie);

        auto win32_impl_result = g_api_table.MFBeginCreateFile(AccessMode, OpenMode, fFlags, pwszFilePath, pCallback, pState, ppCancelCookie);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFEndCreateFile(win32::Windows::Win32::Media::MediaFoundation::IMFAsyncResult* pResult, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** ppFile) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResult);
        ORBIT_TRACK_PARAM(ppFile);

        auto win32_impl_result = g_api_table.MFEndCreateFile(pResult, ppFile);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCancelCreateFile(win32::Windows::Win32::System::Com::IUnknown* pCancelCookie) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCancelCookie);

        auto win32_impl_result = g_api_table.MFCancelCreateFile(pCancelCookie);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMemoryBuffer(uint32_t cbMaxLength, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cbMaxLength);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateMemoryBuffer(cbMaxLength, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaBufferWrapper(win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer* pBuffer, uint32_t cbOffset, uint32_t dwLength, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBuffer);
        ORBIT_TRACK_PARAM(cbOffset);
        ORBIT_TRACK_PARAM(dwLength);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateMediaBufferWrapper(pBuffer, cbOffset, dwLength, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateLegacyMediaBufferOnMFMediaBuffer(win32::Windows::Win32::Media::MediaFoundation::IMFSample* pSample, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer* pMFMediaBuffer, uint32_t cbOffset, win32::Windows::Win32::Graphics::DirectShow::IMediaBuffer** ppMediaBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSample);
        ORBIT_TRACK_PARAM(pMFMediaBuffer);
        ORBIT_TRACK_PARAM(cbOffset);
        ORBIT_TRACK_PARAM(ppMediaBuffer);

        auto win32_impl_result = g_api_table.MFCreateLegacyMediaBufferOnMFMediaBuffer(pSample, pMFMediaBuffer, cbOffset, ppMediaBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::Dxgi::DXGI_FORMAT __stdcall ORBIT_IMPL_MFMapDX9FormatToDXGIFormat(uint32_t dx9) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dx9);

        auto win32_impl_result = g_api_table.MFMapDX9FormatToDXGIFormat(dx9);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MFMapDXGIFormatToDX9Format(win32::Windows::Win32::Graphics::Dxgi::DXGI_FORMAT dx11) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dx11);

        auto win32_impl_result = g_api_table.MFMapDXGIFormatToDX9Format(dx11);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFLockDXGIDeviceManager(uint32_t* pResetToken, win32::Windows::Win32::Media::MediaFoundation::IMFDXGIDeviceManager** ppManager) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResetToken);
        ORBIT_TRACK_PARAM(ppManager);

        auto win32_impl_result = g_api_table.MFLockDXGIDeviceManager(pResetToken, ppManager);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFUnlockDXGIDeviceManager() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.MFUnlockDXGIDeviceManager();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateDXSurfaceBuffer(::win32::guid* riid, win32::Windows::Win32::System::Com::IUnknown* punkSurface, win32::Windows::Win32::Foundation::BOOL fBottomUpWhenLinear, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(punkSurface);
        ORBIT_TRACK_PARAM(fBottomUpWhenLinear);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateDXSurfaceBuffer(riid, punkSurface, fBottomUpWhenLinear, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateWICBitmapBuffer(::win32::guid* riid, win32::Windows::Win32::System::Com::IUnknown* punkSurface, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(punkSurface);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateWICBitmapBuffer(riid, punkSurface, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateDXGISurfaceBuffer(::win32::guid* riid, win32::Windows::Win32::System::Com::IUnknown* punkSurface, uint32_t uSubresourceIndex, win32::Windows::Win32::Foundation::BOOL fBottomUpWhenLinear, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(punkSurface);
        ORBIT_TRACK_PARAM(uSubresourceIndex);
        ORBIT_TRACK_PARAM(fBottomUpWhenLinear);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateDXGISurfaceBuffer(riid, punkSurface, uSubresourceIndex, fBottomUpWhenLinear, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoSampleAllocatorEx(::win32::guid* riid, void** ppSampleAllocator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppSampleAllocator);

        auto win32_impl_result = g_api_table.MFCreateVideoSampleAllocatorEx(riid, ppSampleAllocator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateDXGIDeviceManager(uint32_t* resetToken, win32::Windows::Win32::Media::MediaFoundation::IMFDXGIDeviceManager** ppDeviceManager) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(resetToken);
        ORBIT_TRACK_PARAM(ppDeviceManager);

        auto win32_impl_result = g_api_table.MFCreateDXGIDeviceManager(resetToken, ppDeviceManager);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAlignedMemoryBuffer(uint32_t cbMaxLength, uint32_t cbAligment, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cbMaxLength);
        ORBIT_TRACK_PARAM(cbAligment);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateAlignedMemoryBuffer(cbMaxLength, cbAligment, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaEvent(uint32_t met, ::win32::guid* guidExtendedType, win32::Windows::Win32::Foundation::HRESULT hrStatus, win32::Windows::Win32::System::Com::StructuredStorage::PROPVARIANT* pvValue, win32::Windows::Win32::Media::MediaFoundation::IMFMediaEvent** ppEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(met);
        ORBIT_TRACK_PARAM(guidExtendedType);
        ORBIT_TRACK_PARAM(hrStatus);
        ORBIT_TRACK_PARAM(pvValue);
        ORBIT_TRACK_PARAM(ppEvent);

        auto win32_impl_result = g_api_table.MFCreateMediaEvent(met, guidExtendedType, hrStatus, pvValue, ppEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateEventQueue(win32::Windows::Win32::Media::MediaFoundation::IMFMediaEventQueue** ppMediaEventQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppMediaEventQueue);

        auto win32_impl_result = g_api_table.MFCreateEventQueue(ppMediaEventQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSample(win32::Windows::Win32::Media::MediaFoundation::IMFSample** ppIMFSample) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppIMFSample);

        auto win32_impl_result = g_api_table.MFCreateSample(ppIMFSample);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAttributes(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes** ppMFAttributes, uint32_t cInitialSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppMFAttributes);
        ORBIT_TRACK_PARAM(cInitialSize);

        auto win32_impl_result = g_api_table.MFCreateAttributes(ppMFAttributes, cInitialSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitAttributesFromBlob(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, uint8_t* pBuf, uint32_t cbBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(pBuf);
        ORBIT_TRACK_PARAM(cbBufSize);

        auto win32_impl_result = g_api_table.MFInitAttributesFromBlob(pAttributes, pBuf, cbBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetAttributesAsBlobSize(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, uint32_t* pcbBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(pcbBufSize);

        auto win32_impl_result = g_api_table.MFGetAttributesAsBlobSize(pAttributes, pcbBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetAttributesAsBlob(win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, uint8_t* pBuf, uint32_t cbBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(pBuf);
        ORBIT_TRACK_PARAM(cbBufSize);

        auto win32_impl_result = g_api_table.MFGetAttributesAsBlob(pAttributes, pBuf, cbBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTRegister(::win32::guid clsidMFT, ::win32::guid guidCategory, win32::Windows::Win32::Foundation::PWSTR pszName, uint32_t Flags, uint32_t cInputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputTypes, uint32_t cOutputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputTypes, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clsidMFT);
        ORBIT_TRACK_PARAM(guidCategory);
        ORBIT_TRACK_PARAM(pszName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(cInputTypes);
        ORBIT_TRACK_PARAM(pInputTypes);
        ORBIT_TRACK_PARAM(cOutputTypes);
        ORBIT_TRACK_PARAM(pOutputTypes);
        ORBIT_TRACK_PARAM(pAttributes);

        auto win32_impl_result = g_api_table.MFTRegister(clsidMFT, guidCategory, pszName, Flags, cInputTypes, pInputTypes, cOutputTypes, pOutputTypes, pAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTUnregister(::win32::guid clsidMFT) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clsidMFT);

        auto win32_impl_result = g_api_table.MFTUnregister(clsidMFT);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTRegisterLocal(win32::Windows::Win32::System::Com::IClassFactory* pClassFactory, ::win32::guid* guidCategory, win32::Windows::Win32::Foundation::PWSTR pszName, uint32_t Flags, uint32_t cInputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputTypes, uint32_t cOutputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputTypes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pClassFactory);
        ORBIT_TRACK_PARAM(guidCategory);
        ORBIT_TRACK_PARAM(pszName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(cInputTypes);
        ORBIT_TRACK_PARAM(pInputTypes);
        ORBIT_TRACK_PARAM(cOutputTypes);
        ORBIT_TRACK_PARAM(pOutputTypes);

        auto win32_impl_result = g_api_table.MFTRegisterLocal(pClassFactory, guidCategory, pszName, Flags, cInputTypes, pInputTypes, cOutputTypes, pOutputTypes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTUnregisterLocal(win32::Windows::Win32::System::Com::IClassFactory* pClassFactory) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pClassFactory);

        auto win32_impl_result = g_api_table.MFTUnregisterLocal(pClassFactory);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTRegisterLocalByCLSID(::win32::guid* clisdMFT, ::win32::guid* guidCategory, win32::Windows::Win32::Foundation::PWSTR pszName, uint32_t Flags, uint32_t cInputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputTypes, uint32_t cOutputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputTypes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clisdMFT);
        ORBIT_TRACK_PARAM(guidCategory);
        ORBIT_TRACK_PARAM(pszName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(cInputTypes);
        ORBIT_TRACK_PARAM(pInputTypes);
        ORBIT_TRACK_PARAM(cOutputTypes);
        ORBIT_TRACK_PARAM(pOutputTypes);

        auto win32_impl_result = g_api_table.MFTRegisterLocalByCLSID(clisdMFT, guidCategory, pszName, Flags, cInputTypes, pInputTypes, cOutputTypes, pOutputTypes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTUnregisterLocalByCLSID(::win32::guid clsidMFT) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clsidMFT);

        auto win32_impl_result = g_api_table.MFTUnregisterLocalByCLSID(clsidMFT);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTEnum(::win32::guid guidCategory, uint32_t Flags, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputType, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputType, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, ::win32::guid** ppclsidMFT, uint32_t* pcMFTs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidCategory);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pInputType);
        ORBIT_TRACK_PARAM(pOutputType);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppclsidMFT);
        ORBIT_TRACK_PARAM(pcMFTs);

        auto win32_impl_result = g_api_table.MFTEnum(guidCategory, Flags, pInputType, pOutputType, pAttributes, ppclsidMFT, pcMFTs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTEnumEx(::win32::guid guidCategory, uint32_t Flags, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputType, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputType, win32::Windows::Win32::Media::MediaFoundation::IMFActivate*** pppMFTActivate, uint32_t* pnumMFTActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidCategory);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pInputType);
        ORBIT_TRACK_PARAM(pOutputType);
        ORBIT_TRACK_PARAM(pppMFTActivate);
        ORBIT_TRACK_PARAM(pnumMFTActivate);

        auto win32_impl_result = g_api_table.MFTEnumEx(guidCategory, Flags, pInputType, pOutputType, pppMFTActivate, pnumMFTActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTEnum2(::win32::guid guidCategory, uint32_t Flags, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pInputType, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO* pOutputType, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFActivate*** pppMFTActivate, uint32_t* pnumMFTActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidCategory);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(pInputType);
        ORBIT_TRACK_PARAM(pOutputType);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(pppMFTActivate);
        ORBIT_TRACK_PARAM(pnumMFTActivate);

        auto win32_impl_result = g_api_table.MFTEnum2(guidCategory, Flags, pInputType, pOutputType, pAttributes, pppMFTActivate, pnumMFTActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFTGetInfo(::win32::guid clsidMFT, win32::Windows::Win32::Foundation::PWSTR* pszName, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO** ppInputTypes, uint32_t* pcInputTypes, win32::Windows::Win32::Media::MediaFoundation::MFT_REGISTER_TYPE_INFO** ppOutputTypes, uint32_t* pcOutputTypes, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes** ppAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clsidMFT);
        ORBIT_TRACK_PARAM(pszName);
        ORBIT_TRACK_PARAM(ppInputTypes);
        ORBIT_TRACK_PARAM(pcInputTypes);
        ORBIT_TRACK_PARAM(ppOutputTypes);
        ORBIT_TRACK_PARAM(pcOutputTypes);
        ORBIT_TRACK_PARAM(ppAttributes);

        auto win32_impl_result = g_api_table.MFTGetInfo(clsidMFT, pszName, ppInputTypes, pcInputTypes, ppOutputTypes, pcOutputTypes, ppAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetPluginControl(win32::Windows::Win32::Media::MediaFoundation::IMFPluginControl** ppPluginControl) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppPluginControl);

        auto win32_impl_result = g_api_table.MFGetPluginControl(ppPluginControl);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetMFTMerit(win32::Windows::Win32::System::Com::IUnknown* pMFT, uint32_t cbVerifier, uint8_t* verifier, uint32_t* merit) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFT);
        ORBIT_TRACK_PARAM(cbVerifier);
        ORBIT_TRACK_PARAM(verifier);
        ORBIT_TRACK_PARAM(merit);

        auto win32_impl_result = g_api_table.MFGetMFTMerit(pMFT, cbVerifier, verifier, merit);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFRegisterLocalSchemeHandler(win32::Windows::Win32::Foundation::PWSTR szScheme, win32::Windows::Win32::Media::MediaFoundation::IMFActivate* pActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(szScheme);
        ORBIT_TRACK_PARAM(pActivate);

        auto win32_impl_result = g_api_table.MFRegisterLocalSchemeHandler(szScheme, pActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFRegisterLocalByteStreamHandler(win32::Windows::Win32::Foundation::PWSTR szFileExtension, win32::Windows::Win32::Foundation::PWSTR szMimeType, win32::Windows::Win32::Media::MediaFoundation::IMFActivate* pActivate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(szFileExtension);
        ORBIT_TRACK_PARAM(szMimeType);
        ORBIT_TRACK_PARAM(pActivate);

        auto win32_impl_result = g_api_table.MFRegisterLocalByteStreamHandler(szFileExtension, szMimeType, pActivate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMFByteStreamWrapper(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pStream, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream** ppStreamWrapper) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStream);
        ORBIT_TRACK_PARAM(ppStreamWrapper);

        auto win32_impl_result = g_api_table.MFCreateMFByteStreamWrapper(pStream, ppStreamWrapper);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaExtensionActivate(win32::Windows::Win32::Foundation::PWSTR szActivatableClassId, win32::Windows::Win32::System::Com::IUnknown* pConfiguration, ::win32::guid* riid, void** ppvObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(szActivatableClassId);
        ORBIT_TRACK_PARAM(pConfiguration);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppvObject);

        auto win32_impl_result = g_api_table.MFCreateMediaExtensionActivate(szActivatableClassId, pConfiguration, riid, ppvObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMuxStreamAttributes(win32::Windows::Win32::Media::MediaFoundation::IMFCollection* pAttributesToMux, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes** ppMuxAttribs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAttributesToMux);
        ORBIT_TRACK_PARAM(ppMuxAttribs);

        auto win32_impl_result = g_api_table.MFCreateMuxStreamAttributes(pAttributesToMux, ppMuxAttribs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMuxStreamMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFCollection* pMediaTypesToMux, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppMuxMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaTypesToMux);
        ORBIT_TRACK_PARAM(ppMuxMediaType);

        auto win32_impl_result = g_api_table.MFCreateMuxStreamMediaType(pMediaTypesToMux, ppMuxMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMuxStreamSample(win32::Windows::Win32::Media::MediaFoundation::IMFCollection* pSamplesToMux, win32::Windows::Win32::Media::MediaFoundation::IMFSample** ppMuxSample) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSamplesToMux);
        ORBIT_TRACK_PARAM(ppMuxSample);

        auto win32_impl_result = g_api_table.MFCreateMuxStreamSample(pSamplesToMux, ppMuxSample);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFValidateMediaTypeSize(::win32::guid FormatType, uint8_t* pBlock, uint32_t cbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(FormatType);
        ORBIT_TRACK_PARAM(pBlock);
        ORBIT_TRACK_PARAM(cbSize);

        auto win32_impl_result = g_api_table.MFValidateMediaTypeSize(FormatType, pBlock, cbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppMFType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppMFType);

        auto win32_impl_result = g_api_table.MFCreateMediaType(ppMFType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMFVideoFormatFromMFMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT** ppMFVF, uint32_t* pcbSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(ppMFVF);
        ORBIT_TRACK_PARAM(pcbSize);

        auto win32_impl_result = g_api_table.MFCreateMFVideoFormatFromMFMediaType(pMFType, ppMFVF, pcbSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateWaveFormatExFromMFMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Media::Audio::WAVEFORMATEX** ppWF, uint32_t* pcbSize, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(ppWF);
        ORBIT_TRACK_PARAM(pcbSize);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.MFCreateWaveFormatExFromMFMediaType(pMFType, ppWF, pcbSize, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromVideoInfoHeader(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Graphics::DirectShow::VIDEOINFOHEADER* pVIH, uint32_t cbBufSize, ::win32::guid* pSubtype) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pVIH);
        ORBIT_TRACK_PARAM(cbBufSize);
        ORBIT_TRACK_PARAM(pSubtype);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromVideoInfoHeader(pMFType, pVIH, cbBufSize, pSubtype);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromVideoInfoHeader2(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Graphics::DirectShow::VIDEOINFOHEADER2* pVIH2, uint32_t cbBufSize, ::win32::guid* pSubtype) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pVIH2);
        ORBIT_TRACK_PARAM(cbBufSize);
        ORBIT_TRACK_PARAM(pSubtype);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromVideoInfoHeader2(pMFType, pVIH2, cbBufSize, pSubtype);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromMPEG1VideoInfo(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Graphics::DirectShow::MPEG1VIDEOINFO* pMP1VI, uint32_t cbBufSize, ::win32::guid* pSubtype) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pMP1VI);
        ORBIT_TRACK_PARAM(cbBufSize);
        ORBIT_TRACK_PARAM(pSubtype);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromMPEG1VideoInfo(pMFType, pMP1VI, cbBufSize, pSubtype);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromMPEG2VideoInfo(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Graphics::DirectShow::MPEG2VIDEOINFO* pMP2VI, uint32_t cbBufSize, ::win32::guid* pSubtype) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pMP2VI);
        ORBIT_TRACK_PARAM(cbBufSize);
        ORBIT_TRACK_PARAM(pSubtype);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromMPEG2VideoInfo(pMFType, pMP2VI, cbBufSize, pSubtype);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCalculateBitmapImageSize(win32::Windows::Win32::Graphics::Gdi::BITMAPINFOHEADER* pBMIH, uint32_t cbBufSize, uint32_t* pcbImageSize, win32::Windows::Win32::Foundation::BOOL* pbKnown) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pBMIH);
        ORBIT_TRACK_PARAM(cbBufSize);
        ORBIT_TRACK_PARAM(pcbImageSize);
        ORBIT_TRACK_PARAM(pbKnown);

        auto win32_impl_result = g_api_table.MFCalculateBitmapImageSize(pBMIH, cbBufSize, pcbImageSize, pbKnown);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCalculateImageSize(::win32::guid* guidSubtype, uint32_t unWidth, uint32_t unHeight, uint32_t* pcbImageSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidSubtype);
        ORBIT_TRACK_PARAM(unWidth);
        ORBIT_TRACK_PARAM(unHeight);
        ORBIT_TRACK_PARAM(pcbImageSize);

        auto win32_impl_result = g_api_table.MFCalculateImageSize(guidSubtype, unWidth, unHeight, pcbImageSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFFrameRateToAverageTimePerFrame(uint32_t unNumerator, uint32_t unDenominator, uint64_t* punAverageTimePerFrame) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unNumerator);
        ORBIT_TRACK_PARAM(unDenominator);
        ORBIT_TRACK_PARAM(punAverageTimePerFrame);

        auto win32_impl_result = g_api_table.MFFrameRateToAverageTimePerFrame(unNumerator, unDenominator, punAverageTimePerFrame);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFAverageTimePerFrameToFrameRate(uint64_t unAverageTimePerFrame, uint32_t* punNumerator, uint32_t* punDenominator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(unAverageTimePerFrame);
        ORBIT_TRACK_PARAM(punNumerator);
        ORBIT_TRACK_PARAM(punDenominator);

        auto win32_impl_result = g_api_table.MFAverageTimePerFrameToFrameRate(unAverageTimePerFrame, punNumerator, punDenominator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromMFVideoFormat(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pMFVF, uint32_t cbBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pMFVF);
        ORBIT_TRACK_PARAM(cbBufSize);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromMFVideoFormat(pMFType, pMFVF, cbBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromWaveFormatEx(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pWaveFormat, uint32_t cbBufSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pWaveFormat);
        ORBIT_TRACK_PARAM(cbBufSize);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromWaveFormatEx(pMFType, pWaveFormat, cbBufSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitMediaTypeFromAMMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, win32::Windows::Win32::Graphics::DirectShow::AM_MEDIA_TYPE* pAMType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(pAMType);

        auto win32_impl_result = g_api_table.MFInitMediaTypeFromAMMediaType(pMFType, pAMType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitAMMediaTypeFromMFMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, ::win32::guid guidFormatBlockType, win32::Windows::Win32::Graphics::DirectShow::AM_MEDIA_TYPE* pAMType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(guidFormatBlockType);
        ORBIT_TRACK_PARAM(pAMType);

        auto win32_impl_result = g_api_table.MFInitAMMediaTypeFromMFMediaType(pMFType, guidFormatBlockType, pAMType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAMMediaTypeFromMFMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFType, ::win32::guid guidFormatBlockType, win32::Windows::Win32::Graphics::DirectShow::AM_MEDIA_TYPE** ppAMType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFType);
        ORBIT_TRACK_PARAM(guidFormatBlockType);
        ORBIT_TRACK_PARAM(ppAMType);

        auto win32_impl_result = g_api_table.MFCreateAMMediaTypeFromMFMediaType(pMFType, guidFormatBlockType, ppAMType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MFCompareFullToPartialMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFTypeFull, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMFTypePartial) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMFTypeFull);
        ORBIT_TRACK_PARAM(pMFTypePartial);

        auto win32_impl_result = g_api_table.MFCompareFullToPartialMediaType(pMFTypeFull, pMFTypePartial);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFWrapMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pOrig, ::win32::guid* MajorType, ::win32::guid* SubType, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppWrap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOrig);
        ORBIT_TRACK_PARAM(MajorType);
        ORBIT_TRACK_PARAM(SubType);
        ORBIT_TRACK_PARAM(ppWrap);

        auto win32_impl_result = g_api_table.MFWrapMediaType(pOrig, MajorType, SubType, ppWrap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFUnwrapMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pWrap, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppOrig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pWrap);
        ORBIT_TRACK_PARAM(ppOrig);

        auto win32_impl_result = g_api_table.MFUnwrapMediaType(pWrap, ppOrig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoMediaType(win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pVideoFormat, win32::Windows::Win32::Media::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVideoFormat);
        ORBIT_TRACK_PARAM(ppIVideoMediaType);

        auto win32_impl_result = g_api_table.MFCreateVideoMediaType(pVideoFormat, ppIVideoMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoMediaTypeFromSubtype(::win32::guid* pAMSubtype, win32::Windows::Win32::Media::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAMSubtype);
        ORBIT_TRACK_PARAM(ppIVideoMediaType);

        auto win32_impl_result = g_api_table.MFCreateVideoMediaTypeFromSubtype(pAMSubtype, ppIVideoMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_MFIsFormatYUV(uint32_t Format) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Format);

        auto win32_impl_result = g_api_table.MFIsFormatYUV(Format);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoMediaTypeFromBitMapInfoHeader(win32::Windows::Win32::Graphics::Gdi::BITMAPINFOHEADER* pbmihBitMapInfoHeader, uint32_t dwPixelAspectRatioX, uint32_t dwPixelAspectRatioY, win32::Windows::Win32::Media::MediaFoundation::MFVideoInterlaceMode InterlaceMode, uint64_t VideoFlags, uint64_t qwFramesPerSecondNumerator, uint64_t qwFramesPerSecondDenominator, uint32_t dwMaxBitRate, win32::Windows::Win32::Media::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbmihBitMapInfoHeader);
        ORBIT_TRACK_PARAM(dwPixelAspectRatioX);
        ORBIT_TRACK_PARAM(dwPixelAspectRatioY);
        ORBIT_TRACK_PARAM(InterlaceMode);
        ORBIT_TRACK_PARAM(VideoFlags);
        ORBIT_TRACK_PARAM(qwFramesPerSecondNumerator);
        ORBIT_TRACK_PARAM(qwFramesPerSecondDenominator);
        ORBIT_TRACK_PARAM(dwMaxBitRate);
        ORBIT_TRACK_PARAM(ppIVideoMediaType);

        auto win32_impl_result = g_api_table.MFCreateVideoMediaTypeFromBitMapInfoHeader(pbmihBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, qwFramesPerSecondNumerator, qwFramesPerSecondDenominator, dwMaxBitRate, ppIVideoMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetStrideForBitmapInfoHeader(uint32_t format, uint32_t dwWidth, int32_t* pStride) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(dwWidth);
        ORBIT_TRACK_PARAM(pStride);

        auto win32_impl_result = g_api_table.MFGetStrideForBitmapInfoHeader(format, dwWidth, pStride);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetPlaneSize(uint32_t format, uint32_t dwWidth, uint32_t dwHeight, uint32_t* pdwPlaneSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(dwWidth);
        ORBIT_TRACK_PARAM(dwHeight);
        ORBIT_TRACK_PARAM(pdwPlaneSize);

        auto win32_impl_result = g_api_table.MFGetPlaneSize(format, dwWidth, dwHeight, pdwPlaneSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(win32::Windows::Win32::Graphics::Gdi::BITMAPINFOHEADER* pbmihBitMapInfoHeader, uint32_t cbBitMapInfoHeader, uint32_t dwPixelAspectRatioX, uint32_t dwPixelAspectRatioY, win32::Windows::Win32::Media::MediaFoundation::MFVideoInterlaceMode InterlaceMode, uint64_t VideoFlags, uint32_t dwFramesPerSecondNumerator, uint32_t dwFramesPerSecondDenominator, uint32_t dwMaxBitRate, win32::Windows::Win32::Media::MediaFoundation::IMFVideoMediaType** ppIVideoMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbmihBitMapInfoHeader);
        ORBIT_TRACK_PARAM(cbBitMapInfoHeader);
        ORBIT_TRACK_PARAM(dwPixelAspectRatioX);
        ORBIT_TRACK_PARAM(dwPixelAspectRatioY);
        ORBIT_TRACK_PARAM(InterlaceMode);
        ORBIT_TRACK_PARAM(VideoFlags);
        ORBIT_TRACK_PARAM(dwFramesPerSecondNumerator);
        ORBIT_TRACK_PARAM(dwFramesPerSecondDenominator);
        ORBIT_TRACK_PARAM(dwMaxBitRate);
        ORBIT_TRACK_PARAM(ppIVideoMediaType);

        auto win32_impl_result = g_api_table.MFCreateVideoMediaTypeFromBitMapInfoHeaderEx(pbmihBitMapInfoHeader, cbBitMapInfoHeader, dwPixelAspectRatioX, dwPixelAspectRatioY, InterlaceMode, VideoFlags, dwFramesPerSecondNumerator, dwFramesPerSecondDenominator, dwMaxBitRate, ppIVideoMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaTypeFromRepresentation(::win32::guid guidRepresentation, void* pvRepresentation, win32::Windows::Win32::Media::MediaFoundation::IMFMediaType** ppIMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidRepresentation);
        ORBIT_TRACK_PARAM(pvRepresentation);
        ORBIT_TRACK_PARAM(ppIMediaType);

        auto win32_impl_result = g_api_table.MFCreateMediaTypeFromRepresentation(guidRepresentation, pvRepresentation, ppIMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateAudioMediaType(win32::Windows::Win32::Media::Audio::WAVEFORMATEX* pAudioFormat, win32::Windows::Win32::Media::MediaFoundation::IMFAudioMediaType** ppIAudioMediaType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAudioFormat);
        ORBIT_TRACK_PARAM(ppIAudioMediaType);

        auto win32_impl_result = g_api_table.MFCreateAudioMediaType(pAudioFormat, ppIAudioMediaType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MFGetUncompressedVideoFormat(win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pVideoFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVideoFormat);

        auto win32_impl_result = g_api_table.MFGetUncompressedVideoFormat(pVideoFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitVideoFormat(win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pVideoFormat, win32::Windows::Win32::Media::MediaFoundation::MFStandardVideoFormat type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVideoFormat);
        ORBIT_TRACK_PARAM(type);

        auto win32_impl_result = g_api_table.MFInitVideoFormat(pVideoFormat, type);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFInitVideoFormat_RGB(win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pVideoFormat, uint32_t dwWidth, uint32_t dwHeight, uint32_t D3Dfmt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVideoFormat);
        ORBIT_TRACK_PARAM(dwWidth);
        ORBIT_TRACK_PARAM(dwHeight);
        ORBIT_TRACK_PARAM(D3Dfmt);

        auto win32_impl_result = g_api_table.MFInitVideoFormat_RGB(pVideoFormat, dwWidth, dwHeight, D3Dfmt);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFConvertColorInfoToDXVA(uint32_t* pdwToDXVA, win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pFromFormat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pdwToDXVA);
        ORBIT_TRACK_PARAM(pFromFormat);

        auto win32_impl_result = g_api_table.MFConvertColorInfoToDXVA(pdwToDXVA, pFromFormat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFConvertColorInfoFromDXVA(win32::Windows::Win32::Media::MediaFoundation::MFVIDEOFORMAT* pToFormat, uint32_t dwFromDXVA) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pToFormat);
        ORBIT_TRACK_PARAM(dwFromDXVA);

        auto win32_impl_result = g_api_table.MFConvertColorInfoFromDXVA(pToFormat, dwFromDXVA);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCopyImage(uint8_t* pDest, int32_t lDestStride, uint8_t* pSrc, int32_t lSrcStride, uint32_t dwWidthInBytes, uint32_t dwLines) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDest);
        ORBIT_TRACK_PARAM(lDestStride);
        ORBIT_TRACK_PARAM(pSrc);
        ORBIT_TRACK_PARAM(lSrcStride);
        ORBIT_TRACK_PARAM(dwWidthInBytes);
        ORBIT_TRACK_PARAM(dwLines);

        auto win32_impl_result = g_api_table.MFCopyImage(pDest, lDestStride, pSrc, lSrcStride, dwWidthInBytes, dwLines);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFConvertFromFP16Array(float* pDest, uint16_t* pSrc, uint32_t dwCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDest);
        ORBIT_TRACK_PARAM(pSrc);
        ORBIT_TRACK_PARAM(dwCount);

        auto win32_impl_result = g_api_table.MFConvertFromFP16Array(pDest, pSrc, dwCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFConvertToFP16Array(uint16_t* pDest, float* pSrc, uint32_t dwCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDest);
        ORBIT_TRACK_PARAM(pSrc);
        ORBIT_TRACK_PARAM(dwCount);

        auto win32_impl_result = g_api_table.MFConvertToFP16Array(pDest, pSrc, dwCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreate2DMediaBuffer(uint32_t dwWidth, uint32_t dwHeight, uint32_t dwFourCC, win32::Windows::Win32::Foundation::BOOL fBottomUp, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwWidth);
        ORBIT_TRACK_PARAM(dwHeight);
        ORBIT_TRACK_PARAM(dwFourCC);
        ORBIT_TRACK_PARAM(fBottomUp);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreate2DMediaBuffer(dwWidth, dwHeight, dwFourCC, fBottomUp, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateMediaBufferFromMediaType(win32::Windows::Win32::Media::MediaFoundation::IMFMediaType* pMediaType, int64_t llDuration, uint32_t dwMinLength, uint32_t dwMinAlignment, win32::Windows::Win32::Media::MediaFoundation::IMFMediaBuffer** ppBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaType);
        ORBIT_TRACK_PARAM(llDuration);
        ORBIT_TRACK_PARAM(dwMinLength);
        ORBIT_TRACK_PARAM(dwMinAlignment);
        ORBIT_TRACK_PARAM(ppBuffer);

        auto win32_impl_result = g_api_table.MFCreateMediaBufferFromMediaType(pMediaType, llDuration, dwMinLength, dwMinAlignment, ppBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateCollection(win32::Windows::Win32::Media::MediaFoundation::IMFCollection** ppIMFCollection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppIMFCollection);

        auto win32_impl_result = g_api_table.MFCreateCollection(ppIMFCollection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_MFHeapAlloc(size_t nSize, uint32_t dwFlags, win32::Windows::Win32::Foundation::PSTR pszFile, int32_t line, win32::Windows::Win32::Media::MediaFoundation::EAllocationType eat) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nSize);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pszFile);
        ORBIT_TRACK_PARAM(line);
        ORBIT_TRACK_PARAM(eat);

        auto win32_impl_result = g_api_table.MFHeapAlloc(nSize, dwFlags, pszFile, line, eat);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_MFHeapFree(void* pv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pv);

        g_api_table.MFHeapFree(pv);
        
    }

    int64_t __stdcall ORBIT_IMPL_MFllMulDiv(int64_t a, int64_t b, int64_t c, int64_t d) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(a);
        ORBIT_TRACK_PARAM(b);
        ORBIT_TRACK_PARAM(c);
        ORBIT_TRACK_PARAM(d);

        auto win32_impl_result = g_api_table.MFllMulDiv(a, b, c, d);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFGetContentProtectionSystemCLSID(::win32::guid* guidProtectionSystemID, ::win32::guid* pclsid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidProtectionSystemID);
        ORBIT_TRACK_PARAM(pclsid);

        auto win32_impl_result = g_api_table.MFGetContentProtectionSystemCLSID(guidProtectionSystemID, pclsid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCombineSamples(win32::Windows::Win32::Media::MediaFoundation::IMFSample* pSample, win32::Windows::Win32::Media::MediaFoundation::IMFSample* pSampleToAdd, uint32_t dwMaxMergedDurationInMS, win32::Windows::Win32::Foundation::BOOL* pMerged) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSample);
        ORBIT_TRACK_PARAM(pSampleToAdd);
        ORBIT_TRACK_PARAM(dwMaxMergedDurationInMS);
        ORBIT_TRACK_PARAM(pMerged);

        auto win32_impl_result = g_api_table.MFCombineSamples(pSample, pSampleToAdd, dwMaxMergedDurationInMS, pMerged);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFSplitSample(win32::Windows::Win32::Media::MediaFoundation::IMFSample* pSample, win32::Windows::Win32::Media::MediaFoundation::IMFSample** pOutputSamples, uint32_t dwOutputSampleMaxCount, uint32_t* pdwOutputSampleCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSample);
        ORBIT_TRACK_PARAM(pOutputSamples);
        ORBIT_TRACK_PARAM(dwOutputSampleMaxCount);
        ORBIT_TRACK_PARAM(pdwOutputSampleCount);

        auto win32_impl_result = g_api_table.MFSplitSample(pSample, pOutputSamples, dwOutputSampleMaxCount, pdwOutputSampleCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSourceReaderFromURL(win32::Windows::Win32::Foundation::PWSTR pwszURL, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFSourceReader** ppSourceReader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszURL);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppSourceReader);

        auto win32_impl_result = g_api_table.MFCreateSourceReaderFromURL(pwszURL, pAttributes, ppSourceReader);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSourceReaderFromByteStream(win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFSourceReader** ppSourceReader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pByteStream);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppSourceReader);

        auto win32_impl_result = g_api_table.MFCreateSourceReaderFromByteStream(pByteStream, pAttributes, ppSourceReader);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSourceReaderFromMediaSource(win32::Windows::Win32::Media::MediaFoundation::IMFMediaSource* pMediaSource, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFSourceReader** ppSourceReader) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaSource);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppSourceReader);

        auto win32_impl_result = g_api_table.MFCreateSourceReaderFromMediaSource(pMediaSource, pAttributes, ppSourceReader);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSinkWriterFromURL(win32::Windows::Win32::Foundation::PWSTR pwszOutputURL, win32::Windows::Win32::Media::MediaFoundation::IMFByteStream* pByteStream, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFSinkWriter** ppSinkWriter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszOutputURL);
        ORBIT_TRACK_PARAM(pByteStream);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppSinkWriter);

        auto win32_impl_result = g_api_table.MFCreateSinkWriterFromURL(pwszOutputURL, pByteStream, pAttributes, ppSinkWriter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateSinkWriterFromMediaSink(win32::Windows::Win32::Media::MediaFoundation::IMFMediaSink* pMediaSink, win32::Windows::Win32::Media::MediaFoundation::IMFAttributes* pAttributes, win32::Windows::Win32::Media::MediaFoundation::IMFSinkWriter** ppSinkWriter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMediaSink);
        ORBIT_TRACK_PARAM(pAttributes);
        ORBIT_TRACK_PARAM(ppSinkWriter);

        auto win32_impl_result = g_api_table.MFCreateSinkWriterFromMediaSink(pMediaSink, pAttributes, ppSinkWriter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoPresenter(win32::Windows::Win32::System::Com::IUnknown* pOwner, ::win32::guid* riidDevice, ::win32::guid* riid, void** ppVideoPresenter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOwner);
        ORBIT_TRACK_PARAM(riidDevice);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppVideoPresenter);

        auto win32_impl_result = g_api_table.MFCreateVideoPresenter(pOwner, riidDevice, riid, ppVideoPresenter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoMixer(win32::Windows::Win32::System::Com::IUnknown* pOwner, ::win32::guid* riidDevice, ::win32::guid* riid, void** ppv) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOwner);
        ORBIT_TRACK_PARAM(riidDevice);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppv);

        auto win32_impl_result = g_api_table.MFCreateVideoMixer(pOwner, riidDevice, riid, ppv);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoMixerAndPresenter(win32::Windows::Win32::System::Com::IUnknown* pMixerOwner, win32::Windows::Win32::System::Com::IUnknown* pPresenterOwner, ::win32::guid* riidMixer, void** ppvVideoMixer, ::win32::guid* riidPresenter, void** ppvVideoPresenter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMixerOwner);
        ORBIT_TRACK_PARAM(pPresenterOwner);
        ORBIT_TRACK_PARAM(riidMixer);
        ORBIT_TRACK_PARAM(ppvVideoMixer);
        ORBIT_TRACK_PARAM(riidPresenter);
        ORBIT_TRACK_PARAM(ppvVideoPresenter);

        auto win32_impl_result = g_api_table.MFCreateVideoMixerAndPresenter(pMixerOwner, pPresenterOwner, riidMixer, ppvVideoMixer, riidPresenter, ppvVideoPresenter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoRenderer(::win32::guid* riidRenderer, void** ppVideoRenderer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riidRenderer);
        ORBIT_TRACK_PARAM(ppVideoRenderer);

        auto win32_impl_result = g_api_table.MFCreateVideoRenderer(riidRenderer, ppVideoRenderer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoSampleFromSurface(win32::Windows::Win32::System::Com::IUnknown* pUnkSurface, win32::Windows::Win32::Media::MediaFoundation::IMFSample** ppSample) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pUnkSurface);
        ORBIT_TRACK_PARAM(ppSample);

        auto win32_impl_result = g_api_table.MFCreateVideoSampleFromSurface(pUnkSurface, ppSample);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVideoSampleAllocator(::win32::guid* riid, void** ppSampleAllocator) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppSampleAllocator);

        auto win32_impl_result = g_api_table.MFCreateVideoSampleAllocator(riid, ppSampleAllocator);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFPCreateMediaPlayer(win32::Windows::Win32::Foundation::PWSTR pwszURL, win32::Windows::Win32::Foundation::BOOL fStartPlayback, win32::Windows::Win32::Media::MediaFoundation::MFP_CREATION_OPTIONS creationOptions, win32::Windows::Win32::Media::MediaFoundation::IMFPMediaPlayerCallback* pCallback, win32::Windows::Win32::Foundation::HWND hWnd, win32::Windows::Win32::Media::MediaFoundation::IMFPMediaPlayer** ppMediaPlayer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwszURL);
        ORBIT_TRACK_PARAM(fStartPlayback);
        ORBIT_TRACK_PARAM(creationOptions);
        ORBIT_TRACK_PARAM(pCallback);
        ORBIT_TRACK_PARAM(hWnd);
        ORBIT_TRACK_PARAM(ppMediaPlayer);

        auto win32_impl_result = g_api_table.MFPCreateMediaPlayer(pwszURL, fStartPlayback, creationOptions, pCallback, hWnd, ppMediaPlayer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateEncryptedMediaExtensionsStoreActivate(win32::Windows::Win32::Media::MediaFoundation::IMFPMPHostApp* pmpHost, win32::Windows::Win32::System::Com::IStream* objectStream, win32::Windows::Win32::Foundation::PWSTR classId, win32::Windows::Win32::Media::MediaFoundation::IMFActivate** activate) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pmpHost);
        ORBIT_TRACK_PARAM(objectStream);
        ORBIT_TRACK_PARAM(classId);
        ORBIT_TRACK_PARAM(activate);

        auto win32_impl_result = g_api_table.MFCreateEncryptedMediaExtensionsStoreActivate(pmpHost, objectStream, classId, activate);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFCreateVirtualCamera(win32::Windows::Win32::Media::MediaFoundation::__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 type, win32::Windows::Win32::Media::MediaFoundation::__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0002 lifetime, win32::Windows::Win32::Media::MediaFoundation::__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0003 access, win32::Windows::Win32::Foundation::PWSTR friendlyName, win32::Windows::Win32::Foundation::PWSTR sourceId, ::win32::guid* categories, uint32_t categoryCount, win32::Windows::Win32::Media::MediaFoundation::IMFVirtualCamera** virtualCamera) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(lifetime);
        ORBIT_TRACK_PARAM(access);
        ORBIT_TRACK_PARAM(friendlyName);
        ORBIT_TRACK_PARAM(sourceId);
        ORBIT_TRACK_PARAM(categories);
        ORBIT_TRACK_PARAM(categoryCount);
        ORBIT_TRACK_PARAM(virtualCamera);

        auto win32_impl_result = g_api_table.MFCreateVirtualCamera(type, lifetime, access, friendlyName, sourceId, categories, categoryCount, virtualCamera);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_MFIsVirtualCameraTypeSupported(win32::Windows::Win32::Media::MediaFoundation::__MIDL___MIDL_itf_mfvirtualcamera_0000_0000_0001 type, win32::Windows::Win32::Foundation::BOOL* supported) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(supported);

        auto win32_impl_result = g_api_table.MFIsVirtualCameraTypeSupported(type, supported);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_OPMXboxEnableHDCP(win32::Windows::Win32::Media::MediaFoundation::OPM_HDCP_TYPE HDCPType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HDCPType);

        auto win32_impl_result = g_api_table.OPMXboxEnableHDCP(HDCPType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_OPMXboxGetHDCPStatus(win32::Windows::Win32::Media::MediaFoundation::OPM_HDCP_STATUS* pHDCPStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHDCPStatus);

        auto win32_impl_result = g_api_table.OPMXboxGetHDCPStatus(pHDCPStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_OPMXboxGetHDCPStatusAndType(win32::Windows::Win32::Media::MediaFoundation::OPM_HDCP_STATUS* pHDCPStatus, win32::Windows::Win32::Media::MediaFoundation::OPM_HDCP_TYPE* pHDCPType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pHDCPStatus);
        ORBIT_TRACK_PARAM(pHDCPType);

        auto win32_impl_result = g_api_table.OPMXboxGetHDCPStatusAndType(pHDCPStatus, pHDCPType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
