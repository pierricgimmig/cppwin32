// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Threading_2_H
#define WIN32_Windows_Win32_System_Threading_2_H
#include "win32/Windows.Win32.System.Threading.h"
#include "win32/impl/Windows.Win32.System.Threading.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Threading
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessWorkingSetSize(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t* lpMinimumWorkingSetSize, size_t* lpMaximumWorkingSetSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpMinimumWorkingSetSize);
        ORBIT_TRACK_PARAM(lpMaximumWorkingSetSize);

        auto win32_impl_result = g_api_table.GetProcessWorkingSetSize(hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessWorkingSetSize(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t dwMinimumWorkingSetSize, size_t dwMaximumWorkingSetSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwMinimumWorkingSetSize);
        ORBIT_TRACK_PARAM(dwMaximumWorkingSetSize);

        auto win32_impl_result = g_api_table.SetProcessWorkingSetSize(hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_FlsAlloc(win32::Windows::Win32::System::SystemServices::PFLS_CALLBACK_FUNCTION* lpCallback) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCallback);

        auto win32_impl_result = g_api_table.FlsAlloc(lpCallback);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_FlsGetValue(uint32_t dwFlsIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlsIndex);

        auto win32_impl_result = g_api_table.FlsGetValue(dwFlsIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FlsSetValue(uint32_t dwFlsIndex, void* lpFlsData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlsIndex);
        ORBIT_TRACK_PARAM(lpFlsData);

        auto win32_impl_result = g_api_table.FlsSetValue(dwFlsIndex, lpFlsData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FlsFree(uint32_t dwFlsIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlsIndex);

        auto win32_impl_result = g_api_table.FlsFree(dwFlsIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsThreadAFiber() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.IsThreadAFiber();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeSRWLock(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        g_api_table.InitializeSRWLock(SRWLock);
        
    }

    void __stdcall ORBIT_IMPL_ReleaseSRWLockExclusive(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        g_api_table.ReleaseSRWLockExclusive(SRWLock);
        
    }

    void __stdcall ORBIT_IMPL_ReleaseSRWLockShared(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        g_api_table.ReleaseSRWLockShared(SRWLock);
        
    }

    void __stdcall ORBIT_IMPL_AcquireSRWLockExclusive(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        g_api_table.AcquireSRWLockExclusive(SRWLock);
        
    }

    void __stdcall ORBIT_IMPL_AcquireSRWLockShared(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        g_api_table.AcquireSRWLockShared(SRWLock);
        
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_TryAcquireSRWLockExclusive(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        auto win32_impl_result = g_api_table.TryAcquireSRWLockExclusive(SRWLock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_TryAcquireSRWLockShared(win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SRWLock);

        auto win32_impl_result = g_api_table.TryAcquireSRWLockShared(SRWLock);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeCriticalSection(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);

        g_api_table.InitializeCriticalSection(lpCriticalSection);
        
    }

    void __stdcall ORBIT_IMPL_EnterCriticalSection(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);

        g_api_table.EnterCriticalSection(lpCriticalSection);
        
    }

    void __stdcall ORBIT_IMPL_LeaveCriticalSection(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);

        g_api_table.LeaveCriticalSection(lpCriticalSection);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitializeCriticalSectionAndSpinCount(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection, uint32_t dwSpinCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);
        ORBIT_TRACK_PARAM(dwSpinCount);

        auto win32_impl_result = g_api_table.InitializeCriticalSectionAndSpinCount(lpCriticalSection, dwSpinCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitializeCriticalSectionEx(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection, uint32_t dwSpinCount, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);
        ORBIT_TRACK_PARAM(dwSpinCount);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetCriticalSectionSpinCount(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection, uint32_t dwSpinCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);
        ORBIT_TRACK_PARAM(dwSpinCount);

        auto win32_impl_result = g_api_table.SetCriticalSectionSpinCount(lpCriticalSection, dwSpinCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TryEnterCriticalSection(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);

        auto win32_impl_result = g_api_table.TryEnterCriticalSection(lpCriticalSection);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DeleteCriticalSection(win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* lpCriticalSection) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCriticalSection);

        g_api_table.DeleteCriticalSection(lpCriticalSection);
        
    }

    void __stdcall ORBIT_IMPL_InitOnceInitialize(win32::Windows::Win32::System::SystemServices::RTL_RUN_ONCE* InitOnce) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitOnce);

        g_api_table.InitOnceInitialize(InitOnce);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitOnceExecuteOnce(win32::Windows::Win32::System::SystemServices::RTL_RUN_ONCE* InitOnce, win32::Windows::Win32::System::Threading::PINIT_ONCE_FN* InitFn, void* Parameter, void** Context) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitOnce);
        ORBIT_TRACK_PARAM(InitFn);
        ORBIT_TRACK_PARAM(Parameter);
        ORBIT_TRACK_PARAM(Context);

        auto win32_impl_result = g_api_table.InitOnceExecuteOnce(InitOnce, InitFn, Parameter, Context);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitOnceBeginInitialize(win32::Windows::Win32::System::SystemServices::RTL_RUN_ONCE* lpInitOnce, uint32_t dwFlags, win32::Windows::Win32::Foundation::BOOL* fPending, void** lpContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpInitOnce);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(fPending);
        ORBIT_TRACK_PARAM(lpContext);

        auto win32_impl_result = g_api_table.InitOnceBeginInitialize(lpInitOnce, dwFlags, fPending, lpContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitOnceComplete(win32::Windows::Win32::System::SystemServices::RTL_RUN_ONCE* lpInitOnce, uint32_t dwFlags, void* lpContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpInitOnce);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpContext);

        auto win32_impl_result = g_api_table.InitOnceComplete(lpInitOnce, dwFlags, lpContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeConditionVariable(win32::Windows::Win32::System::SystemServices::RTL_CONDITION_VARIABLE* ConditionVariable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConditionVariable);

        g_api_table.InitializeConditionVariable(ConditionVariable);
        
    }

    void __stdcall ORBIT_IMPL_WakeConditionVariable(win32::Windows::Win32::System::SystemServices::RTL_CONDITION_VARIABLE* ConditionVariable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConditionVariable);

        g_api_table.WakeConditionVariable(ConditionVariable);
        
    }

    void __stdcall ORBIT_IMPL_WakeAllConditionVariable(win32::Windows::Win32::System::SystemServices::RTL_CONDITION_VARIABLE* ConditionVariable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConditionVariable);

        g_api_table.WakeAllConditionVariable(ConditionVariable);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SleepConditionVariableCS(win32::Windows::Win32::System::SystemServices::RTL_CONDITION_VARIABLE* ConditionVariable, win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* CriticalSection, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConditionVariable);
        ORBIT_TRACK_PARAM(CriticalSection);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.SleepConditionVariableCS(ConditionVariable, CriticalSection, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SleepConditionVariableSRW(win32::Windows::Win32::System::SystemServices::RTL_CONDITION_VARIABLE* ConditionVariable, win32::Windows::Win32::System::SystemServices::RTL_SRWLOCK* SRWLock, uint32_t dwMilliseconds, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ConditionVariable);
        ORBIT_TRACK_PARAM(SRWLock);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.SleepConditionVariableSRW(ConditionVariable, SRWLock, dwMilliseconds, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetEvent(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.SetEvent(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResetEvent(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.ResetEvent(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReleaseSemaphore(win32::Windows::Win32::Foundation::HANDLE hSemaphore, int32_t lReleaseCount, int32_t* lpPreviousCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSemaphore);
        ORBIT_TRACK_PARAM(lReleaseCount);
        ORBIT_TRACK_PARAM(lpPreviousCount);

        auto win32_impl_result = g_api_table.ReleaseSemaphore(hSemaphore, lReleaseCount, lpPreviousCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReleaseMutex(win32::Windows::Win32::Foundation::HANDLE hMutex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hMutex);

        auto win32_impl_result = g_api_table.ReleaseMutex(hMutex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WaitForSingleObject(win32::Windows::Win32::Foundation::HANDLE hHandle, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHandle);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.WaitForSingleObject(hHandle, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SleepEx(uint32_t dwMilliseconds, win32::Windows::Win32::Foundation::BOOL bAlertable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(bAlertable);

        auto win32_impl_result = g_api_table.SleepEx(dwMilliseconds, bAlertable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WaitForSingleObjectEx(win32::Windows::Win32::Foundation::HANDLE hHandle, uint32_t dwMilliseconds, win32::Windows::Win32::Foundation::BOOL bAlertable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hHandle);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(bAlertable);

        auto win32_impl_result = g_api_table.WaitForSingleObjectEx(hHandle, dwMilliseconds, bAlertable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WaitForMultipleObjectsEx(uint32_t nCount, win32::Windows::Win32::Foundation::HANDLE* lpHandles, win32::Windows::Win32::Foundation::BOOL bWaitAll, uint32_t dwMilliseconds, win32::Windows::Win32::Foundation::BOOL bAlertable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nCount);
        ORBIT_TRACK_PARAM(lpHandles);
        ORBIT_TRACK_PARAM(bWaitAll);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(bAlertable);

        auto win32_impl_result = g_api_table.WaitForMultipleObjectsEx(nCount, lpHandles, bWaitAll, dwMilliseconds, bAlertable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateMutexA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpMutexAttributes, win32::Windows::Win32::Foundation::BOOL bInitialOwner, win32::Windows::Win32::Foundation::PSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpMutexAttributes);
        ORBIT_TRACK_PARAM(bInitialOwner);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateMutexA(lpMutexAttributes, bInitialOwner, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateMutexW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpMutexAttributes, win32::Windows::Win32::Foundation::BOOL bInitialOwner, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpMutexAttributes);
        ORBIT_TRACK_PARAM(bInitialOwner);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateMutexW(lpMutexAttributes, bInitialOwner, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenMutexW(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.OpenMutexW(dwDesiredAccess, bInheritHandle, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateEventA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpEventAttributes, win32::Windows::Win32::Foundation::BOOL bManualReset, win32::Windows::Win32::Foundation::BOOL bInitialState, win32::Windows::Win32::Foundation::PSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEventAttributes);
        ORBIT_TRACK_PARAM(bManualReset);
        ORBIT_TRACK_PARAM(bInitialState);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateEventA(lpEventAttributes, bManualReset, bInitialState, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateEventW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpEventAttributes, win32::Windows::Win32::Foundation::BOOL bManualReset, win32::Windows::Win32::Foundation::BOOL bInitialState, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEventAttributes);
        ORBIT_TRACK_PARAM(bManualReset);
        ORBIT_TRACK_PARAM(bInitialState);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateEventW(lpEventAttributes, bManualReset, bInitialState, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenEventA(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.OpenEventA(dwDesiredAccess, bInheritHandle, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenEventW(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.OpenEventW(dwDesiredAccess, bInheritHandle, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenSemaphoreW(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.OpenSemaphoreW(dwDesiredAccess, bInheritHandle, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenWaitableTimerW(uint32_t dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, win32::Windows::Win32::Foundation::PWSTR lpTimerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(lpTimerName);

        auto win32_impl_result = g_api_table.OpenWaitableTimerW(dwDesiredAccess, bInheritHandle, lpTimerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetWaitableTimerEx(win32::Windows::Win32::Foundation::HANDLE hTimer, win32::Windows::Win32::Foundation::LARGE_INTEGER* lpDueTime, int32_t lPeriod, win32::Windows::Win32::System::Threading::PTIMERAPCROUTINE* pfnCompletionRoutine, void* lpArgToCompletionRoutine, win32::Windows::Win32::System::SystemServices::REASON_CONTEXT* WakeContext, uint32_t TolerableDelay) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hTimer);
        ORBIT_TRACK_PARAM(lpDueTime);
        ORBIT_TRACK_PARAM(lPeriod);
        ORBIT_TRACK_PARAM(pfnCompletionRoutine);
        ORBIT_TRACK_PARAM(lpArgToCompletionRoutine);
        ORBIT_TRACK_PARAM(WakeContext);
        ORBIT_TRACK_PARAM(TolerableDelay);

        auto win32_impl_result = g_api_table.SetWaitableTimerEx(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, WakeContext, TolerableDelay);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetWaitableTimer(win32::Windows::Win32::Foundation::HANDLE hTimer, win32::Windows::Win32::Foundation::LARGE_INTEGER* lpDueTime, int32_t lPeriod, win32::Windows::Win32::System::Threading::PTIMERAPCROUTINE* pfnCompletionRoutine, void* lpArgToCompletionRoutine, win32::Windows::Win32::Foundation::BOOL fResume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hTimer);
        ORBIT_TRACK_PARAM(lpDueTime);
        ORBIT_TRACK_PARAM(lPeriod);
        ORBIT_TRACK_PARAM(pfnCompletionRoutine);
        ORBIT_TRACK_PARAM(lpArgToCompletionRoutine);
        ORBIT_TRACK_PARAM(fResume);

        auto win32_impl_result = g_api_table.SetWaitableTimer(hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, fResume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CancelWaitableTimer(win32::Windows::Win32::Foundation::HANDLE hTimer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hTimer);

        auto win32_impl_result = g_api_table.CancelWaitableTimer(hTimer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateMutexExA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpMutexAttributes, win32::Windows::Win32::Foundation::PSTR lpName, uint32_t dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpMutexAttributes);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateMutexExA(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateMutexExW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpMutexAttributes, win32::Windows::Win32::Foundation::PWSTR lpName, uint32_t dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpMutexAttributes);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateMutexExW(lpMutexAttributes, lpName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateEventExA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpEventAttributes, win32::Windows::Win32::Foundation::PSTR lpName, win32::Windows::Win32::System::Threading::CREATE_EVENT dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEventAttributes);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateEventExA(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateEventExW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpEventAttributes, win32::Windows::Win32::Foundation::PWSTR lpName, win32::Windows::Win32::System::Threading::CREATE_EVENT dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEventAttributes);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateEventExW(lpEventAttributes, lpName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateSemaphoreExW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSemaphoreAttributes, int32_t lInitialCount, int32_t lMaximumCount, win32::Windows::Win32::Foundation::PWSTR lpName, uint32_t dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSemaphoreAttributes);
        ORBIT_TRACK_PARAM(lInitialCount);
        ORBIT_TRACK_PARAM(lMaximumCount);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateSemaphoreExW(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateWaitableTimerExW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpTimerAttributes, win32::Windows::Win32::Foundation::PWSTR lpTimerName, uint32_t dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTimerAttributes);
        ORBIT_TRACK_PARAM(lpTimerName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateWaitableTimerExW(lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnterSynchronizationBarrier(win32::Windows::Win32::System::SystemServices::RTL_BARRIER* lpBarrier, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBarrier);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.EnterSynchronizationBarrier(lpBarrier, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitializeSynchronizationBarrier(win32::Windows::Win32::System::SystemServices::RTL_BARRIER* lpBarrier, int32_t lTotalThreads, int32_t lSpinCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBarrier);
        ORBIT_TRACK_PARAM(lTotalThreads);
        ORBIT_TRACK_PARAM(lSpinCount);

        auto win32_impl_result = g_api_table.InitializeSynchronizationBarrier(lpBarrier, lTotalThreads, lSpinCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteSynchronizationBarrier(win32::Windows::Win32::System::SystemServices::RTL_BARRIER* lpBarrier) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBarrier);

        auto win32_impl_result = g_api_table.DeleteSynchronizationBarrier(lpBarrier);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_Sleep(uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwMilliseconds);

        g_api_table.Sleep(dwMilliseconds);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_WaitOnAddress(void* Address, void* CompareAddress, size_t AddressSize, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);
        ORBIT_TRACK_PARAM(CompareAddress);
        ORBIT_TRACK_PARAM(AddressSize);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.WaitOnAddress(Address, CompareAddress, AddressSize, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WakeByAddressSingle(void* Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        g_api_table.WakeByAddressSingle(Address);
        
    }

    void __stdcall ORBIT_IMPL_WakeByAddressAll(void* Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        g_api_table.WakeByAddressAll(Address);
        
    }

    uint32_t __stdcall ORBIT_IMPL_WaitForMultipleObjects(uint32_t nCount, win32::Windows::Win32::Foundation::HANDLE* lpHandles, win32::Windows::Win32::Foundation::BOOL bWaitAll, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nCount);
        ORBIT_TRACK_PARAM(lpHandles);
        ORBIT_TRACK_PARAM(bWaitAll);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.WaitForMultipleObjects(nCount, lpHandles, bWaitAll, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateSemaphoreW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSemaphoreAttributes, int32_t lInitialCount, int32_t lMaximumCount, win32::Windows::Win32::Foundation::PWSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSemaphoreAttributes);
        ORBIT_TRACK_PARAM(lInitialCount);
        ORBIT_TRACK_PARAM(lMaximumCount);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateSemaphoreW(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateWaitableTimerW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpTimerAttributes, win32::Windows::Win32::Foundation::BOOL bManualReset, win32::Windows::Win32::Foundation::PWSTR lpTimerName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpTimerAttributes);
        ORBIT_TRACK_PARAM(bManualReset);
        ORBIT_TRACK_PARAM(lpTimerName);

        auto win32_impl_result = g_api_table.CreateWaitableTimerW(lpTimerAttributes, bManualReset, lpTimerName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_InitializeSListHead(win32::Windows::Win32::System::Kernel::SLIST_HEADER* ListHead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListHead);

        g_api_table.InitializeSListHead(ListHead);
        
    }

    win32::Windows::Win32::System::Kernel::SLIST_ENTRY* __stdcall ORBIT_IMPL_InterlockedPopEntrySList(win32::Windows::Win32::System::Kernel::SLIST_HEADER* ListHead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListHead);

        auto win32_impl_result = g_api_table.InterlockedPopEntrySList(ListHead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Kernel::SLIST_ENTRY* __stdcall ORBIT_IMPL_InterlockedPushEntrySList(win32::Windows::Win32::System::Kernel::SLIST_HEADER* ListHead, win32::Windows::Win32::System::Kernel::SLIST_ENTRY* ListEntry) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListHead);
        ORBIT_TRACK_PARAM(ListEntry);

        auto win32_impl_result = g_api_table.InterlockedPushEntrySList(ListHead, ListEntry);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Kernel::SLIST_ENTRY* __stdcall ORBIT_IMPL_InterlockedPushListSListEx(win32::Windows::Win32::System::Kernel::SLIST_HEADER* ListHead, win32::Windows::Win32::System::Kernel::SLIST_ENTRY* List, win32::Windows::Win32::System::Kernel::SLIST_ENTRY* ListEnd, uint32_t Count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListHead);
        ORBIT_TRACK_PARAM(List);
        ORBIT_TRACK_PARAM(ListEnd);
        ORBIT_TRACK_PARAM(Count);

        auto win32_impl_result = g_api_table.InterlockedPushListSListEx(ListHead, List, ListEnd, Count);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Kernel::SLIST_ENTRY* __stdcall ORBIT_IMPL_InterlockedFlushSList(win32::Windows::Win32::System::Kernel::SLIST_HEADER* ListHead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListHead);

        auto win32_impl_result = g_api_table.InterlockedFlushSList(ListHead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_QueryDepthSList(win32::Windows::Win32::System::Kernel::SLIST_HEADER* ListHead) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ListHead);

        auto win32_impl_result = g_api_table.QueryDepthSList(ListHead);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueueUserAPC(win32::Windows::Win32::System::SystemServices::PAPCFUNC* pfnAPC, win32::Windows::Win32::Foundation::HANDLE hThread, size_t dwData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnAPC);
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(dwData);

        auto win32_impl_result = g_api_table.QueueUserAPC(pfnAPC, hThread, dwData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueueUserAPC2(win32::Windows::Win32::System::SystemServices::PAPCFUNC* ApcRoutine, win32::Windows::Win32::Foundation::HANDLE Thread, size_t Data, win32::Windows::Win32::System::Threading::QUEUE_USER_APC_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ApcRoutine);
        ORBIT_TRACK_PARAM(Thread);
        ORBIT_TRACK_PARAM(Data);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.QueueUserAPC2(ApcRoutine, Thread, Data, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessTimes(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Foundation::FILETIME* lpCreationTime, win32::Windows::Win32::Foundation::FILETIME* lpExitTime, win32::Windows::Win32::Foundation::FILETIME* lpKernelTime, win32::Windows::Win32::Foundation::FILETIME* lpUserTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpCreationTime);
        ORBIT_TRACK_PARAM(lpExitTime);
        ORBIT_TRACK_PARAM(lpKernelTime);
        ORBIT_TRACK_PARAM(lpUserTime);

        auto win32_impl_result = g_api_table.GetProcessTimes(hProcess, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_GetCurrentProcess() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentProcess();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCurrentProcessId() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentProcessId();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ExitProcess(uint32_t uExitCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(uExitCode);

        g_api_table.ExitProcess(uExitCode);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TerminateProcess(win32::Windows::Win32::Foundation::HANDLE hProcess, uint32_t uExitCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(uExitCode);

        auto win32_impl_result = g_api_table.TerminateProcess(hProcess, uExitCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetExitCodeProcess(win32::Windows::Win32::Foundation::HANDLE hProcess, uint32_t* lpExitCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpExitCode);

        auto win32_impl_result = g_api_table.GetExitCodeProcess(hProcess, lpExitCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SwitchToThread() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.SwitchToThread();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateThread(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, size_t dwStackSize, win32::Windows::Win32::System::SystemServices::LPTHREAD_START_ROUTINE* lpStartAddress, void* lpParameter, win32::Windows::Win32::System::Threading::THREAD_CREATION_FLAGS dwCreationFlags, uint32_t* lpThreadId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(dwStackSize);
        ORBIT_TRACK_PARAM(lpStartAddress);
        ORBIT_TRACK_PARAM(lpParameter);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpThreadId);

        auto win32_impl_result = g_api_table.CreateThread(lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateRemoteThread(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, size_t dwStackSize, win32::Windows::Win32::System::SystemServices::LPTHREAD_START_ROUTINE* lpStartAddress, void* lpParameter, uint32_t dwCreationFlags, uint32_t* lpThreadId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(dwStackSize);
        ORBIT_TRACK_PARAM(lpStartAddress);
        ORBIT_TRACK_PARAM(lpParameter);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpThreadId);

        auto win32_impl_result = g_api_table.CreateRemoteThread(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_GetCurrentThread() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentThread();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCurrentThreadId() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentThreadId();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenThread(win32::Windows::Win32::System::Threading::THREAD_ACCESS_RIGHTS dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, uint32_t dwThreadId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(dwThreadId);

        auto win32_impl_result = g_api_table.OpenThread(dwDesiredAccess, bInheritHandle, dwThreadId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadPriority(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::Threading::THREAD_PRIORITY nPriority) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(nPriority);

        auto win32_impl_result = g_api_table.SetThreadPriority(hThread, nPriority);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadPriorityBoost(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::Foundation::BOOL bDisablePriorityBoost) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(bDisablePriorityBoost);

        auto win32_impl_result = g_api_table.SetThreadPriorityBoost(hThread, bDisablePriorityBoost);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadPriorityBoost(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::Foundation::BOOL* pDisablePriorityBoost) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(pDisablePriorityBoost);

        auto win32_impl_result = g_api_table.GetThreadPriorityBoost(hThread, pDisablePriorityBoost);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetThreadPriority(win32::Windows::Win32::Foundation::HANDLE hThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);

        auto win32_impl_result = g_api_table.GetThreadPriority(hThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ExitThread(uint32_t dwExitCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwExitCode);

        g_api_table.ExitThread(dwExitCode);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TerminateThread(win32::Windows::Win32::Foundation::HANDLE hThread, uint32_t dwExitCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(dwExitCode);

        auto win32_impl_result = g_api_table.TerminateThread(hThread, dwExitCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetExitCodeThread(win32::Windows::Win32::Foundation::HANDLE hThread, uint32_t* lpExitCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(lpExitCode);

        auto win32_impl_result = g_api_table.GetExitCodeThread(hThread, lpExitCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SuspendThread(win32::Windows::Win32::Foundation::HANDLE hThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);

        auto win32_impl_result = g_api_table.SuspendThread(hThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResumeThread(win32::Windows::Win32::Foundation::HANDLE hThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);

        auto win32_impl_result = g_api_table.ResumeThread(hThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_TlsAlloc() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.TlsAlloc();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_TlsGetValue(uint32_t dwTlsIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTlsIndex);

        auto win32_impl_result = g_api_table.TlsGetValue(dwTlsIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TlsSetValue(uint32_t dwTlsIndex, void* lpTlsValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTlsIndex);
        ORBIT_TRACK_PARAM(lpTlsValue);

        auto win32_impl_result = g_api_table.TlsSetValue(dwTlsIndex, lpTlsValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TlsFree(uint32_t dwTlsIndex) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwTlsIndex);

        auto win32_impl_result = g_api_table.TlsFree(dwTlsIndex);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateProcessA(win32::Windows::Win32::Foundation::PSTR lpApplicationName, win32::Windows::Win32::Foundation::PSTR lpCommandLine, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpProcessAttributes, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, win32::Windows::Win32::Foundation::BOOL bInheritHandles, win32::Windows::Win32::System::Threading::PROCESS_CREATION_FLAGS dwCreationFlags, void* lpEnvironment, win32::Windows::Win32::Foundation::PSTR lpCurrentDirectory, win32::Windows::Win32::System::Threading::STARTUPINFOA* lpStartupInfo, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION* lpProcessInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpCommandLine);
        ORBIT_TRACK_PARAM(lpProcessAttributes);
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(bInheritHandles);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpEnvironment);
        ORBIT_TRACK_PARAM(lpCurrentDirectory);
        ORBIT_TRACK_PARAM(lpStartupInfo);
        ORBIT_TRACK_PARAM(lpProcessInformation);

        auto win32_impl_result = g_api_table.CreateProcessA(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateProcessW(win32::Windows::Win32::Foundation::PWSTR lpApplicationName, win32::Windows::Win32::Foundation::PWSTR lpCommandLine, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpProcessAttributes, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, win32::Windows::Win32::Foundation::BOOL bInheritHandles, win32::Windows::Win32::System::Threading::PROCESS_CREATION_FLAGS dwCreationFlags, void* lpEnvironment, win32::Windows::Win32::Foundation::PWSTR lpCurrentDirectory, win32::Windows::Win32::System::Threading::STARTUPINFOW* lpStartupInfo, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION* lpProcessInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpCommandLine);
        ORBIT_TRACK_PARAM(lpProcessAttributes);
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(bInheritHandles);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpEnvironment);
        ORBIT_TRACK_PARAM(lpCurrentDirectory);
        ORBIT_TRACK_PARAM(lpStartupInfo);
        ORBIT_TRACK_PARAM(lpProcessInformation);

        auto win32_impl_result = g_api_table.CreateProcessW(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessShutdownParameters(uint32_t dwLevel, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwLevel);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.SetProcessShutdownParameters(dwLevel, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetProcessVersion(uint32_t ProcessId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessId);

        auto win32_impl_result = g_api_table.GetProcessVersion(ProcessId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_GetStartupInfoW(win32::Windows::Win32::System::Threading::STARTUPINFOW* lpStartupInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpStartupInfo);

        g_api_table.GetStartupInfoW(lpStartupInfo);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateProcessAsUserW(win32::Windows::Win32::Foundation::HANDLE hToken, win32::Windows::Win32::Foundation::PWSTR lpApplicationName, win32::Windows::Win32::Foundation::PWSTR lpCommandLine, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpProcessAttributes, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, win32::Windows::Win32::Foundation::BOOL bInheritHandles, uint32_t dwCreationFlags, void* lpEnvironment, win32::Windows::Win32::Foundation::PWSTR lpCurrentDirectory, win32::Windows::Win32::System::Threading::STARTUPINFOW* lpStartupInfo, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION* lpProcessInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hToken);
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpCommandLine);
        ORBIT_TRACK_PARAM(lpProcessAttributes);
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(bInheritHandles);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpEnvironment);
        ORBIT_TRACK_PARAM(lpCurrentDirectory);
        ORBIT_TRACK_PARAM(lpStartupInfo);
        ORBIT_TRACK_PARAM(lpProcessInformation);

        auto win32_impl_result = g_api_table.CreateProcessAsUserW(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadToken(win32::Windows::Win32::Foundation::HANDLE* Thread, win32::Windows::Win32::Foundation::HANDLE Token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);
        ORBIT_TRACK_PARAM(Token);

        auto win32_impl_result = g_api_table.SetThreadToken(Thread, Token);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_OpenProcessToken(win32::Windows::Win32::Foundation::HANDLE ProcessHandle, win32::Windows::Win32::Security::TOKEN_ACCESS_MASK DesiredAccess, win32::Windows::Win32::Foundation::HANDLE* TokenHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(TokenHandle);

        auto win32_impl_result = g_api_table.OpenProcessToken(ProcessHandle, DesiredAccess, TokenHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_OpenThreadToken(win32::Windows::Win32::Foundation::HANDLE ThreadHandle, win32::Windows::Win32::Security::TOKEN_ACCESS_MASK DesiredAccess, win32::Windows::Win32::Foundation::BOOL OpenAsSelf, win32::Windows::Win32::Foundation::HANDLE* TokenHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ThreadHandle);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(OpenAsSelf);
        ORBIT_TRACK_PARAM(TokenHandle);

        auto win32_impl_result = g_api_table.OpenThreadToken(ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetPriorityClass(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_CREATION_FLAGS dwPriorityClass) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwPriorityClass);

        auto win32_impl_result = g_api_table.SetPriorityClass(hProcess, dwPriorityClass);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetPriorityClass(win32::Windows::Win32::Foundation::HANDLE hProcess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);

        auto win32_impl_result = g_api_table.GetPriorityClass(hProcess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadStackGuarantee(uint32_t* StackSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(StackSizeInBytes);

        auto win32_impl_result = g_api_table.SetThreadStackGuarantee(StackSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetProcessId(win32::Windows::Win32::Foundation::HANDLE Process) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);

        auto win32_impl_result = g_api_table.GetProcessId(Process);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetThreadId(win32::Windows::Win32::Foundation::HANDLE Thread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);

        auto win32_impl_result = g_api_table.GetThreadId(Thread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_FlushProcessWriteBuffers() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.FlushProcessWriteBuffers();
        
    }

    uint32_t __stdcall ORBIT_IMPL_GetProcessIdOfThread(win32::Windows::Win32::Foundation::HANDLE Thread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);

        auto win32_impl_result = g_api_table.GetProcessIdOfThread(Thread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_InitializeProcThreadAttributeList(win32::Windows::Win32::System::Threading::LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, uint32_t dwAttributeCount, uint32_t dwFlags, size_t* lpSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAttributeList);
        ORBIT_TRACK_PARAM(dwAttributeCount);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpSize);

        auto win32_impl_result = g_api_table.InitializeProcThreadAttributeList(lpAttributeList, dwAttributeCount, dwFlags, lpSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DeleteProcThreadAttributeList(win32::Windows::Win32::System::Threading::LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAttributeList);

        g_api_table.DeleteProcThreadAttributeList(lpAttributeList);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UpdateProcThreadAttribute(win32::Windows::Win32::System::Threading::LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, uint32_t dwFlags, size_t Attribute, void* lpValue, size_t cbSize, void* lpPreviousValue, size_t* lpReturnSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpAttributeList);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(Attribute);
        ORBIT_TRACK_PARAM(lpValue);
        ORBIT_TRACK_PARAM(cbSize);
        ORBIT_TRACK_PARAM(lpPreviousValue);
        ORBIT_TRACK_PARAM(lpReturnSize);

        auto win32_impl_result = g_api_table.UpdateProcThreadAttribute(lpAttributeList, dwFlags, Attribute, lpValue, cbSize, lpPreviousValue, lpReturnSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessDynamicEHContinuationTargets(win32::Windows::Win32::Foundation::HANDLE Process, uint16_t NumberOfTargets, win32::Windows::Win32::System::SystemServices::PROCESS_DYNAMIC_EH_CONTINUATION_TARGET* Targets) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(NumberOfTargets);
        ORBIT_TRACK_PARAM(Targets);

        auto win32_impl_result = g_api_table.SetProcessDynamicEHContinuationTargets(Process, NumberOfTargets, Targets);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessDynamicEnforcedCetCompatibleRanges(win32::Windows::Win32::Foundation::HANDLE Process, uint16_t NumberOfRanges, win32::Windows::Win32::System::SystemServices::PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE* Ranges) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(NumberOfRanges);
        ORBIT_TRACK_PARAM(Ranges);

        auto win32_impl_result = g_api_table.SetProcessDynamicEnforcedCetCompatibleRanges(Process, NumberOfRanges, Ranges);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessAffinityUpdateMode(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_AFFINITY_AUTO_UPDATE_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.SetProcessAffinityUpdateMode(hProcess, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryProcessAffinityUpdateMode(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_AFFINITY_AUTO_UPDATE_FLAGS* lpdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpdwFlags);

        auto win32_impl_result = g_api_table.QueryProcessAffinityUpdateMode(hProcess, lpdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateRemoteThreadEx(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, size_t dwStackSize, win32::Windows::Win32::System::SystemServices::LPTHREAD_START_ROUTINE* lpStartAddress, void* lpParameter, uint32_t dwCreationFlags, win32::Windows::Win32::System::Threading::LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, uint32_t* lpThreadId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(dwStackSize);
        ORBIT_TRACK_PARAM(lpStartAddress);
        ORBIT_TRACK_PARAM(lpParameter);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpAttributeList);
        ORBIT_TRACK_PARAM(lpThreadId);

        auto win32_impl_result = g_api_table.CreateRemoteThreadEx(hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpAttributeList, lpThreadId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_GetCurrentThreadStackLimits(size_t* LowLimit, size_t* HighLimit) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(LowLimit);
        ORBIT_TRACK_PARAM(HighLimit);

        g_api_table.GetCurrentThreadStackLimits(LowLimit, HighLimit);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessMitigationPolicy(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::SystemServices::PROCESS_MITIGATION_POLICY MitigationPolicy, void* lpBuffer, size_t dwLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(MitigationPolicy);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwLength);

        auto win32_impl_result = g_api_table.GetProcessMitigationPolicy(hProcess, MitigationPolicy, lpBuffer, dwLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessMitigationPolicy(win32::Windows::Win32::System::SystemServices::PROCESS_MITIGATION_POLICY MitigationPolicy, void* lpBuffer, size_t dwLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MitigationPolicy);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(dwLength);

        auto win32_impl_result = g_api_table.SetProcessMitigationPolicy(MitigationPolicy, lpBuffer, dwLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadTimes(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::Foundation::FILETIME* lpCreationTime, win32::Windows::Win32::Foundation::FILETIME* lpExitTime, win32::Windows::Win32::Foundation::FILETIME* lpKernelTime, win32::Windows::Win32::Foundation::FILETIME* lpUserTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(lpCreationTime);
        ORBIT_TRACK_PARAM(lpExitTime);
        ORBIT_TRACK_PARAM(lpKernelTime);
        ORBIT_TRACK_PARAM(lpUserTime);

        auto win32_impl_result = g_api_table.GetThreadTimes(hThread, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_OpenProcess(win32::Windows::Win32::System::Threading::PROCESS_ACCESS_RIGHTS dwDesiredAccess, win32::Windows::Win32::Foundation::BOOL bInheritHandle, uint32_t dwProcessId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(bInheritHandle);
        ORBIT_TRACK_PARAM(dwProcessId);

        auto win32_impl_result = g_api_table.OpenProcess(dwDesiredAccess, bInheritHandle, dwProcessId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsProcessorFeaturePresent(win32::Windows::Win32::System::Threading::PROCESSOR_FEATURE_ID ProcessorFeature) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessorFeature);

        auto win32_impl_result = g_api_table.IsProcessorFeaturePresent(ProcessorFeature);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessHandleCount(win32::Windows::Win32::Foundation::HANDLE hProcess, uint32_t* pdwHandleCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(pdwHandleCount);

        auto win32_impl_result = g_api_table.GetProcessHandleCount(hProcess, pdwHandleCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetCurrentProcessorNumber() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentProcessorNumber();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadIdealProcessorEx(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::Kernel::PROCESSOR_NUMBER* lpIdealProcessor, win32::Windows::Win32::System::Kernel::PROCESSOR_NUMBER* lpPreviousIdealProcessor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(lpIdealProcessor);
        ORBIT_TRACK_PARAM(lpPreviousIdealProcessor);

        auto win32_impl_result = g_api_table.SetThreadIdealProcessorEx(hThread, lpIdealProcessor, lpPreviousIdealProcessor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadIdealProcessorEx(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::Kernel::PROCESSOR_NUMBER* lpIdealProcessor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(lpIdealProcessor);

        auto win32_impl_result = g_api_table.GetThreadIdealProcessorEx(hThread, lpIdealProcessor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_GetCurrentProcessorNumberEx(win32::Windows::Win32::System::Kernel::PROCESSOR_NUMBER* ProcNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcNumber);

        g_api_table.GetCurrentProcessorNumberEx(ProcNumber);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessPriorityBoost(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Foundation::BOOL* pDisablePriorityBoost) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(pDisablePriorityBoost);

        auto win32_impl_result = g_api_table.GetProcessPriorityBoost(hProcess, pDisablePriorityBoost);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessPriorityBoost(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Foundation::BOOL bDisablePriorityBoost) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(bDisablePriorityBoost);

        auto win32_impl_result = g_api_table.SetProcessPriorityBoost(hProcess, bDisablePriorityBoost);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadIOPendingFlag(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::Foundation::BOOL* lpIOIsPending) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(lpIOIsPending);

        auto win32_impl_result = g_api_table.GetThreadIOPendingFlag(hThread, lpIOIsPending);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetSystemTimes(win32::Windows::Win32::Foundation::FILETIME* lpIdleTime, win32::Windows::Win32::Foundation::FILETIME* lpKernelTime, win32::Windows::Win32::Foundation::FILETIME* lpUserTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpIdleTime);
        ORBIT_TRACK_PARAM(lpKernelTime);
        ORBIT_TRACK_PARAM(lpUserTime);

        auto win32_impl_result = g_api_table.GetSystemTimes(lpIdleTime, lpKernelTime, lpUserTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadInformation(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::Threading::THREAD_INFORMATION_CLASS ThreadInformationClass, void* ThreadInformation, uint32_t ThreadInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(ThreadInformationClass);
        ORBIT_TRACK_PARAM(ThreadInformation);
        ORBIT_TRACK_PARAM(ThreadInformationSize);

        auto win32_impl_result = g_api_table.GetThreadInformation(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadInformation(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::Threading::THREAD_INFORMATION_CLASS ThreadInformationClass, void* ThreadInformation, uint32_t ThreadInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(ThreadInformationClass);
        ORBIT_TRACK_PARAM(ThreadInformation);
        ORBIT_TRACK_PARAM(ThreadInformationSize);

        auto win32_impl_result = g_api_table.SetThreadInformation(hThread, ThreadInformationClass, ThreadInformation, ThreadInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsProcessCritical(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Foundation::BOOL* Critical) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(Critical);

        auto win32_impl_result = g_api_table.IsProcessCritical(hProcess, Critical);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProtectedPolicy(::win32::guid* PolicyGuid, size_t PolicyValue, size_t* OldPolicyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyGuid);
        ORBIT_TRACK_PARAM(PolicyValue);
        ORBIT_TRACK_PARAM(OldPolicyValue);

        auto win32_impl_result = g_api_table.SetProtectedPolicy(PolicyGuid, PolicyValue, OldPolicyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryProtectedPolicy(::win32::guid* PolicyGuid, size_t* PolicyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PolicyGuid);
        ORBIT_TRACK_PARAM(PolicyValue);

        auto win32_impl_result = g_api_table.QueryProtectedPolicy(PolicyGuid, PolicyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetThreadIdealProcessor(win32::Windows::Win32::Foundation::HANDLE hThread, uint32_t dwIdealProcessor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(dwIdealProcessor);

        auto win32_impl_result = g_api_table.SetThreadIdealProcessor(hThread, dwIdealProcessor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessInformation(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION_CLASS ProcessInformationClass, void* ProcessInformation, uint32_t ProcessInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(ProcessInformationClass);
        ORBIT_TRACK_PARAM(ProcessInformation);
        ORBIT_TRACK_PARAM(ProcessInformationSize);

        auto win32_impl_result = g_api_table.SetProcessInformation(hProcess, ProcessInformationClass, ProcessInformation, ProcessInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessInformation(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION_CLASS ProcessInformationClass, void* ProcessInformation, uint32_t ProcessInformationSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(ProcessInformationClass);
        ORBIT_TRACK_PARAM(ProcessInformation);
        ORBIT_TRACK_PARAM(ProcessInformationSize);

        auto win32_impl_result = g_api_table.GetProcessInformation(hProcess, ProcessInformationClass, ProcessInformation, ProcessInformationSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetSystemCpuSetInformation(win32::Windows::Win32::System::SystemInformation::SYSTEM_CPU_SET_INFORMATION* Information, uint32_t BufferLength, uint32_t* ReturnedLength, win32::Windows::Win32::Foundation::HANDLE Process, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Information);
        ORBIT_TRACK_PARAM(BufferLength);
        ORBIT_TRACK_PARAM(ReturnedLength);
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.GetSystemCpuSetInformation(Information, BufferLength, ReturnedLength, Process, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessDefaultCpuSets(win32::Windows::Win32::Foundation::HANDLE Process, uint32_t* CpuSetIds, uint32_t CpuSetIdCount, uint32_t* RequiredIdCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(CpuSetIds);
        ORBIT_TRACK_PARAM(CpuSetIdCount);
        ORBIT_TRACK_PARAM(RequiredIdCount);

        auto win32_impl_result = g_api_table.GetProcessDefaultCpuSets(Process, CpuSetIds, CpuSetIdCount, RequiredIdCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessDefaultCpuSets(win32::Windows::Win32::Foundation::HANDLE Process, uint32_t* CpuSetIds, uint32_t CpuSetIdCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(CpuSetIds);
        ORBIT_TRACK_PARAM(CpuSetIdCount);

        auto win32_impl_result = g_api_table.SetProcessDefaultCpuSets(Process, CpuSetIds, CpuSetIdCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadSelectedCpuSets(win32::Windows::Win32::Foundation::HANDLE Thread, uint32_t* CpuSetIds, uint32_t CpuSetIdCount, uint32_t* RequiredIdCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);
        ORBIT_TRACK_PARAM(CpuSetIds);
        ORBIT_TRACK_PARAM(CpuSetIdCount);
        ORBIT_TRACK_PARAM(RequiredIdCount);

        auto win32_impl_result = g_api_table.GetThreadSelectedCpuSets(Thread, CpuSetIds, CpuSetIdCount, RequiredIdCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadSelectedCpuSets(win32::Windows::Win32::Foundation::HANDLE Thread, uint32_t* CpuSetIds, uint32_t CpuSetIdCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);
        ORBIT_TRACK_PARAM(CpuSetIds);
        ORBIT_TRACK_PARAM(CpuSetIdCount);

        auto win32_impl_result = g_api_table.SetThreadSelectedCpuSets(Thread, CpuSetIds, CpuSetIdCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateProcessAsUserA(win32::Windows::Win32::Foundation::HANDLE hToken, win32::Windows::Win32::Foundation::PSTR lpApplicationName, win32::Windows::Win32::Foundation::PSTR lpCommandLine, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpProcessAttributes, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpThreadAttributes, win32::Windows::Win32::Foundation::BOOL bInheritHandles, uint32_t dwCreationFlags, void* lpEnvironment, win32::Windows::Win32::Foundation::PSTR lpCurrentDirectory, win32::Windows::Win32::System::Threading::STARTUPINFOA* lpStartupInfo, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION* lpProcessInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hToken);
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpCommandLine);
        ORBIT_TRACK_PARAM(lpProcessAttributes);
        ORBIT_TRACK_PARAM(lpThreadAttributes);
        ORBIT_TRACK_PARAM(bInheritHandles);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpEnvironment);
        ORBIT_TRACK_PARAM(lpCurrentDirectory);
        ORBIT_TRACK_PARAM(lpStartupInfo);
        ORBIT_TRACK_PARAM(lpProcessInformation);

        auto win32_impl_result = g_api_table.CreateProcessAsUserA(hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessShutdownParameters(uint32_t* lpdwLevel, uint32_t* lpdwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwLevel);
        ORBIT_TRACK_PARAM(lpdwFlags);

        auto win32_impl_result = g_api_table.GetProcessShutdownParameters(lpdwLevel, lpdwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessDefaultCpuSetMasks(win32::Windows::Win32::Foundation::HANDLE Process, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* CpuSetMasks, uint16_t CpuSetMaskCount, uint16_t* RequiredMaskCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(CpuSetMasks);
        ORBIT_TRACK_PARAM(CpuSetMaskCount);
        ORBIT_TRACK_PARAM(RequiredMaskCount);

        auto win32_impl_result = g_api_table.GetProcessDefaultCpuSetMasks(Process, CpuSetMasks, CpuSetMaskCount, RequiredMaskCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessDefaultCpuSetMasks(win32::Windows::Win32::Foundation::HANDLE Process, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* CpuSetMasks, uint16_t CpuSetMaskCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Process);
        ORBIT_TRACK_PARAM(CpuSetMasks);
        ORBIT_TRACK_PARAM(CpuSetMaskCount);

        auto win32_impl_result = g_api_table.SetProcessDefaultCpuSetMasks(Process, CpuSetMasks, CpuSetMaskCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadSelectedCpuSetMasks(win32::Windows::Win32::Foundation::HANDLE Thread, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* CpuSetMasks, uint16_t CpuSetMaskCount, uint16_t* RequiredMaskCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);
        ORBIT_TRACK_PARAM(CpuSetMasks);
        ORBIT_TRACK_PARAM(CpuSetMaskCount);
        ORBIT_TRACK_PARAM(RequiredMaskCount);

        auto win32_impl_result = g_api_table.GetThreadSelectedCpuSetMasks(Thread, CpuSetMasks, CpuSetMaskCount, RequiredMaskCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadSelectedCpuSetMasks(win32::Windows::Win32::Foundation::HANDLE Thread, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* CpuSetMasks, uint16_t CpuSetMaskCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Thread);
        ORBIT_TRACK_PARAM(CpuSetMasks);
        ORBIT_TRACK_PARAM(CpuSetMaskCount);

        auto win32_impl_result = g_api_table.SetThreadSelectedCpuSetMasks(Thread, CpuSetMasks, CpuSetMaskCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetMachineTypeAttributes(uint16_t Machine, win32::Windows::Win32::System::Threading::MACHINE_ATTRIBUTES* MachineTypeAttributes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Machine);
        ORBIT_TRACK_PARAM(MachineTypeAttributes);

        auto win32_impl_result = g_api_table.GetMachineTypeAttributes(Machine, MachineTypeAttributes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SetThreadDescription(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::Foundation::PWSTR lpThreadDescription) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(lpThreadDescription);

        auto win32_impl_result = g_api_table.SetThreadDescription(hThread, lpThreadDescription);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_GetThreadDescription(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::Foundation::PWSTR* ppszThreadDescription) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(ppszThreadDescription);

        auto win32_impl_result = g_api_table.GetThreadDescription(hThread, ppszThreadDescription);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueueUserWorkItem(win32::Windows::Win32::System::SystemServices::LPTHREAD_START_ROUTINE* Function, void* Context, win32::Windows::Win32::System::Threading::WORKER_THREAD_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Function);
        ORBIT_TRACK_PARAM(Context);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.QueueUserWorkItem(Function, Context, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnregisterWaitEx(win32::Windows::Win32::Foundation::HANDLE WaitHandle, win32::Windows::Win32::Foundation::HANDLE CompletionEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WaitHandle);
        ORBIT_TRACK_PARAM(CompletionEvent);

        auto win32_impl_result = g_api_table.UnregisterWaitEx(WaitHandle, CompletionEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateTimerQueue() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.CreateTimerQueue();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateTimerQueueTimer(win32::Windows::Win32::Foundation::HANDLE* phNewTimer, win32::Windows::Win32::Foundation::HANDLE TimerQueue, win32::Windows::Win32::System::SystemServices::WAITORTIMERCALLBACK* Callback, void* Parameter, uint32_t DueTime, uint32_t Period, win32::Windows::Win32::System::Threading::WORKER_THREAD_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phNewTimer);
        ORBIT_TRACK_PARAM(TimerQueue);
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(Parameter);
        ORBIT_TRACK_PARAM(DueTime);
        ORBIT_TRACK_PARAM(Period);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.CreateTimerQueueTimer(phNewTimer, TimerQueue, Callback, Parameter, DueTime, Period, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ChangeTimerQueueTimer(win32::Windows::Win32::Foundation::HANDLE TimerQueue, win32::Windows::Win32::Foundation::HANDLE Timer, uint32_t DueTime, uint32_t Period) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TimerQueue);
        ORBIT_TRACK_PARAM(Timer);
        ORBIT_TRACK_PARAM(DueTime);
        ORBIT_TRACK_PARAM(Period);

        auto win32_impl_result = g_api_table.ChangeTimerQueueTimer(TimerQueue, Timer, DueTime, Period);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteTimerQueueTimer(win32::Windows::Win32::Foundation::HANDLE TimerQueue, win32::Windows::Win32::Foundation::HANDLE Timer, win32::Windows::Win32::Foundation::HANDLE CompletionEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TimerQueue);
        ORBIT_TRACK_PARAM(Timer);
        ORBIT_TRACK_PARAM(CompletionEvent);

        auto win32_impl_result = g_api_table.DeleteTimerQueueTimer(TimerQueue, Timer, CompletionEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteTimerQueue(win32::Windows::Win32::Foundation::HANDLE TimerQueue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TimerQueue);

        auto win32_impl_result = g_api_table.DeleteTimerQueue(TimerQueue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteTimerQueueEx(win32::Windows::Win32::Foundation::HANDLE TimerQueue, win32::Windows::Win32::Foundation::HANDLE CompletionEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TimerQueue);
        ORBIT_TRACK_PARAM(CompletionEvent);

        auto win32_impl_result = g_api_table.DeleteTimerQueueEx(TimerQueue, CompletionEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::PTP_POOL __stdcall ORBIT_IMPL_CreateThreadpool(void* reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(reserved);

        auto win32_impl_result = g_api_table.CreateThreadpool(reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SetThreadpoolThreadMaximum(win32::Windows::Win32::System::Threading::PTP_POOL ptpp, uint32_t cthrdMost) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpp);
        ORBIT_TRACK_PARAM(cthrdMost);

        g_api_table.SetThreadpoolThreadMaximum(ptpp, cthrdMost);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadpoolThreadMinimum(win32::Windows::Win32::System::Threading::PTP_POOL ptpp, uint32_t cthrdMic) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpp);
        ORBIT_TRACK_PARAM(cthrdMic);

        auto win32_impl_result = g_api_table.SetThreadpoolThreadMinimum(ptpp, cthrdMic);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadpoolStackInformation(win32::Windows::Win32::System::Threading::PTP_POOL ptpp, win32::Windows::Win32::System::SystemServices::TP_POOL_STACK_INFORMATION* ptpsi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpp);
        ORBIT_TRACK_PARAM(ptpsi);

        auto win32_impl_result = g_api_table.SetThreadpoolStackInformation(ptpp, ptpsi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryThreadpoolStackInformation(win32::Windows::Win32::System::Threading::PTP_POOL ptpp, win32::Windows::Win32::System::SystemServices::TP_POOL_STACK_INFORMATION* ptpsi) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpp);
        ORBIT_TRACK_PARAM(ptpsi);

        auto win32_impl_result = g_api_table.QueryThreadpoolStackInformation(ptpp, ptpsi);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CloseThreadpool(win32::Windows::Win32::System::Threading::PTP_POOL ptpp) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpp);

        g_api_table.CloseThreadpool(ptpp);
        
    }

    intptr_t __stdcall ORBIT_IMPL_CreateThreadpoolCleanupGroup() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.CreateThreadpoolCleanupGroup();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_CloseThreadpoolCleanupGroupMembers(intptr_t ptpcg, win32::Windows::Win32::Foundation::BOOL fCancelPendingCallbacks, void* pvCleanupContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpcg);
        ORBIT_TRACK_PARAM(fCancelPendingCallbacks);
        ORBIT_TRACK_PARAM(pvCleanupContext);

        g_api_table.CloseThreadpoolCleanupGroupMembers(ptpcg, fCancelPendingCallbacks, pvCleanupContext);
        
    }

    void __stdcall ORBIT_IMPL_CloseThreadpoolCleanupGroup(intptr_t ptpcg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ptpcg);

        g_api_table.CloseThreadpoolCleanupGroup(ptpcg);
        
    }

    void __stdcall ORBIT_IMPL_SetEventWhenCallbackReturns(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci, win32::Windows::Win32::Foundation::HANDLE evt) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);
        ORBIT_TRACK_PARAM(evt);

        g_api_table.SetEventWhenCallbackReturns(pci, evt);
        
    }

    void __stdcall ORBIT_IMPL_ReleaseSemaphoreWhenCallbackReturns(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci, win32::Windows::Win32::Foundation::HANDLE sem, uint32_t crel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);
        ORBIT_TRACK_PARAM(sem);
        ORBIT_TRACK_PARAM(crel);

        g_api_table.ReleaseSemaphoreWhenCallbackReturns(pci, sem, crel);
        
    }

    void __stdcall ORBIT_IMPL_ReleaseMutexWhenCallbackReturns(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci, win32::Windows::Win32::Foundation::HANDLE mut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);
        ORBIT_TRACK_PARAM(mut);

        g_api_table.ReleaseMutexWhenCallbackReturns(pci, mut);
        
    }

    void __stdcall ORBIT_IMPL_LeaveCriticalSectionWhenCallbackReturns(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci, win32::Windows::Win32::System::SystemServices::RTL_CRITICAL_SECTION* pcs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);
        ORBIT_TRACK_PARAM(pcs);

        g_api_table.LeaveCriticalSectionWhenCallbackReturns(pci, pcs);
        
    }

    void __stdcall ORBIT_IMPL_FreeLibraryWhenCallbackReturns(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci, win32::Windows::Win32::Foundation::HINSTANCE mod) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);
        ORBIT_TRACK_PARAM(mod);

        g_api_table.FreeLibraryWhenCallbackReturns(pci, mod);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CallbackMayRunLong(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);

        auto win32_impl_result = g_api_table.CallbackMayRunLong(pci);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DisassociateCurrentThreadFromCallback(win32::Windows::Win32::System::SystemServices::TP_CALLBACK_INSTANCE* pci) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pci);

        g_api_table.DisassociateCurrentThreadFromCallback(pci);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_TrySubmitThreadpoolCallback(win32::Windows::Win32::System::SystemServices::PTP_SIMPLE_CALLBACK* pfns, void* pv, win32::Windows::Win32::System::SystemServices::TP_CALLBACK_ENVIRON_V3* pcbe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfns);
        ORBIT_TRACK_PARAM(pv);
        ORBIT_TRACK_PARAM(pcbe);

        auto win32_impl_result = g_api_table.TrySubmitThreadpoolCallback(pfns, pv, pcbe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::SystemServices::TP_WORK* __stdcall ORBIT_IMPL_CreateThreadpoolWork(win32::Windows::Win32::System::SystemServices::PTP_WORK_CALLBACK* pfnwk, void* pv, win32::Windows::Win32::System::SystemServices::TP_CALLBACK_ENVIRON_V3* pcbe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnwk);
        ORBIT_TRACK_PARAM(pv);
        ORBIT_TRACK_PARAM(pcbe);

        auto win32_impl_result = g_api_table.CreateThreadpoolWork(pfnwk, pv, pcbe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SubmitThreadpoolWork(win32::Windows::Win32::System::SystemServices::TP_WORK* pwk) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwk);

        g_api_table.SubmitThreadpoolWork(pwk);
        
    }

    void __stdcall ORBIT_IMPL_WaitForThreadpoolWorkCallbacks(win32::Windows::Win32::System::SystemServices::TP_WORK* pwk, win32::Windows::Win32::Foundation::BOOL fCancelPendingCallbacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwk);
        ORBIT_TRACK_PARAM(fCancelPendingCallbacks);

        g_api_table.WaitForThreadpoolWorkCallbacks(pwk, fCancelPendingCallbacks);
        
    }

    void __stdcall ORBIT_IMPL_CloseThreadpoolWork(win32::Windows::Win32::System::SystemServices::TP_WORK* pwk) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwk);

        g_api_table.CloseThreadpoolWork(pwk);
        
    }

    win32::Windows::Win32::System::SystemServices::TP_TIMER* __stdcall ORBIT_IMPL_CreateThreadpoolTimer(win32::Windows::Win32::System::SystemServices::PTP_TIMER_CALLBACK* pfnti, void* pv, win32::Windows::Win32::System::SystemServices::TP_CALLBACK_ENVIRON_V3* pcbe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnti);
        ORBIT_TRACK_PARAM(pv);
        ORBIT_TRACK_PARAM(pcbe);

        auto win32_impl_result = g_api_table.CreateThreadpoolTimer(pfnti, pv, pcbe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SetThreadpoolTimer(win32::Windows::Win32::System::SystemServices::TP_TIMER* pti, win32::Windows::Win32::Foundation::FILETIME* pftDueTime, uint32_t msPeriod, uint32_t msWindowLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pti);
        ORBIT_TRACK_PARAM(pftDueTime);
        ORBIT_TRACK_PARAM(msPeriod);
        ORBIT_TRACK_PARAM(msWindowLength);

        g_api_table.SetThreadpoolTimer(pti, pftDueTime, msPeriod, msWindowLength);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsThreadpoolTimerSet(win32::Windows::Win32::System::SystemServices::TP_TIMER* pti) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pti);

        auto win32_impl_result = g_api_table.IsThreadpoolTimerSet(pti);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_WaitForThreadpoolTimerCallbacks(win32::Windows::Win32::System::SystemServices::TP_TIMER* pti, win32::Windows::Win32::Foundation::BOOL fCancelPendingCallbacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pti);
        ORBIT_TRACK_PARAM(fCancelPendingCallbacks);

        g_api_table.WaitForThreadpoolTimerCallbacks(pti, fCancelPendingCallbacks);
        
    }

    void __stdcall ORBIT_IMPL_CloseThreadpoolTimer(win32::Windows::Win32::System::SystemServices::TP_TIMER* pti) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pti);

        g_api_table.CloseThreadpoolTimer(pti);
        
    }

    win32::Windows::Win32::System::SystemServices::TP_WAIT* __stdcall ORBIT_IMPL_CreateThreadpoolWait(win32::Windows::Win32::System::SystemServices::PTP_WAIT_CALLBACK* pfnwa, void* pv, win32::Windows::Win32::System::SystemServices::TP_CALLBACK_ENVIRON_V3* pcbe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pfnwa);
        ORBIT_TRACK_PARAM(pv);
        ORBIT_TRACK_PARAM(pcbe);

        auto win32_impl_result = g_api_table.CreateThreadpoolWait(pfnwa, pv, pcbe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SetThreadpoolWait(win32::Windows::Win32::System::SystemServices::TP_WAIT* pwa, win32::Windows::Win32::Foundation::HANDLE h, win32::Windows::Win32::Foundation::FILETIME* pftTimeout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwa);
        ORBIT_TRACK_PARAM(h);
        ORBIT_TRACK_PARAM(pftTimeout);

        g_api_table.SetThreadpoolWait(pwa, h, pftTimeout);
        
    }

    void __stdcall ORBIT_IMPL_WaitForThreadpoolWaitCallbacks(win32::Windows::Win32::System::SystemServices::TP_WAIT* pwa, win32::Windows::Win32::Foundation::BOOL fCancelPendingCallbacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwa);
        ORBIT_TRACK_PARAM(fCancelPendingCallbacks);

        g_api_table.WaitForThreadpoolWaitCallbacks(pwa, fCancelPendingCallbacks);
        
    }

    void __stdcall ORBIT_IMPL_CloseThreadpoolWait(win32::Windows::Win32::System::SystemServices::TP_WAIT* pwa) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwa);

        g_api_table.CloseThreadpoolWait(pwa);
        
    }

    win32::Windows::Win32::System::SystemServices::TP_IO* __stdcall ORBIT_IMPL_CreateThreadpoolIo(win32::Windows::Win32::Foundation::HANDLE fl, win32::Windows::Win32::System::Threading::PTP_WIN32_IO_CALLBACK* pfnio, void* pv, win32::Windows::Win32::System::SystemServices::TP_CALLBACK_ENVIRON_V3* pcbe) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fl);
        ORBIT_TRACK_PARAM(pfnio);
        ORBIT_TRACK_PARAM(pv);
        ORBIT_TRACK_PARAM(pcbe);

        auto win32_impl_result = g_api_table.CreateThreadpoolIo(fl, pfnio, pv, pcbe);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_StartThreadpoolIo(win32::Windows::Win32::System::SystemServices::TP_IO* pio) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pio);

        g_api_table.StartThreadpoolIo(pio);
        
    }

    void __stdcall ORBIT_IMPL_CancelThreadpoolIo(win32::Windows::Win32::System::SystemServices::TP_IO* pio) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pio);

        g_api_table.CancelThreadpoolIo(pio);
        
    }

    void __stdcall ORBIT_IMPL_WaitForThreadpoolIoCallbacks(win32::Windows::Win32::System::SystemServices::TP_IO* pio, win32::Windows::Win32::Foundation::BOOL fCancelPendingCallbacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pio);
        ORBIT_TRACK_PARAM(fCancelPendingCallbacks);

        g_api_table.WaitForThreadpoolIoCallbacks(pio, fCancelPendingCallbacks);
        
    }

    void __stdcall ORBIT_IMPL_CloseThreadpoolIo(win32::Windows::Win32::System::SystemServices::TP_IO* pio) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pio);

        g_api_table.CloseThreadpoolIo(pio);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadpoolTimerEx(win32::Windows::Win32::System::SystemServices::TP_TIMER* pti, win32::Windows::Win32::Foundation::FILETIME* pftDueTime, uint32_t msPeriod, uint32_t msWindowLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pti);
        ORBIT_TRACK_PARAM(pftDueTime);
        ORBIT_TRACK_PARAM(msPeriod);
        ORBIT_TRACK_PARAM(msWindowLength);

        auto win32_impl_result = g_api_table.SetThreadpoolTimerEx(pti, pftDueTime, msPeriod, msWindowLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadpoolWaitEx(win32::Windows::Win32::System::SystemServices::TP_WAIT* pwa, win32::Windows::Win32::Foundation::HANDLE h, win32::Windows::Win32::Foundation::FILETIME* pftTimeout, void* Reserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwa);
        ORBIT_TRACK_PARAM(h);
        ORBIT_TRACK_PARAM(pftTimeout);
        ORBIT_TRACK_PARAM(Reserved);

        auto win32_impl_result = g_api_table.SetThreadpoolWaitEx(pwa, h, pftTimeout, Reserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsWow64Process(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::Foundation::BOOL* Wow64Process) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(Wow64Process);

        auto win32_impl_result = g_api_table.IsWow64Process(hProcess, Wow64Process);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_Wow64SetThreadDefaultGuestMachine(uint16_t Machine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Machine);

        auto win32_impl_result = g_api_table.Wow64SetThreadDefaultGuestMachine(Machine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsWow64Process2(win32::Windows::Win32::Foundation::HANDLE hProcess, uint16_t* pProcessMachine, uint16_t* pNativeMachine) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(pProcessMachine);
        ORBIT_TRACK_PARAM(pNativeMachine);

        auto win32_impl_result = g_api_table.IsWow64Process2(hProcess, pProcessMachine, pNativeMachine);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_Wow64SuspendThread(win32::Windows::Win32::Foundation::HANDLE hThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);

        auto win32_impl_result = g_api_table.Wow64SuspendThread(hThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::NamespaceHandle __stdcall ORBIT_IMPL_CreatePrivateNamespaceW(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpPrivateNamespaceAttributes, void* lpBoundaryDescriptor, win32::Windows::Win32::Foundation::PWSTR lpAliasPrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPrivateNamespaceAttributes);
        ORBIT_TRACK_PARAM(lpBoundaryDescriptor);
        ORBIT_TRACK_PARAM(lpAliasPrefix);

        auto win32_impl_result = g_api_table.CreatePrivateNamespaceW(lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::NamespaceHandle __stdcall ORBIT_IMPL_OpenPrivateNamespaceW(void* lpBoundaryDescriptor, win32::Windows::Win32::Foundation::PWSTR lpAliasPrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBoundaryDescriptor);
        ORBIT_TRACK_PARAM(lpAliasPrefix);

        auto win32_impl_result = g_api_table.OpenPrivateNamespaceW(lpBoundaryDescriptor, lpAliasPrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOLEAN __stdcall ORBIT_IMPL_ClosePrivateNamespace(win32::Windows::Win32::System::Threading::NamespaceHandle Handle, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Handle);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.ClosePrivateNamespace(Handle, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::BoundaryDescriptorHandle __stdcall ORBIT_IMPL_CreateBoundaryDescriptorW(win32::Windows::Win32::Foundation::PWSTR Name, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Name);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.CreateBoundaryDescriptorW(Name, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AddSIDToBoundaryDescriptor(win32::Windows::Win32::Foundation::HANDLE* BoundaryDescriptor, win32::Windows::Win32::Foundation::PSID RequiredSid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BoundaryDescriptor);
        ORBIT_TRACK_PARAM(RequiredSid);

        auto win32_impl_result = g_api_table.AddSIDToBoundaryDescriptor(BoundaryDescriptor, RequiredSid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DeleteBoundaryDescriptor(win32::Windows::Win32::System::Threading::BoundaryDescriptorHandle BoundaryDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BoundaryDescriptor);

        g_api_table.DeleteBoundaryDescriptor(BoundaryDescriptor);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaHighestNodeNumber(uint32_t* HighestNodeNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(HighestNodeNumber);

        auto win32_impl_result = g_api_table.GetNumaHighestNodeNumber(HighestNodeNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaNodeProcessorMaskEx(uint16_t Node, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* ProcessorMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Node);
        ORBIT_TRACK_PARAM(ProcessorMask);

        auto win32_impl_result = g_api_table.GetNumaNodeProcessorMaskEx(Node, ProcessorMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaNodeProcessorMask2(uint16_t NodeNumber, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* ProcessorMasks, uint16_t ProcessorMaskCount, uint16_t* RequiredMaskCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(NodeNumber);
        ORBIT_TRACK_PARAM(ProcessorMasks);
        ORBIT_TRACK_PARAM(ProcessorMaskCount);
        ORBIT_TRACK_PARAM(RequiredMaskCount);

        auto win32_impl_result = g_api_table.GetNumaNodeProcessorMask2(NodeNumber, ProcessorMasks, ProcessorMaskCount, RequiredMaskCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaProximityNodeEx(uint32_t ProximityId, uint16_t* NodeNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProximityId);
        ORBIT_TRACK_PARAM(NodeNumber);

        auto win32_impl_result = g_api_table.GetNumaProximityNodeEx(ProximityId, NodeNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessGroupAffinity(win32::Windows::Win32::Foundation::HANDLE hProcess, uint16_t* GroupCount, uint16_t* GroupArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(GroupCount);
        ORBIT_TRACK_PARAM(GroupArray);

        auto win32_impl_result = g_api_table.GetProcessGroupAffinity(hProcess, GroupCount, GroupArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetThreadGroupAffinity(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* GroupAffinity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(GroupAffinity);

        auto win32_impl_result = g_api_table.GetThreadGroupAffinity(hThread, GroupAffinity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetThreadGroupAffinity(win32::Windows::Win32::Foundation::HANDLE hThread, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* GroupAffinity, win32::Windows::Win32::System::SystemInformation::GROUP_AFFINITY* PreviousGroupAffinity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(GroupAffinity);
        ORBIT_TRACK_PARAM(PreviousGroupAffinity);

        auto win32_impl_result = g_api_table.SetThreadGroupAffinity(hThread, GroupAffinity, PreviousGroupAffinity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AttachThreadInput(uint32_t idAttach, uint32_t idAttachTo, win32::Windows::Win32::Foundation::BOOL fAttach) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(idAttach);
        ORBIT_TRACK_PARAM(idAttachTo);
        ORBIT_TRACK_PARAM(fAttach);

        auto win32_impl_result = g_api_table.AttachThreadInput(idAttach, idAttachTo, fAttach);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WaitForInputIdle(win32::Windows::Win32::Foundation::HANDLE hProcess, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.WaitForInputIdle(hProcess, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MsgWaitForMultipleObjects(uint32_t nCount, win32::Windows::Win32::Foundation::HANDLE* pHandles, win32::Windows::Win32::Foundation::BOOL fWaitAll, uint32_t dwMilliseconds, win32::Windows::Win32::UI::WindowsAndMessaging::QUEUE_STATUS_FLAGS dwWakeMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nCount);
        ORBIT_TRACK_PARAM(pHandles);
        ORBIT_TRACK_PARAM(fWaitAll);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(dwWakeMask);

        auto win32_impl_result = g_api_table.MsgWaitForMultipleObjects(nCount, pHandles, fWaitAll, dwMilliseconds, dwWakeMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MsgWaitForMultipleObjectsEx(uint32_t nCount, win32::Windows::Win32::Foundation::HANDLE* pHandles, uint32_t dwMilliseconds, win32::Windows::Win32::UI::WindowsAndMessaging::QUEUE_STATUS_FLAGS dwWakeMask, win32::Windows::Win32::System::Threading::MSG_WAIT_FOR_MULTIPLE_OBJECTS_EX_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nCount);
        ORBIT_TRACK_PARAM(pHandles);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(dwWakeMask);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.MsgWaitForMultipleObjectsEx(nCount, pHandles, dwMilliseconds, dwWakeMask, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetGuiResources(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::GET_GUI_RESOURCES_FLAGS uiFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(uiFlags);

        auto win32_impl_result = g_api_table.GetGuiResources(hProcess, uiFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_IsImmersiveProcess(win32::Windows::Win32::Foundation::HANDLE hProcess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);

        auto win32_impl_result = g_api_table.IsImmersiveProcess(hProcess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessRestrictionExemption(win32::Windows::Win32::Foundation::BOOL fEnableExemption) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fEnableExemption);

        auto win32_impl_result = g_api_table.SetProcessRestrictionExemption(fEnableExemption);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessAffinityMask(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t* lpProcessAffinityMask, size_t* lpSystemAffinityMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpProcessAffinityMask);
        ORBIT_TRACK_PARAM(lpSystemAffinityMask);

        auto win32_impl_result = g_api_table.GetProcessAffinityMask(hProcess, lpProcessAffinityMask, lpSystemAffinityMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessAffinityMask(win32::Windows::Win32::Foundation::HANDLE hProcess, size_t dwProcessAffinityMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwProcessAffinityMask);

        auto win32_impl_result = g_api_table.SetProcessAffinityMask(hProcess, dwProcessAffinityMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessIoCounters(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::SystemServices::IO_COUNTERS* lpIoCounters) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpIoCounters);

        auto win32_impl_result = g_api_table.GetProcessIoCounters(hProcess, lpIoCounters);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_SwitchToFiber(void* lpFiber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFiber);

        g_api_table.SwitchToFiber(lpFiber);
        
    }

    void __stdcall ORBIT_IMPL_DeleteFiber(void* lpFiber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpFiber);

        g_api_table.DeleteFiber(lpFiber);
        
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ConvertFiberToThread() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ConvertFiberToThread();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CreateFiberEx(size_t dwStackCommitSize, size_t dwStackReserveSize, uint32_t dwFlags, win32::Windows::Win32::System::WindowsProgramming::LPFIBER_START_ROUTINE* lpStartAddress, void* lpParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwStackCommitSize);
        ORBIT_TRACK_PARAM(dwStackReserveSize);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpStartAddress);
        ORBIT_TRACK_PARAM(lpParameter);

        auto win32_impl_result = g_api_table.CreateFiberEx(dwStackCommitSize, dwStackReserveSize, dwFlags, lpStartAddress, lpParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_ConvertThreadToFiberEx(void* lpParameter, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpParameter);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.ConvertThreadToFiberEx(lpParameter, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_CreateFiber(size_t dwStackSize, win32::Windows::Win32::System::WindowsProgramming::LPFIBER_START_ROUTINE* lpStartAddress, void* lpParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwStackSize);
        ORBIT_TRACK_PARAM(lpStartAddress);
        ORBIT_TRACK_PARAM(lpParameter);

        auto win32_impl_result = g_api_table.CreateFiber(dwStackSize, lpStartAddress, lpParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_ConvertThreadToFiber(void* lpParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpParameter);

        auto win32_impl_result = g_api_table.ConvertThreadToFiber(lpParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateUmsCompletionList(void** UmsCompletionList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsCompletionList);

        auto win32_impl_result = g_api_table.CreateUmsCompletionList(UmsCompletionList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DequeueUmsCompletionListItems(void* UmsCompletionList, uint32_t WaitTimeOut, void** UmsThreadList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsCompletionList);
        ORBIT_TRACK_PARAM(WaitTimeOut);
        ORBIT_TRACK_PARAM(UmsThreadList);

        auto win32_impl_result = g_api_table.DequeueUmsCompletionListItems(UmsCompletionList, WaitTimeOut, UmsThreadList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetUmsCompletionListEvent(void* UmsCompletionList, win32::Windows::Win32::Foundation::HANDLE* UmsCompletionEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsCompletionList);
        ORBIT_TRACK_PARAM(UmsCompletionEvent);

        auto win32_impl_result = g_api_table.GetUmsCompletionListEvent(UmsCompletionList, UmsCompletionEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ExecuteUmsThread(void* UmsThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsThread);

        auto win32_impl_result = g_api_table.ExecuteUmsThread(UmsThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UmsThreadYield(void* SchedulerParam) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SchedulerParam);

        auto win32_impl_result = g_api_table.UmsThreadYield(SchedulerParam);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteUmsCompletionList(void* UmsCompletionList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsCompletionList);

        auto win32_impl_result = g_api_table.DeleteUmsCompletionList(UmsCompletionList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_GetCurrentUmsThread() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetCurrentUmsThread();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_GetNextUmsListItem(void* UmsContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsContext);

        auto win32_impl_result = g_api_table.GetNextUmsListItem(UmsContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryUmsThreadInformation(void* UmsThread, win32::Windows::Win32::System::SystemServices::RTL_UMS_THREAD_INFO_CLASS UmsThreadInfoClass, void* UmsThreadInformation, uint32_t UmsThreadInformationLength, uint32_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsThread);
        ORBIT_TRACK_PARAM(UmsThreadInfoClass);
        ORBIT_TRACK_PARAM(UmsThreadInformation);
        ORBIT_TRACK_PARAM(UmsThreadInformationLength);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.QueryUmsThreadInformation(UmsThread, UmsThreadInfoClass, UmsThreadInformation, UmsThreadInformationLength, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetUmsThreadInformation(void* UmsThread, win32::Windows::Win32::System::SystemServices::RTL_UMS_THREAD_INFO_CLASS UmsThreadInfoClass, void* UmsThreadInformation, uint32_t UmsThreadInformationLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsThread);
        ORBIT_TRACK_PARAM(UmsThreadInfoClass);
        ORBIT_TRACK_PARAM(UmsThreadInformation);
        ORBIT_TRACK_PARAM(UmsThreadInformationLength);

        auto win32_impl_result = g_api_table.SetUmsThreadInformation(UmsThread, UmsThreadInfoClass, UmsThreadInformation, UmsThreadInformationLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DeleteUmsThreadContext(void* UmsThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UmsThread);

        auto win32_impl_result = g_api_table.DeleteUmsThreadContext(UmsThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateUmsThreadContext(void** lpUmsThread) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpUmsThread);

        auto win32_impl_result = g_api_table.CreateUmsThreadContext(lpUmsThread);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_EnterUmsSchedulingMode(win32::Windows::Win32::System::Threading::UMS_SCHEDULER_STARTUP_INFO* SchedulerStartupInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SchedulerStartupInfo);

        auto win32_impl_result = g_api_table.EnterUmsSchedulingMode(SchedulerStartupInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetUmsSystemThreadInformation(win32::Windows::Win32::Foundation::HANDLE ThreadHandle, win32::Windows::Win32::System::Threading::UMS_SYSTEM_THREAD_INFORMATION* SystemThreadInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ThreadHandle);
        ORBIT_TRACK_PARAM(SystemThreadInfo);

        auto win32_impl_result = g_api_table.GetUmsSystemThreadInformation(ThreadHandle, SystemThreadInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    size_t __stdcall ORBIT_IMPL_SetThreadAffinityMask(win32::Windows::Win32::Foundation::HANDLE hThread, size_t dwThreadAffinityMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hThread);
        ORBIT_TRACK_PARAM(dwThreadAffinityMask);

        auto win32_impl_result = g_api_table.SetThreadAffinityMask(hThread, dwThreadAffinityMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetProcessDEPPolicy(win32::Windows::Win32::System::Threading::PROCESS_DEP_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.SetProcessDEPPolicy(dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetProcessDEPPolicy(win32::Windows::Win32::Foundation::HANDLE hProcess, uint32_t* lpFlags, win32::Windows::Win32::Foundation::BOOL* lpPermanent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(lpFlags);
        ORBIT_TRACK_PARAM(lpPermanent);

        auto win32_impl_result = g_api_table.GetProcessDEPPolicy(hProcess, lpFlags, lpPermanent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_PulseEvent(win32::Windows::Win32::Foundation::HANDLE hEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEvent);

        auto win32_impl_result = g_api_table.PulseEvent(hEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_WinExec(win32::Windows::Win32::Foundation::PSTR lpCmdLine, uint32_t uCmdShow) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpCmdLine);
        ORBIT_TRACK_PARAM(uCmdShow);

        auto win32_impl_result = g_api_table.WinExec(lpCmdLine, uCmdShow);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateSemaphoreA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSemaphoreAttributes, int32_t lInitialCount, int32_t lMaximumCount, win32::Windows::Win32::Foundation::PSTR lpName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSemaphoreAttributes);
        ORBIT_TRACK_PARAM(lInitialCount);
        ORBIT_TRACK_PARAM(lMaximumCount);
        ORBIT_TRACK_PARAM(lpName);

        auto win32_impl_result = g_api_table.CreateSemaphoreA(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HANDLE __stdcall ORBIT_IMPL_CreateSemaphoreExA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSemaphoreAttributes, int32_t lInitialCount, int32_t lMaximumCount, win32::Windows::Win32::Foundation::PSTR lpName, uint32_t dwFlags, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpSemaphoreAttributes);
        ORBIT_TRACK_PARAM(lInitialCount);
        ORBIT_TRACK_PARAM(lMaximumCount);
        ORBIT_TRACK_PARAM(lpName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.CreateSemaphoreExA(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryFullProcessImageNameA(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_NAME_FORMAT dwFlags, win32::Windows::Win32::Foundation::PSTR lpExeName, uint32_t* lpdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpExeName);
        ORBIT_TRACK_PARAM(lpdwSize);

        auto win32_impl_result = g_api_table.QueryFullProcessImageNameA(hProcess, dwFlags, lpExeName, lpdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_QueryFullProcessImageNameW(win32::Windows::Win32::Foundation::HANDLE hProcess, win32::Windows::Win32::System::Threading::PROCESS_NAME_FORMAT dwFlags, win32::Windows::Win32::Foundation::PWSTR lpExeName, uint32_t* lpdwSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hProcess);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpExeName);
        ORBIT_TRACK_PARAM(lpdwSize);

        auto win32_impl_result = g_api_table.QueryFullProcessImageNameW(hProcess, dwFlags, lpExeName, lpdwSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateProcessWithLogonW(win32::Windows::Win32::Foundation::PWSTR lpUsername, win32::Windows::Win32::Foundation::PWSTR lpDomain, win32::Windows::Win32::Foundation::PWSTR lpPassword, win32::Windows::Win32::System::Threading::CREATE_PROCESS_LOGON_FLAGS dwLogonFlags, win32::Windows::Win32::Foundation::PWSTR lpApplicationName, win32::Windows::Win32::Foundation::PWSTR lpCommandLine, uint32_t dwCreationFlags, void* lpEnvironment, win32::Windows::Win32::Foundation::PWSTR lpCurrentDirectory, win32::Windows::Win32::System::Threading::STARTUPINFOW* lpStartupInfo, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION* lpProcessInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpUsername);
        ORBIT_TRACK_PARAM(lpDomain);
        ORBIT_TRACK_PARAM(lpPassword);
        ORBIT_TRACK_PARAM(dwLogonFlags);
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpCommandLine);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpEnvironment);
        ORBIT_TRACK_PARAM(lpCurrentDirectory);
        ORBIT_TRACK_PARAM(lpStartupInfo);
        ORBIT_TRACK_PARAM(lpProcessInformation);

        auto win32_impl_result = g_api_table.CreateProcessWithLogonW(lpUsername, lpDomain, lpPassword, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CreateProcessWithTokenW(win32::Windows::Win32::Foundation::HANDLE hToken, win32::Windows::Win32::System::Threading::CREATE_PROCESS_LOGON_FLAGS dwLogonFlags, win32::Windows::Win32::Foundation::PWSTR lpApplicationName, win32::Windows::Win32::Foundation::PWSTR lpCommandLine, uint32_t dwCreationFlags, void* lpEnvironment, win32::Windows::Win32::Foundation::PWSTR lpCurrentDirectory, win32::Windows::Win32::System::Threading::STARTUPINFOW* lpStartupInfo, win32::Windows::Win32::System::Threading::PROCESS_INFORMATION* lpProcessInformation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hToken);
        ORBIT_TRACK_PARAM(dwLogonFlags);
        ORBIT_TRACK_PARAM(lpApplicationName);
        ORBIT_TRACK_PARAM(lpCommandLine);
        ORBIT_TRACK_PARAM(dwCreationFlags);
        ORBIT_TRACK_PARAM(lpEnvironment);
        ORBIT_TRACK_PARAM(lpCurrentDirectory);
        ORBIT_TRACK_PARAM(lpStartupInfo);
        ORBIT_TRACK_PARAM(lpProcessInformation);

        auto win32_impl_result = g_api_table.CreateProcessWithTokenW(hToken, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_RegisterWaitForSingleObject(win32::Windows::Win32::Foundation::HANDLE* phNewWaitObject, win32::Windows::Win32::Foundation::HANDLE hObject, win32::Windows::Win32::System::SystemServices::WAITORTIMERCALLBACK* Callback, void* Context, uint32_t dwMilliseconds, win32::Windows::Win32::System::Threading::WORKER_THREAD_FLAGS dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phNewWaitObject);
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(Callback);
        ORBIT_TRACK_PARAM(Context);
        ORBIT_TRACK_PARAM(dwMilliseconds);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.RegisterWaitForSingleObject(phNewWaitObject, hObject, Callback, Context, dwMilliseconds, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_UnregisterWait(win32::Windows::Win32::Foundation::HANDLE WaitHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WaitHandle);

        auto win32_impl_result = g_api_table.UnregisterWait(WaitHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::NamespaceHandle __stdcall ORBIT_IMPL_CreatePrivateNamespaceA(win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpPrivateNamespaceAttributes, void* lpBoundaryDescriptor, win32::Windows::Win32::Foundation::PSTR lpAliasPrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpPrivateNamespaceAttributes);
        ORBIT_TRACK_PARAM(lpBoundaryDescriptor);
        ORBIT_TRACK_PARAM(lpAliasPrefix);

        auto win32_impl_result = g_api_table.CreatePrivateNamespaceA(lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::NamespaceHandle __stdcall ORBIT_IMPL_OpenPrivateNamespaceA(void* lpBoundaryDescriptor, win32::Windows::Win32::Foundation::PSTR lpAliasPrefix) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpBoundaryDescriptor);
        ORBIT_TRACK_PARAM(lpAliasPrefix);

        auto win32_impl_result = g_api_table.OpenPrivateNamespaceA(lpBoundaryDescriptor, lpAliasPrefix);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Threading::BoundaryDescriptorHandle __stdcall ORBIT_IMPL_CreateBoundaryDescriptorA(win32::Windows::Win32::Foundation::PSTR Name, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Name);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.CreateBoundaryDescriptorA(Name, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_AddIntegrityLabelToBoundaryDescriptor(win32::Windows::Win32::Foundation::HANDLE* BoundaryDescriptor, win32::Windows::Win32::Foundation::PSID IntegrityLabel) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BoundaryDescriptor);
        ORBIT_TRACK_PARAM(IntegrityLabel);

        auto win32_impl_result = g_api_table.AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor, IntegrityLabel);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetActiveProcessorGroupCount() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetActiveProcessorGroupCount();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint16_t __stdcall ORBIT_IMPL_GetMaximumProcessorGroupCount() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.GetMaximumProcessorGroupCount();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetActiveProcessorCount(uint16_t GroupNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GroupNumber);

        auto win32_impl_result = g_api_table.GetActiveProcessorCount(GroupNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetMaximumProcessorCount(uint16_t GroupNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GroupNumber);

        auto win32_impl_result = g_api_table.GetMaximumProcessorCount(GroupNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaProcessorNode(uint8_t Processor, uint8_t* NodeNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Processor);
        ORBIT_TRACK_PARAM(NodeNumber);

        auto win32_impl_result = g_api_table.GetNumaProcessorNode(Processor, NodeNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaNodeNumberFromHandle(win32::Windows::Win32::Foundation::HANDLE hFile, uint16_t* NodeNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hFile);
        ORBIT_TRACK_PARAM(NodeNumber);

        auto win32_impl_result = g_api_table.GetNumaNodeNumberFromHandle(hFile, NodeNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaProcessorNodeEx(win32::Windows::Win32::System::Kernel::PROCESSOR_NUMBER* Processor, uint16_t* NodeNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Processor);
        ORBIT_TRACK_PARAM(NodeNumber);

        auto win32_impl_result = g_api_table.GetNumaProcessorNodeEx(Processor, NodeNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaNodeProcessorMask(uint8_t Node, uint64_t* ProcessorMask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Node);
        ORBIT_TRACK_PARAM(ProcessorMask);

        auto win32_impl_result = g_api_table.GetNumaNodeProcessorMask(Node, ProcessorMask);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaAvailableMemoryNode(uint8_t Node, uint64_t* AvailableBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Node);
        ORBIT_TRACK_PARAM(AvailableBytes);

        auto win32_impl_result = g_api_table.GetNumaAvailableMemoryNode(Node, AvailableBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaAvailableMemoryNodeEx(uint16_t Node, uint64_t* AvailableBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Node);
        ORBIT_TRACK_PARAM(AvailableBytes);

        auto win32_impl_result = g_api_table.GetNumaAvailableMemoryNodeEx(Node, AvailableBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetNumaProximityNode(uint32_t ProximityId, uint8_t* NodeNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProximityId);
        ORBIT_TRACK_PARAM(NodeNumber);

        auto win32_impl_result = g_api_table.GetNumaProximityNode(ProximityId, NodeNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NtQueryInformationProcess(win32::Windows::Win32::Foundation::HANDLE ProcessHandle, win32::Windows::Win32::System::Threading::PROCESSINFOCLASS ProcessInformationClass, void* ProcessInformation, uint32_t ProcessInformationLength, uint32_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(ProcessInformationClass);
        ORBIT_TRACK_PARAM(ProcessInformation);
        ORBIT_TRACK_PARAM(ProcessInformationLength);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.NtQueryInformationProcess(ProcessHandle, ProcessInformationClass, ProcessInformation, ProcessInformationLength, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::NTSTATUS __stdcall ORBIT_IMPL_NtQueryInformationThread(win32::Windows::Win32::Foundation::HANDLE ThreadHandle, win32::Windows::Win32::System::Threading::THREADINFOCLASS ThreadInformationClass, void* ThreadInformation, uint32_t ThreadInformationLength, uint32_t* ReturnLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ThreadHandle);
        ORBIT_TRACK_PARAM(ThreadInformationClass);
        ORBIT_TRACK_PARAM(ThreadInformation);
        ORBIT_TRACK_PARAM(ThreadInformationLength);
        ORBIT_TRACK_PARAM(ReturnLength);

        auto win32_impl_result = g_api_table.NtQueryInformationThread(ThreadHandle, ThreadInformationClass, ThreadInformation, ThreadInformationLength, ReturnLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
