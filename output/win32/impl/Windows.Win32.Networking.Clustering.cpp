// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Networking_Clustering_2_H
#define WIN32_Windows_Win32_Networking_Clustering_2_H
#include "win32/Windows.Win32.Networking.Clustering.h"
#include "win32/impl/Windows.Win32.Networking.Clustering.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Networking::Clustering
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_GetNodeClusterState(win32::Windows::Win32::Foundation::PWSTR lpszNodeName, uint32_t* pdwClusterState) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(pdwClusterState);

        auto win32_impl_result = g_api_table.GetNodeClusterState(lpszNodeName, pdwClusterState);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_OpenCluster(win32::Windows::Win32::Foundation::PWSTR lpszClusterName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszClusterName);

        auto win32_impl_result = g_api_table.OpenCluster(lpszClusterName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_OpenClusterEx(win32::Windows::Win32::Foundation::PWSTR lpszClusterName, uint32_t DesiredAccess, uint32_t* GrantedAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszClusterName);
        ORBIT_TRACK_PARAM(DesiredAccess);
        ORBIT_TRACK_PARAM(GrantedAccess);

        auto win32_impl_result = g_api_table.OpenClusterEx(lpszClusterName, DesiredAccess, GrantedAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseCluster(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);

        auto win32_impl_result = g_api_table.CloseCluster(hCluster);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterName(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNewClusterName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNewClusterName);

        auto win32_impl_result = g_api_table.SetClusterName(hCluster, lpszNewClusterName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterInformation(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszClusterName, uint32_t* lpcchClusterName, win32::Windows::Win32::Networking::Clustering::CLUSTERVERSIONINFO* lpClusterInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszClusterName);
        ORBIT_TRACK_PARAM(lpcchClusterName);
        ORBIT_TRACK_PARAM(lpClusterInfo);

        auto win32_impl_result = g_api_table.GetClusterInformation(hCluster, lpszClusterName, lpcchClusterName, lpClusterInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterQuorumResource(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceName, uint32_t* lpcchResourceName, win32::Windows::Win32::Foundation::PWSTR lpszDeviceName, uint32_t* lpcchDeviceName, uint32_t* lpdwMaxQuorumLogSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceName);
        ORBIT_TRACK_PARAM(lpcchResourceName);
        ORBIT_TRACK_PARAM(lpszDeviceName);
        ORBIT_TRACK_PARAM(lpcchDeviceName);
        ORBIT_TRACK_PARAM(lpdwMaxQuorumLogSize);

        auto win32_impl_result = g_api_table.GetClusterQuorumResource(hCluster, lpszResourceName, lpcchResourceName, lpszDeviceName, lpcchDeviceName, lpdwMaxQuorumLogSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterQuorumResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR lpszDeviceName, uint32_t dwMaxQuoLogSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(lpszDeviceName);
        ORBIT_TRACK_PARAM(dwMaxQuoLogSize);

        auto win32_impl_result = g_api_table.SetClusterQuorumResource(hResource, lpszDeviceName, dwMaxQuoLogSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_BackupClusterDatabase(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszPathName);

        auto win32_impl_result = g_api_table.BackupClusterDatabase(hCluster, lpszPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RestoreClusterDatabase(win32::Windows::Win32::Foundation::PWSTR lpszPathName, win32::Windows::Win32::Foundation::BOOL bForce, win32::Windows::Win32::Foundation::PWSTR lpszQuorumDriveLetter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(bForce);
        ORBIT_TRACK_PARAM(lpszQuorumDriveLetter);

        auto win32_impl_result = g_api_table.RestoreClusterDatabase(lpszPathName, bForce, lpszQuorumDriveLetter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterNetworkPriorityOrder(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t NetworkCount, win32::Windows::Win32::Networking::Clustering::_HNETWORK** NetworkList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(NetworkCount);
        ORBIT_TRACK_PARAM(NetworkList);

        auto win32_impl_result = g_api_table.SetClusterNetworkPriorityOrder(hCluster, NetworkCount, NetworkList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterServiceAccountPassword(win32::Windows::Win32::Foundation::PWSTR lpszClusterName, win32::Windows::Win32::Foundation::PWSTR lpszNewPassword, uint32_t dwFlags, win32::Windows::Win32::Networking::Clustering::CLUSTER_SET_PASSWORD_STATUS* lpReturnStatusBuffer, uint32_t* lpcbReturnStatusBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszClusterName);
        ORBIT_TRACK_PARAM(lpszNewPassword);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(lpReturnStatusBuffer);
        ORBIT_TRACK_PARAM(lpcbReturnStatusBufferSize);

        auto win32_impl_result = g_api_table.SetClusterServiceAccountPassword(lpszClusterName, lpszNewPassword, dwFlags, lpReturnStatusBuffer, lpcbReturnStatusBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterControl(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterControl(hCluster, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterUpgradeFunctionalLevel(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::BOOL perform, win32::Windows::Win32::Networking::Clustering::PCLUSTER_UPGRADE_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(perform);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);

        auto win32_impl_result = g_api_table.ClusterUpgradeFunctionalLevel(hCluster, perform, pfnProgressCallback, pvCallbackArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCHANGE* __stdcall ORBIT_IMPL_CreateClusterNotifyPortV2(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::NOTIFY_FILTER_AND_TYPE* Filters, uint32_t dwFilterCount, size_t dwNotifyKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(Filters);
        ORBIT_TRACK_PARAM(dwFilterCount);
        ORBIT_TRACK_PARAM(dwNotifyKey);

        auto win32_impl_result = g_api_table.CreateClusterNotifyPortV2(hChange, hCluster, Filters, dwFilterCount, dwNotifyKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RegisterClusterNotifyV2(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, win32::Windows::Win32::Networking::Clustering::NOTIFY_FILTER_AND_TYPE Filter, win32::Windows::Win32::Foundation::HANDLE hObject, size_t dwNotifyKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(Filter);
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(dwNotifyKey);

        auto win32_impl_result = g_api_table.RegisterClusterNotifyV2(hChange, Filter, hObject, dwNotifyKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetNotifyEventHandle(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, win32::Windows::Win32::Foundation::HANDLE* lphTargetEvent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(lphTargetEvent);

        auto win32_impl_result = g_api_table.GetNotifyEventHandle(hChange, lphTargetEvent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterNotifyV2(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, size_t* lpdwNotifyKey, win32::Windows::Win32::Networking::Clustering::NOTIFY_FILTER_AND_TYPE* pFilterAndType, uint8_t* buffer, uint32_t* lpbBufferSize, win32::Windows::Win32::Foundation::PWSTR lpszObjectId, uint32_t* lpcchObjectId, win32::Windows::Win32::Foundation::PWSTR lpszParentId, uint32_t* lpcchParentId, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName, win32::Windows::Win32::Foundation::PWSTR lpszType, uint32_t* lpcchType, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(lpdwNotifyKey);
        ORBIT_TRACK_PARAM(pFilterAndType);
        ORBIT_TRACK_PARAM(buffer);
        ORBIT_TRACK_PARAM(lpbBufferSize);
        ORBIT_TRACK_PARAM(lpszObjectId);
        ORBIT_TRACK_PARAM(lpcchObjectId);
        ORBIT_TRACK_PARAM(lpszParentId);
        ORBIT_TRACK_PARAM(lpcchParentId);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);
        ORBIT_TRACK_PARAM(lpszType);
        ORBIT_TRACK_PARAM(lpcchType);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.GetClusterNotifyV2(hChange, lpdwNotifyKey, pFilterAndType, buffer, lpbBufferSize, lpszObjectId, lpcchObjectId, lpszParentId, lpcchParentId, lpszName, lpcchName, lpszType, lpcchType, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCHANGE* __stdcall ORBIT_IMPL_CreateClusterNotifyPort(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t dwFilter, size_t dwNotifyKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(dwFilter);
        ORBIT_TRACK_PARAM(dwNotifyKey);

        auto win32_impl_result = g_api_table.CreateClusterNotifyPort(hChange, hCluster, dwFilter, dwNotifyKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RegisterClusterNotify(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, uint32_t dwFilterType, win32::Windows::Win32::Foundation::HANDLE hObject, size_t dwNotifyKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(dwFilterType);
        ORBIT_TRACK_PARAM(hObject);
        ORBIT_TRACK_PARAM(dwNotifyKey);

        auto win32_impl_result = g_api_table.RegisterClusterNotify(hChange, dwFilterType, hObject, dwNotifyKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterNotify(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, size_t* lpdwNotifyKey, uint32_t* lpdwFilterType, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName, uint32_t dwMilliseconds) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(lpdwNotifyKey);
        ORBIT_TRACK_PARAM(lpdwFilterType);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);
        ORBIT_TRACK_PARAM(dwMilliseconds);

        auto win32_impl_result = g_api_table.GetClusterNotify(hChange, lpdwNotifyKey, lpdwFilterType, lpszName, lpcchName, dwMilliseconds);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterNotifyPort(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);

        auto win32_impl_result = g_api_table.CloseClusterNotifyPort(hChange);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSENUM* __stdcall ORBIT_IMPL_ClusterOpenEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(dwType);

        auto win32_impl_result = g_api_table.ClusterOpenEnum(hCluster, dwType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HCLUSENUM* hEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnum);

        auto win32_impl_result = g_api_table.ClusterGetEnumCount(hEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSENUM* hEnum, uint32_t dwIndex, uint32_t* lpdwType, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterEnum(hEnum, dwIndex, lpdwType, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterCloseEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSENUM* hEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hEnum);

        auto win32_impl_result = g_api_table.ClusterCloseEnum(hEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSENUMEX* __stdcall ORBIT_IMPL_ClusterOpenEnumEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t dwType, void* pOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(pOptions);

        auto win32_impl_result = g_api_table.ClusterOpenEnumEx(hCluster, dwType, pOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGetEnumCountEx(win32::Windows::Win32::Networking::Clustering::_HCLUSENUMEX* hClusterEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusterEnum);

        auto win32_impl_result = g_api_table.ClusterGetEnumCountEx(hClusterEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterEnumEx(win32::Windows::Win32::Networking::Clustering::_HCLUSENUMEX* hClusterEnum, uint32_t dwIndex, win32::Windows::Win32::Networking::Clustering::CLUSTER_ENUM_ITEM* pItem, uint32_t* cbItem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusterEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pItem);
        ORBIT_TRACK_PARAM(cbItem);

        auto win32_impl_result = g_api_table.ClusterEnumEx(hClusterEnum, dwIndex, pItem, cbItem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterCloseEnumEx(win32::Windows::Win32::Networking::Clustering::_HCLUSENUMEX* hClusterEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusterEnum);

        auto win32_impl_result = g_api_table.ClusterCloseEnumEx(hClusterEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUPSET* __stdcall ORBIT_IMPL_CreateClusterGroupSet(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR groupSetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(groupSetName);

        auto win32_impl_result = g_api_table.CreateClusterGroupSet(hCluster, groupSetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUPSET* __stdcall ORBIT_IMPL_OpenClusterGroupSet(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszGroupSetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszGroupSetName);

        auto win32_impl_result = g_api_table.OpenClusterGroupSet(hCluster, lpszGroupSetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterGroupSet(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);

        auto win32_impl_result = g_api_table.CloseClusterGroupSet(hGroupSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteClusterGroupSet(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);

        auto win32_impl_result = g_api_table.DeleteClusterGroupSet(hGroupSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterAddGroupToGroupSet(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.ClusterAddGroupToGroupSet(hGroupSet, hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterAddGroupToGroupSetWithDomains(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint32_t faultDomain, uint32_t updateDomain) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(faultDomain);
        ORBIT_TRACK_PARAM(updateDomain);

        auto win32_impl_result = g_api_table.ClusterAddGroupToGroupSetWithDomains(hGroupSet, hGroup, faultDomain, updateDomain);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterRemoveGroupFromGroupSet(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.ClusterRemoveGroupFromGroupSet(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupSetControl(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t cbInBufferSize, void* lpOutBuffer, uint32_t cbOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(cbOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterGroupSetControl(hGroupSet, hHostNode, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddClusterGroupDependency(win32::Windows::Win32::Networking::Clustering::_HGROUP* hDependentGroup, win32::Windows::Win32::Networking::Clustering::_HGROUP* hProviderGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDependentGroup);
        ORBIT_TRACK_PARAM(hProviderGroup);

        auto win32_impl_result = g_api_table.AddClusterGroupDependency(hDependentGroup, hProviderGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetGroupDependencyExpression(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Foundation::PWSTR lpszDependencyExpression) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(lpszDependencyExpression);

        auto win32_impl_result = g_api_table.SetGroupDependencyExpression(hGroup, lpszDependencyExpression);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterGroupDependency(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HGROUP* hDependsOn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hDependsOn);

        auto win32_impl_result = g_api_table.RemoveClusterGroupDependency(hGroup, hDependsOn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddClusterGroupSetDependency(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hDependentGroupSet, win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hProviderGroupSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDependentGroupSet);
        ORBIT_TRACK_PARAM(hProviderGroupSet);

        auto win32_impl_result = g_api_table.AddClusterGroupSetDependency(hDependentGroupSet, hProviderGroupSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterGroupSetDependencyExpression(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet, win32::Windows::Win32::Foundation::PWSTR lpszDependencyExprssion) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);
        ORBIT_TRACK_PARAM(lpszDependencyExprssion);

        auto win32_impl_result = g_api_table.SetClusterGroupSetDependencyExpression(hGroupSet, lpszDependencyExprssion);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterGroupSetDependency(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hGroupSet, win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hDependsOn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSet);
        ORBIT_TRACK_PARAM(hDependsOn);

        auto win32_impl_result = g_api_table.RemoveClusterGroupSetDependency(hGroupSet, hDependsOn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddClusterGroupToGroupSetDependency(win32::Windows::Win32::Networking::Clustering::_HGROUP* hDependentGroup, win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hProviderGroupSet) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDependentGroup);
        ORBIT_TRACK_PARAM(hProviderGroupSet);

        auto win32_impl_result = g_api_table.AddClusterGroupToGroupSetDependency(hDependentGroup, hProviderGroupSet);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterGroupToGroupSetDependency(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hDependsOn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hDependsOn);

        auto win32_impl_result = g_api_table.RemoveClusterGroupToGroupSetDependency(hGroup, hDependsOn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUPSETENUM* __stdcall ORBIT_IMPL_ClusterGroupSetOpenEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);

        auto win32_impl_result = g_api_table.ClusterGroupSetOpenEnum(hCluster);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupSetGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HGROUPSETENUM* hGroupSetEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSetEnum);

        auto win32_impl_result = g_api_table.ClusterGroupSetGetEnumCount(hGroupSetEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupSetEnum(win32::Windows::Win32::Networking::Clustering::_HGROUPSETENUM* hGroupSetEnum, uint32_t dwIndex, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSetEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterGroupSetEnum(hGroupSetEnum, dwIndex, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupSetCloseEnum(win32::Windows::Win32::Networking::Clustering::_HGROUPSETENUM* hGroupSetEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupSetEnum);

        auto win32_impl_result = g_api_table.ClusterGroupSetCloseEnum(hGroupSetEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddCrossClusterGroupSetDependency(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hDependentGroupSet, win32::Windows::Win32::Foundation::PWSTR lpRemoteClusterName, win32::Windows::Win32::Foundation::PWSTR lpRemoteGroupSetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDependentGroupSet);
        ORBIT_TRACK_PARAM(lpRemoteClusterName);
        ORBIT_TRACK_PARAM(lpRemoteGroupSetName);

        auto win32_impl_result = g_api_table.AddCrossClusterGroupSetDependency(hDependentGroupSet, lpRemoteClusterName, lpRemoteGroupSetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveCrossClusterGroupSetDependency(win32::Windows::Win32::Networking::Clustering::_HGROUPSET* hDependentGroupSet, win32::Windows::Win32::Foundation::PWSTR lpRemoteClusterName, win32::Windows::Win32::Foundation::PWSTR lpRemoteGroupSetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDependentGroupSet);
        ORBIT_TRACK_PARAM(lpRemoteClusterName);
        ORBIT_TRACK_PARAM(lpRemoteGroupSetName);

        auto win32_impl_result = g_api_table.RemoveCrossClusterGroupSetDependency(hDependentGroupSet, lpRemoteClusterName, lpRemoteGroupSetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUPSET* __stdcall ORBIT_IMPL_CreateClusterAvailabilitySet(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpAvailabilitySetName, win32::Windows::Win32::Networking::Clustering::CLUSTER_AVAILABILITY_SET_CONFIG* pAvailabilitySetConfig) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpAvailabilitySetName);
        ORBIT_TRACK_PARAM(pAvailabilitySetConfig);

        auto win32_impl_result = g_api_table.CreateClusterAvailabilitySet(hCluster, lpAvailabilitySetName, pAvailabilitySetConfig);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeReplacement(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeNameCurrent, win32::Windows::Win32::Foundation::PWSTR lpszNodeNameNew) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeNameCurrent);
        ORBIT_TRACK_PARAM(lpszNodeNameNew);

        auto win32_impl_result = g_api_table.ClusterNodeReplacement(hCluster, lpszNodeNameCurrent, lpszNodeNameNew);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterCreateAffinityRule(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR ruleName, win32::Windows::Win32::Networking::Clustering::CLUS_AFFINITY_RULE_TYPE ruleType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(ruleName);
        ORBIT_TRACK_PARAM(ruleType);

        auto win32_impl_result = g_api_table.ClusterCreateAffinityRule(hCluster, ruleName, ruleType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterRemoveAffinityRule(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR ruleName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(ruleName);

        auto win32_impl_result = g_api_table.ClusterRemoveAffinityRule(hCluster, ruleName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterAddGroupToAffinityRule(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR ruleName, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(ruleName);
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.ClusterAddGroupToAffinityRule(hCluster, ruleName, hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterRemoveGroupFromAffinityRule(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR ruleName, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(ruleName);
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.ClusterRemoveGroupFromAffinityRule(hCluster, ruleName, hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterAffinityRuleControl(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR affinityRuleName, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t cbInBufferSize, void* lpOutBuffer, uint32_t cbOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(affinityRuleName);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(cbOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterAffinityRuleControl(hCluster, affinityRuleName, hHostNode, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODE* __stdcall ORBIT_IMPL_OpenClusterNode(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);

        auto win32_impl_result = g_api_table.OpenClusterNode(hCluster, lpszNodeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODE* __stdcall ORBIT_IMPL_OpenClusterNodeEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, uint32_t dwDesiredAccess, uint32_t* lpdwGrantedAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(lpdwGrantedAccess);

        auto win32_impl_result = g_api_table.OpenClusterNodeEx(hCluster, lpszNodeName, dwDesiredAccess, lpdwGrantedAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODE* __stdcall ORBIT_IMPL_OpenClusterNodeById(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t nodeId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(nodeId);

        auto win32_impl_result = g_api_table.OpenClusterNodeById(hCluster, nodeId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterNode(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.CloseClusterNode(hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::CLUSTER_NODE_STATE __stdcall ORBIT_IMPL_GetClusterNodeState(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.GetClusterNodeState(hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterNodeId(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, win32::Windows::Win32::Foundation::PWSTR lpszNodeId, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(lpszNodeId);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.GetClusterNodeId(hNode, lpszNodeId, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_GetClusterFromNode(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.GetClusterFromNode(hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PauseClusterNode(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.PauseClusterNode(hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResumeClusterNode(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.ResumeClusterNode(hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EvictClusterNode(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.EvictClusterNode(hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNETINTERFACEENUM* __stdcall ORBIT_IMPL_ClusterNetInterfaceOpenEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, win32::Windows::Win32::Foundation::PWSTR lpszNetworkName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(lpszNetworkName);

        auto win32_impl_result = g_api_table.ClusterNetInterfaceOpenEnum(hCluster, lpszNodeName, lpszNetworkName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetInterfaceEnum(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACEENUM* hNetInterfaceEnum, uint32_t dwIndex, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterfaceEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterNetInterfaceEnum(hNetInterfaceEnum, dwIndex, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetInterfaceCloseEnum(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACEENUM* hNetInterfaceEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterfaceEnum);

        auto win32_impl_result = g_api_table.ClusterNetInterfaceCloseEnum(hNetInterfaceEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODEENUM* __stdcall ORBIT_IMPL_ClusterNodeOpenEnum(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(dwType);

        auto win32_impl_result = g_api_table.ClusterNodeOpenEnum(hNode, dwType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODEENUMEX* __stdcall ORBIT_IMPL_ClusterNodeOpenEnumEx(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, uint32_t dwType, void* pOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(pOptions);

        auto win32_impl_result = g_api_table.ClusterNodeOpenEnumEx(hNode, dwType, pOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeGetEnumCountEx(win32::Windows::Win32::Networking::Clustering::_HNODEENUMEX* hNodeEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNodeEnum);

        auto win32_impl_result = g_api_table.ClusterNodeGetEnumCountEx(hNodeEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeEnumEx(win32::Windows::Win32::Networking::Clustering::_HNODEENUMEX* hNodeEnum, uint32_t dwIndex, win32::Windows::Win32::Networking::Clustering::CLUSTER_ENUM_ITEM* pItem, uint32_t* cbItem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNodeEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pItem);
        ORBIT_TRACK_PARAM(cbItem);

        auto win32_impl_result = g_api_table.ClusterNodeEnumEx(hNodeEnum, dwIndex, pItem, cbItem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeCloseEnumEx(win32::Windows::Win32::Networking::Clustering::_HNODEENUMEX* hNodeEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNodeEnum);

        auto win32_impl_result = g_api_table.ClusterNodeCloseEnumEx(hNodeEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HNODEENUM* hNodeEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNodeEnum);

        auto win32_impl_result = g_api_table.ClusterNodeGetEnumCount(hNodeEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeCloseEnum(win32::Windows::Win32::Networking::Clustering::_HNODEENUM* hNodeEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNodeEnum);

        auto win32_impl_result = g_api_table.ClusterNodeCloseEnum(hNodeEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeEnum(win32::Windows::Win32::Networking::Clustering::_HNODEENUM* hNodeEnum, uint32_t dwIndex, uint32_t* lpdwType, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNodeEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterNodeEnum(hNodeEnum, dwIndex, lpdwType, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_EvictClusterNodeEx(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, uint32_t dwTimeOut, win32::Windows::Win32::Foundation::HRESULT* phrCleanupStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(dwTimeOut);
        ORBIT_TRACK_PARAM(phrCleanupStatus);

        auto win32_impl_result = g_api_table.EvictClusterNodeEx(hNode, dwTimeOut, phrCleanupStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterResourceTypeKey(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszTypeName, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszTypeName);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterResourceTypeKey(hCluster, lpszTypeName, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUP* __stdcall ORBIT_IMPL_CreateClusterGroup(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszGroupName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszGroupName);

        auto win32_impl_result = g_api_table.CreateClusterGroup(hCluster, lpszGroupName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUP* __stdcall ORBIT_IMPL_OpenClusterGroup(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszGroupName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszGroupName);

        auto win32_impl_result = g_api_table.OpenClusterGroup(hCluster, lpszGroupName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUP* __stdcall ORBIT_IMPL_OpenClusterGroupEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszGroupName, uint32_t dwDesiredAccess, uint32_t* lpdwGrantedAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszGroupName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(lpdwGrantedAccess);

        auto win32_impl_result = g_api_table.OpenClusterGroupEx(hCluster, lpszGroupName, dwDesiredAccess, lpdwGrantedAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PauseClusterNodeEx(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, win32::Windows::Win32::Foundation::BOOL bDrainNode, uint32_t dwPauseFlags, win32::Windows::Win32::Networking::Clustering::_HNODE* hNodeDrainTarget) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(bDrainNode);
        ORBIT_TRACK_PARAM(dwPauseFlags);
        ORBIT_TRACK_PARAM(hNodeDrainTarget);

        auto win32_impl_result = g_api_table.PauseClusterNodeEx(hNode, bDrainNode, dwPauseFlags, hNodeDrainTarget);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResumeClusterNodeEx(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, win32::Windows::Win32::Networking::Clustering::CLUSTER_NODE_RESUME_FAILBACK_TYPE eResumeFailbackType, uint32_t dwResumeFlagsReserved) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(eResumeFailbackType);
        ORBIT_TRACK_PARAM(dwResumeFlagsReserved);

        auto win32_impl_result = g_api_table.ResumeClusterNodeEx(hNode, eResumeFailbackType, dwResumeFlagsReserved);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUP* __stdcall ORBIT_IMPL_CreateClusterGroupEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszGroupName, win32::Windows::Win32::Networking::Clustering::CLUSTER_CREATE_GROUP_INFO* pGroupInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszGroupName);
        ORBIT_TRACK_PARAM(pGroupInfo);

        auto win32_impl_result = g_api_table.CreateClusterGroupEx(hCluster, lpszGroupName, pGroupInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUPENUMEX* __stdcall ORBIT_IMPL_ClusterGroupOpenEnumEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszProperties, uint32_t cbProperties, win32::Windows::Win32::Foundation::PWSTR lpszRoProperties, uint32_t cbRoProperties, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszProperties);
        ORBIT_TRACK_PARAM(cbProperties);
        ORBIT_TRACK_PARAM(lpszRoProperties);
        ORBIT_TRACK_PARAM(cbRoProperties);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.ClusterGroupOpenEnumEx(hCluster, lpszProperties, cbProperties, lpszRoProperties, cbRoProperties, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupGetEnumCountEx(win32::Windows::Win32::Networking::Clustering::_HGROUPENUMEX* hGroupEnumEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupEnumEx);

        auto win32_impl_result = g_api_table.ClusterGroupGetEnumCountEx(hGroupEnumEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupEnumEx(win32::Windows::Win32::Networking::Clustering::_HGROUPENUMEX* hGroupEnumEx, uint32_t dwIndex, win32::Windows::Win32::Networking::Clustering::CLUSTER_GROUP_ENUM_ITEM* pItem, uint32_t* cbItem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupEnumEx);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pItem);
        ORBIT_TRACK_PARAM(cbItem);

        auto win32_impl_result = g_api_table.ClusterGroupEnumEx(hGroupEnumEx, dwIndex, pItem, cbItem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupCloseEnumEx(win32::Windows::Win32::Networking::Clustering::_HGROUPENUMEX* hGroupEnumEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupEnumEx);

        auto win32_impl_result = g_api_table.ClusterGroupCloseEnumEx(hGroupEnumEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESENUMEX* __stdcall ORBIT_IMPL_ClusterResourceOpenEnumEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszProperties, uint32_t cbProperties, win32::Windows::Win32::Foundation::PWSTR lpszRoProperties, uint32_t cbRoProperties, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszProperties);
        ORBIT_TRACK_PARAM(cbProperties);
        ORBIT_TRACK_PARAM(lpszRoProperties);
        ORBIT_TRACK_PARAM(cbRoProperties);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.ClusterResourceOpenEnumEx(hCluster, lpszProperties, cbProperties, lpszRoProperties, cbRoProperties, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceGetEnumCountEx(win32::Windows::Win32::Networking::Clustering::_HRESENUMEX* hResourceEnumEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResourceEnumEx);

        auto win32_impl_result = g_api_table.ClusterResourceGetEnumCountEx(hResourceEnumEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceEnumEx(win32::Windows::Win32::Networking::Clustering::_HRESENUMEX* hResourceEnumEx, uint32_t dwIndex, win32::Windows::Win32::Networking::Clustering::CLUSTER_RESOURCE_ENUM_ITEM* pItem, uint32_t* cbItem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResourceEnumEx);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(pItem);
        ORBIT_TRACK_PARAM(cbItem);

        auto win32_impl_result = g_api_table.ClusterResourceEnumEx(hResourceEnumEx, dwIndex, pItem, cbItem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceCloseEnumEx(win32::Windows::Win32::Networking::Clustering::_HRESENUMEX* hResourceEnumEx) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResourceEnumEx);

        auto win32_impl_result = g_api_table.ClusterResourceCloseEnumEx(hResourceEnumEx);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OnlineClusterGroupEx(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HNODE* hDestinationNode, uint32_t dwOnlineFlags, uint8_t* lpInBuffer, uint32_t cbInBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hDestinationNode);
        ORBIT_TRACK_PARAM(dwOnlineFlags);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);

        auto win32_impl_result = g_api_table.OnlineClusterGroupEx(hGroup, hDestinationNode, dwOnlineFlags, lpInBuffer, cbInBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OfflineClusterGroupEx(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint32_t dwOfflineFlags, uint8_t* lpInBuffer, uint32_t cbInBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(dwOfflineFlags);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);

        auto win32_impl_result = g_api_table.OfflineClusterGroupEx(hGroup, dwOfflineFlags, lpInBuffer, cbInBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OnlineClusterResourceEx(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, uint32_t dwOnlineFlags, uint8_t* lpInBuffer, uint32_t cbInBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(dwOnlineFlags);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);

        auto win32_impl_result = g_api_table.OnlineClusterResourceEx(hResource, dwOnlineFlags, lpInBuffer, cbInBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OfflineClusterResourceEx(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, uint32_t dwOfflineFlags, uint8_t* lpInBuffer, uint32_t cbInBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(dwOfflineFlags);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);

        auto win32_impl_result = g_api_table.OfflineClusterResourceEx(hResource, dwOfflineFlags, lpInBuffer, cbInBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MoveClusterGroupEx(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HNODE* hDestinationNode, uint32_t dwMoveFlags, uint8_t* lpInBuffer, uint32_t cbInBufferSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hDestinationNode);
        ORBIT_TRACK_PARAM(dwMoveFlags);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);

        auto win32_impl_result = g_api_table.MoveClusterGroupEx(hGroup, hDestinationNode, dwMoveFlags, lpInBuffer, cbInBufferSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CancelClusterGroupOperation(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint32_t dwCancelFlags_RESERVED) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(dwCancelFlags_RESERVED);

        auto win32_impl_result = g_api_table.CancelClusterGroupOperation(hGroup, dwCancelFlags_RESERVED);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RestartClusterResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.RestartClusterResource(hResource, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.CloseClusterGroup(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_GetClusterFromGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.GetClusterFromGroup(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::CLUSTER_GROUP_STATE __stdcall ORBIT_IMPL_GetClusterGroupState(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, uint32_t* lpcchNodeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(lpcchNodeName);

        auto win32_impl_result = g_api_table.GetClusterGroupState(hGroup, lpszNodeName, lpcchNodeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterGroupName(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Foundation::PWSTR lpszGroupName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(lpszGroupName);

        auto win32_impl_result = g_api_table.SetClusterGroupName(hGroup, lpszGroupName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterGroupNodeList(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint32_t NodeCount, win32::Windows::Win32::Networking::Clustering::_HNODE** NodeList) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(NodeCount);
        ORBIT_TRACK_PARAM(NodeList);

        auto win32_impl_result = g_api_table.SetClusterGroupNodeList(hGroup, NodeCount, NodeList);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OnlineClusterGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HNODE* hDestinationNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hDestinationNode);

        auto win32_impl_result = g_api_table.OnlineClusterGroup(hGroup, hDestinationNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_MoveClusterGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HNODE* hDestinationNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hDestinationNode);

        auto win32_impl_result = g_api_table.MoveClusterGroup(hGroup, hDestinationNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OfflineClusterGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.OfflineClusterGroup(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteClusterGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.DeleteClusterGroup(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DestroyClusterGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.DestroyClusterGroup(hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUPENUM* __stdcall ORBIT_IMPL_ClusterGroupOpenEnum(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(dwType);

        auto win32_impl_result = g_api_table.ClusterGroupOpenEnum(hGroup, dwType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HGROUPENUM* hGroupEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupEnum);

        auto win32_impl_result = g_api_table.ClusterGroupGetEnumCount(hGroupEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupEnum(win32::Windows::Win32::Networking::Clustering::_HGROUPENUM* hGroupEnum, uint32_t dwIndex, uint32_t* lpdwType, win32::Windows::Win32::Foundation::PWSTR lpszResourceName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpszResourceName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterGroupEnum(hGroupEnum, dwIndex, lpdwType, lpszResourceName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupCloseEnum(win32::Windows::Win32::Networking::Clustering::_HGROUPENUM* hGroupEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroupEnum);

        auto win32_impl_result = g_api_table.ClusterGroupCloseEnum(hGroupEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_CreateClusterResource(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Foundation::PWSTR lpszResourceName, win32::Windows::Win32::Foundation::PWSTR lpszResourceType, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(lpszResourceName);
        ORBIT_TRACK_PARAM(lpszResourceType);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.CreateClusterResource(hGroup, lpszResourceName, lpszResourceType, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_OpenClusterResource(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceName);

        auto win32_impl_result = g_api_table.OpenClusterResource(hCluster, lpszResourceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_OpenClusterResourceEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceName, uint32_t dwDesiredAccess, uint32_t* lpdwGrantedAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(lpdwGrantedAccess);

        auto win32_impl_result = g_api_table.OpenClusterResourceEx(hCluster, lpszResourceName, dwDesiredAccess, lpdwGrantedAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.CloseClusterResource(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_GetClusterFromResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.GetClusterFromResource(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteClusterResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.DeleteClusterResource(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::CLUSTER_RESOURCE_STATE __stdcall ORBIT_IMPL_GetClusterResourceState(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, uint32_t* lpcchNodeName, win32::Windows::Win32::Foundation::PWSTR lpszGroupName, uint32_t* lpcchGroupName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(lpcchNodeName);
        ORBIT_TRACK_PARAM(lpszGroupName);
        ORBIT_TRACK_PARAM(lpcchGroupName);

        auto win32_impl_result = g_api_table.GetClusterResourceState(hResource, lpszNodeName, lpcchNodeName, lpszGroupName, lpcchGroupName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterResourceName(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR lpszResourceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(lpszResourceName);

        auto win32_impl_result = g_api_table.SetClusterResourceName(hResource, lpszResourceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_FailClusterResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.FailClusterResource(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OnlineClusterResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.OnlineClusterResource(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_OfflineClusterResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.OfflineClusterResource(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ChangeClusterResourceGroup(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hGroup);

        auto win32_impl_result = g_api_table.ChangeClusterResourceGroup(hResource, hGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ChangeClusterResourceGroupEx(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint64_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.ChangeClusterResourceGroupEx(hResource, hGroup, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddClusterResourceNode(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.AddClusterResourceNode(hResource, hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterResourceNode(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HNODE* hNode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hNode);

        auto win32_impl_result = g_api_table.RemoveClusterResourceNode(hResource, hNode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddClusterResourceDependency(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hDependsOn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hDependsOn);

        auto win32_impl_result = g_api_table.AddClusterResourceDependency(hResource, hDependsOn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterResourceDependency(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hDependsOn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hDependsOn);

        auto win32_impl_result = g_api_table.RemoveClusterResourceDependency(hResource, hDependsOn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterResourceDependencyExpression(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR lpszDependencyExpression) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(lpszDependencyExpression);

        auto win32_impl_result = g_api_table.SetClusterResourceDependencyExpression(hResource, lpszDependencyExpression);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterResourceDependencyExpression(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR lpszDependencyExpression, uint32_t* lpcchDependencyExpression) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(lpszDependencyExpression);
        ORBIT_TRACK_PARAM(lpcchDependencyExpression);

        auto win32_impl_result = g_api_table.GetClusterResourceDependencyExpression(hResource, lpszDependencyExpression, lpcchDependencyExpression);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddResourceToClusterSharedVolumes(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.AddResourceToClusterSharedVolumes(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveResourceFromClusterSharedVolumes(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.RemoveResourceFromClusterSharedVolumes(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_IsFileOnClusterSharedVolume(win32::Windows::Win32::Foundation::PWSTR lpszPathName, win32::Windows::Win32::Foundation::BOOL* pbFileIsOnSharedVolume) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(pbFileIsOnSharedVolume);

        auto win32_impl_result = g_api_table.IsFileOnClusterSharedVolume(lpszPathName, pbFileIsOnSharedVolume);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterSharedVolumeSetSnapshotState(::win32::guid guidSnapshotSet, win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, win32::Windows::Win32::Networking::Clustering::CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE state) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(guidSnapshotSet);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(state);

        auto win32_impl_result = g_api_table.ClusterSharedVolumeSetSnapshotState(guidSnapshotSet, lpszVolumeName, state);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CanResourceBeDependent(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResourceDependent) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hResourceDependent);

        auto win32_impl_result = g_api_table.CanResourceBeDependent(hResource, hResourceDependent);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceControl(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t cbInBufferSize, void* lpOutBuffer, uint32_t cbOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(cbOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterResourceControl(hResource, hHostNode, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceControlAsUser(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t cbInBufferSize, void* lpOutBuffer, uint32_t cbOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(cbInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(cbOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterResourceControlAsUser(hResource, hHostNode, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceTypeControl(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeName, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceTypeName);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterResourceTypeControl(hCluster, lpszResourceTypeName, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceTypeControlAsUser(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeName, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceTypeName);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterResourceTypeControlAsUser(hCluster, lpszResourceTypeName, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterGroupControl(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterGroupControl(hGroup, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNodeControl(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterNodeControl(hNode, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_GetClusterResourceNetworkName(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR lpBuffer, uint32_t* nSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(lpBuffer);
        ORBIT_TRACK_PARAM(nSize);

        auto win32_impl_result = g_api_table.GetClusterResourceNetworkName(hResource, lpBuffer, nSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESENUM* __stdcall ORBIT_IMPL_ClusterResourceOpenEnum(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(dwType);

        auto win32_impl_result = g_api_table.ClusterResourceOpenEnum(hResource, dwType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HRESENUM* hResEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResEnum);

        auto win32_impl_result = g_api_table.ClusterResourceGetEnumCount(hResEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceEnum(win32::Windows::Win32::Networking::Clustering::_HRESENUM* hResEnum, uint32_t dwIndex, uint32_t* lpdwType, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterResourceEnum(hResEnum, dwIndex, lpdwType, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceCloseEnum(win32::Windows::Win32::Networking::Clustering::_HRESENUM* hResEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResEnum);

        auto win32_impl_result = g_api_table.ClusterResourceCloseEnum(hResEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateClusterResourceType(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeName, win32::Windows::Win32::Foundation::PWSTR lpszDisplayName, win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeDll, uint32_t dwLooksAlivePollInterval, uint32_t dwIsAlivePollInterval) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceTypeName);
        ORBIT_TRACK_PARAM(lpszDisplayName);
        ORBIT_TRACK_PARAM(lpszResourceTypeDll);
        ORBIT_TRACK_PARAM(dwLooksAlivePollInterval);
        ORBIT_TRACK_PARAM(dwIsAlivePollInterval);

        auto win32_impl_result = g_api_table.CreateClusterResourceType(hCluster, lpszResourceTypeName, lpszDisplayName, lpszResourceTypeDll, dwLooksAlivePollInterval, dwIsAlivePollInterval);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DeleteClusterResourceType(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceTypeName);

        auto win32_impl_result = g_api_table.DeleteClusterResourceType(hCluster, lpszResourceTypeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESTYPEENUM* __stdcall ORBIT_IMPL_ClusterResourceTypeOpenEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeName, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszResourceTypeName);
        ORBIT_TRACK_PARAM(dwType);

        auto win32_impl_result = g_api_table.ClusterResourceTypeOpenEnum(hCluster, lpszResourceTypeName, dwType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceTypeGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HRESTYPEENUM* hResTypeEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResTypeEnum);

        auto win32_impl_result = g_api_table.ClusterResourceTypeGetEnumCount(hResTypeEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceTypeEnum(win32::Windows::Win32::Networking::Clustering::_HRESTYPEENUM* hResTypeEnum, uint32_t dwIndex, uint32_t* lpdwType, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResTypeEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterResourceTypeEnum(hResTypeEnum, dwIndex, lpdwType, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterResourceTypeCloseEnum(win32::Windows::Win32::Networking::Clustering::_HRESTYPEENUM* hResTypeEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResTypeEnum);

        auto win32_impl_result = g_api_table.ClusterResourceTypeCloseEnum(hResTypeEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNETWORK* __stdcall ORBIT_IMPL_OpenClusterNetwork(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNetworkName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNetworkName);

        auto win32_impl_result = g_api_table.OpenClusterNetwork(hCluster, lpszNetworkName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNETWORK* __stdcall ORBIT_IMPL_OpenClusterNetworkEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNetworkName, uint32_t dwDesiredAccess, uint32_t* lpdwGrantedAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNetworkName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(lpdwGrantedAccess);

        auto win32_impl_result = g_api_table.OpenClusterNetworkEx(hCluster, lpszNetworkName, dwDesiredAccess, lpdwGrantedAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterNetwork(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);

        auto win32_impl_result = g_api_table.CloseClusterNetwork(hNetwork);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_GetClusterFromNetwork(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);

        auto win32_impl_result = g_api_table.GetClusterFromNetwork(hNetwork);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNETWORKENUM* __stdcall ORBIT_IMPL_ClusterNetworkOpenEnum(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork, uint32_t dwType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);
        ORBIT_TRACK_PARAM(dwType);

        auto win32_impl_result = g_api_table.ClusterNetworkOpenEnum(hNetwork, dwType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetworkGetEnumCount(win32::Windows::Win32::Networking::Clustering::_HNETWORKENUM* hNetworkEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetworkEnum);

        auto win32_impl_result = g_api_table.ClusterNetworkGetEnumCount(hNetworkEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetworkEnum(win32::Windows::Win32::Networking::Clustering::_HNETWORKENUM* hNetworkEnum, uint32_t dwIndex, uint32_t* lpdwType, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetworkEnum);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.ClusterNetworkEnum(hNetworkEnum, dwIndex, lpdwType, lpszName, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetworkCloseEnum(win32::Windows::Win32::Networking::Clustering::_HNETWORKENUM* hNetworkEnum) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetworkEnum);

        auto win32_impl_result = g_api_table.ClusterNetworkCloseEnum(hNetworkEnum);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::CLUSTER_NETWORK_STATE __stdcall ORBIT_IMPL_GetClusterNetworkState(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);

        auto win32_impl_result = g_api_table.GetClusterNetworkState(hNetwork);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetClusterNetworkName(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork, win32::Windows::Win32::Foundation::PWSTR lpszName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);
        ORBIT_TRACK_PARAM(lpszName);

        auto win32_impl_result = g_api_table.SetClusterNetworkName(hNetwork, lpszName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterNetworkId(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork, win32::Windows::Win32::Foundation::PWSTR lpszNetworkId, uint32_t* lpcchName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);
        ORBIT_TRACK_PARAM(lpszNetworkId);
        ORBIT_TRACK_PARAM(lpcchName);

        auto win32_impl_result = g_api_table.GetClusterNetworkId(hNetwork, lpszNetworkId, lpcchName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetworkControl(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterNetworkControl(hNetwork, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* __stdcall ORBIT_IMPL_OpenClusterNetInterface(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszInterfaceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszInterfaceName);

        auto win32_impl_result = g_api_table.OpenClusterNetInterface(hCluster, lpszInterfaceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* __stdcall ORBIT_IMPL_OpenClusterNetInterfaceEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszInterfaceName, uint32_t dwDesiredAccess, uint32_t* lpdwGrantedAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszInterfaceName);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(lpdwGrantedAccess);

        auto win32_impl_result = g_api_table.OpenClusterNetInterfaceEx(hCluster, lpszInterfaceName, dwDesiredAccess, lpdwGrantedAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetClusterNetInterface(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, win32::Windows::Win32::Foundation::PWSTR lpszNetworkName, win32::Windows::Win32::Foundation::PWSTR lpszInterfaceName, uint32_t* lpcchInterfaceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(lpszNetworkName);
        ORBIT_TRACK_PARAM(lpszInterfaceName);
        ORBIT_TRACK_PARAM(lpcchInterfaceName);

        auto win32_impl_result = g_api_table.GetClusterNetInterface(hCluster, lpszNodeName, lpszNetworkName, lpszInterfaceName, lpcchInterfaceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_CloseClusterNetInterface(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* hNetInterface) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterface);

        auto win32_impl_result = g_api_table.CloseClusterNetInterface(hNetInterface);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_GetClusterFromNetInterface(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* hNetInterface) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterface);

        auto win32_impl_result = g_api_table.GetClusterFromNetInterface(hNetInterface);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::CLUSTER_NETINTERFACE_STATE __stdcall ORBIT_IMPL_GetClusterNetInterfaceState(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* hNetInterface) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterface);

        auto win32_impl_result = g_api_table.GetClusterNetInterfaceState(hNetInterface);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterNetInterfaceControl(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* hNetInterface, win32::Windows::Win32::Networking::Clustering::_HNODE* hHostNode, uint32_t dwControlCode, void* lpInBuffer, uint32_t nInBufferSize, void* lpOutBuffer, uint32_t nOutBufferSize, uint32_t* lpBytesReturned) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterface);
        ORBIT_TRACK_PARAM(hHostNode);
        ORBIT_TRACK_PARAM(dwControlCode);
        ORBIT_TRACK_PARAM(lpInBuffer);
        ORBIT_TRACK_PARAM(nInBufferSize);
        ORBIT_TRACK_PARAM(lpOutBuffer);
        ORBIT_TRACK_PARAM(nOutBufferSize);
        ORBIT_TRACK_PARAM(lpBytesReturned);

        auto win32_impl_result = g_api_table.ClusterNetInterfaceControl(hNetInterface, hHostNode, dwControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterKey(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterKey(hCluster, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterGroupKey(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterGroupKey(hGroup, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterResourceKey(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterResourceKey(hResource, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterNodeKey(win32::Windows::Win32::Networking::Clustering::_HNODE* hNode, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNode);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterNodeKey(hNode, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterNetworkKey(win32::Windows::Win32::Networking::Clustering::_HNETWORK* hNetwork, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetwork);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterNetworkKey(hNetwork, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::System::Registry::HKEY __stdcall ORBIT_IMPL_GetClusterNetInterfaceKey(win32::Windows::Win32::Networking::Clustering::_HNETINTERFACE* hNetInterface, uint32_t samDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNetInterface);
        ORBIT_TRACK_PARAM(samDesired);

        auto win32_impl_result = g_api_table.GetClusterNetInterfaceKey(hNetInterface, samDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCreateKey(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Foundation::PWSTR lpszSubKey, uint32_t dwOptions, uint32_t samDesired, win32::Windows::Win32::Security::SECURITY_ATTRIBUTES* lpSecurityAttributes, win32::Windows::Win32::System::Registry::HKEY* phkResult, uint32_t* lpdwDisposition) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpszSubKey);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(samDesired);
        ORBIT_TRACK_PARAM(lpSecurityAttributes);
        ORBIT_TRACK_PARAM(phkResult);
        ORBIT_TRACK_PARAM(lpdwDisposition);

        auto win32_impl_result = g_api_table.ClusterRegCreateKey(hKey, lpszSubKey, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegOpenKey(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Foundation::PWSTR lpszSubKey, uint32_t samDesired, win32::Windows::Win32::System::Registry::HKEY* phkResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpszSubKey);
        ORBIT_TRACK_PARAM(samDesired);
        ORBIT_TRACK_PARAM(phkResult);

        auto win32_impl_result = g_api_table.ClusterRegOpenKey(hKey, lpszSubKey, samDesired, phkResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegDeleteKey(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Foundation::PWSTR lpszSubKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpszSubKey);

        auto win32_impl_result = g_api_table.ClusterRegDeleteKey(hKey, lpszSubKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseKey(win32::Windows::Win32::System::Registry::HKEY hKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);

        auto win32_impl_result = g_api_table.ClusterRegCloseKey(hKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegEnumKey(win32::Windows::Win32::System::Registry::HKEY hKey, uint32_t dwIndex, win32::Windows::Win32::Foundation::PWSTR lpszName, uint32_t* lpcchName, win32::Windows::Win32::Foundation::FILETIME* lpftLastWriteTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpszName);
        ORBIT_TRACK_PARAM(lpcchName);
        ORBIT_TRACK_PARAM(lpftLastWriteTime);

        auto win32_impl_result = g_api_table.ClusterRegEnumKey(hKey, dwIndex, lpszName, lpcchName, lpftLastWriteTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterRegSetValue(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Foundation::PWSTR lpszValueName, uint32_t dwType, uint8_t* lpData, uint32_t cbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpszValueName);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(cbData);

        auto win32_impl_result = g_api_table.ClusterRegSetValue(hKey, lpszValueName, dwType, lpData, cbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterRegDeleteValue(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Foundation::PWSTR lpszValueName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpszValueName);

        auto win32_impl_result = g_api_table.ClusterRegDeleteValue(hKey, lpszValueName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegQueryValue(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Foundation::PWSTR lpszValueName, uint32_t* lpdwValueType, uint8_t* lpData, uint32_t* lpcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpszValueName);
        ORBIT_TRACK_PARAM(lpdwValueType);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(lpcbData);

        auto win32_impl_result = g_api_table.ClusterRegQueryValue(hKey, lpszValueName, lpdwValueType, lpData, lpcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterRegEnumValue(win32::Windows::Win32::System::Registry::HKEY hKey, uint32_t dwIndex, win32::Windows::Win32::Foundation::PWSTR lpszValueName, uint32_t* lpcchValueName, uint32_t* lpdwType, uint8_t* lpData, uint32_t* lpcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(dwIndex);
        ORBIT_TRACK_PARAM(lpszValueName);
        ORBIT_TRACK_PARAM(lpcchValueName);
        ORBIT_TRACK_PARAM(lpdwType);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(lpcbData);

        auto win32_impl_result = g_api_table.ClusterRegEnumValue(hKey, dwIndex, lpszValueName, lpcchValueName, lpdwType, lpData, lpcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegQueryInfoKey(win32::Windows::Win32::System::Registry::HKEY hKey, uint32_t* lpcSubKeys, uint32_t* lpcchMaxSubKeyLen, uint32_t* lpcValues, uint32_t* lpcchMaxValueNameLen, uint32_t* lpcbMaxValueLen, uint32_t* lpcbSecurityDescriptor, win32::Windows::Win32::Foundation::FILETIME* lpftLastWriteTime) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(lpcSubKeys);
        ORBIT_TRACK_PARAM(lpcchMaxSubKeyLen);
        ORBIT_TRACK_PARAM(lpcValues);
        ORBIT_TRACK_PARAM(lpcchMaxValueNameLen);
        ORBIT_TRACK_PARAM(lpcbMaxValueLen);
        ORBIT_TRACK_PARAM(lpcbSecurityDescriptor);
        ORBIT_TRACK_PARAM(lpftLastWriteTime);

        auto win32_impl_result = g_api_table.ClusterRegQueryInfoKey(hKey, lpcSubKeys, lpcchMaxSubKeyLen, lpcValues, lpcchMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegGetKeySecurity(win32::Windows::Win32::System::Registry::HKEY hKey, uint32_t RequestedInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor, uint32_t* lpcbSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(RequestedInformation);
        ORBIT_TRACK_PARAM(pSecurityDescriptor);
        ORBIT_TRACK_PARAM(lpcbSecurityDescriptor);

        auto win32_impl_result = g_api_table.ClusterRegGetKeySecurity(hKey, RequestedInformation, pSecurityDescriptor, lpcbSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegSetKeySecurity(win32::Windows::Win32::System::Registry::HKEY hKey, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(pSecurityDescriptor);

        auto win32_impl_result = g_api_table.ClusterRegSetKeySecurity(hKey, SecurityInformation, pSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegSyncDatabase(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, uint32_t flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.ClusterRegSyncDatabase(hCluster, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCreateBatch(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Networking::Clustering::_HREGBATCH** pHREGBATCH) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(pHREGBATCH);

        auto win32_impl_result = g_api_table.ClusterRegCreateBatch(hKey, pHREGBATCH);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegBatchAddCommand(win32::Windows::Win32::Networking::Clustering::_HREGBATCH* hRegBatch, win32::Windows::Win32::Networking::Clustering::CLUSTER_REG_COMMAND dwCommand, win32::Windows::Win32::Foundation::PWSTR wzName, uint32_t dwOptions, void* lpData, uint32_t cbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegBatch);
        ORBIT_TRACK_PARAM(dwCommand);
        ORBIT_TRACK_PARAM(wzName);
        ORBIT_TRACK_PARAM(dwOptions);
        ORBIT_TRACK_PARAM(lpData);
        ORBIT_TRACK_PARAM(cbData);

        auto win32_impl_result = g_api_table.ClusterRegBatchAddCommand(hRegBatch, dwCommand, wzName, dwOptions, lpData, cbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseBatch(win32::Windows::Win32::Networking::Clustering::_HREGBATCH* hRegBatch, win32::Windows::Win32::Foundation::BOOL bCommit, int32_t* failedCommandNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegBatch);
        ORBIT_TRACK_PARAM(bCommit);
        ORBIT_TRACK_PARAM(failedCommandNumber);

        auto win32_impl_result = g_api_table.ClusterRegCloseBatch(hRegBatch, bCommit, failedCommandNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseBatchEx(win32::Windows::Win32::Networking::Clustering::_HREGBATCH* hRegBatch, uint32_t flags, int32_t* failedCommandNumber) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegBatch);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(failedCommandNumber);

        auto win32_impl_result = g_api_table.ClusterRegCloseBatchEx(hRegBatch, flags, failedCommandNumber);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegBatchReadCommand(win32::Windows::Win32::Networking::Clustering::_HREGBATCHNOTIFICATION* hBatchNotification, win32::Windows::Win32::Networking::Clustering::CLUSTER_BATCH_COMMAND* pBatchCommand) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBatchNotification);
        ORBIT_TRACK_PARAM(pBatchCommand);

        auto win32_impl_result = g_api_table.ClusterRegBatchReadCommand(hBatchNotification, pBatchCommand);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegBatchCloseNotification(win32::Windows::Win32::Networking::Clustering::_HREGBATCHNOTIFICATION* hBatchNotification) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBatchNotification);

        auto win32_impl_result = g_api_table.ClusterRegBatchCloseNotification(hBatchNotification);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCreateBatchNotifyPort(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Networking::Clustering::_HREGBATCHPORT** phBatchNotifyPort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(phBatchNotifyPort);

        auto win32_impl_result = g_api_table.ClusterRegCreateBatchNotifyPort(hKey, phBatchNotifyPort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseBatchNotifyPort(win32::Windows::Win32::Networking::Clustering::_HREGBATCHPORT* hBatchNotifyPort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBatchNotifyPort);

        auto win32_impl_result = g_api_table.ClusterRegCloseBatchNotifyPort(hBatchNotifyPort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegGetBatchNotification(win32::Windows::Win32::Networking::Clustering::_HREGBATCHPORT* hBatchNotify, win32::Windows::Win32::Networking::Clustering::_HREGBATCHNOTIFICATION** phBatchNotification) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hBatchNotify);
        ORBIT_TRACK_PARAM(phBatchNotification);

        auto win32_impl_result = g_api_table.ClusterRegGetBatchNotification(hBatchNotify, phBatchNotification);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCreateReadBatch(win32::Windows::Win32::System::Registry::HKEY hKey, win32::Windows::Win32::Networking::Clustering::_HREGREADBATCH** phRegReadBatch) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hKey);
        ORBIT_TRACK_PARAM(phRegReadBatch);

        auto win32_impl_result = g_api_table.ClusterRegCreateReadBatch(hKey, phRegReadBatch);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegReadBatchAddCommand(win32::Windows::Win32::Networking::Clustering::_HREGREADBATCH* hRegReadBatch, win32::Windows::Win32::Foundation::PWSTR wzSubkeyName, win32::Windows::Win32::Foundation::PWSTR wzValueName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegReadBatch);
        ORBIT_TRACK_PARAM(wzSubkeyName);
        ORBIT_TRACK_PARAM(wzValueName);

        auto win32_impl_result = g_api_table.ClusterRegReadBatchAddCommand(hRegReadBatch, wzSubkeyName, wzValueName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseReadBatch(win32::Windows::Win32::Networking::Clustering::_HREGREADBATCH* hRegReadBatch, win32::Windows::Win32::Networking::Clustering::_HREGREADBATCHREPLY** phRegReadBatchReply) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegReadBatch);
        ORBIT_TRACK_PARAM(phRegReadBatchReply);

        auto win32_impl_result = g_api_table.ClusterRegCloseReadBatch(hRegReadBatch, phRegReadBatchReply);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseReadBatchEx(win32::Windows::Win32::Networking::Clustering::_HREGREADBATCH* hRegReadBatch, uint32_t flags, win32::Windows::Win32::Networking::Clustering::_HREGREADBATCHREPLY** phRegReadBatchReply) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegReadBatch);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(phRegReadBatchReply);

        auto win32_impl_result = g_api_table.ClusterRegCloseReadBatchEx(hRegReadBatch, flags, phRegReadBatchReply);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegReadBatchReplyNextCommand(win32::Windows::Win32::Networking::Clustering::_HREGREADBATCHREPLY* hRegReadBatchReply, win32::Windows::Win32::Networking::Clustering::CLUSTER_READ_BATCH_COMMAND* pBatchCommand) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegReadBatchReply);
        ORBIT_TRACK_PARAM(pBatchCommand);

        auto win32_impl_result = g_api_table.ClusterRegReadBatchReplyNextCommand(hRegReadBatchReply, pBatchCommand);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_ClusterRegCloseReadBatchReply(win32::Windows::Win32::Networking::Clustering::_HREGREADBATCHREPLY* hRegReadBatchReply) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hRegReadBatchReply);

        auto win32_impl_result = g_api_table.ClusterRegCloseReadBatchReply(hRegReadBatchReply);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterSetAccountAccess(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR szAccountSID, uint32_t dwAccess, uint32_t dwControlType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(szAccountSID);
        ORBIT_TRACK_PARAM(dwAccess);
        ORBIT_TRACK_PARAM(dwControlType);

        auto win32_impl_result = g_api_table.ClusterSetAccountAccess(hCluster, szAccountSID, dwAccess, dwControlType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSTER* __stdcall ORBIT_IMPL_CreateCluster(win32::Windows::Win32::Networking::Clustering::CREATE_CLUSTER_CONFIG* pConfig, win32::Windows::Win32::Networking::Clustering::PCLUSTER_SETUP_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pConfig);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);

        auto win32_impl_result = g_api_table.CreateCluster(pConfig, pfnProgressCallback, pvCallbackArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CreateClusterNameAccount(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::CREATE_CLUSTER_NAME_ACCOUNT* pConfig, win32::Windows::Win32::Networking::Clustering::PCLUSTER_SETUP_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(pConfig);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);

        auto win32_impl_result = g_api_table.CreateClusterNameAccount(hCluster, pConfig, pfnProgressCallback, pvCallbackArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterNameAccount(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::BOOL bDeleteComputerObjects) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(bDeleteComputerObjects);

        auto win32_impl_result = g_api_table.RemoveClusterNameAccount(hCluster, bDeleteComputerObjects);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DetermineCNOResTypeFromNodelist(uint32_t cNodes, win32::Windows::Win32::Foundation::PWSTR* ppszNodeNames, win32::Windows::Win32::Networking::Clustering::CLUSTER_MGMT_POINT_RESTYPE* pCNOResType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cNodes);
        ORBIT_TRACK_PARAM(ppszNodeNames);
        ORBIT_TRACK_PARAM(pCNOResType);

        auto win32_impl_result = g_api_table.DetermineCNOResTypeFromNodelist(cNodes, ppszNodeNames, pCNOResType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DetermineCNOResTypeFromCluster(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::CLUSTER_MGMT_POINT_RESTYPE* pCNOResType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(pCNOResType);

        auto win32_impl_result = g_api_table.DetermineCNOResTypeFromCluster(hCluster, pCNOResType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DetermineClusterCloudTypeFromNodelist(uint32_t cNodes, win32::Windows::Win32::Foundation::PWSTR* ppszNodeNames, win32::Windows::Win32::Networking::Clustering::CLUSTER_CLOUD_TYPE* pCloudType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cNodes);
        ORBIT_TRACK_PARAM(ppszNodeNames);
        ORBIT_TRACK_PARAM(pCloudType);

        auto win32_impl_result = g_api_table.DetermineClusterCloudTypeFromNodelist(cNodes, ppszNodeNames, pCloudType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DetermineClusterCloudTypeFromCluster(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::CLUSTER_CLOUD_TYPE* pCloudType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(pCloudType);

        auto win32_impl_result = g_api_table.DetermineClusterCloudTypeFromCluster(hCluster, pCloudType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetNodeCloudTypeDW(win32::Windows::Win32::Foundation::PWSTR ppszNodeName, uint32_t* NodeCloudType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppszNodeName);
        ORBIT_TRACK_PARAM(NodeCloudType);

        auto win32_impl_result = g_api_table.GetNodeCloudTypeDW(ppszNodeName, NodeCloudType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RegisterClusterResourceTypeNotifyV2(win32::Windows::Win32::Networking::Clustering::_HCHANGE* hChange, win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, int64_t Flags, win32::Windows::Win32::Foundation::PWSTR resTypeName, size_t dwNotifyKey) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hChange);
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(resTypeName);
        ORBIT_TRACK_PARAM(dwNotifyKey);

        auto win32_impl_result = g_api_table.RegisterClusterResourceTypeNotifyV2(hChange, hCluster, Flags, resTypeName, dwNotifyKey);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODE* __stdcall ORBIT_IMPL_AddClusterNode(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, win32::Windows::Win32::Networking::Clustering::PCLUSTER_SETUP_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);

        auto win32_impl_result = g_api_table.AddClusterNode(hCluster, lpszNodeName, pfnProgressCallback, pvCallbackArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddClusterStorageNode(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, win32::Windows::Win32::Networking::Clustering::PCLUSTER_SETUP_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg, win32::Windows::Win32::Foundation::PWSTR lpszClusterStorageNodeDescription, win32::Windows::Win32::Foundation::PWSTR lpszClusterStorageNodeLocation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);
        ORBIT_TRACK_PARAM(lpszClusterStorageNodeDescription);
        ORBIT_TRACK_PARAM(lpszClusterStorageNodeLocation);

        auto win32_impl_result = g_api_table.AddClusterStorageNode(hCluster, lpszNodeName, pfnProgressCallback, pvCallbackArg, lpszClusterStorageNodeDescription, lpszClusterStorageNodeLocation);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HNODE* __stdcall ORBIT_IMPL_AddClusterNodeEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszNodeName, uint32_t dwFlags, win32::Windows::Win32::Networking::Clustering::PCLUSTER_SETUP_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszNodeName);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);

        auto win32_impl_result = g_api_table.AddClusterNodeEx(hCluster, lpszNodeName, dwFlags, pfnProgressCallback, pvCallbackArg);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveClusterStorageNode(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR lpszClusterStorageEnclosureName, uint32_t dwTimeout, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(lpszClusterStorageEnclosureName);
        ORBIT_TRACK_PARAM(dwTimeout);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.RemoveClusterStorageNode(hCluster, lpszClusterStorageEnclosureName, dwTimeout, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DestroyCluster(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::PCLUSTER_SETUP_PROGRESS_CALLBACK* pfnProgressCallback, void* pvCallbackArg, win32::Windows::Win32::Foundation::BOOL fdeleteVirtualComputerObjects) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(pfnProgressCallback);
        ORBIT_TRACK_PARAM(pvCallbackArg);
        ORBIT_TRACK_PARAM(fdeleteVirtualComputerObjects);

        auto win32_impl_result = g_api_table.DestroyCluster(hCluster, pfnProgressCallback, pvCallbackArg, fdeleteVirtualComputerObjects);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_InitializeClusterHealthFault(win32::Windows::Win32::Networking::Clustering::CLUSTER_HEALTH_FAULT* clusterHealthFault) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clusterHealthFault);

        auto win32_impl_result = g_api_table.InitializeClusterHealthFault(clusterHealthFault);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_InitializeClusterHealthFaultArray(win32::Windows::Win32::Networking::Clustering::CLUSTER_HEALTH_FAULT_ARRAY* clusterHealthFaultArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clusterHealthFaultArray);

        auto win32_impl_result = g_api_table.InitializeClusterHealthFaultArray(clusterHealthFaultArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_FreeClusterHealthFault(win32::Windows::Win32::Networking::Clustering::CLUSTER_HEALTH_FAULT* clusterHealthFault) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clusterHealthFault);

        auto win32_impl_result = g_api_table.FreeClusterHealthFault(clusterHealthFault);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_FreeClusterHealthFaultArray(win32::Windows::Win32::Networking::Clustering::CLUSTER_HEALTH_FAULT_ARRAY* clusterHealthFaultArray) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(clusterHealthFaultArray);

        auto win32_impl_result = g_api_table.FreeClusterHealthFaultArray(clusterHealthFaultArray);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusGetClusterHealthFaults(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::CLUSTER_HEALTH_FAULT_ARRAY* objects, uint32_t flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(objects);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.ClusGetClusterHealthFaults(hCluster, objects, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusRemoveClusterHealthFault(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::PWSTR id, uint32_t flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(id);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.ClusRemoveClusterHealthFault(hCluster, id, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusAddClusterHealthFault(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::CLUSTER_HEALTH_FAULT* failure, uint32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(failure);
        ORBIT_TRACK_PARAM(param2);

        auto win32_impl_result = g_api_table.ClusAddClusterHealthFault(hCluster, failure, param2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilStartResourceService(win32::Windows::Win32::Foundation::PWSTR pszServiceName, intptr_t* phServiceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);
        ORBIT_TRACK_PARAM(phServiceHandle);

        auto win32_impl_result = g_api_table.ResUtilStartResourceService(pszServiceName, phServiceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilVerifyResourceService(win32::Windows::Win32::Foundation::PWSTR pszServiceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);

        auto win32_impl_result = g_api_table.ResUtilVerifyResourceService(pszServiceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilStopResourceService(win32::Windows::Win32::Foundation::PWSTR pszServiceName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);

        auto win32_impl_result = g_api_table.ResUtilStopResourceService(pszServiceName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilVerifyService(win32::Windows::Win32::Security::SC_HANDLE hServiceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hServiceHandle);

        auto win32_impl_result = g_api_table.ResUtilVerifyService(hServiceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilStopService(win32::Windows::Win32::Security::SC_HANDLE hServiceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hServiceHandle);

        auto win32_impl_result = g_api_table.ResUtilStopService(hServiceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilCreateDirectoryTree(win32::Windows::Win32::Foundation::PWSTR pszPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszPath);

        auto win32_impl_result = g_api_table.ResUtilCreateDirectoryTree(pszPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResUtilIsPathValid(win32::Windows::Win32::Foundation::PWSTR pszPath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszPath);

        auto win32_impl_result = g_api_table.ResUtilIsPathValid(pszPath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumProperties(win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, win32::Windows::Win32::Foundation::PWSTR pszOutProperties, uint32_t cbOutPropertiesSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pszOutProperties);
        ORBIT_TRACK_PARAM(cbOutPropertiesSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilEnumProperties(pPropertyTable, pszOutProperties, cbOutPropertiesSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumPrivateProperties(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszOutProperties, uint32_t cbOutPropertiesSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszOutProperties);
        ORBIT_TRACK_PARAM(cbOutPropertiesSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilEnumPrivateProperties(hkeyClusterKey, pszOutProperties, cbOutPropertiesSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetProperties(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* pOutPropertyList, uint32_t cbOutPropertyListSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pOutPropertyList);
        ORBIT_TRACK_PARAM(cbOutPropertyListSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilGetProperties(hkeyClusterKey, pPropertyTable, pOutPropertyList, cbOutPropertyListSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetAllProperties(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* pOutPropertyList, uint32_t cbOutPropertyListSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pOutPropertyList);
        ORBIT_TRACK_PARAM(cbOutPropertyListSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilGetAllProperties(hkeyClusterKey, pPropertyTable, pOutPropertyList, cbOutPropertyListSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetPrivateProperties(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, void* pOutPropertyList, uint32_t cbOutPropertyListSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pOutPropertyList);
        ORBIT_TRACK_PARAM(cbOutPropertyListSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilGetPrivateProperties(hkeyClusterKey, pOutPropertyList, cbOutPropertyListSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetPropertySize(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTableItem, uint32_t* pcbOutPropertyListSize, uint32_t* pnPropertyCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTableItem);
        ORBIT_TRACK_PARAM(pcbOutPropertyListSize);
        ORBIT_TRACK_PARAM(pnPropertyCount);

        auto win32_impl_result = g_api_table.ResUtilGetPropertySize(hkeyClusterKey, pPropertyTableItem, pcbOutPropertyListSize, pnPropertyCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetProperty(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTableItem, void** pOutPropertyItem, uint32_t* pcbOutPropertyItemSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTableItem);
        ORBIT_TRACK_PARAM(pOutPropertyItem);
        ORBIT_TRACK_PARAM(pcbOutPropertyItemSize);

        auto win32_impl_result = g_api_table.ResUtilGetProperty(hkeyClusterKey, pPropertyTableItem, pOutPropertyItem, pcbOutPropertyItemSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilVerifyPropertyTable(win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* Reserved, win32::Windows::Win32::Foundation::BOOL bAllowUnknownProperties, void* pInPropertyList, uint32_t cbInPropertyListSize, uint8_t* pOutParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(bAllowUnknownProperties);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);
        ORBIT_TRACK_PARAM(pOutParams);

        auto win32_impl_result = g_api_table.ResUtilVerifyPropertyTable(pPropertyTable, Reserved, bAllowUnknownProperties, pInPropertyList, cbInPropertyListSize, pOutParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetPropertyTable(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* Reserved, win32::Windows::Win32::Foundation::BOOL bAllowUnknownProperties, void* pInPropertyList, uint32_t cbInPropertyListSize, uint8_t* pOutParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(bAllowUnknownProperties);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);
        ORBIT_TRACK_PARAM(pOutParams);

        auto win32_impl_result = g_api_table.ResUtilSetPropertyTable(hkeyClusterKey, pPropertyTable, Reserved, bAllowUnknownProperties, pInPropertyList, cbInPropertyListSize, pOutParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetPropertyTableEx(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* Reserved, win32::Windows::Win32::Foundation::BOOL bAllowUnknownProperties, void* pInPropertyList, uint32_t cbInPropertyListSize, win32::Windows::Win32::Foundation::BOOL bForceWrite, uint8_t* pOutParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(bAllowUnknownProperties);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);
        ORBIT_TRACK_PARAM(bForceWrite);
        ORBIT_TRACK_PARAM(pOutParams);

        auto win32_impl_result = g_api_table.ResUtilSetPropertyTableEx(hkeyClusterKey, pPropertyTable, Reserved, bAllowUnknownProperties, pInPropertyList, cbInPropertyListSize, bForceWrite, pOutParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetPropertyParameterBlock(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* Reserved, uint8_t* pInParams, void* pInPropertyList, uint32_t cbInPropertyListSize, uint8_t* pOutParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(pInParams);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);
        ORBIT_TRACK_PARAM(pOutParams);

        auto win32_impl_result = g_api_table.ResUtilSetPropertyParameterBlock(hkeyClusterKey, pPropertyTable, Reserved, pInParams, pInPropertyList, cbInPropertyListSize, pOutParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetPropertyParameterBlockEx(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* Reserved, uint8_t* pInParams, void* pInPropertyList, uint32_t cbInPropertyListSize, win32::Windows::Win32::Foundation::BOOL bForceWrite, uint8_t* pOutParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(pInParams);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);
        ORBIT_TRACK_PARAM(bForceWrite);
        ORBIT_TRACK_PARAM(pOutParams);

        auto win32_impl_result = g_api_table.ResUtilSetPropertyParameterBlockEx(hkeyClusterKey, pPropertyTable, Reserved, pInParams, pInPropertyList, cbInPropertyListSize, bForceWrite, pOutParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetUnknownProperties(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* pInPropertyList, uint32_t cbInPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilSetUnknownProperties(hkeyClusterKey, pPropertyTable, pInPropertyList, cbInPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetPropertiesToParameterBlock(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, uint8_t* pOutParams, win32::Windows::Win32::Foundation::BOOL bCheckForRequiredProperties, win32::Windows::Win32::Foundation::PWSTR* pszNameOfPropInError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pOutParams);
        ORBIT_TRACK_PARAM(bCheckForRequiredProperties);
        ORBIT_TRACK_PARAM(pszNameOfPropInError);

        auto win32_impl_result = g_api_table.ResUtilGetPropertiesToParameterBlock(hkeyClusterKey, pPropertyTable, pOutParams, bCheckForRequiredProperties, pszNameOfPropInError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilPropertyListFromParameterBlock(win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* pOutPropertyList, uint32_t* pcbOutPropertyListSize, uint8_t* pInParams, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pOutPropertyList);
        ORBIT_TRACK_PARAM(pcbOutPropertyListSize);
        ORBIT_TRACK_PARAM(pInParams);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilPropertyListFromParameterBlock(pPropertyTable, pOutPropertyList, pcbOutPropertyListSize, pInParams, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilDupParameterBlock(uint8_t* pOutParams, uint8_t* pInParams, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOutParams);
        ORBIT_TRACK_PARAM(pInParams);
        ORBIT_TRACK_PARAM(pPropertyTable);

        auto win32_impl_result = g_api_table.ResUtilDupParameterBlock(pOutParams, pInParams, pPropertyTable);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ResUtilFreeParameterBlock(uint8_t* pOutParams, uint8_t* pInParams, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOutParams);
        ORBIT_TRACK_PARAM(pInParams);
        ORBIT_TRACK_PARAM(pPropertyTable);

        g_api_table.ResUtilFreeParameterBlock(pOutParams, pInParams, pPropertyTable);
        
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilAddUnknownProperties(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* pOutPropertyList, uint32_t pcbOutPropertyListSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pOutPropertyList);
        ORBIT_TRACK_PARAM(pcbOutPropertyListSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilAddUnknownProperties(hkeyClusterKey, pPropertyTable, pOutPropertyList, pcbOutPropertyListSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetPrivatePropertyList(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, void* pInPropertyList, uint32_t cbInPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilSetPrivatePropertyList(hkeyClusterKey, pInPropertyList, cbInPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilVerifyPrivatePropertyList(void* pInPropertyList, uint32_t cbInPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInPropertyList);
        ORBIT_TRACK_PARAM(cbInPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilVerifyPrivatePropertyList(pInPropertyList, cbInPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_ResUtilDupString(win32::Windows::Win32::Foundation::PWSTR pszInString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszInString);

        auto win32_impl_result = g_api_table.ResUtilDupString(pszInString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetBinaryValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, uint8_t** ppbOutValue, uint32_t* pcbOutValueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(ppbOutValue);
        ORBIT_TRACK_PARAM(pcbOutValueSize);

        auto win32_impl_result = g_api_table.ResUtilGetBinaryValue(hkeyClusterKey, pszValueName, ppbOutValue, pcbOutValueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_ResUtilGetSzValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);

        auto win32_impl_result = g_api_table.ResUtilGetSzValue(hkeyClusterKey, pszValueName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetDwordValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, uint32_t* pdwOutValue, uint32_t dwDefaultValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(pdwOutValue);
        ORBIT_TRACK_PARAM(dwDefaultValue);

        auto win32_impl_result = g_api_table.ResUtilGetDwordValue(hkeyClusterKey, pszValueName, pdwOutValue, dwDefaultValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetQwordValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, uint64_t* pqwOutValue, uint64_t qwDefaultValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(pqwOutValue);
        ORBIT_TRACK_PARAM(qwDefaultValue);

        auto win32_impl_result = g_api_table.ResUtilGetQwordValue(hkeyClusterKey, pszValueName, pqwOutValue, qwDefaultValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetBinaryValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, uint8_t* pbNewValue, uint32_t cbNewValueSize, uint8_t** ppbOutValue, uint32_t* pcbOutValueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(pbNewValue);
        ORBIT_TRACK_PARAM(cbNewValueSize);
        ORBIT_TRACK_PARAM(ppbOutValue);
        ORBIT_TRACK_PARAM(pcbOutValueSize);

        auto win32_impl_result = g_api_table.ResUtilSetBinaryValue(hkeyClusterKey, pszValueName, pbNewValue, cbNewValueSize, ppbOutValue, pcbOutValueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetSzValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, win32::Windows::Win32::Foundation::PWSTR pszNewValue, win32::Windows::Win32::Foundation::PWSTR* ppszOutString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(pszNewValue);
        ORBIT_TRACK_PARAM(ppszOutString);

        auto win32_impl_result = g_api_table.ResUtilSetSzValue(hkeyClusterKey, pszValueName, pszNewValue, ppszOutString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetExpandSzValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, win32::Windows::Win32::Foundation::PWSTR pszNewValue, win32::Windows::Win32::Foundation::PWSTR* ppszOutString) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(pszNewValue);
        ORBIT_TRACK_PARAM(ppszOutString);

        auto win32_impl_result = g_api_table.ResUtilSetExpandSzValue(hkeyClusterKey, pszValueName, pszNewValue, ppszOutString);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetMultiSzValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, win32::Windows::Win32::Foundation::PWSTR pszNewValue, uint32_t cbNewValueSize, win32::Windows::Win32::Foundation::PWSTR* ppszOutValue, uint32_t* pcbOutValueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(pszNewValue);
        ORBIT_TRACK_PARAM(cbNewValueSize);
        ORBIT_TRACK_PARAM(ppszOutValue);
        ORBIT_TRACK_PARAM(pcbOutValueSize);

        auto win32_impl_result = g_api_table.ResUtilSetMultiSzValue(hkeyClusterKey, pszValueName, pszNewValue, cbNewValueSize, ppszOutValue, pcbOutValueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetDwordValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, uint32_t dwNewValue, uint32_t* pdwOutValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(dwNewValue);
        ORBIT_TRACK_PARAM(pdwOutValue);

        auto win32_impl_result = g_api_table.ResUtilSetDwordValue(hkeyClusterKey, pszValueName, dwNewValue, pdwOutValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetQwordValue(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR pszValueName, uint64_t qwNewValue, uint64_t* pqwOutValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(pszValueName);
        ORBIT_TRACK_PARAM(qwNewValue);
        ORBIT_TRACK_PARAM(pqwOutValue);

        auto win32_impl_result = g_api_table.ResUtilSetQwordValue(hkeyClusterKey, pszValueName, qwNewValue, pqwOutValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetValueEx(win32::Windows::Win32::System::Registry::HKEY hkeyClusterKey, win32::Windows::Win32::Foundation::PWSTR valueName, uint32_t valueType, uint8_t* valueData, uint32_t valueSize, uint32_t flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hkeyClusterKey);
        ORBIT_TRACK_PARAM(valueName);
        ORBIT_TRACK_PARAM(valueType);
        ORBIT_TRACK_PARAM(valueData);
        ORBIT_TRACK_PARAM(valueSize);
        ORBIT_TRACK_PARAM(flags);

        auto win32_impl_result = g_api_table.ResUtilSetValueEx(hkeyClusterKey, valueName, valueType, valueData, valueSize, flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetBinaryProperty(uint8_t** ppbOutValue, uint32_t* pcbOutValueSize, win32::Windows::Win32::Networking::Clustering::CLUSPROP_BINARY* pValueStruct, uint8_t* pbOldValue, uint32_t cbOldValueSize, uint8_t** ppPropertyList, uint32_t* pcbPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppbOutValue);
        ORBIT_TRACK_PARAM(pcbOutValueSize);
        ORBIT_TRACK_PARAM(pValueStruct);
        ORBIT_TRACK_PARAM(pbOldValue);
        ORBIT_TRACK_PARAM(cbOldValueSize);
        ORBIT_TRACK_PARAM(ppPropertyList);
        ORBIT_TRACK_PARAM(pcbPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilGetBinaryProperty(ppbOutValue, pcbOutValueSize, pValueStruct, pbOldValue, cbOldValueSize, ppPropertyList, pcbPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetSzProperty(win32::Windows::Win32::Foundation::PWSTR* ppszOutValue, win32::Windows::Win32::Networking::Clustering::CLUSPROP_SZ* pValueStruct, win32::Windows::Win32::Foundation::PWSTR pszOldValue, uint8_t** ppPropertyList, uint32_t* pcbPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppszOutValue);
        ORBIT_TRACK_PARAM(pValueStruct);
        ORBIT_TRACK_PARAM(pszOldValue);
        ORBIT_TRACK_PARAM(ppPropertyList);
        ORBIT_TRACK_PARAM(pcbPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilGetSzProperty(ppszOutValue, pValueStruct, pszOldValue, ppPropertyList, pcbPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetMultiSzProperty(win32::Windows::Win32::Foundation::PWSTR* ppszOutValue, uint32_t* pcbOutValueSize, win32::Windows::Win32::Networking::Clustering::CLUSPROP_SZ* pValueStruct, win32::Windows::Win32::Foundation::PWSTR pszOldValue, uint32_t cbOldValueSize, uint8_t** ppPropertyList, uint32_t* pcbPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppszOutValue);
        ORBIT_TRACK_PARAM(pcbOutValueSize);
        ORBIT_TRACK_PARAM(pValueStruct);
        ORBIT_TRACK_PARAM(pszOldValue);
        ORBIT_TRACK_PARAM(cbOldValueSize);
        ORBIT_TRACK_PARAM(ppPropertyList);
        ORBIT_TRACK_PARAM(pcbPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilGetMultiSzProperty(ppszOutValue, pcbOutValueSize, pValueStruct, pszOldValue, cbOldValueSize, ppPropertyList, pcbPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetDwordProperty(uint32_t* pdwOutValue, win32::Windows::Win32::Networking::Clustering::CLUSPROP_DWORD* pValueStruct, uint32_t dwOldValue, uint32_t dwMinimum, uint32_t dwMaximum, uint8_t** ppPropertyList, uint32_t* pcbPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pdwOutValue);
        ORBIT_TRACK_PARAM(pValueStruct);
        ORBIT_TRACK_PARAM(dwOldValue);
        ORBIT_TRACK_PARAM(dwMinimum);
        ORBIT_TRACK_PARAM(dwMaximum);
        ORBIT_TRACK_PARAM(ppPropertyList);
        ORBIT_TRACK_PARAM(pcbPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilGetDwordProperty(pdwOutValue, pValueStruct, dwOldValue, dwMinimum, dwMaximum, ppPropertyList, pcbPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetLongProperty(int32_t* plOutValue, win32::Windows::Win32::Networking::Clustering::CLUSPROP_LONG* pValueStruct, int32_t lOldValue, int32_t lMinimum, int32_t lMaximum, uint8_t** ppPropertyList, uint32_t* pcbPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plOutValue);
        ORBIT_TRACK_PARAM(pValueStruct);
        ORBIT_TRACK_PARAM(lOldValue);
        ORBIT_TRACK_PARAM(lMinimum);
        ORBIT_TRACK_PARAM(lMaximum);
        ORBIT_TRACK_PARAM(ppPropertyList);
        ORBIT_TRACK_PARAM(pcbPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilGetLongProperty(plOutValue, pValueStruct, lOldValue, lMinimum, lMaximum, ppPropertyList, pcbPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetFileTimeProperty(win32::Windows::Win32::Foundation::FILETIME* pftOutValue, win32::Windows::Win32::Networking::Clustering::CLUSPROP_FILETIME* pValueStruct, win32::Windows::Win32::Foundation::FILETIME ftOldValue, win32::Windows::Win32::Foundation::FILETIME ftMinimum, win32::Windows::Win32::Foundation::FILETIME ftMaximum, uint8_t** ppPropertyList, uint32_t* pcbPropertyListSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pftOutValue);
        ORBIT_TRACK_PARAM(pValueStruct);
        ORBIT_TRACK_PARAM(ftOldValue);
        ORBIT_TRACK_PARAM(ftMinimum);
        ORBIT_TRACK_PARAM(ftMaximum);
        ORBIT_TRACK_PARAM(ppPropertyList);
        ORBIT_TRACK_PARAM(pcbPropertyListSize);

        auto win32_impl_result = g_api_table.ResUtilGetFileTimeProperty(pftOutValue, pValueStruct, ftOldValue, ftMinimum, ftMaximum, ppPropertyList, pcbPropertyListSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_ResUtilGetEnvironmentWithNetName(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.ResUtilGetEnvironmentWithNetName(hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFreeEnvironment(void* lpEnvironment) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpEnvironment);

        auto win32_impl_result = g_api_table.ResUtilFreeEnvironment(lpEnvironment);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_ResUtilExpandEnvironmentStrings(win32::Windows::Win32::Foundation::PWSTR pszSrc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSrc);

        auto win32_impl_result = g_api_table.ResUtilExpandEnvironmentStrings(pszSrc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetResourceServiceEnvironment(win32::Windows::Win32::Foundation::PWSTR pszServiceName, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Networking::Clustering::PLOG_EVENT_ROUTINE* pfnLogEvent, intptr_t hResourceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(pfnLogEvent);
        ORBIT_TRACK_PARAM(hResourceHandle);

        auto win32_impl_result = g_api_table.ResUtilSetResourceServiceEnvironment(pszServiceName, hResource, pfnLogEvent, hResourceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilRemoveResourceServiceEnvironment(win32::Windows::Win32::Foundation::PWSTR pszServiceName, win32::Windows::Win32::Networking::Clustering::PLOG_EVENT_ROUTINE* pfnLogEvent, intptr_t hResourceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);
        ORBIT_TRACK_PARAM(pfnLogEvent);
        ORBIT_TRACK_PARAM(hResourceHandle);

        auto win32_impl_result = g_api_table.ResUtilRemoveResourceServiceEnvironment(pszServiceName, pfnLogEvent, hResourceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetResourceServiceStartParameters(win32::Windows::Win32::Foundation::PWSTR pszServiceName, win32::Windows::Win32::Security::SC_HANDLE schSCMHandle, intptr_t* phService, win32::Windows::Win32::Networking::Clustering::PLOG_EVENT_ROUTINE* pfnLogEvent, intptr_t hResourceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);
        ORBIT_TRACK_PARAM(schSCMHandle);
        ORBIT_TRACK_PARAM(phService);
        ORBIT_TRACK_PARAM(pfnLogEvent);
        ORBIT_TRACK_PARAM(hResourceHandle);

        auto win32_impl_result = g_api_table.ResUtilSetResourceServiceStartParameters(pszServiceName, schSCMHandle, phService, pfnLogEvent, hResourceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindSzProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, win32::Windows::Win32::Foundation::PWSTR* pszPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pszPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindSzProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pszPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindExpandSzProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, win32::Windows::Win32::Foundation::PWSTR* pszPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pszPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindExpandSzProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pszPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindExpandedSzProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, win32::Windows::Win32::Foundation::PWSTR* pszPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pszPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindExpandedSzProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pszPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindDwordProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, uint32_t* pdwPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pdwPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindDwordProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pdwPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindBinaryProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, uint8_t** pbPropertyValue, uint32_t* pcbPropertyValueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pbPropertyValue);
        ORBIT_TRACK_PARAM(pcbPropertyValueSize);

        auto win32_impl_result = g_api_table.ResUtilFindBinaryProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pbPropertyValue, pcbPropertyValueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindMultiSzProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, win32::Windows::Win32::Foundation::PWSTR* pszPropertyValue, uint32_t* pcbPropertyValueSize) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pszPropertyValue);
        ORBIT_TRACK_PARAM(pcbPropertyValueSize);

        auto win32_impl_result = g_api_table.ResUtilFindMultiSzProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pszPropertyValue, pcbPropertyValueSize);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindLongProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, int32_t* plPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(plPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindLongProperty(pPropertyList, cbPropertyListSize, pszPropertyName, plPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindULargeIntegerProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, uint64_t* plPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(plPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindULargeIntegerProperty(pPropertyList, cbPropertyListSize, pszPropertyName, plPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindFileTimeProperty(void* pPropertyList, uint32_t cbPropertyListSize, win32::Windows::Win32::Foundation::PWSTR pszPropertyName, win32::Windows::Win32::Foundation::FILETIME* pftPropertyValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyList);
        ORBIT_TRACK_PARAM(cbPropertyListSize);
        ORBIT_TRACK_PARAM(pszPropertyName);
        ORBIT_TRACK_PARAM(pftPropertyValue);

        auto win32_impl_result = g_api_table.ResUtilFindFileTimeProperty(pPropertyList, cbPropertyListSize, pszPropertyName, pftPropertyValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusWorkerCreate(win32::Windows::Win32::Networking::Clustering::CLUS_WORKER* lpWorker, win32::Windows::Win32::Networking::Clustering::PWORKER_START_ROUTINE* lpStartAddress, void* lpParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpWorker);
        ORBIT_TRACK_PARAM(lpStartAddress);
        ORBIT_TRACK_PARAM(lpParameter);

        auto win32_impl_result = g_api_table.ClusWorkerCreate(lpWorker, lpStartAddress, lpParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ClusWorkerCheckTerminate(win32::Windows::Win32::Networking::Clustering::CLUS_WORKER* lpWorker) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpWorker);

        auto win32_impl_result = g_api_table.ClusWorkerCheckTerminate(lpWorker);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ClusWorkerTerminate(win32::Windows::Win32::Networking::Clustering::CLUS_WORKER* lpWorker) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpWorker);

        g_api_table.ClusWorkerTerminate(lpWorker);
        
    }

    uint32_t __stdcall ORBIT_IMPL_ClusWorkerTerminateEx(win32::Windows::Win32::Networking::Clustering::CLUS_WORKER* ClusWorker, uint32_t TimeoutInMilliseconds, win32::Windows::Win32::Foundation::BOOL WaitOnly) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ClusWorker);
        ORBIT_TRACK_PARAM(TimeoutInMilliseconds);
        ORBIT_TRACK_PARAM(WaitOnly);

        auto win32_impl_result = g_api_table.ClusWorkerTerminateEx(ClusWorker, TimeoutInMilliseconds, WaitOnly);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusWorkersTerminate(win32::Windows::Win32::Networking::Clustering::CLUS_WORKER** ClusWorkers, size_t ClusWorkersCount, uint32_t TimeoutInMilliseconds, win32::Windows::Win32::Foundation::BOOL WaitOnly) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ClusWorkers);
        ORBIT_TRACK_PARAM(ClusWorkersCount);
        ORBIT_TRACK_PARAM(TimeoutInMilliseconds);
        ORBIT_TRACK_PARAM(WaitOnly);

        auto win32_impl_result = g_api_table.ClusWorkersTerminate(ClusWorkers, ClusWorkersCount, TimeoutInMilliseconds, WaitOnly);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResUtilResourcesEqual(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hSelf, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.ResUtilResourcesEqual(hSelf, hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResUtilResourceTypesEqual(win32::Windows::Win32::Foundation::PWSTR lpszResourceTypeName, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszResourceTypeName);
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.ResUtilResourceTypesEqual(lpszResourceTypeName, hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResUtilIsResourceClassEqual(win32::Windows::Win32::Networking::Clustering::CLUS_RESOURCE_CLASS_INFO* prci, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(prci);
        ORBIT_TRACK_PARAM(hResource);

        auto win32_impl_result = g_api_table.ResUtilIsResourceClassEqual(prci, hResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumResources(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResTypeName, win32::Windows::Win32::Networking::Clustering::LPRESOURCE_CALLBACK* pResCallBack, void* pParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResTypeName);
        ORBIT_TRACK_PARAM(pResCallBack);
        ORBIT_TRACK_PARAM(pParameter);

        auto win32_impl_result = g_api_table.ResUtilEnumResources(hSelf, lpszResTypeName, pResCallBack, pParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumResourcesEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResTypeName, win32::Windows::Win32::Networking::Clustering::LPRESOURCE_CALLBACK_EX* pResCallBack, void* pParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResTypeName);
        ORBIT_TRACK_PARAM(pResCallBack);
        ORBIT_TRACK_PARAM(pParameter);

        auto win32_impl_result = g_api_table.ResUtilEnumResourcesEx(hCluster, hSelf, lpszResTypeName, pResCallBack, pParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceDependency(win32::Windows::Win32::Foundation::HANDLE hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResourceType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResourceType);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependency(hSelf, lpszResourceType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceDependencyByName(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::HANDLE hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResourceType, win32::Windows::Win32::Foundation::BOOL bRecurse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResourceType);
        ORBIT_TRACK_PARAM(bRecurse);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependencyByName(hCluster, hSelf, lpszResourceType, bRecurse);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceDependencyByClass(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::HANDLE hSelf, win32::Windows::Win32::Networking::Clustering::CLUS_RESOURCE_CLASS_INFO* prci, win32::Windows::Win32::Foundation::BOOL bRecurse) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(prci);
        ORBIT_TRACK_PARAM(bRecurse);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependencyByClass(hCluster, hSelf, prci, bRecurse);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceNameDependency(win32::Windows::Win32::Foundation::PWSTR lpszResourceName, win32::Windows::Win32::Foundation::PWSTR lpszResourceType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszResourceName);
        ORBIT_TRACK_PARAM(lpszResourceType);

        auto win32_impl_result = g_api_table.ResUtilGetResourceNameDependency(lpszResourceName, lpszResourceType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetResourceDependentIPAddressProps(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR pszAddress, uint32_t* pcchAddress, win32::Windows::Win32::Foundation::PWSTR pszSubnetMask, uint32_t* pcchSubnetMask, win32::Windows::Win32::Foundation::PWSTR pszNetwork, uint32_t* pcchNetwork) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(pszAddress);
        ORBIT_TRACK_PARAM(pcchAddress);
        ORBIT_TRACK_PARAM(pszSubnetMask);
        ORBIT_TRACK_PARAM(pcchSubnetMask);
        ORBIT_TRACK_PARAM(pszNetwork);
        ORBIT_TRACK_PARAM(pcchNetwork);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependentIPAddressProps(hResource, pszAddress, pcchAddress, pszSubnetMask, pcchSubnetMask, pszNetwork, pcchNetwork);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilFindDependentDiskResourceDriveLetter(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR pszDriveLetter, uint32_t* pcchDriveLetter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(pszDriveLetter);
        ORBIT_TRACK_PARAM(pcchDriveLetter);

        auto win32_impl_result = g_api_table.ResUtilFindDependentDiskResourceDriveLetter(hCluster, hResource, pszDriveLetter, pcchDriveLetter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilTerminateServiceProcessFromResDll(uint32_t dwServicePid, win32::Windows::Win32::Foundation::BOOL bOffline, uint32_t* pdwResourceState, win32::Windows::Win32::Networking::Clustering::PLOG_EVENT_ROUTINE* pfnLogEvent, intptr_t hResourceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwServicePid);
        ORBIT_TRACK_PARAM(bOffline);
        ORBIT_TRACK_PARAM(pdwResourceState);
        ORBIT_TRACK_PARAM(pfnLogEvent);
        ORBIT_TRACK_PARAM(hResourceHandle);

        auto win32_impl_result = g_api_table.ResUtilTerminateServiceProcessFromResDll(dwServicePid, bOffline, pdwResourceState, pfnLogEvent, hResourceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetPropertyFormats(win32::Windows::Win32::Networking::Clustering::RESUTIL_PROPERTY_ITEM* pPropertyTable, void* pOutPropertyFormatList, uint32_t cbPropertyFormatListSize, uint32_t* pcbBytesReturned, uint32_t* pcbRequired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pPropertyTable);
        ORBIT_TRACK_PARAM(pOutPropertyFormatList);
        ORBIT_TRACK_PARAM(cbPropertyFormatListSize);
        ORBIT_TRACK_PARAM(pcbBytesReturned);
        ORBIT_TRACK_PARAM(pcbRequired);

        auto win32_impl_result = g_api_table.ResUtilGetPropertyFormats(pPropertyTable, pOutPropertyFormatList, cbPropertyFormatListSize, pcbBytesReturned, pcbRequired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetCoreClusterResources(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HRESOURCE** phClusterNameResource, win32::Windows::Win32::Networking::Clustering::_HRESOURCE** phClusterIPAddressResource, win32::Windows::Win32::Networking::Clustering::_HRESOURCE** phClusterQuorumResource) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(phClusterNameResource);
        ORBIT_TRACK_PARAM(phClusterIPAddressResource);
        ORBIT_TRACK_PARAM(phClusterQuorumResource);

        auto win32_impl_result = g_api_table.ResUtilGetCoreClusterResources(hCluster, phClusterNameResource, phClusterIPAddressResource, phClusterQuorumResource);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetResourceName(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hResource, win32::Windows::Win32::Foundation::PWSTR pszResourceName, uint32_t* pcchResourceNameInOut) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hResource);
        ORBIT_TRACK_PARAM(pszResourceName);
        ORBIT_TRACK_PARAM(pcchResourceNameInOut);

        auto win32_impl_result = g_api_table.ResUtilGetResourceName(hResource, pszResourceName, pcchResourceNameInOut);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::CLUSTER_ROLE_STATE __stdcall ORBIT_IMPL_ResUtilGetClusterRoleState(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::CLUSTER_ROLE eClusterRole) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(eClusterRole);

        auto win32_impl_result = g_api_table.ResUtilGetClusterRoleState(hCluster, eClusterRole);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ClusterIsPathOnSharedVolume(win32::Windows::Win32::Foundation::PWSTR lpszPathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszPathName);

        auto win32_impl_result = g_api_table.ClusterIsPathOnSharedVolume(lpszPathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ClusterGetVolumePathName(win32::Windows::Win32::Foundation::PWSTR lpszFileName, win32::Windows::Win32::Foundation::PWSTR lpszVolumePathName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszFileName);
        ORBIT_TRACK_PARAM(lpszVolumePathName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.ClusterGetVolumePathName(lpszFileName, lpszVolumePathName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ClusterGetVolumeNameForVolumeMountPoint(win32::Windows::Win32::Foundation::PWSTR lpszVolumeMountPoint, win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, uint32_t cchBufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumeMountPoint);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(cchBufferLength);

        auto win32_impl_result = g_api_table.ClusterGetVolumeNameForVolumeMountPoint(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterPrepareSharedVolumeForBackup(win32::Windows::Win32::Foundation::PWSTR lpszFileName, win32::Windows::Win32::Foundation::PWSTR lpszVolumePathName, uint32_t* lpcchVolumePathName, win32::Windows::Win32::Foundation::PWSTR lpszVolumeName, uint32_t* lpcchVolumeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszFileName);
        ORBIT_TRACK_PARAM(lpszVolumePathName);
        ORBIT_TRACK_PARAM(lpcchVolumePathName);
        ORBIT_TRACK_PARAM(lpszVolumeName);
        ORBIT_TRACK_PARAM(lpcchVolumeName);

        auto win32_impl_result = g_api_table.ClusterPrepareSharedVolumeForBackup(lpszFileName, lpszVolumePathName, lpcchVolumePathName, lpszVolumeName, lpcchVolumeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterClearBackupStateForSharedVolume(win32::Windows::Win32::Foundation::PWSTR lpszVolumePathName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszVolumePathName);

        auto win32_impl_result = g_api_table.ClusterClearBackupStateForSharedVolume(lpszVolumePathName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilSetResourceServiceStartParametersEx(win32::Windows::Win32::Foundation::PWSTR pszServiceName, win32::Windows::Win32::Security::SC_HANDLE schSCMHandle, intptr_t* phService, uint32_t dwDesiredAccess, win32::Windows::Win32::Networking::Clustering::PLOG_EVENT_ROUTINE* pfnLogEvent, intptr_t hResourceHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszServiceName);
        ORBIT_TRACK_PARAM(schSCMHandle);
        ORBIT_TRACK_PARAM(phService);
        ORBIT_TRACK_PARAM(dwDesiredAccess);
        ORBIT_TRACK_PARAM(pfnLogEvent);
        ORBIT_TRACK_PARAM(hResourceHandle);

        auto win32_impl_result = g_api_table.ResUtilSetResourceServiceStartParametersEx(pszServiceName, schSCMHandle, phService, dwDesiredAccess, pfnLogEvent, hResourceHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumResourcesEx2(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResTypeName, win32::Windows::Win32::Networking::Clustering::LPRESOURCE_CALLBACK_EX* pResCallBack, void* pParameter, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResTypeName);
        ORBIT_TRACK_PARAM(pResCallBack);
        ORBIT_TRACK_PARAM(pParameter);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.ResUtilEnumResourcesEx2(hCluster, hSelf, lpszResTypeName, pResCallBack, pParameter, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceDependencyEx(win32::Windows::Win32::Foundation::HANDLE hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResourceType, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResourceType);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependencyEx(hSelf, lpszResourceType, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceDependencyByNameEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::HANDLE hSelf, win32::Windows::Win32::Foundation::PWSTR lpszResourceType, win32::Windows::Win32::Foundation::BOOL bRecurse, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(lpszResourceType);
        ORBIT_TRACK_PARAM(bRecurse);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependencyByNameEx(hCluster, hSelf, lpszResourceType, bRecurse, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceDependencyByClassEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Foundation::HANDLE hSelf, win32::Windows::Win32::Networking::Clustering::CLUS_RESOURCE_CLASS_INFO* prci, win32::Windows::Win32::Foundation::BOOL bRecurse, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(prci);
        ORBIT_TRACK_PARAM(bRecurse);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.ResUtilGetResourceDependencyByClassEx(hCluster, hSelf, prci, bRecurse, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HRESOURCE* __stdcall ORBIT_IMPL_ResUtilGetResourceNameDependencyEx(win32::Windows::Win32::Foundation::PWSTR lpszResourceName, win32::Windows::Win32::Foundation::PWSTR lpszResourceType, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszResourceName);
        ORBIT_TRACK_PARAM(lpszResourceType);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.ResUtilGetResourceNameDependencyEx(lpszResourceName, lpszResourceType, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetCoreClusterResourcesEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hClusterIn, win32::Windows::Win32::Networking::Clustering::_HRESOURCE** phClusterNameResourceOut, win32::Windows::Win32::Networking::Clustering::_HRESOURCE** phClusterQuorumResourceOut, uint32_t dwDesiredAccess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusterIn);
        ORBIT_TRACK_PARAM(phClusterNameResourceOut);
        ORBIT_TRACK_PARAM(phClusterQuorumResourceOut);
        ORBIT_TRACK_PARAM(dwDesiredAccess);

        auto win32_impl_result = g_api_table.ResUtilGetCoreClusterResourcesEx(hClusterIn, phClusterNameResourceOut, phClusterQuorumResourceOut, dwDesiredAccess);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSCRYPTPROVIDER* __stdcall ORBIT_IMPL_OpenClusterCryptProvider(win32::Windows::Win32::Foundation::PWSTR lpszResource, int8_t* lpszProvider, uint32_t dwType, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszResource);
        ORBIT_TRACK_PARAM(lpszProvider);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.OpenClusterCryptProvider(lpszResource, lpszProvider, dwType, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HCLUSCRYPTPROVIDER* __stdcall ORBIT_IMPL_OpenClusterCryptProviderEx(win32::Windows::Win32::Foundation::PWSTR lpszResource, win32::Windows::Win32::Foundation::PWSTR lpszKeyname, int8_t* lpszProvider, uint32_t dwType, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszResource);
        ORBIT_TRACK_PARAM(lpszKeyname);
        ORBIT_TRACK_PARAM(lpszProvider);
        ORBIT_TRACK_PARAM(dwType);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.OpenClusterCryptProviderEx(lpszResource, lpszKeyname, lpszProvider, dwType, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_CloseClusterCryptProvider(win32::Windows::Win32::Networking::Clustering::_HCLUSCRYPTPROVIDER* hClusCryptProvider) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusCryptProvider);

        auto win32_impl_result = g_api_table.CloseClusterCryptProvider(hClusCryptProvider);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterEncrypt(win32::Windows::Win32::Networking::Clustering::_HCLUSCRYPTPROVIDER* hClusCryptProvider, uint8_t* pData, uint32_t cbData, uint8_t** ppData, uint32_t* pcbData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusCryptProvider);
        ORBIT_TRACK_PARAM(pData);
        ORBIT_TRACK_PARAM(cbData);
        ORBIT_TRACK_PARAM(ppData);
        ORBIT_TRACK_PARAM(pcbData);

        auto win32_impl_result = g_api_table.ClusterEncrypt(hClusCryptProvider, pData, cbData, ppData, pcbData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClusterDecrypt(win32::Windows::Win32::Networking::Clustering::_HCLUSCRYPTPROVIDER* hClusCryptProvider, uint8_t* pCryptInput, uint32_t cbCryptInput, uint8_t** ppCryptOutput, uint32_t* pcbCryptOutput) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hClusCryptProvider);
        ORBIT_TRACK_PARAM(pCryptInput);
        ORBIT_TRACK_PARAM(cbCryptInput);
        ORBIT_TRACK_PARAM(ppCryptOutput);
        ORBIT_TRACK_PARAM(pcbCryptOutput);

        auto win32_impl_result = g_api_table.ClusterDecrypt(hClusCryptProvider, pCryptInput, cbCryptInput, ppCryptOutput, pcbCryptOutput);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_FreeClusterCrypt(void* pCryptInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pCryptInfo);

        auto win32_impl_result = g_api_table.FreeClusterCrypt(pCryptInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilVerifyShutdownSafe(uint32_t flags, uint32_t reason, uint32_t* pResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(reason);
        ORBIT_TRACK_PARAM(pResult);

        auto win32_impl_result = g_api_table.ResUtilVerifyShutdownSafe(flags, reason, pResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResUtilPaxosComparer(win32::Windows::Win32::Networking::Clustering::PaxosTagCStruct* left, win32::Windows::Win32::Networking::Clustering::PaxosTagCStruct* right) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(left);
        ORBIT_TRACK_PARAM(right);

        auto win32_impl_result = g_api_table.ResUtilPaxosComparer(left, right);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ResUtilLeftPaxosIsLessThanRight(win32::Windows::Win32::Networking::Clustering::PaxosTagCStruct* left, win32::Windows::Win32::Networking::Clustering::PaxosTagCStruct* right) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(left);
        ORBIT_TRACK_PARAM(right);

        auto win32_impl_result = g_api_table.ResUtilLeftPaxosIsLessThanRight(left, right);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilsDeleteKeyTree(win32::Windows::Win32::System::Registry::HKEY key, win32::Windows::Win32::Foundation::PWSTR keyName, win32::Windows::Win32::Foundation::BOOL treatNoKeyAsError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(key);
        ORBIT_TRACK_PARAM(keyName);
        ORBIT_TRACK_PARAM(treatNoKeyAsError);

        auto win32_impl_result = g_api_table.ResUtilsDeleteKeyTree(key, keyName, treatNoKeyAsError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGroupsEqual(win32::Windows::Win32::Networking::Clustering::_HGROUP* hSelf, win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Foundation::BOOL* pEqual) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(pEqual);

        auto win32_impl_result = g_api_table.ResUtilGroupsEqual(hSelf, hGroup, pEqual);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumGroups(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HGROUP* hSelf, win32::Windows::Win32::Networking::Clustering::LPGROUP_CALLBACK_EX* pResCallBack, void* pParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(pResCallBack);
        ORBIT_TRACK_PARAM(pParameter);

        auto win32_impl_result = g_api_table.ResUtilEnumGroups(hCluster, hSelf, pResCallBack, pParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilEnumGroupsEx(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::_HGROUP* hSelf, win32::Windows::Win32::Networking::Clustering::CLUSGROUP_TYPE groupType, win32::Windows::Win32::Networking::Clustering::LPGROUP_CALLBACK_EX* pResCallBack, void* pParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(groupType);
        ORBIT_TRACK_PARAM(pResCallBack);
        ORBIT_TRACK_PARAM(pParameter);

        auto win32_impl_result = g_api_table.ResUtilEnumGroupsEx(hCluster, hSelf, groupType, pResCallBack, pParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilDupGroup(win32::Windows::Win32::Networking::Clustering::_HGROUP* group, win32::Windows::Win32::Networking::Clustering::_HGROUP** copy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(group);
        ORBIT_TRACK_PARAM(copy);

        auto win32_impl_result = g_api_table.ResUtilDupGroup(group, copy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetClusterGroupType(win32::Windows::Win32::Networking::Clustering::_HGROUP* hGroup, win32::Windows::Win32::Networking::Clustering::CLUSGROUP_TYPE* groupType) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hGroup);
        ORBIT_TRACK_PARAM(groupType);

        auto win32_impl_result = g_api_table.ResUtilGetClusterGroupType(hGroup, groupType);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Networking::Clustering::_HGROUP* __stdcall ORBIT_IMPL_ResUtilGetCoreGroup(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);

        auto win32_impl_result = g_api_table.ResUtilGetCoreGroup(hCluster);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilResourceDepEnum(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* hSelf, uint32_t enumType, win32::Windows::Win32::Networking::Clustering::LPRESOURCE_CALLBACK_EX* pResCallBack, void* pParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hSelf);
        ORBIT_TRACK_PARAM(enumType);
        ORBIT_TRACK_PARAM(pResCallBack);
        ORBIT_TRACK_PARAM(pParameter);

        auto win32_impl_result = g_api_table.ResUtilResourceDepEnum(hSelf, enumType, pResCallBack, pParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilDupResource(win32::Windows::Win32::Networking::Clustering::_HRESOURCE* group, win32::Windows::Win32::Networking::Clustering::_HRESOURCE** copy) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(group);
        ORBIT_TRACK_PARAM(copy);

        auto win32_impl_result = g_api_table.ResUtilDupResource(group, copy);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilGetClusterId(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, ::win32::guid* guid) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(guid);

        auto win32_impl_result = g_api_table.ResUtilGetClusterId(hCluster, guid);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResUtilNodeEnum(win32::Windows::Win32::Networking::Clustering::_HCLUSTER* hCluster, win32::Windows::Win32::Networking::Clustering::LPNODE_CALLBACK* pNodeCallBack, void* pParameter) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hCluster);
        ORBIT_TRACK_PARAM(pNodeCallBack);
        ORBIT_TRACK_PARAM(pParameter);

        auto win32_impl_result = g_api_table.ResUtilNodeEnum(hCluster, pNodeCallBack, pParameter);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RegisterAppInstance(win32::Windows::Win32::Foundation::HANDLE ProcessHandle, ::win32::guid* AppInstanceId, win32::Windows::Win32::Foundation::BOOL ChildrenInheritAppInstance) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(AppInstanceId);
        ORBIT_TRACK_PARAM(ChildrenInheritAppInstance);

        auto win32_impl_result = g_api_table.RegisterAppInstance(ProcessHandle, AppInstanceId, ChildrenInheritAppInstance);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RegisterAppInstanceVersion(::win32::guid* AppInstanceId, uint64_t InstanceVersionHigh, uint64_t InstanceVersionLow) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AppInstanceId);
        ORBIT_TRACK_PARAM(InstanceVersionHigh);
        ORBIT_TRACK_PARAM(InstanceVersionLow);

        auto win32_impl_result = g_api_table.RegisterAppInstanceVersion(AppInstanceId, InstanceVersionHigh, InstanceVersionLow);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_QueryAppInstanceVersion(::win32::guid* AppInstanceId, uint64_t* InstanceVersionHigh, uint64_t* InstanceVersionLow, win32::Windows::Win32::Foundation::NTSTATUS* VersionStatus) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AppInstanceId);
        ORBIT_TRACK_PARAM(InstanceVersionHigh);
        ORBIT_TRACK_PARAM(InstanceVersionLow);
        ORBIT_TRACK_PARAM(VersionStatus);

        auto win32_impl_result = g_api_table.QueryAppInstanceVersion(AppInstanceId, InstanceVersionHigh, InstanceVersionLow, VersionStatus);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ResetAllAppInstanceVersions() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ResetAllAppInstanceVersions();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetAppInstanceCsvFlags(win32::Windows::Win32::Foundation::HANDLE ProcessHandle, uint32_t Mask, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(Mask);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.SetAppInstanceCsvFlags(ProcessHandle, Mask, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
