// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Com_0_H
#define WIN32_Windows_Win32_System_Com_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct HRESULT;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::Com
{
#pragma region enums
    enum class ADVF : int32_t
    {
        ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32,
    };
    enum class APTTYPE : int32_t
    {
        APTTYPE_CURRENT = -1,
        APTTYPE_STA = 0,
        APTTYPE_MTA = 1,
        APTTYPE_NA = 2,
        APTTYPE_MAINSTA = 3,
    };
    enum class APTTYPEQUALIFIER : int32_t
    {
        APTTYPEQUALIFIER_NONE = 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
        APTTYPEQUALIFIER_NA_ON_MTA = 2,
        APTTYPEQUALIFIER_NA_ON_STA = 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
        APTTYPEQUALIFIER_APPLICATION_STA = 6,
        APTTYPEQUALIFIER_RESERVED_1 = 7,
    };
    enum class ApplicationType : int32_t
    {
        ServerApplication = 0,
        LibraryApplication = 1,
    };
    enum class BINDINFOF : int32_t
    {
        BINDINFOF_URLENCODESTGMEDDATA = 1,
        BINDINFOF_URLENCODEDEXTRAINFO = 2,
    };
    enum class BIND_FLAGS : int32_t
    {
        BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2,
    };
    enum class CALLTYPE : int32_t
    {
        CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5,
    };
    enum class CLSCTX : uint32_t
    {
        CLSCTX_INPROC_SERVER = 0x1,
        CLSCTX_INPROC_HANDLER = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16 = 0x8,
        CLSCTX_REMOTE_SERVER = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_RESERVED1 = 0x40,
        CLSCTX_RESERVED2 = 0x80,
        CLSCTX_RESERVED3 = 0x100,
        CLSCTX_RESERVED4 = 0x200,
        CLSCTX_NO_CODE_DOWNLOAD = 0x400,
        CLSCTX_RESERVED5 = 0x800,
        CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
        CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
        CLSCTX_NO_FAILURE_LOG = 0x4000,
        CLSCTX_DISABLE_AAA = 0x8000,
        CLSCTX_ENABLE_AAA = 0x10000,
        CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
        CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
        CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
        CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
        CLSCTX_ENABLE_CLOAKING = 0x100000,
        CLSCTX_APPCONTAINER = 0x400000,
        CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
        CLSCTX_RESERVED6 = 0x1000000,
        CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
        CLSCTX_PS_DLL = 0x80000000,
        CLSCTX_ALL = 0x17,
        CLSCTX_SERVER = 0x15,
    };
    enum class COINIT : uint32_t
    {
        COINIT_APARTMENTTHREADED = 0x2,
        COINIT_MULTITHREADED = 0x0,
        COINIT_DISABLE_OLE1DDE = 0x4,
        COINIT_SPEED_OVER_MEMORY = 0x8,
    };
    enum class COINITBASE : int32_t
    {
        COINITBASE_MULTITHREADED = 0,
    };
    enum class COMSD : int32_t
    {
        SD_LAUNCHPERMISSIONS = 0,
        SD_ACCESSPERMISSIONS = 1,
        SD_LAUNCHRESTRICTIONS = 2,
        SD_ACCESSRESTRICTIONS = 3,
    };
    enum class COWAIT_FLAGS : int32_t
    {
        COWAIT_DEFAULT = 0,
        COWAIT_WAITALL = 1,
        COWAIT_ALERTABLE = 2,
        COWAIT_INPUTAVAILABLE = 4,
        COWAIT_DISPATCH_CALLS = 8,
        COWAIT_DISPATCH_WINDOW_MESSAGES = 16,
    };
    enum class CO_MARSHALING_CONTEXT_ATTRIBUTES : int32_t
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = -2147483648,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = -2147483647,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = -2147483646,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = -2147483645,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = -2147483644,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = -2147483643,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = -2147483642,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = -2147483641,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = -2147483640,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = -2147483639,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = -2147483638,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = -2147483637,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = -2147483636,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = -2147483635,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = -2147483634,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = -2147483633,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = -2147483632,
        CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = -2147483631,
    };
    enum class CWMO_FLAGS : int32_t
    {
        CWMO_DEFAULT = 0,
        CWMO_DISPATCH_CALLS = 1,
        CWMO_DISPATCH_WINDOW_MESSAGES = 2,
    };
    enum class DATADIR : int32_t
    {
        DATADIR_GET = 1,
        DATADIR_SET = 2,
    };
    enum class DCOM_CALL_STATE : int32_t
    {
        DCOM_NONE = 0,
        DCOM_CALL_COMPLETE = 1,
        DCOM_CALL_CANCELED = 2,
    };
    enum class DVASPECT : int32_t
    {
        DVASPECT_CONTENT = 1,
        DVASPECT_THUMBNAIL = 2,
        DVASPECT_ICON = 4,
        DVASPECT_DOCPRINT = 8,
    };
    enum class EOLE_AUTHENTICATION_CAPABILITIES : int32_t
    {
        EOAC_NONE = 0,
        EOAC_MUTUAL_AUTH = 1,
        EOAC_STATIC_CLOAKING = 32,
        EOAC_DYNAMIC_CLOAKING = 64,
        EOAC_ANY_AUTHORITY = 128,
        EOAC_MAKE_FULLSIC = 256,
        EOAC_DEFAULT = 2048,
        EOAC_SECURE_REFS = 2,
        EOAC_ACCESS_CONTROL = 4,
        EOAC_APPID = 8,
        EOAC_DYNAMIC = 16,
        EOAC_REQUIRE_FULLSIC = 512,
        EOAC_AUTO_IMPERSONATE = 1024,
        EOAC_DISABLE_AAA = 4096,
        EOAC_NO_CUSTOM_MARSHAL = 8192,
        EOAC_RESERVED1 = 16384,
    };
    enum class EXTCONN : int32_t
    {
        EXTCONN_STRONG = 1,
        EXTCONN_WEAK = 2,
        EXTCONN_CALLABLE = 4,
    };
    enum class GLOBALOPT_EH_VALUES : int32_t
    {
        COMGLB_EXCEPTION_HANDLE = 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE = 1,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2,
    };
    enum class GLOBALOPT_PROPERTIES : int32_t
    {
        COMGLB_EXCEPTION_HANDLING = 1,
        COMGLB_APPID = 2,
        COMGLB_RPC_THREADPOOL_SETTING = 3,
        COMGLB_RO_SETTINGS = 4,
        COMGLB_UNMARSHALING_POLICY = 5,
        COMGLB_PROPERTIES_RESERVED1 = 6,
        COMGLB_PROPERTIES_RESERVED2 = 7,
        COMGLB_PROPERTIES_RESERVED3 = 8,
    };
    enum class GLOBALOPT_RO_FLAGS : int32_t
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4,
        COMGLB_FAST_RUNDOWN = 8,
        COMGLB_RESERVED1 = 16,
        COMGLB_RESERVED2 = 32,
        COMGLB_RESERVED3 = 64,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128,
        COMGLB_RESERVED4 = 256,
        COMGLB_RESERVED5 = 512,
        COMGLB_RESERVED6 = 1024,
    };
    enum class GLOBALOPT_RPCTP_VALUES : int32_t
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1,
    };
    enum class GLOBALOPT_UNMARSHALING_POLICY_VALUES : int32_t
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
        COMGLB_UNMARSHALING_POLICY_STRONG = 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID = 2,
    };
    enum class MEMCTX : int32_t
    {
        MEMCTX_TASK = 1,
        MEMCTX_SHARED = 2,
        MEMCTX_MACSYSTEM = 3,
        MEMCTX_UNKNOWN = -1,
        MEMCTX_SAME = -2,
    };
    enum class MKREDUCE : int32_t
    {
        MKRREDUCE_ONE = 196608,
        MKRREDUCE_TOUSER = 131072,
        MKRREDUCE_THROUGHUSER = 65536,
        MKRREDUCE_ALL = 0,
    };
    enum class MKSYS : int32_t
    {
        MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8,
        MKSYS_SESSIONMONIKER = 9,
        MKSYS_LUAMONIKER = 10,
    };
    enum class MSHCTX : int32_t
    {
        MSHCTX_LOCAL = 0,
        MSHCTX_NOSHAREDMEM = 1,
        MSHCTX_DIFFERENTMACHINE = 2,
        MSHCTX_INPROC = 3,
        MSHCTX_CROSSCTX = 4,
        MSHCTX_CONTAINER = 5,
    };
    enum class MSHLFLAGS : int32_t
    {
        MSHLFLAGS_NORMAL = 0,
        MSHLFLAGS_TABLESTRONG = 1,
        MSHLFLAGS_TABLEWEAK = 2,
        MSHLFLAGS_NOPING = 4,
        MSHLFLAGS_RESERVED1 = 8,
        MSHLFLAGS_RESERVED2 = 16,
        MSHLFLAGS_RESERVED3 = 32,
        MSHLFLAGS_RESERVED4 = 64,
    };
    enum class PENDINGMSG : int32_t
    {
        PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2,
    };
    enum class PENDINGTYPE : int32_t
    {
        PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2,
    };
    enum class REGCLS : int32_t
    {
        REGCLS_SINGLEUSE = 0,
        REGCLS_MULTIPLEUSE = 1,
        REGCLS_MULTI_SEPARATE = 2,
        REGCLS_SUSPENDED = 4,
        REGCLS_SURROGATE = 8,
        REGCLS_AGILE = 16,
    };
    enum class RPCOPT_PROPERTIES : int32_t
    {
        COMBND_RPCTIMEOUT = 1,
        COMBND_SERVER_LOCALITY = 2,
        COMBND_RESERVED1 = 4,
        COMBND_RESERVED2 = 5,
        COMBND_RESERVED3 = 8,
        COMBND_RESERVED4 = 16,
    };
    enum class RPCOPT_SERVER_LOCALITY_VALUES : int32_t
    {
        SERVER_LOCALITY_PROCESS_LOCAL = 0,
        SERVER_LOCALITY_MACHINE_LOCAL = 1,
        SERVER_LOCALITY_REMOTE = 2,
    };
    enum class RPC_C_AUTHN_LEVEL : uint32_t
    {
        RPC_C_AUTHN_LEVEL_DEFAULT = 0x0,
        RPC_C_AUTHN_LEVEL_NONE = 0x1,
        RPC_C_AUTHN_LEVEL_CONNECT = 0x2,
        RPC_C_AUTHN_LEVEL_CALL = 0x3,
        RPC_C_AUTHN_LEVEL_PKT = 0x4,
        RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 0x5,
        RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 0x6,
    };
    enum class RPC_C_IMP_LEVEL : uint32_t
    {
        RPC_C_IMP_LEVEL_DEFAULT = 0x0,
        RPC_C_IMP_LEVEL_ANONYMOUS = 0x1,
        RPC_C_IMP_LEVEL_IDENTIFY = 0x2,
        RPC_C_IMP_LEVEL_IMPERSONATE = 0x3,
        RPC_C_IMP_LEVEL_DELEGATE = 0x4,
    };
    enum class SERVERCALL : int32_t
    {
        SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2,
    };
    enum class STGTY : int32_t
    {
        STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4,
    };
    enum class STREAM_SEEK : uint32_t
    {
        STREAM_SEEK_SET = 0x0,
        STREAM_SEEK_CUR = 0x1,
        STREAM_SEEK_END = 0x2,
    };
    enum class ShutdownType : int32_t
    {
        IdleShutdown = 0,
        ForcedShutdown = 1,
    };
    enum class THDTYPE : int32_t
    {
        THDTYPE_BLOCKMESSAGES = 0,
        THDTYPE_PROCESSMESSAGES = 1,
    };
    enum class TYMED : int32_t
    {
        TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0,
    };
    enum class TYSPEC : int32_t
    {
        TYSPEC_CLSID = 0,
        TYSPEC_FILEEXT = 1,
        TYSPEC_MIMETYPE = 2,
        TYSPEC_FILENAME = 3,
        TYSPEC_PROGID = 4,
        TYSPEC_PACKAGENAME = 5,
        TYSPEC_OBJECTID = 6,
    };
    enum class URI_CREATE_FLAGS : uint32_t
    {
        Uri_CREATE_ALLOW_RELATIVE = 0x1,
        Uri_CREATE_ALLOW_IMPLICIT_WILDCARD_SCHEME = 0x2,
        Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME = 0x4,
        Uri_CREATE_NOFRAG = 0x8,
        Uri_CREATE_NO_CANONICALIZE = 0x10,
        Uri_CREATE_CANONICALIZE = 0x100,
        Uri_CREATE_FILE_USE_DOS_PATH = 0x20,
        Uri_CREATE_DECODE_EXTRA_INFO = 0x40,
        Uri_CREATE_NO_DECODE_EXTRA_INFO = 0x80,
        Uri_CREATE_CRACK_UNKNOWN_SCHEMES = 0x200,
        Uri_CREATE_NO_CRACK_UNKNOWN_SCHEMES = 0x400,
        Uri_CREATE_PRE_PROCESS_HTML_URI = 0x800,
        Uri_CREATE_NO_PRE_PROCESS_HTML_URI = 0x1000,
        Uri_CREATE_IE_SETTINGS = 0x2000,
        Uri_CREATE_NO_IE_SETTINGS = 0x4000,
        Uri_CREATE_NO_ENCODE_FORBIDDEN_CHARACTERS = 0x8000,
        Uri_CREATE_NORMALIZE_INTL_CHARACTERS = 0x10000,
        Uri_CREATE_CANONICALIZE_ABSOLUTE = 0x20000,
    };
    enum class Uri_PROPERTY : int32_t
    {
        Uri_PROPERTY_ABSOLUTE_URI = 0,
        Uri_PROPERTY_STRING_START = 0,
        Uri_PROPERTY_AUTHORITY = 1,
        Uri_PROPERTY_DISPLAY_URI = 2,
        Uri_PROPERTY_DOMAIN = 3,
        Uri_PROPERTY_EXTENSION = 4,
        Uri_PROPERTY_FRAGMENT = 5,
        Uri_PROPERTY_HOST = 6,
        Uri_PROPERTY_PASSWORD = 7,
        Uri_PROPERTY_PATH = 8,
        Uri_PROPERTY_PATH_AND_QUERY = 9,
        Uri_PROPERTY_QUERY = 10,
        Uri_PROPERTY_RAW_URI = 11,
        Uri_PROPERTY_SCHEME_NAME = 12,
        Uri_PROPERTY_USER_INFO = 13,
        Uri_PROPERTY_USER_NAME = 14,
        Uri_PROPERTY_STRING_LAST = 14,
        Uri_PROPERTY_HOST_TYPE = 15,
        Uri_PROPERTY_DWORD_START = 15,
        Uri_PROPERTY_PORT = 16,
        Uri_PROPERTY_SCHEME = 17,
        Uri_PROPERTY_ZONE = 18,
        Uri_PROPERTY_DWORD_LAST = 18,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct BINDINFO;
    struct BIND_OPTS;
    struct BIND_OPTS2;
    struct BIND_OPTS3;
    struct BLOB;
    struct BYTE_BLOB;
    struct BYTE_SIZEDARR;
    struct CATEGORYINFO;
    struct COAUTHIDENTITY;
    struct COAUTHINFO;
    struct CONNECTDATA;
    struct COSERVERINFO;
    struct CO_DEVICE_CATALOG_COOKIE;
    struct CO_MTA_USAGE_COOKIE;
    struct CSPLATFORM;
    union CY;
    struct ComCallData;
    struct DVTARGETDEVICE;
    struct DWORD_BLOB;
    struct FLAGGED_BYTE_BLOB;
    struct FLAGGED_WORD_BLOB;
    struct FLAG_STGMEDIUM;
    struct FORMATETC;
    struct GDI_OBJECT;
    struct HYPER_SIZEDARR;
    struct IContext;
    struct IEnumContextProps;
    struct INTERFACEINFO;
    struct LONG_SIZEDARR;
    struct MULTI_QI;
    struct MachineGlobalObjectTableRegistrationToken__;
    struct QUERYCONTEXT;
    struct RPCOLEMESSAGE;
    struct RemSTGMEDIUM;
    struct SAFEARRAY;
    struct SAFEARRAYBOUND;
    struct SChannelHookCallInfo;
    struct SHORT_SIZEDARR;
    struct SOLE_AUTHENTICATION_INFO;
    struct SOLE_AUTHENTICATION_LIST;
    struct SOLE_AUTHENTICATION_SERVICE;
    struct STATDATA;
    struct STATSTG;
    struct STGMEDIUM;
    struct StorageLayout;
    struct VARIANT;
    struct WORD_BLOB;
    struct uCLSSPEC;
    struct userFLAG_STGMEDIUM;
    struct userSTGMEDIUM;
    struct AsyncIAdviseSink;
    struct AsyncIAdviseSink2;
    struct AsyncIMultiQI;
    struct AsyncIPipeByte;
    struct AsyncIPipeDouble;
    struct AsyncIPipeLong;
    struct AsyncIUnknown;
    struct IActivationFilter;
    struct IAddrExclusionControl;
    struct IAddrTrackingControl;
    struct IAdviseSink;
    struct IAdviseSink2;
    struct IAgileObject;
    struct IAsyncManager;
    struct IAsyncRpcChannelBuffer;
    struct IBindCtx;
    struct IBindHost;
    struct IBindStatusCallback;
    struct IBindStatusCallbackEx;
    struct IBinding;
    struct IBlockingLock;
    struct ICallFactory;
    struct ICancelMethodCalls;
    struct ICatInformation;
    struct ICatRegister;
    struct IChannelHook;
    struct IClassActivator;
    struct IClassFactory;
    struct IClientSecurity;
    struct IComThreadingInfo;
    struct IConnectionPoint;
    struct IConnectionPointContainer;
    struct IContextCallback;
    struct IDataAdviseHolder;
    struct IDataObject;
    struct IEnumCATEGORYINFO;
    struct IEnumConnectionPoints;
    struct IEnumConnections;
    struct IEnumFORMATETC;
    struct IEnumGUID;
    struct IEnumMoniker;
    struct IEnumSTATDATA;
    struct IEnumString;
    struct IEnumUnknown;
    struct IExternalConnection;
    struct IFastRundown;
    struct IForegroundTransfer;
    struct IGlobalInterfaceTable;
    struct IGlobalOptions;
    struct IInitializeSpy;
    struct IInternalUnknown;
    struct IMachineGlobalObjectTable;
    struct IMalloc;
    struct IMallocSpy;
    struct IMoniker;
    struct IMultiQI;
    struct INoMarshal;
    struct IOplockStorage;
    struct IPSFactoryBuffer;
    struct IPersist;
    struct IPersistFile;
    struct IPersistMemory;
    struct IPersistStream;
    struct IPersistStreamInit;
    struct IPipeByte;
    struct IPipeDouble;
    struct IPipeLong;
    struct IProcessInitControl;
    struct IProcessLock;
    struct IProgressNotify;
    struct IROTData;
    struct IReleaseMarshalBuffers;
    struct IRpcChannelBuffer;
    struct IRpcChannelBuffer2;
    struct IRpcChannelBuffer3;
    struct IRpcHelper;
    struct IRpcOptions;
    struct IRpcProxyBuffer;
    struct IRpcStubBuffer;
    struct IRpcSyntaxNegotiate;
    struct IRunnableObject;
    struct IRunningObjectTable;
    struct ISequentialStream;
    struct IServerSecurity;
    struct IServiceProvider;
    struct IStdMarshalInfo;
    struct IStream;
    struct ISurrogate;
    struct ISurrogateService;
    struct ISynchronize;
    struct ISynchronizeContainer;
    struct ISynchronizeEvent;
    struct ISynchronizeHandle;
    struct ISynchronizeMutex;
    struct ITimeAndNoticeControl;
    struct IUnknown;
    struct IUri;
    struct IUriBuilder;
    struct IUrlMon;
    struct IWaitMultiple;
#pragma endregion forward_declarations

#pragma region delegates
    using LPFNGETCLASSOBJECT = Windows::Win32::Foundation::HRESULT __stdcall(::win32::guid*, ::win32::guid*, void**);
    using LPFNCANUNLOADNOW = Windows::Win32::Foundation::HRESULT __stdcall();
    using PFNCONTEXTCALL = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::Com::ComCallData*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
