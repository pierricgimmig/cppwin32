// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_UI_Controls_Dialogs_0_H
#define WIN32_Windows_Win32_UI_Controls_Dialogs_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct HWND;
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::UI::Controls::Dialogs
{
#pragma region enums
    enum class CHOOSEFONT_FLAGS : uint32_t
    {
        CF_APPLY = 0x200,
        CF_ANSIONLY = 0x400,
        CF_BOTH = 0x3,
        CF_EFFECTS = 0x100,
        CF_ENABLEHOOK = 0x8,
        CF_ENABLETEMPLATE = 0x10,
        CF_ENABLETEMPLATEHANDLE = 0x20,
        CF_FIXEDPITCHONLY = 0x4000,
        CF_FORCEFONTEXIST = 0x10000,
        CF_INACTIVEFONTS = 0x2000000,
        CF_INITTOLOGFONTSTRUCT = 0x40,
        CF_LIMITSIZE = 0x2000,
        CF_NOOEMFONTS = 0x800,
        CF_NOFACESEL = 0x80000,
        CF_NOSCRIPTSEL = 0x800000,
        CF_NOSIMULATIONS = 0x1000,
        CF_NOSIZESEL = 0x200000,
        CF_NOSTYLESEL = 0x100000,
        CF_NOVECTORFONTS = 0x800,
        CF_NOVERTFONTS = 0x1000000,
        CF_PRINTERFONTS = 0x2,
        CF_SCALABLEONLY = 0x20000,
        CF_SCREENFONTS = 0x1,
        CF_SCRIPTSONLY = 0x400,
        CF_SELECTSCRIPT = 0x400000,
        CF_SHOWHELP = 0x4,
        CF_TTONLY = 0x40000,
        CF_USESTYLE = 0x80,
        CF_WYSIWYG = 0x8000,
    };
    enum class CHOOSEFONT_FONT_TYPE : uint16_t
    {
        BOLD_FONTTYPE = 0x100,
        ITALIC_FONTTYPE = 0x200,
        PRINTER_FONTTYPE = 0x4000,
        REGULAR_FONTTYPE = 0x400,
        SCREEN_FONTTYPE = 0x2000,
        SIMULATED_FONTTYPE = 0x8000,
    };
    enum class COMMON_DLG_ERRORS : uint32_t
    {
        CDERR_DIALOGFAILURE = 0xffff,
        CDERR_GENERALCODES = 0x0,
        CDERR_STRUCTSIZE = 0x1,
        CDERR_INITIALIZATION = 0x2,
        CDERR_NOTEMPLATE = 0x3,
        CDERR_NOHINSTANCE = 0x4,
        CDERR_LOADSTRFAILURE = 0x5,
        CDERR_FINDRESFAILURE = 0x6,
        CDERR_LOADRESFAILURE = 0x7,
        CDERR_LOCKRESFAILURE = 0x8,
        CDERR_MEMALLOCFAILURE = 0x9,
        CDERR_MEMLOCKFAILURE = 0xa,
        CDERR_NOHOOK = 0xb,
        CDERR_REGISTERMSGFAIL = 0xc,
        PDERR_PRINTERCODES = 0x1000,
        PDERR_SETUPFAILURE = 0x1001,
        PDERR_PARSEFAILURE = 0x1002,
        PDERR_RETDEFFAILURE = 0x1003,
        PDERR_LOADDRVFAILURE = 0x1004,
        PDERR_GETDEVMODEFAIL = 0x1005,
        PDERR_INITFAILURE = 0x1006,
        PDERR_NODEVICES = 0x1007,
        PDERR_NODEFAULTPRN = 0x1008,
        PDERR_DNDMMISMATCH = 0x1009,
        PDERR_CREATEICFAILURE = 0x100a,
        PDERR_PRINTERNOTFOUND = 0x100b,
        PDERR_DEFAULTDIFFERENT = 0x100c,
        CFERR_CHOOSEFONTCODES = 0x2000,
        CFERR_NOFONTS = 0x2001,
        CFERR_MAXLESSTHANMIN = 0x2002,
        FNERR_FILENAMECODES = 0x3000,
        FNERR_SUBCLASSFAILURE = 0x3001,
        FNERR_INVALIDFILENAME = 0x3002,
        FNERR_BUFFERTOOSMALL = 0x3003,
        FRERR_FINDREPLACECODES = 0x4000,
        FRERR_BUFFERLENGTHZERO = 0x4001,
        CCERR_CHOOSECOLORCODES = 0x5000,
    };
    enum class FINDREPLACE_FLAGS : uint32_t
    {
        FR_DIALOGTERM = 0x40,
        FR_DOWN = 0x1,
        FR_ENABLEHOOK = 0x100,
        FR_ENABLETEMPLATE = 0x200,
        FR_ENABLETEMPLATEHANDLE = 0x2000,
        FR_FINDNEXT = 0x8,
        FR_HIDEUPDOWN = 0x4000,
        FR_HIDEMATCHCASE = 0x8000,
        FR_HIDEWHOLEWORD = 0x10000,
        FR_MATCHCASE = 0x4,
        FR_NOMATCHCASE = 0x800,
        FR_NOUPDOWN = 0x400,
        FR_NOWHOLEWORD = 0x1000,
        FR_REPLACE = 0x10,
        FR_REPLACEALL = 0x20,
        FR_SHOWHELP = 0x80,
        FR_WHOLEWORD = 0x2,
    };
    enum class OPEN_FILENAME_FLAGS : uint32_t
    {
        OFN_READONLY = 0x1,
        OFN_OVERWRITEPROMPT = 0x2,
        OFN_HIDEREADONLY = 0x4,
        OFN_NOCHANGEDIR = 0x8,
        OFN_SHOWHELP = 0x10,
        OFN_ENABLEHOOK = 0x20,
        OFN_ENABLETEMPLATE = 0x40,
        OFN_ENABLETEMPLATEHANDLE = 0x80,
        OFN_NOVALIDATE = 0x100,
        OFN_ALLOWMULTISELECT = 0x200,
        OFN_EXTENSIONDIFFERENT = 0x400,
        OFN_PATHMUSTEXIST = 0x800,
        OFN_FILEMUSTEXIST = 0x1000,
        OFN_CREATEPROMPT = 0x2000,
        OFN_SHAREAWARE = 0x4000,
        OFN_NOREADONLYRETURN = 0x8000,
        OFN_NOTESTFILECREATE = 0x10000,
        OFN_NONETWORKBUTTON = 0x20000,
        OFN_NOLONGNAMES = 0x40000,
        OFN_EXPLORER = 0x80000,
        OFN_NODEREFERENCELINKS = 0x100000,
        OFN_LONGNAMES = 0x200000,
        OFN_ENABLEINCLUDENOTIFY = 0x400000,
        OFN_ENABLESIZING = 0x800000,
        OFN_DONTADDTORECENT = 0x2000000,
        OFN_FORCESHOWHIDDEN = 0x10000000,
    };
    enum class OPEN_FILENAME_FLAGS_EX : uint32_t
    {
        OFN_EX_NONE = 0x0,
        OFN_EX_NOPLACESBAR = 0x1,
    };
    enum class PAGESETUPDLG_FLAGS : uint32_t
    {
        PSD_DEFAULTMINMARGINS = 0x0,
        PSD_DISABLEMARGINS = 0x10,
        PSD_DISABLEORIENTATION = 0x100,
        PSD_DISABLEPAGEPAINTING = 0x80000,
        PSD_DISABLEPAPER = 0x200,
        PSD_DISABLEPRINTER = 0x20,
        PSD_ENABLEPAGEPAINTHOOK = 0x40000,
        PSD_ENABLEPAGESETUPHOOK = 0x2000,
        PSD_ENABLEPAGESETUPTEMPLATE = 0x8000,
        PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 0x20000,
        PSD_INHUNDREDTHSOFMILLIMETERS = 0x8,
        PSD_INTHOUSANDTHSOFINCHES = 0x4,
        PSD_INWININIINTLMEASURE = 0x0,
        PSD_MARGINS = 0x2,
        PSD_MINMARGINS = 0x1,
        PSD_NONETWORKBUTTON = 0x200000,
        PSD_NOWARNING = 0x80,
        PSD_RETURNDEFAULT = 0x400,
        PSD_SHOWHELP = 0x800,
    };
    enum class PRINTDLGEX_FLAGS : uint32_t
    {
        PD_ALLPAGES = 0x0,
        PD_COLLATE = 0x10,
        PD_CURRENTPAGE = 0x400000,
        PD_DISABLEPRINTTOFILE = 0x80000,
        PD_ENABLEPRINTTEMPLATE = 0x4000,
        PD_ENABLEPRINTTEMPLATEHANDLE = 0x10000,
        PD_EXCLUSIONFLAGS = 0x1000000,
        PD_HIDEPRINTTOFILE = 0x100000,
        PD_NOCURRENTPAGE = 0x800000,
        PD_NOPAGENUMS = 0x8,
        PD_NOSELECTION = 0x4,
        PD_NOWARNING = 0x80,
        PD_PAGENUMS = 0x2,
        PD_PRINTTOFILE = 0x20,
        PD_RETURNDC = 0x100,
        PD_RETURNDEFAULT = 0x400,
        PD_RETURNIC = 0x200,
        PD_SELECTION = 0x1,
        PD_USEDEVMODECOPIES = 0x40000,
        PD_USEDEVMODECOPIESANDCOLLATE = 0x40000,
        PD_USELARGETEMPLATE = 0x10000000,
        PD_ENABLEPRINTHOOK = 0x1000,
        PD_ENABLESETUPHOOK = 0x2000,
        PD_ENABLESETUPTEMPLATE = 0x8000,
        PD_ENABLESETUPTEMPLATEHANDLE = 0x20000,
        PD_NONETWORKBUTTON = 0x200000,
        PD_PRINTSETUP = 0x40,
        PD_SHOWHELP = 0x800,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct CHOOSECOLORA;
    struct CHOOSECOLORW;
    struct CHOOSEFONTA;
    struct CHOOSEFONTW;
    struct DEVNAMES;
    struct FINDREPLACEA;
    struct FINDREPLACEW;
    struct OFNOTIFYA;
    struct OFNOTIFYEXA;
    struct OFNOTIFYEXW;
    struct OFNOTIFYW;
    struct OPENFILENAMEA;
    struct OPENFILENAMEW;
    struct OPENFILENAME_NT4A;
    struct OPENFILENAME_NT4W;
    struct PAGESETUPDLGA;
    struct PAGESETUPDLGW;
    struct PRINTDLGA;
    struct PRINTDLGEXA;
    struct PRINTDLGEXW;
    struct PRINTDLGW;
    struct PRINTPAGERANGE;
    struct IPrintDialogCallback;
    struct IPrintDialogServices;
#pragma endregion forward_declarations

#pragma region delegates
    using LPOFNHOOKPROC = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPCCHOOKPROC = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPFRHOOKPROC = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPCFHOOKPROC = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPPRINTHOOKPROC = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPSETUPHOOKPROC = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPPAGEPAINTHOOK = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
    using LPPAGESETUPHOOK = size_t __stdcall(Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
