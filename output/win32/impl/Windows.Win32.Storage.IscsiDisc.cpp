// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_IscsiDisc_2_H
#define WIN32_Windows_Win32_Storage_IscsiDisc_2_H
#include "win32/Windows.Win32.Storage.IscsiDisc.h"
#include "win32/impl/Windows.Win32.Storage.IscsiDisc.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::IscsiDisc
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_GetIScsiVersionInformation(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_VERSION_INFO* VersionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(VersionInfo);

        auto win32_impl_result = g_api_table.GetIScsiVersionInformation(VersionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiTargetInformationW(win32::Windows::Win32::Foundation::PWSTR TargetName, win32::Windows::Win32::Foundation::PWSTR DiscoveryMechanism, win32::Windows::Win32::Storage::IscsiDisc::TARGET_INFORMATION_CLASS InfoClass, uint32_t* BufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(DiscoveryMechanism);
        ORBIT_TRACK_PARAM(InfoClass);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.GetIScsiTargetInformationW(TargetName, DiscoveryMechanism, InfoClass, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiTargetInformationA(win32::Windows::Win32::Foundation::PSTR TargetName, win32::Windows::Win32::Foundation::PSTR DiscoveryMechanism, win32::Windows::Win32::Storage::IscsiDisc::TARGET_INFORMATION_CLASS InfoClass, uint32_t* BufferSize, void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(DiscoveryMechanism);
        ORBIT_TRACK_PARAM(InfoClass);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.GetIScsiTargetInformationA(TargetName, DiscoveryMechanism, InfoClass, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIScsiConnectionW(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, void* Reserved, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* TargetPortal, uint64_t SecurityFlags, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, win32::Windows::Win32::Foundation::PSTR Key, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* ConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(TargetPortal);
        ORBIT_TRACK_PARAM(SecurityFlags);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(KeySize);
        ORBIT_TRACK_PARAM(Key);
        ORBIT_TRACK_PARAM(ConnectionId);

        auto win32_impl_result = g_api_table.AddIScsiConnectionW(UniqueSessionId, Reserved, InitiatorPortNumber, TargetPortal, SecurityFlags, LoginOptions, KeySize, Key, ConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIScsiConnectionA(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, void* Reserved, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* TargetPortal, uint64_t SecurityFlags, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, win32::Windows::Win32::Foundation::PSTR Key, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* ConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(TargetPortal);
        ORBIT_TRACK_PARAM(SecurityFlags);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(KeySize);
        ORBIT_TRACK_PARAM(Key);
        ORBIT_TRACK_PARAM(ConnectionId);

        auto win32_impl_result = g_api_table.AddIScsiConnectionA(UniqueSessionId, Reserved, InitiatorPortNumber, TargetPortal, SecurityFlags, LoginOptions, KeySize, Key, ConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiConnection(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* ConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(ConnectionId);

        auto win32_impl_result = g_api_table.RemoveIScsiConnection(UniqueSessionId, ConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiTargetsW(win32::Windows::Win32::Foundation::BOOLEAN ForceUpdate, uint32_t* BufferSize, win32::Windows::Win32::Foundation::PWSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ForceUpdate);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportIScsiTargetsW(ForceUpdate, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiTargetsA(win32::Windows::Win32::Foundation::BOOLEAN ForceUpdate, uint32_t* BufferSize, win32::Windows::Win32::Foundation::PSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ForceUpdate);
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportIScsiTargetsA(ForceUpdate, BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIScsiStaticTargetW(win32::Windows::Win32::Foundation::PWSTR TargetName, win32::Windows::Win32::Foundation::PWSTR TargetAlias, uint32_t TargetFlags, win32::Windows::Win32::Foundation::BOOLEAN Persist, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_MAPPINGW* Mappings, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTAL_GROUPW* PortalGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(TargetAlias);
        ORBIT_TRACK_PARAM(TargetFlags);
        ORBIT_TRACK_PARAM(Persist);
        ORBIT_TRACK_PARAM(Mappings);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(PortalGroup);

        auto win32_impl_result = g_api_table.AddIScsiStaticTargetW(TargetName, TargetAlias, TargetFlags, Persist, Mappings, LoginOptions, PortalGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIScsiStaticTargetA(win32::Windows::Win32::Foundation::PSTR TargetName, win32::Windows::Win32::Foundation::PSTR TargetAlias, uint32_t TargetFlags, win32::Windows::Win32::Foundation::BOOLEAN Persist, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_MAPPINGA* Mappings, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTAL_GROUPA* PortalGroup) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(TargetAlias);
        ORBIT_TRACK_PARAM(TargetFlags);
        ORBIT_TRACK_PARAM(Persist);
        ORBIT_TRACK_PARAM(Mappings);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(PortalGroup);

        auto win32_impl_result = g_api_table.AddIScsiStaticTargetA(TargetName, TargetAlias, TargetFlags, Persist, Mappings, LoginOptions, PortalGroup);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiStaticTargetW(win32::Windows::Win32::Foundation::PWSTR TargetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);

        auto win32_impl_result = g_api_table.RemoveIScsiStaticTargetW(TargetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiStaticTargetA(win32::Windows::Win32::Foundation::PSTR TargetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);

        auto win32_impl_result = g_api_table.RemoveIScsiStaticTargetA(TargetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIScsiSendTargetPortalW(win32::Windows::Win32::Foundation::PWSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint64_t SecurityFlags, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(SecurityFlags);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.AddIScsiSendTargetPortalW(InitiatorInstance, InitiatorPortNumber, LoginOptions, SecurityFlags, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddIScsiSendTargetPortalA(win32::Windows::Win32::Foundation::PSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint64_t SecurityFlags, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(SecurityFlags);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.AddIScsiSendTargetPortalA(InitiatorInstance, InitiatorPortNumber, LoginOptions, SecurityFlags, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiSendTargetPortalW(win32::Windows::Win32::Foundation::PWSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.RemoveIScsiSendTargetPortalW(InitiatorInstance, InitiatorPortNumber, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiSendTargetPortalA(win32::Windows::Win32::Foundation::PSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.RemoveIScsiSendTargetPortalA(InitiatorInstance, InitiatorPortNumber, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RefreshIScsiSendTargetPortalW(win32::Windows::Win32::Foundation::PWSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.RefreshIScsiSendTargetPortalW(InitiatorInstance, InitiatorPortNumber, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RefreshIScsiSendTargetPortalA(win32::Windows::Win32::Foundation::PSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.RefreshIScsiSendTargetPortalA(InitiatorInstance, InitiatorPortNumber, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiSendTargetPortalsW(uint32_t* PortalCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTAL_INFOW* PortalInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PortalCount);
        ORBIT_TRACK_PARAM(PortalInfo);

        auto win32_impl_result = g_api_table.ReportIScsiSendTargetPortalsW(PortalCount, PortalInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiSendTargetPortalsA(uint32_t* PortalCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTAL_INFOA* PortalInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PortalCount);
        ORBIT_TRACK_PARAM(PortalInfo);

        auto win32_impl_result = g_api_table.ReportIScsiSendTargetPortalsA(PortalCount, PortalInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiSendTargetPortalsExW(uint32_t* PortalCount, uint32_t* PortalInfoSize, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTAL_INFO_EXW* PortalInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PortalCount);
        ORBIT_TRACK_PARAM(PortalInfoSize);
        ORBIT_TRACK_PARAM(PortalInfo);

        auto win32_impl_result = g_api_table.ReportIScsiSendTargetPortalsExW(PortalCount, PortalInfoSize, PortalInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiSendTargetPortalsExA(uint32_t* PortalCount, uint32_t* PortalInfoSize, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTAL_INFO_EXA* PortalInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(PortalCount);
        ORBIT_TRACK_PARAM(PortalInfoSize);
        ORBIT_TRACK_PARAM(PortalInfo);

        auto win32_impl_result = g_api_table.ReportIScsiSendTargetPortalsExA(PortalCount, PortalInfoSize, PortalInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LoginIScsiTargetW(win32::Windows::Win32::Foundation::PWSTR TargetName, win32::Windows::Win32::Foundation::BOOLEAN IsInformationalSession, win32::Windows::Win32::Foundation::PWSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* TargetPortal, uint64_t SecurityFlags, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_MAPPINGW* Mappings, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, win32::Windows::Win32::Foundation::PSTR Key, win32::Windows::Win32::Foundation::BOOLEAN IsPersistent, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(IsInformationalSession);
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(TargetPortal);
        ORBIT_TRACK_PARAM(SecurityFlags);
        ORBIT_TRACK_PARAM(Mappings);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(KeySize);
        ORBIT_TRACK_PARAM(Key);
        ORBIT_TRACK_PARAM(IsPersistent);
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(UniqueConnectionId);

        auto win32_impl_result = g_api_table.LoginIScsiTargetW(TargetName, IsInformationalSession, InitiatorInstance, InitiatorPortNumber, TargetPortal, SecurityFlags, Mappings, LoginOptions, KeySize, Key, IsPersistent, UniqueSessionId, UniqueConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LoginIScsiTargetA(win32::Windows::Win32::Foundation::PSTR TargetName, win32::Windows::Win32::Foundation::BOOLEAN IsInformationalSession, win32::Windows::Win32::Foundation::PSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* TargetPortal, uint64_t SecurityFlags, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_MAPPINGA* Mappings, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_LOGIN_OPTIONS* LoginOptions, uint32_t KeySize, win32::Windows::Win32::Foundation::PSTR Key, win32::Windows::Win32::Foundation::BOOLEAN IsPersistent, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueConnectionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(IsInformationalSession);
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(TargetPortal);
        ORBIT_TRACK_PARAM(SecurityFlags);
        ORBIT_TRACK_PARAM(Mappings);
        ORBIT_TRACK_PARAM(LoginOptions);
        ORBIT_TRACK_PARAM(KeySize);
        ORBIT_TRACK_PARAM(Key);
        ORBIT_TRACK_PARAM(IsPersistent);
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(UniqueConnectionId);

        auto win32_impl_result = g_api_table.LoginIScsiTargetA(TargetName, IsInformationalSession, InitiatorInstance, InitiatorPortNumber, TargetPortal, SecurityFlags, Mappings, LoginOptions, KeySize, Key, IsPersistent, UniqueSessionId, UniqueConnectionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiPersistentLoginsW(uint32_t* Count, win32::Windows::Win32::Storage::IscsiDisc::PERSISTENT_ISCSI_LOGIN_INFOW* PersistentLoginInfo, uint32_t* BufferSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Count);
        ORBIT_TRACK_PARAM(PersistentLoginInfo);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);

        auto win32_impl_result = g_api_table.ReportIScsiPersistentLoginsW(Count, PersistentLoginInfo, BufferSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiPersistentLoginsA(uint32_t* Count, win32::Windows::Win32::Storage::IscsiDisc::PERSISTENT_ISCSI_LOGIN_INFOA* PersistentLoginInfo, uint32_t* BufferSizeInBytes) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Count);
        ORBIT_TRACK_PARAM(PersistentLoginInfo);
        ORBIT_TRACK_PARAM(BufferSizeInBytes);

        auto win32_impl_result = g_api_table.ReportIScsiPersistentLoginsA(Count, PersistentLoginInfo, BufferSizeInBytes);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_LogoutIScsiTarget(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);

        auto win32_impl_result = g_api_table.LogoutIScsiTarget(UniqueSessionId);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiPersistentTargetW(win32::Windows::Win32::Foundation::PWSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Foundation::PWSTR TargetName, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.RemoveIScsiPersistentTargetW(InitiatorInstance, InitiatorPortNumber, TargetName, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveIScsiPersistentTargetA(win32::Windows::Win32::Foundation::PSTR InitiatorInstance, uint32_t InitiatorPortNumber, win32::Windows::Win32::Foundation::PSTR TargetName, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* Portal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorInstance);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(Portal);

        auto win32_impl_result = g_api_table.RemoveIScsiPersistentTargetA(InitiatorInstance, InitiatorPortNumber, TargetName, Portal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SendScsiInquiry(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint64_t Lun, uint8_t EvpdCmddt, uint8_t PageCode, uint8_t* ScsiStatus, uint32_t* ResponseSize, uint8_t* ResponseBuffer, uint32_t* SenseSize, uint8_t* SenseBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(Lun);
        ORBIT_TRACK_PARAM(EvpdCmddt);
        ORBIT_TRACK_PARAM(PageCode);
        ORBIT_TRACK_PARAM(ScsiStatus);
        ORBIT_TRACK_PARAM(ResponseSize);
        ORBIT_TRACK_PARAM(ResponseBuffer);
        ORBIT_TRACK_PARAM(SenseSize);
        ORBIT_TRACK_PARAM(SenseBuffer);

        auto win32_impl_result = g_api_table.SendScsiInquiry(UniqueSessionId, Lun, EvpdCmddt, PageCode, ScsiStatus, ResponseSize, ResponseBuffer, SenseSize, SenseBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SendScsiReadCapacity(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint64_t Lun, uint8_t* ScsiStatus, uint32_t* ResponseSize, uint8_t* ResponseBuffer, uint32_t* SenseSize, uint8_t* SenseBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(Lun);
        ORBIT_TRACK_PARAM(ScsiStatus);
        ORBIT_TRACK_PARAM(ResponseSize);
        ORBIT_TRACK_PARAM(ResponseBuffer);
        ORBIT_TRACK_PARAM(SenseSize);
        ORBIT_TRACK_PARAM(SenseBuffer);

        auto win32_impl_result = g_api_table.SendScsiReadCapacity(UniqueSessionId, Lun, ScsiStatus, ResponseSize, ResponseBuffer, SenseSize, SenseBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SendScsiReportLuns(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint8_t* ScsiStatus, uint32_t* ResponseSize, uint8_t* ResponseBuffer, uint32_t* SenseSize, uint8_t* SenseBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(ScsiStatus);
        ORBIT_TRACK_PARAM(ResponseSize);
        ORBIT_TRACK_PARAM(ResponseBuffer);
        ORBIT_TRACK_PARAM(SenseSize);
        ORBIT_TRACK_PARAM(SenseBuffer);

        auto win32_impl_result = g_api_table.SendScsiReportLuns(UniqueSessionId, ScsiStatus, ResponseSize, ResponseBuffer, SenseSize, SenseBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiInitiatorListW(uint32_t* BufferSize, win32::Windows::Win32::Foundation::PWSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportIScsiInitiatorListW(BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiInitiatorListA(uint32_t* BufferSize, win32::Windows::Win32::Foundation::PSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportIScsiInitiatorListA(BufferSize, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportActiveIScsiTargetMappingsW(uint32_t* BufferSize, uint32_t* MappingCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_MAPPINGW* Mappings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(MappingCount);
        ORBIT_TRACK_PARAM(Mappings);

        auto win32_impl_result = g_api_table.ReportActiveIScsiTargetMappingsW(BufferSize, MappingCount, Mappings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportActiveIScsiTargetMappingsA(uint32_t* BufferSize, uint32_t* MappingCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_MAPPINGA* Mappings) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(MappingCount);
        ORBIT_TRACK_PARAM(Mappings);

        auto win32_impl_result = g_api_table.ReportActiveIScsiTargetMappingsA(BufferSize, MappingCount, Mappings);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiTunnelModeOuterAddressW(win32::Windows::Win32::Foundation::PWSTR InitiatorName, uint32_t InitiatorPortNumber, win32::Windows::Win32::Foundation::PWSTR DestinationAddress, win32::Windows::Win32::Foundation::PWSTR OuterModeAddress, win32::Windows::Win32::Foundation::BOOLEAN Persist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(OuterModeAddress);
        ORBIT_TRACK_PARAM(Persist);

        auto win32_impl_result = g_api_table.SetIScsiTunnelModeOuterAddressW(InitiatorName, InitiatorPortNumber, DestinationAddress, OuterModeAddress, Persist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiTunnelModeOuterAddressA(win32::Windows::Win32::Foundation::PSTR InitiatorName, uint32_t InitiatorPortNumber, win32::Windows::Win32::Foundation::PSTR DestinationAddress, win32::Windows::Win32::Foundation::PSTR OuterModeAddress, win32::Windows::Win32::Foundation::BOOLEAN Persist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(DestinationAddress);
        ORBIT_TRACK_PARAM(OuterModeAddress);
        ORBIT_TRACK_PARAM(Persist);

        auto win32_impl_result = g_api_table.SetIScsiTunnelModeOuterAddressA(InitiatorName, InitiatorPortNumber, DestinationAddress, OuterModeAddress, Persist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiIKEInfoW(win32::Windows::Win32::Foundation::PWSTR InitiatorName, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo, win32::Windows::Win32::Foundation::BOOLEAN Persist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(AuthInfo);
        ORBIT_TRACK_PARAM(Persist);

        auto win32_impl_result = g_api_table.SetIScsiIKEInfoW(InitiatorName, InitiatorPortNumber, AuthInfo, Persist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiIKEInfoA(win32::Windows::Win32::Foundation::PSTR InitiatorName, uint32_t InitiatorPortNumber, win32::Windows::Win32::Storage::IscsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo, win32::Windows::Win32::Foundation::BOOLEAN Persist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(AuthInfo);
        ORBIT_TRACK_PARAM(Persist);

        auto win32_impl_result = g_api_table.SetIScsiIKEInfoA(InitiatorName, InitiatorPortNumber, AuthInfo, Persist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiIKEInfoW(win32::Windows::Win32::Foundation::PWSTR InitiatorName, uint32_t InitiatorPortNumber, uint32_t* Reserved, win32::Windows::Win32::Storage::IscsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(AuthInfo);

        auto win32_impl_result = g_api_table.GetIScsiIKEInfoW(InitiatorName, InitiatorPortNumber, Reserved, AuthInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiIKEInfoA(win32::Windows::Win32::Foundation::PSTR InitiatorName, uint32_t InitiatorPortNumber, uint32_t* Reserved, win32::Windows::Win32::Storage::IscsiDisc::IKE_AUTHENTICATION_INFORMATION* AuthInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(InitiatorPortNumber);
        ORBIT_TRACK_PARAM(Reserved);
        ORBIT_TRACK_PARAM(AuthInfo);

        auto win32_impl_result = g_api_table.GetIScsiIKEInfoA(InitiatorName, InitiatorPortNumber, Reserved, AuthInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiGroupPresharedKey(uint32_t KeyLength, uint8_t* Key, win32::Windows::Win32::Foundation::BOOLEAN Persist) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(KeyLength);
        ORBIT_TRACK_PARAM(Key);
        ORBIT_TRACK_PARAM(Persist);

        auto win32_impl_result = g_api_table.SetIScsiGroupPresharedKey(KeyLength, Key, Persist);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiInitiatorCHAPSharedSecret(uint32_t SharedSecretLength, uint8_t* SharedSecret) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SharedSecretLength);
        ORBIT_TRACK_PARAM(SharedSecret);

        auto win32_impl_result = g_api_table.SetIScsiInitiatorCHAPSharedSecret(SharedSecretLength, SharedSecret);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiInitiatorRADIUSSharedSecret(uint32_t SharedSecretLength, uint8_t* SharedSecret) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SharedSecretLength);
        ORBIT_TRACK_PARAM(SharedSecret);

        auto win32_impl_result = g_api_table.SetIScsiInitiatorRADIUSSharedSecret(SharedSecretLength, SharedSecret);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiInitiatorNodeNameW(win32::Windows::Win32::Foundation::PWSTR InitiatorNodeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorNodeName);

        auto win32_impl_result = g_api_table.SetIScsiInitiatorNodeNameW(InitiatorNodeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetIScsiInitiatorNodeNameA(win32::Windows::Win32::Foundation::PSTR InitiatorNodeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorNodeName);

        auto win32_impl_result = g_api_table.SetIScsiInitiatorNodeNameA(InitiatorNodeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiInitiatorNodeNameW(win32::Windows::Win32::Foundation::PWSTR InitiatorNodeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorNodeName);

        auto win32_impl_result = g_api_table.GetIScsiInitiatorNodeNameW(InitiatorNodeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiInitiatorNodeNameA(win32::Windows::Win32::Foundation::PSTR InitiatorNodeName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorNodeName);

        auto win32_impl_result = g_api_table.GetIScsiInitiatorNodeNameA(InitiatorNodeName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddISNSServerW(win32::Windows::Win32::Foundation::PWSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.AddISNSServerW(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddISNSServerA(win32::Windows::Win32::Foundation::PSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.AddISNSServerA(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveISNSServerW(win32::Windows::Win32::Foundation::PWSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.RemoveISNSServerW(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveISNSServerA(win32::Windows::Win32::Foundation::PSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.RemoveISNSServerA(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RefreshISNSServerW(win32::Windows::Win32::Foundation::PWSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.RefreshISNSServerW(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RefreshISNSServerA(win32::Windows::Win32::Foundation::PSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.RefreshISNSServerA(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportISNSServerListW(uint32_t* BufferSizeInChar, win32::Windows::Win32::Foundation::PWSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeInChar);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportISNSServerListW(BufferSizeInChar, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportISNSServerListA(uint32_t* BufferSizeInChar, win32::Windows::Win32::Foundation::PSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeInChar);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportISNSServerListA(BufferSizeInChar, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiSessionListW(uint32_t* BufferSize, uint32_t* SessionCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_SESSION_INFOW* SessionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(SessionCount);
        ORBIT_TRACK_PARAM(SessionInfo);

        auto win32_impl_result = g_api_table.GetIScsiSessionListW(BufferSize, SessionCount, SessionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiSessionListA(uint32_t* BufferSize, uint32_t* SessionCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_SESSION_INFOA* SessionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(SessionCount);
        ORBIT_TRACK_PARAM(SessionInfo);

        auto win32_impl_result = g_api_table.GetIScsiSessionListA(BufferSize, SessionCount, SessionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetIScsiSessionListEx(uint32_t* BufferSize, uint32_t* SessionCountPtr, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_SESSION_INFO_EX* SessionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSize);
        ORBIT_TRACK_PARAM(SessionCountPtr);
        ORBIT_TRACK_PARAM(SessionInfo);

        auto win32_impl_result = g_api_table.GetIScsiSessionListEx(BufferSize, SessionCountPtr, SessionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDevicesForIScsiSessionW(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint32_t* DeviceCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_DEVICE_ON_SESSIONW* Devices) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(DeviceCount);
        ORBIT_TRACK_PARAM(Devices);

        auto win32_impl_result = g_api_table.GetDevicesForIScsiSessionW(UniqueSessionId, DeviceCount, Devices);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetDevicesForIScsiSessionA(win32::Windows::Win32::Storage::IscsiDisc::ISCSI_UNIQUE_SESSION_ID* UniqueSessionId, uint32_t* DeviceCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_DEVICE_ON_SESSIONA* Devices) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(UniqueSessionId);
        ORBIT_TRACK_PARAM(DeviceCount);
        ORBIT_TRACK_PARAM(Devices);

        auto win32_impl_result = g_api_table.GetDevicesForIScsiSessionA(UniqueSessionId, DeviceCount, Devices);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetupPersistentIScsiVolumes() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.SetupPersistentIScsiVolumes();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_SetupPersistentIScsiDevices() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.SetupPersistentIScsiDevices();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddPersistentIScsiDeviceW(win32::Windows::Win32::Foundation::PWSTR DevicePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DevicePath);

        auto win32_impl_result = g_api_table.AddPersistentIScsiDeviceW(DevicePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddPersistentIScsiDeviceA(win32::Windows::Win32::Foundation::PSTR DevicePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DevicePath);

        auto win32_impl_result = g_api_table.AddPersistentIScsiDeviceA(DevicePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemovePersistentIScsiDeviceW(win32::Windows::Win32::Foundation::PWSTR DevicePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DevicePath);

        auto win32_impl_result = g_api_table.RemovePersistentIScsiDeviceW(DevicePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemovePersistentIScsiDeviceA(win32::Windows::Win32::Foundation::PSTR DevicePath) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DevicePath);

        auto win32_impl_result = g_api_table.RemovePersistentIScsiDeviceA(DevicePath);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ClearPersistentIScsiDevices() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.ClearPersistentIScsiDevices();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportPersistentIScsiDevicesW(uint32_t* BufferSizeInChar, win32::Windows::Win32::Foundation::PWSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeInChar);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportPersistentIScsiDevicesW(BufferSizeInChar, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportPersistentIScsiDevicesA(uint32_t* BufferSizeInChar, win32::Windows::Win32::Foundation::PSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeInChar);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportPersistentIScsiDevicesA(BufferSizeInChar, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiTargetPortalsW(win32::Windows::Win32::Foundation::PWSTR InitiatorName, win32::Windows::Win32::Foundation::PWSTR TargetName, uint16_t* TargetPortalTag, uint32_t* ElementCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALW* Portals) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(TargetPortalTag);
        ORBIT_TRACK_PARAM(ElementCount);
        ORBIT_TRACK_PARAM(Portals);

        auto win32_impl_result = g_api_table.ReportIScsiTargetPortalsW(InitiatorName, TargetName, TargetPortalTag, ElementCount, Portals);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportIScsiTargetPortalsA(win32::Windows::Win32::Foundation::PSTR InitiatorName, win32::Windows::Win32::Foundation::PSTR TargetName, uint16_t* TargetPortalTag, uint32_t* ElementCount, win32::Windows::Win32::Storage::IscsiDisc::ISCSI_TARGET_PORTALA* Portals) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InitiatorName);
        ORBIT_TRACK_PARAM(TargetName);
        ORBIT_TRACK_PARAM(TargetPortalTag);
        ORBIT_TRACK_PARAM(ElementCount);
        ORBIT_TRACK_PARAM(Portals);

        auto win32_impl_result = g_api_table.ReportIScsiTargetPortalsA(InitiatorName, TargetName, TargetPortalTag, ElementCount, Portals);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddRadiusServerW(win32::Windows::Win32::Foundation::PWSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.AddRadiusServerW(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_AddRadiusServerA(win32::Windows::Win32::Foundation::PSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.AddRadiusServerA(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveRadiusServerW(win32::Windows::Win32::Foundation::PWSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.RemoveRadiusServerW(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_RemoveRadiusServerA(win32::Windows::Win32::Foundation::PSTR Address) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Address);

        auto win32_impl_result = g_api_table.RemoveRadiusServerA(Address);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportRadiusServerListW(uint32_t* BufferSizeInChar, win32::Windows::Win32::Foundation::PWSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeInChar);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportRadiusServerListW(BufferSizeInChar, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_ReportRadiusServerListA(uint32_t* BufferSizeInChar, win32::Windows::Win32::Foundation::PSTR Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(BufferSizeInChar);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.ReportRadiusServerListA(BufferSizeInChar, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
