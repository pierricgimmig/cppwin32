// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_NetworkManagement_IpHelper_0_H
#define WIN32_Windows_Win32_NetworkManagement_IpHelper_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Networking::WinSock
{
    struct NL_NETWORK_CONNECTIVITY_HINT;
}
WIN32_EXPORT namespace win32::Windows::Win32::NetworkManagement::IpHelper
{
#pragma region enums
    enum class ADDRESS_FAMILY : uint32_t
    {
        AF_INET = 0x2,
        AF_INET6 = 0x17,
        AF_UNSPEC = 0x0,
    };
    enum class DNS_SERVER_PROPERTY_TYPE : int32_t
    {
        DnsServerInvalidProperty = 0,
        DnsServerDohProperty = 1,
    };
    enum class GET_ADAPTERS_ADDRESSES_FLAGS : uint32_t
    {
        GAA_FLAG_SKIP_UNICAST = 0x1,
        GAA_FLAG_SKIP_ANYCAST = 0x2,
        GAA_FLAG_SKIP_MULTICAST = 0x4,
        GAA_FLAG_SKIP_DNS_SERVER = 0x8,
        GAA_FLAG_INCLUDE_PREFIX = 0x10,
        GAA_FLAG_SKIP_FRIENDLY_NAME = 0x20,
        GAA_FLAG_INCLUDE_WINS_INFO = 0x40,
        GAA_FLAG_INCLUDE_GATEWAYS = 0x80,
        GAA_FLAG_INCLUDE_ALL_INTERFACES = 0x100,
        GAA_FLAG_INCLUDE_ALL_COMPARTMENTS = 0x200,
        GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER = 0x400,
    };
    enum class GLOBAL_FILTER : int32_t
    {
        GF_FRAGMENTS = 2,
        GF_STRONGHOST = 8,
        GF_FRAGCACHE = 9,
    };
    enum class ICMP4_TYPE : int32_t
    {
        ICMP4_ECHO_REPLY = 0,
        ICMP4_DST_UNREACH = 3,
        ICMP4_SOURCE_QUENCH = 4,
        ICMP4_REDIRECT = 5,
        ICMP4_ECHO_REQUEST = 8,
        ICMP4_ROUTER_ADVERT = 9,
        ICMP4_ROUTER_SOLICIT = 10,
        ICMP4_TIME_EXCEEDED = 11,
        ICMP4_PARAM_PROB = 12,
        ICMP4_TIMESTAMP_REQUEST = 13,
        ICMP4_TIMESTAMP_REPLY = 14,
        ICMP4_MASK_REQUEST = 17,
        ICMP4_MASK_REPLY = 18,
    };
    enum class ICMP6_TYPE : int32_t
    {
        ICMP6_DST_UNREACH = 1,
        ICMP6_PACKET_TOO_BIG = 2,
        ICMP6_TIME_EXCEEDED = 3,
        ICMP6_PARAM_PROB = 4,
        ICMP6_ECHO_REQUEST = 128,
        ICMP6_ECHO_REPLY = 129,
        ICMP6_MEMBERSHIP_QUERY = 130,
        ICMP6_MEMBERSHIP_REPORT = 131,
        ICMP6_MEMBERSHIP_REDUCTION = 132,
        ND_ROUTER_SOLICIT = 133,
        ND_ROUTER_ADVERT = 134,
        ND_NEIGHBOR_SOLICIT = 135,
        ND_NEIGHBOR_ADVERT = 136,
        ND_REDIRECT = 137,
        ICMP6_V2_MEMBERSHIP_REPORT = 143,
    };
    enum class IF_ACCESS_TYPE : int32_t
    {
        IF_ACCESS_LOOPBACK = 1,
        IF_ACCESS_BROADCAST = 2,
        IF_ACCESS_POINT_TO_POINT = 3,
        IF_ACCESS_POINTTOPOINT = 3,
        IF_ACCESS_POINT_TO_MULTI_POINT = 4,
        IF_ACCESS_POINTTOMULTIPOINT = 4,
    };
    enum class IF_ADMINISTRATIVE_STATE : int32_t
    {
        IF_ADMINISTRATIVE_DISABLED = 0,
        IF_ADMINISTRATIVE_ENABLED = 1,
        IF_ADMINISTRATIVE_DEMANDDIAL = 2,
    };
    enum class IF_OPER_STATUS : int32_t
    {
        IfOperStatusUp = 1,
        IfOperStatusDown = 2,
        IfOperStatusTesting = 3,
        IfOperStatusUnknown = 4,
        IfOperStatusDormant = 5,
        IfOperStatusNotPresent = 6,
        IfOperStatusLowerLayerDown = 7,
    };
    enum class INTERNAL_IF_OPER_STATUS : int32_t
    {
        IF_OPER_STATUS_NON_OPERATIONAL = 0,
        IF_OPER_STATUS_UNREACHABLE = 1,
        IF_OPER_STATUS_DISCONNECTED = 2,
        IF_OPER_STATUS_CONNECTING = 3,
        IF_OPER_STATUS_CONNECTED = 4,
        IF_OPER_STATUS_OPERATIONAL = 5,
    };
    enum class MIB_IF_ENTRY_LEVEL : int32_t
    {
        MibIfEntryNormal = 0,
        MibIfEntryNormalWithoutStatistics = 2,
    };
    enum class MIB_IF_TABLE_LEVEL : int32_t
    {
        MibIfTableNormal = 0,
        MibIfTableRaw = 1,
        MibIfTableNormalWithoutStatistics = 2,
    };
    enum class MIB_IPFORWARD_TYPE : int32_t
    {
        MIB_IPROUTE_TYPE_OTHER = 1,
        MIB_IPROUTE_TYPE_INVALID = 2,
        MIB_IPROUTE_TYPE_DIRECT = 3,
        MIB_IPROUTE_TYPE_INDIRECT = 4,
    };
    enum class MIB_IPNET_TYPE : int32_t
    {
        MIB_IPNET_TYPE_OTHER = 1,
        MIB_IPNET_TYPE_INVALID = 2,
        MIB_IPNET_TYPE_DYNAMIC = 3,
        MIB_IPNET_TYPE_STATIC = 4,
    };
    enum class MIB_IPSTATS_FORWARDING : int32_t
    {
        MIB_IP_FORWARDING = 1,
        MIB_IP_NOT_FORWARDING = 2,
    };
    enum class MIB_NOTIFICATION_TYPE : int32_t
    {
        MibParameterNotification = 0,
        MibAddInstance = 1,
        MibDeleteInstance = 2,
        MibInitialNotification = 3,
    };
    enum class MIB_TCP_STATE : int32_t
    {
        MIB_TCP_STATE_CLOSED = 1,
        MIB_TCP_STATE_LISTEN = 2,
        MIB_TCP_STATE_SYN_SENT = 3,
        MIB_TCP_STATE_SYN_RCVD = 4,
        MIB_TCP_STATE_ESTAB = 5,
        MIB_TCP_STATE_FIN_WAIT1 = 6,
        MIB_TCP_STATE_FIN_WAIT2 = 7,
        MIB_TCP_STATE_CLOSE_WAIT = 8,
        MIB_TCP_STATE_CLOSING = 9,
        MIB_TCP_STATE_LAST_ACK = 10,
        MIB_TCP_STATE_TIME_WAIT = 11,
        MIB_TCP_STATE_DELETE_TCB = 12,
        MIB_TCP_STATE_RESERVED = 100,
    };
    enum class NET_ADDRESS_FORMAT : int32_t
    {
        NET_ADDRESS_FORMAT_UNSPECIFIED = 0,
        NET_ADDRESS_DNS_NAME = 1,
        NET_ADDRESS_IPV4 = 2,
        NET_ADDRESS_IPV6 = 3,
    };
    enum class NET_IF_ACCESS_TYPE : int32_t
    {
        NET_IF_ACCESS_LOOPBACK = 1,
        NET_IF_ACCESS_BROADCAST = 2,
        NET_IF_ACCESS_POINT_TO_POINT = 3,
        NET_IF_ACCESS_POINT_TO_MULTI_POINT = 4,
        NET_IF_ACCESS_MAXIMUM = 5,
    };
    enum class NET_IF_ADMIN_STATUS : int32_t
    {
        NET_IF_ADMIN_STATUS_UP = 1,
        NET_IF_ADMIN_STATUS_DOWN = 2,
        NET_IF_ADMIN_STATUS_TESTING = 3,
    };
    enum class NET_IF_CONNECTION_TYPE : int32_t
    {
        NET_IF_CONNECTION_DEDICATED = 1,
        NET_IF_CONNECTION_PASSIVE = 2,
        NET_IF_CONNECTION_DEMAND = 3,
        NET_IF_CONNECTION_MAXIMUM = 4,
    };
    enum class NET_IF_DIRECTION_TYPE : int32_t
    {
        NET_IF_DIRECTION_SENDRECEIVE = 0,
        NET_IF_DIRECTION_SENDONLY = 1,
        NET_IF_DIRECTION_RECEIVEONLY = 2,
        NET_IF_DIRECTION_MAXIMUM = 3,
    };
    enum class NET_IF_MEDIA_CONNECT_STATE : int32_t
    {
        MediaConnectStateUnknown = 0,
        MediaConnectStateConnected = 1,
        MediaConnectStateDisconnected = 2,
    };
    enum class NET_IF_MEDIA_DUPLEX_STATE : int32_t
    {
        MediaDuplexStateUnknown = 0,
        MediaDuplexStateHalf = 1,
        MediaDuplexStateFull = 2,
    };
    enum class NET_IF_OPER_STATUS : int32_t
    {
        NET_IF_OPER_STATUS_UP = 1,
        NET_IF_OPER_STATUS_DOWN = 2,
        NET_IF_OPER_STATUS_TESTING = 3,
        NET_IF_OPER_STATUS_UNKNOWN = 4,
        NET_IF_OPER_STATUS_DORMANT = 5,
        NET_IF_OPER_STATUS_NOT_PRESENT = 6,
        NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 7,
    };
    enum class NET_IF_RCV_ADDRESS_TYPE : int32_t
    {
        NET_IF_RCV_ADDRESS_TYPE_OTHER = 1,
        NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 2,
        NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 3,
    };
    enum class PFADDRESSTYPE : int32_t
    {
        PF_IPV4 = 0,
        PF_IPV6 = 1,
    };
    enum class PFFORWARD_ACTION : int32_t
    {
        PF_ACTION_FORWARD = 0,
        PF_ACTION_DROP = 1,
    };
    enum class PFFRAMETYPE : int32_t
    {
        PFFT_FILTER = 1,
        PFFT_FRAG = 2,
        PFFT_SPOOF = 3,
    };
    enum class TCPIP_OWNER_MODULE_INFO_CLASS : int32_t
    {
        TCPIP_OWNER_MODULE_INFO_BASIC = 0,
    };
    enum class TCP_BOOLEAN_OPTIONAL : int32_t
    {
        TcpBoolOptDisabled = 0,
        TcpBoolOptEnabled = 1,
        TcpBoolOptUnchanged = -1,
    };
    enum class TCP_CONNECTION_OFFLOAD_STATE : int32_t
    {
        TcpConnectionOffloadStateInHost = 0,
        TcpConnectionOffloadStateOffloading = 1,
        TcpConnectionOffloadStateOffloaded = 2,
        TcpConnectionOffloadStateUploading = 3,
        TcpConnectionOffloadStateMax = 4,
    };
    enum class TCP_ESTATS_TYPE : int32_t
    {
        TcpConnectionEstatsSynOpts = 0,
        TcpConnectionEstatsData = 1,
        TcpConnectionEstatsSndCong = 2,
        TcpConnectionEstatsPath = 3,
        TcpConnectionEstatsSendBuff = 4,
        TcpConnectionEstatsRec = 5,
        TcpConnectionEstatsObsRec = 6,
        TcpConnectionEstatsBandwidth = 7,
        TcpConnectionEstatsFineRtt = 8,
        TcpConnectionEstatsMaximum = 9,
    };
    enum class TCP_RTO_ALGORITHM : int32_t
    {
        TcpRtoAlgorithmOther = 1,
        TcpRtoAlgorithmConstant = 2,
        TcpRtoAlgorithmRsre = 3,
        TcpRtoAlgorithmVanj = 4,
        MIB_TCP_RTO_OTHER = 1,
        MIB_TCP_RTO_CONSTANT = 2,
        MIB_TCP_RTO_RSRE = 3,
        MIB_TCP_RTO_VANJ = 4,
    };
    enum class TCP_SOFT_ERROR : int32_t
    {
        TcpErrorNone = 0,
        TcpErrorBelowDataWindow = 1,
        TcpErrorAboveDataWindow = 2,
        TcpErrorBelowAckWindow = 3,
        TcpErrorAboveAckWindow = 4,
        TcpErrorBelowTsWindow = 5,
        TcpErrorAboveTsWindow = 6,
        TcpErrorDataChecksumError = 7,
        TcpErrorDataLengthError = 8,
        TcpErrorMaxSoftError = 9,
    };
    enum class TCP_TABLE_CLASS : int32_t
    {
        TCP_TABLE_BASIC_LISTENER = 0,
        TCP_TABLE_BASIC_CONNECTIONS = 1,
        TCP_TABLE_BASIC_ALL = 2,
        TCP_TABLE_OWNER_PID_LISTENER = 3,
        TCP_TABLE_OWNER_PID_CONNECTIONS = 4,
        TCP_TABLE_OWNER_PID_ALL = 5,
        TCP_TABLE_OWNER_MODULE_LISTENER = 6,
        TCP_TABLE_OWNER_MODULE_CONNECTIONS = 7,
        TCP_TABLE_OWNER_MODULE_ALL = 8,
    };
    enum class TUNNEL_TYPE : int32_t
    {
        TUNNEL_TYPE_NONE = 0,
        TUNNEL_TYPE_OTHER = 1,
        TUNNEL_TYPE_DIRECT = 2,
        TUNNEL_TYPE_6TO4 = 11,
        TUNNEL_TYPE_ISATAP = 13,
        TUNNEL_TYPE_TEREDO = 14,
        TUNNEL_TYPE_IPHTTPS = 15,
    };
    enum class UDP_TABLE_CLASS : int32_t
    {
        UDP_TABLE_BASIC = 0,
        UDP_TABLE_OWNER_PID = 1,
        UDP_TABLE_OWNER_MODULE = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct DNS_DOH_SERVER_SETTINGS;
    struct DNS_INTERFACE_SETTINGS;
    struct DNS_INTERFACE_SETTINGS3;
    struct DNS_INTERFACE_SETTINGS_EX;
    struct DNS_SERVER_PROPERTY;
    union DNS_SERVER_PROPERTY_TYPES;
    struct DNS_SETTINGS;
    struct DNS_SETTINGS2;
    struct FIXED_INFO_W2KSP1;
    struct HIFTIMESTAMPCHANGE;
    struct IF_COUNTED_STRING_LH;
    struct IF_PHYSICAL_ADDRESS_LH;
    struct INTERFACE_HARDWARE_CROSSTIMESTAMP;
    struct INTERFACE_HARDWARE_TIMESTAMP_CAPABILITIES;
    struct INTERFACE_SOFTWARE_TIMESTAMP_CAPABILITIES;
    struct INTERFACE_TIMESTAMP_CAPABILITIES;
    struct IPV6_ADDRESS_EX;
    struct IP_ADAPTER_ADDRESSES_LH;
    struct IP_ADAPTER_ADDRESSES_XP;
    struct IP_ADAPTER_ANYCAST_ADDRESS_XP;
    struct IP_ADAPTER_DNS_SERVER_ADDRESS_XP;
    struct IP_ADAPTER_DNS_SUFFIX;
    struct IP_ADAPTER_GATEWAY_ADDRESS_LH;
    struct IP_ADAPTER_INDEX_MAP;
    struct IP_ADAPTER_INFO;
    struct IP_ADAPTER_MULTICAST_ADDRESS_XP;
    struct IP_ADAPTER_ORDER_MAP;
    struct IP_ADAPTER_PREFIX_XP;
    struct IP_ADAPTER_UNICAST_ADDRESS_LH;
    struct IP_ADAPTER_UNICAST_ADDRESS_XP;
    struct IP_ADAPTER_WINS_SERVER_ADDRESS_LH;
    struct IP_ADDRESS_PREFIX;
    struct IP_ADDRESS_STRING;
    struct IP_ADDR_STRING;
    struct IP_INTERFACE_INFO;
    struct IP_MCAST_COUNTER_INFO;
    struct IP_PER_ADAPTER_INFO_W2KSP1;
    struct IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
    struct IcmpHandle;
    struct MIBICMPINFO;
    struct MIBICMPSTATS;
    struct MIBICMPSTATS_EX_XPSP1;
    struct MIB_ANYCASTIPADDRESS_ROW;
    struct MIB_ANYCASTIPADDRESS_TABLE;
    struct MIB_BEST_IF;
    struct MIB_BOUNDARYROW;
    struct MIB_ICMP;
    struct MIB_ICMP_EX_XPSP1;
    struct MIB_IFNUMBER;
    struct MIB_IFROW;
    struct MIB_IFSTACK_ROW;
    struct MIB_IFSTACK_TABLE;
    struct MIB_IFSTATUS;
    struct MIB_IFTABLE;
    struct MIB_IF_ROW2;
    struct MIB_IF_TABLE2;
    struct MIB_INVERTEDIFSTACK_ROW;
    struct MIB_INVERTEDIFSTACK_TABLE;
    struct MIB_IPADDRROW_W2K;
    struct MIB_IPADDRROW_XP;
    struct MIB_IPADDRTABLE;
    struct MIB_IPDESTROW;
    struct MIB_IPDESTTABLE;
    struct MIB_IPFORWARDNUMBER;
    struct MIB_IPFORWARDROW;
    struct MIB_IPFORWARDTABLE;
    struct MIB_IPFORWARD_ROW2;
    struct MIB_IPFORWARD_TABLE2;
    struct MIB_IPINTERFACE_ROW;
    struct MIB_IPINTERFACE_TABLE;
    struct MIB_IPMCAST_BOUNDARY;
    struct MIB_IPMCAST_BOUNDARY_TABLE;
    struct MIB_IPMCAST_GLOBAL;
    struct MIB_IPMCAST_IF_ENTRY;
    struct MIB_IPMCAST_IF_TABLE;
    struct MIB_IPMCAST_MFE;
    struct MIB_IPMCAST_MFE_STATS;
    struct MIB_IPMCAST_MFE_STATS_EX_XP;
    struct MIB_IPMCAST_OIF_STATS_LH;
    struct MIB_IPMCAST_OIF_STATS_W2K;
    struct MIB_IPMCAST_OIF_W2K;
    struct MIB_IPMCAST_OIF_XP;
    struct MIB_IPMCAST_SCOPE;
    struct MIB_IPNETROW_LH;
    struct MIB_IPNETROW_W2K;
    struct MIB_IPNETTABLE;
    struct MIB_IPNET_ROW2;
    struct MIB_IPNET_TABLE2;
    struct MIB_IPPATH_ROW;
    struct MIB_IPPATH_TABLE;
    struct MIB_IPSTATS_LH;
    struct MIB_IPSTATS_W2K;
    struct MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES;
    struct MIB_MCAST_LIMIT_ROW;
    struct MIB_MFE_STATS_TABLE;
    struct MIB_MFE_STATS_TABLE_EX_XP;
    struct MIB_MFE_TABLE;
    struct MIB_MULTICASTIPADDRESS_ROW;
    struct MIB_MULTICASTIPADDRESS_TABLE;
    struct MIB_OPAQUE_INFO;
    struct MIB_OPAQUE_QUERY;
    struct MIB_PROXYARP;
    struct MIB_ROUTESTATE;
    struct MIB_TCP6ROW;
    struct MIB_TCP6ROW2;
    struct MIB_TCP6ROW_OWNER_MODULE;
    struct MIB_TCP6ROW_OWNER_PID;
    struct MIB_TCP6TABLE;
    struct MIB_TCP6TABLE2;
    struct MIB_TCP6TABLE_OWNER_MODULE;
    struct MIB_TCP6TABLE_OWNER_PID;
    struct MIB_TCPROW2;
    struct MIB_TCPROW_LH;
    struct MIB_TCPROW_OWNER_MODULE;
    struct MIB_TCPROW_OWNER_PID;
    struct MIB_TCPROW_W2K;
    struct MIB_TCPSTATS2;
    struct MIB_TCPSTATS_LH;
    struct MIB_TCPSTATS_W2K;
    struct MIB_TCPTABLE;
    struct MIB_TCPTABLE2;
    struct MIB_TCPTABLE_OWNER_MODULE;
    struct MIB_TCPTABLE_OWNER_PID;
    struct MIB_UDP6ROW;
    struct MIB_UDP6ROW2;
    struct MIB_UDP6ROW_OWNER_MODULE;
    struct MIB_UDP6ROW_OWNER_PID;
    struct MIB_UDP6TABLE;
    struct MIB_UDP6TABLE2;
    struct MIB_UDP6TABLE_OWNER_MODULE;
    struct MIB_UDP6TABLE_OWNER_PID;
    struct MIB_UDPROW;
    struct MIB_UDPROW2;
    struct MIB_UDPROW_OWNER_MODULE;
    struct MIB_UDPROW_OWNER_PID;
    struct MIB_UDPSTATS;
    struct MIB_UDPSTATS2;
    struct MIB_UDPTABLE;
    struct MIB_UDPTABLE2;
    struct MIB_UDPTABLE_OWNER_MODULE;
    struct MIB_UDPTABLE_OWNER_PID;
    struct MIB_UNICASTIPADDRESS_ROW;
    struct MIB_UNICASTIPADDRESS_TABLE;
    struct NDIS_INTERFACE_INFORMATION;
    struct NET_IF_ALIAS_LH;
    struct NET_IF_RCV_ADDRESS_LH;
    union NET_LUID_LH;
    struct NET_PHYSICAL_LOCATION_LH;
    struct PFLOGFRAME;
    struct PF_FILTER_DESCRIPTOR;
    struct PF_FILTER_STATS;
    struct PF_INTERFACE_STATS;
    struct PF_LATEBIND_INFO;
    struct TCPIP_OWNER_MODULE_BASIC_INFO;
    struct TCP_ESTATS_BANDWIDTH_ROD_v0;
    struct TCP_ESTATS_BANDWIDTH_RW_v0;
    struct TCP_ESTATS_DATA_ROD_v0;
    struct TCP_ESTATS_DATA_RW_v0;
    struct TCP_ESTATS_FINE_RTT_ROD_v0;
    struct TCP_ESTATS_FINE_RTT_RW_v0;
    struct TCP_ESTATS_OBS_REC_ROD_v0;
    struct TCP_ESTATS_OBS_REC_RW_v0;
    struct TCP_ESTATS_PATH_ROD_v0;
    struct TCP_ESTATS_PATH_RW_v0;
    struct TCP_ESTATS_REC_ROD_v0;
    struct TCP_ESTATS_REC_RW_v0;
    struct TCP_ESTATS_SEND_BUFF_ROD_v0;
    struct TCP_ESTATS_SEND_BUFF_RW_v0;
    struct TCP_ESTATS_SND_CONG_ROD_v0;
    struct TCP_ESTATS_SND_CONG_ROS_v0;
    struct TCP_ESTATS_SND_CONG_RW_v0;
    struct TCP_ESTATS_SYN_OPTS_ROS_v0;
    struct arp_send_reply;
    struct icmp_echo_reply;
    struct icmp_echo_reply32;
    struct icmpv6_echo_reply_lh;
    struct ip_interface_name_info_w2ksp1;
    struct ip_option_information;
    struct ip_option_information32;
    struct tcp_reserve_port_range;
#pragma endregion forward_declarations

#pragma region delegates
    using PIPINTERFACE_CHANGE_CALLBACK = void __stdcall(void*, Windows::Win32::NetworkManagement::IpHelper::MIB_IPINTERFACE_ROW*, Windows::Win32::NetworkManagement::IpHelper::MIB_NOTIFICATION_TYPE);
    using PUNICAST_IPADDRESS_CHANGE_CALLBACK = void __stdcall(void*, Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_ROW*, Windows::Win32::NetworkManagement::IpHelper::MIB_NOTIFICATION_TYPE);
    using PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK = void __stdcall(void*, Windows::Win32::NetworkManagement::IpHelper::MIB_UNICASTIPADDRESS_TABLE*);
    using PIPFORWARD_CHANGE_CALLBACK = void __stdcall(void*, Windows::Win32::NetworkManagement::IpHelper::MIB_IPFORWARD_ROW2*, Windows::Win32::NetworkManagement::IpHelper::MIB_NOTIFICATION_TYPE);
    using PTEREDO_PORT_CHANGE_CALLBACK = void __stdcall(void*, uint16_t, Windows::Win32::NetworkManagement::IpHelper::MIB_NOTIFICATION_TYPE);
    using PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK = void __stdcall(void*, Windows::Win32::Networking::WinSock::NL_NETWORK_CONNECTIVITY_HINT);
    using PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK = void __stdcall(void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
