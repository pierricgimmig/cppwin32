// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Networking_WinInet_0_H
#define WIN32_Windows_Win32_Networking_WinInet_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct HWND;
    struct PSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::Networking::WinInet
{
#pragma region enums
    enum class APP_CACHE_FINALIZE_STATE : int32_t
    {
        AppCacheFinalizeStateIncomplete = 0,
        AppCacheFinalizeStateManifestChange = 1,
        AppCacheFinalizeStateComplete = 2,
    };
    enum class APP_CACHE_STATE : int32_t
    {
        AppCacheStateNoUpdateNeeded = 0,
        AppCacheStateUpdateNeeded = 1,
        AppCacheStateUpdateNeededNew = 2,
        AppCacheStateUpdateNeededMasterOnly = 3,
    };
    enum class CACHE_CONFIG : uint32_t
    {
        CACHE_CONFIG_FORCE_CLEANUP_FC = 0x20,
        CACHE_CONFIG_DISK_CACHE_PATHS_FC = 0x40,
        CACHE_CONFIG_SYNC_MODE_FC = 0x80,
        CACHE_CONFIG_CONTENT_PATHS_FC = 0x100,
        CACHE_CONFIG_HISTORY_PATHS_FC = 0x400,
        CACHE_CONFIG_COOKIES_PATHS_FC = 0x200,
        CACHE_CONFIG_QUOTA_FC = 0x800,
        CACHE_CONFIG_USER_MODE_FC = 0x1000,
        CACHE_CONFIG_CONTENT_USAGE_FC = 0x2000,
        CACHE_CONFIG_STICKY_CONTENT_USAGE_FC = 0x4000,
    };
    enum class FORTCMD : int32_t
    {
        FORTCMD_LOGON = 1,
        FORTCMD_LOGOFF = 2,
        FORTCMD_CHG_PERSONALITY = 3,
    };
    enum class FORTSTAT : int32_t
    {
        FORTSTAT_INSTALLED = 1,
        FORTSTAT_LOGGEDON = 2,
    };
    enum class FTP_FLAGS : uint32_t
    {
        FTP_TRANSFER_TYPE_ASCII = 0x1,
        FTP_TRANSFER_TYPE_BINARY = 0x2,
        FTP_TRANSFER_TYPE_UNKNOWN = 0x0,
        INTERNET_FLAG_TRANSFER_ASCII = 0x1,
        INTERNET_FLAG_TRANSFER_BINARY = 0x2,
    };
    enum class GOPHER_TYPE : uint32_t
    {
        GOPHER_TYPE_ASK = 0x40000000,
        GOPHER_TYPE_BINARY = 0x200,
        GOPHER_TYPE_BITMAP = 0x4000,
        GOPHER_TYPE_CALENDAR = 0x80000,
        GOPHER_TYPE_CSO = 0x4,
        GOPHER_TYPE_DIRECTORY = 0x2,
        GOPHER_TYPE_DOS_ARCHIVE = 0x20,
        GOPHER_TYPE_ERROR = 0x8,
        GOPHER_TYPE_GIF = 0x1000,
        GOPHER_TYPE_GOPHER_PLUS = 0x80000000,
        GOPHER_TYPE_HTML = 0x20000,
        GOPHER_TYPE_IMAGE = 0x2000,
        GOPHER_TYPE_INDEX_SERVER = 0x80,
        GOPHER_TYPE_INLINE = 0x100000,
        GOPHER_TYPE_MAC_BINHEX = 0x10,
        GOPHER_TYPE_MOVIE = 0x8000,
        GOPHER_TYPE_PDF = 0x40000,
        GOPHER_TYPE_REDUNDANT = 0x400,
        GOPHER_TYPE_SOUND = 0x10000,
        GOPHER_TYPE_TELNET = 0x100,
        GOPHER_TYPE_TEXT_FILE = 0x1,
        GOPHER_TYPE_TN3270 = 0x800,
        GOPHER_TYPE_UNIX_UUENCODED = 0x40,
        GOPHER_TYPE_UNKNOWN = 0x20000000,
    };
    enum class HTTP_ADDREQ_FLAG : uint32_t
    {
        HTTP_ADDREQ_FLAG_ADD = 0x20000000,
        HTTP_ADDREQ_FLAG_ADD_IF_NEW = 0x10000000,
        HTTP_ADDREQ_FLAG_COALESCE = 0x40000000,
        HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = 0x40000000,
        HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = 0x1000000,
        HTTP_ADDREQ_FLAG_REPLACE = 0x80000000,
    };
    enum class HTTP_POLICY_EXTENSION_TYPE : int32_t
    {
        POLICY_EXTENSION_TYPE_NONE = 0,
        POLICY_EXTENSION_TYPE_WINHTTP = 1,
        POLICY_EXTENSION_TYPE_WININET = 2,
    };
    enum class HTTP_POLICY_EXTENSION_VERSION : int32_t
    {
        POLICY_EXTENSION_VERSION1 = 1,
    };
    enum class HTTP_PUSH_WAIT_TYPE : int32_t
    {
        HttpPushWaitEnableComplete = 0,
        HttpPushWaitReceiveComplete = 1,
        HttpPushWaitSendComplete = 2,
    };
    enum class HTTP_WEB_SOCKET_BUFFER_TYPE : int32_t
    {
        HTTP_WEB_SOCKET_BINARY_MESSAGE_TYPE = 0,
        HTTP_WEB_SOCKET_BINARY_FRAGMENT_TYPE = 1,
        HTTP_WEB_SOCKET_UTF8_MESSAGE_TYPE = 2,
        HTTP_WEB_SOCKET_UTF8_FRAGMENT_TYPE = 3,
        HTTP_WEB_SOCKET_CLOSE_TYPE = 4,
        HTTP_WEB_SOCKET_PING_TYPE = 5,
    };
    enum class HTTP_WEB_SOCKET_CLOSE_STATUS : int32_t
    {
        HTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000,
        HTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001,
        HTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002,
        HTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003,
        HTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005,
        HTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006,
        HTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007,
        HTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008,
        HTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009,
        HTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010,
        HTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011,
        HTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015,
    };
    enum class HTTP_WEB_SOCKET_OPERATION : int32_t
    {
        HTTP_WEB_SOCKET_SEND_OPERATION = 0,
        HTTP_WEB_SOCKET_RECEIVE_OPERATION = 1,
        HTTP_WEB_SOCKET_CLOSE_OPERATION = 2,
        HTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3,
    };
    enum class INTERNET_ACCESS_TYPE : uint32_t
    {
        INTERNET_OPEN_TYPE_DIRECT = 0x1,
        INTERNET_OPEN_TYPE_PRECONFIG = 0x0,
        INTERNET_OPEN_TYPE_PROXY = 0x3,
    };
    enum class INTERNET_AUTODIAL : uint32_t
    {
        INTERNET_AUTODIAL_FAILIFSECURITYCHECK = 0x4,
        INTERNET_AUTODIAL_FORCE_ONLINE = 0x1,
        INTERNET_AUTODIAL_FORCE_UNATTENDED = 0x2,
        INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT = 0x8,
    };
    enum class INTERNET_CONNECTION : uint32_t
    {
        INTERNET_CONNECTION_CONFIGURED = 0x40,
        INTERNET_CONNECTION_LAN_ = 0x2,
        INTERNET_CONNECTION_MODEM = 0x1,
        INTERNET_CONNECTION_MODEM_BUSY = 0x8,
        INTERNET_CONNECTION_OFFLINE_ = 0x20,
        INTERNET_CONNECTION_PROXY = 0x4,
        INTERNET_RAS_INSTALLED = 0x10,
    };
    enum class INTERNET_COOKIE_FLAGS : uint32_t
    {
        INTERNET_COOKIE_HTTPONLY = 0x2000,
        INTERNET_COOKIE_THIRD_PARTY = 0x10,
        INTERNET_FLAG_RESTRICTED_ZONE = 0x20000,
    };
    enum class INTERNET_PER_CONN : uint32_t
    {
        INTERNET_PER_CONN_AUTOCONFIG_URL = 0x4,
        INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 0x5,
        INTERNET_PER_CONN_FLAGS = 0x1,
        INTERNET_PER_CONN_PROXY_BYPASS = 0x3,
        INTERNET_PER_CONN_PROXY_SERVER = 0x2,
        INTERNET_PER_CONN_AUTOCONFIG_SECONDARY_URL = 0x6,
        INTERNET_PER_CONN_AUTOCONFIG_RELOAD_DELAY_MINS = 0x7,
        INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_TIME = 0x8,
        INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_URL = 0x9,
    };
    enum class INTERNET_SCHEME : int32_t
    {
        INTERNET_SCHEME_PARTIAL = -2,
        INTERNET_SCHEME_UNKNOWN = -1,
        INTERNET_SCHEME_DEFAULT = 0,
        INTERNET_SCHEME_FTP = 1,
        INTERNET_SCHEME_GOPHER = 2,
        INTERNET_SCHEME_HTTP = 3,
        INTERNET_SCHEME_HTTPS = 4,
        INTERNET_SCHEME_FILE = 5,
        INTERNET_SCHEME_NEWS = 6,
        INTERNET_SCHEME_MAILTO = 7,
        INTERNET_SCHEME_SOCKS = 8,
        INTERNET_SCHEME_JAVASCRIPT = 9,
        INTERNET_SCHEME_VBSCRIPT = 10,
        INTERNET_SCHEME_RES = 11,
        INTERNET_SCHEME_FIRST = 1,
        INTERNET_SCHEME_LAST = 11,
    };
    enum class INTERNET_STATE : uint32_t
    {
        INTERNET_STATE_CONNECTED = 0x1,
        INTERNET_STATE_DISCONNECTED = 0x2,
        INTERNET_STATE_DISCONNECTED_BY_USER = 0x10,
        INTERNET_STATE_IDLE = 0x100,
        INTERNET_STATE_BUSY = 0x200,
    };
    enum class InternetCookieState : int32_t
    {
        COOKIE_STATE_UNKNOWN = 0,
        COOKIE_STATE_ACCEPT = 1,
        COOKIE_STATE_PROMPT = 2,
        COOKIE_STATE_LEASH = 3,
        COOKIE_STATE_DOWNGRADE = 4,
        COOKIE_STATE_REJECT = 5,
        COOKIE_STATE_MAX = 5,
    };
    enum class PROXY_AUTO_DETECT_TYPE : uint32_t
    {
        PROXY_AUTO_DETECT_TYPE_DHCP = 0x1,
        PROXY_AUTO_DETECT_TYPE_DNS_A = 0x2,
    };
    enum class REQUEST_TIMES : int32_t
    {
        NameResolutionStart = 0,
        NameResolutionEnd = 1,
        ConnectionEstablishmentStart = 2,
        ConnectionEstablishmentEnd = 3,
        TLSHandshakeStart = 4,
        TLSHandshakeEnd = 5,
        HttpRequestTimeMax = 32,
    };
    enum class URL_CACHE_LIMIT_TYPE : int32_t
    {
        UrlCacheLimitTypeIE = 0,
        UrlCacheLimitTypeIETotal = 1,
        UrlCacheLimitTypeAppContainer = 2,
        UrlCacheLimitTypeAppContainerTotal = 3,
        UrlCacheLimitTypeNum = 4,
    };
    enum class WININET_SYNC_MODE : int32_t
    {
        WININET_SYNC_MODE_NEVER = 0,
        WININET_SYNC_MODE_ON_EXPIRY = 1,
        WININET_SYNC_MODE_ONCE_PER_SESSION = 2,
        WININET_SYNC_MODE_ALWAYS = 3,
        WININET_SYNC_MODE_AUTOMATIC = 4,
        WININET_SYNC_MODE_DEFAULT = 4,
    };
    enum class WPAD_CACHE_DELETE : int32_t
    {
        WPAD_CACHE_DELETE_CURRENT = 0,
        WPAD_CACHE_DELETE_ALL = 1,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct APP_CACHE_DOWNLOAD_ENTRY;
    struct APP_CACHE_DOWNLOAD_LIST;
    struct APP_CACHE_GROUP_INFO;
    struct APP_CACHE_GROUP_LIST;
    struct AUTO_PROXY_SCRIPT_BUFFER;
    struct AutoProxyHelperFunctions;
    struct AutoProxyHelperVtbl;
    struct COOKIE_DLG_INFO;
    struct CookieDecision;
    struct GOPHER_ABSTRACT_ATTRIBUTE_TYPE;
    struct GOPHER_ADMIN_ATTRIBUTE_TYPE;
    struct GOPHER_ASK_ATTRIBUTE_TYPE;
    struct GOPHER_ATTRIBUTE_TYPE;
    struct GOPHER_FIND_DATAA;
    struct GOPHER_FIND_DATAW;
    struct GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;
    struct GOPHER_LOCATION_ATTRIBUTE_TYPE;
    struct GOPHER_MOD_DATE_ATTRIBUTE_TYPE;
    struct GOPHER_ORGANIZATION_ATTRIBUTE_TYPE;
    struct GOPHER_PROVIDER_ATTRIBUTE_TYPE;
    struct GOPHER_SCORE_ATTRIBUTE_TYPE;
    struct GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;
    struct GOPHER_SITE_ATTRIBUTE_TYPE;
    struct GOPHER_TIMEZONE_ATTRIBUTE_TYPE;
    struct GOPHER_TTL_ATTRIBUTE_TYPE;
    struct GOPHER_UNKNOWN_ATTRIBUTE_TYPE;
    struct GOPHER_VERONICA_ATTRIBUTE_TYPE;
    struct GOPHER_VERSION_ATTRIBUTE_TYPE;
    struct GOPHER_VIEW_ATTRIBUTE_TYPE;
    struct HTTP_PUSH_NOTIFICATION_STATUS;
    struct HTTP_PUSH_TRANSPORT_SETTING;
    struct HTTP_PUSH_WAIT_HANDLE;
    struct HTTP_REQUEST_TIMES;
    struct HTTP_WEB_SOCKET_ASYNC_RESULT;
    struct INTERNET_ASYNC_RESULT;
    struct INTERNET_AUTH_NOTIFY_DATA;
    struct INTERNET_BUFFERSA;
    struct INTERNET_BUFFERSW;
    struct INTERNET_CACHE_CONFIG_INFOA;
    struct INTERNET_CACHE_CONFIG_INFOW;
    struct INTERNET_CACHE_CONFIG_PATH_ENTRYA;
    struct INTERNET_CACHE_CONFIG_PATH_ENTRYW;
    struct INTERNET_CACHE_CONTAINER_INFOA;
    struct INTERNET_CACHE_CONTAINER_INFOW;
    struct INTERNET_CACHE_ENTRY_INFOA;
    struct INTERNET_CACHE_ENTRY_INFOW;
    struct INTERNET_CACHE_GROUP_INFOA;
    struct INTERNET_CACHE_GROUP_INFOW;
    struct INTERNET_CACHE_TIMESTAMPS;
    struct INTERNET_CALLBACK_COOKIE;
    struct INTERNET_CERTIFICATE_INFO;
    struct INTERNET_CONNECTED_INFO;
    struct INTERNET_COOKIE;
    struct INTERNET_COOKIE2;
    struct INTERNET_CREDENTIALS;
    struct INTERNET_DIAGNOSTIC_SOCKET_INFO;
    struct INTERNET_DOWNLOAD_MODE_HANDLE;
    struct INTERNET_END_BROWSER_SESSION_DATA;
    struct INTERNET_PER_CONN_OPTIONA;
    struct INTERNET_PER_CONN_OPTIONW;
    struct INTERNET_PER_CONN_OPTION_LISTA;
    struct INTERNET_PER_CONN_OPTION_LISTW;
    struct INTERNET_PREFETCH_STATUS;
    struct INTERNET_PROXY_INFO;
    struct INTERNET_SECURITY_CONNECTION_INFO;
    struct INTERNET_SECURITY_INFO;
    struct INTERNET_SERVER_CONNECTION_STATE;
    struct INTERNET_VERSION_INFO;
    struct IncomingCookieState;
    struct InternetCookieHistory;
    struct OutgoingCookieState;
    struct ProofOfPossessionCookieInfo;
    struct ProofOfPossessionCookieInfoManager;
    struct URLCACHE_ENTRY_INFO;
    struct URL_COMPONENTSA;
    struct URL_COMPONENTSW;
    struct WININET_PROXY_INFO;
    struct WININET_PROXY_INFO_LIST;
    struct IDialBranding;
    struct IDialEngine;
    struct IDialEventSink;
    struct IProofOfPossessionCookieInfoManager;
    struct IProofOfPossessionCookieInfoManager2;
#pragma endregion forward_declarations

#pragma region delegates
    using LPINTERNET_STATUS_CALLBACK = void __stdcall(void*, size_t, uint32_t, void*, uint32_t);
    using GOPHER_ATTRIBUTE_ENUMERATOR = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Networking::WinInet::GOPHER_ATTRIBUTE_TYPE*, uint32_t);
    using PFN_AUTH_NOTIFY = uint32_t __stdcall(size_t, uint32_t, void*);
    using pfnInternetInitializeAutoProxyDll = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Foundation::PSTR, Windows::Win32::Foundation::PSTR, Windows::Win32::Networking::WinInet::AutoProxyHelperFunctions*, Windows::Win32::Networking::WinInet::AUTO_PROXY_SCRIPT_BUFFER*);
    using pfnInternetDeInitializeAutoProxyDll = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint32_t);
    using pfnInternetGetProxyInfo = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Foundation::PSTR, uint32_t, Windows::Win32::Foundation::PSTR, uint32_t, Windows::Win32::Foundation::PSTR*, uint32_t*);
    using PFN_DIAL_HANDLER = uint32_t __stdcall(Windows::Win32::Foundation::HWND, Windows::Win32::Foundation::PSTR, uint32_t, uint32_t*);
    using CACHE_OPERATOR = Windows::Win32::Foundation::BOOL __stdcall(Windows::Win32::Networking::WinInet::INTERNET_CACHE_ENTRY_INFOA*, uint32_t*, void*);
    using HTTP_POLICY_EXTENSION_INIT = uint32_t __stdcall(Windows::Win32::Networking::WinInet::HTTP_POLICY_EXTENSION_VERSION, Windows::Win32::Networking::WinInet::HTTP_POLICY_EXTENSION_TYPE, void*, uint32_t);
    using HTTP_POLICY_EXTENSION_SHUTDOWN = uint32_t __stdcall(Windows::Win32::Networking::WinInet::HTTP_POLICY_EXTENSION_TYPE);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
