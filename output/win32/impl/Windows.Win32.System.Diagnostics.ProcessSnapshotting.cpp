// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_Diagnostics_ProcessSnapshotting_2_H
#define WIN32_Windows_Win32_System_Diagnostics_ProcessSnapshotting_2_H
#include "win32/Windows.Win32.System.Diagnostics.ProcessSnapshotting.h"
#include "win32/impl/Windows.Win32.System.Diagnostics.ProcessSnapshotting.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_PssCaptureSnapshot(win32::Windows::Win32::Foundation::HANDLE ProcessHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::PSS_CAPTURE_FLAGS CaptureFlags, uint32_t ThreadContextFlags, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSS* SnapshotHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(CaptureFlags);
        ORBIT_TRACK_PARAM(ThreadContextFlags);
        ORBIT_TRACK_PARAM(SnapshotHandle);

        auto win32_impl_result = g_api_table.PssCaptureSnapshot(ProcessHandle, CaptureFlags, ThreadContextFlags, SnapshotHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssFreeSnapshot(win32::Windows::Win32::Foundation::HANDLE ProcessHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSS SnapshotHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ProcessHandle);
        ORBIT_TRACK_PARAM(SnapshotHandle);

        auto win32_impl_result = g_api_table.PssFreeSnapshot(ProcessHandle, SnapshotHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssQuerySnapshot(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSS SnapshotHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::PSS_QUERY_INFORMATION_CLASS InformationClass, void* Buffer, uint32_t BufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SnapshotHandle);
        ORBIT_TRACK_PARAM(InformationClass);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);

        auto win32_impl_result = g_api_table.PssQuerySnapshot(SnapshotHandle, InformationClass, Buffer, BufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssWalkSnapshot(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSS SnapshotHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::PSS_WALK_INFORMATION_CLASS InformationClass, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSSWALK WalkMarkerHandle, void* Buffer, uint32_t BufferLength) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SnapshotHandle);
        ORBIT_TRACK_PARAM(InformationClass);
        ORBIT_TRACK_PARAM(WalkMarkerHandle);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(BufferLength);

        auto win32_impl_result = g_api_table.PssWalkSnapshot(SnapshotHandle, InformationClass, WalkMarkerHandle, Buffer, BufferLength);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssDuplicateSnapshot(win32::Windows::Win32::Foundation::HANDLE SourceProcessHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSS SnapshotHandle, win32::Windows::Win32::Foundation::HANDLE TargetProcessHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSS* TargetSnapshotHandle, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::PSS_DUPLICATE_FLAGS Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SourceProcessHandle);
        ORBIT_TRACK_PARAM(SnapshotHandle);
        ORBIT_TRACK_PARAM(TargetProcessHandle);
        ORBIT_TRACK_PARAM(TargetSnapshotHandle);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.PssDuplicateSnapshot(SourceProcessHandle, SnapshotHandle, TargetProcessHandle, TargetSnapshotHandle, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssWalkMarkerCreate(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::PSS_ALLOCATOR* Allocator, win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSSWALK* WalkMarkerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Allocator);
        ORBIT_TRACK_PARAM(WalkMarkerHandle);

        auto win32_impl_result = g_api_table.PssWalkMarkerCreate(Allocator, WalkMarkerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssWalkMarkerFree(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSSWALK WalkMarkerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WalkMarkerHandle);

        auto win32_impl_result = g_api_table.PssWalkMarkerFree(WalkMarkerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssWalkMarkerGetPosition(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSSWALK WalkMarkerHandle, size_t* Position) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WalkMarkerHandle);
        ORBIT_TRACK_PARAM(Position);

        auto win32_impl_result = g_api_table.PssWalkMarkerGetPosition(WalkMarkerHandle, Position);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssWalkMarkerSetPosition(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSSWALK WalkMarkerHandle, size_t Position) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WalkMarkerHandle);
        ORBIT_TRACK_PARAM(Position);

        auto win32_impl_result = g_api_table.PssWalkMarkerSetPosition(WalkMarkerHandle, Position);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_PssWalkMarkerSeekToBeginning(win32::Windows::Win32::System::Diagnostics::ProcessSnapshotting::HPSSWALK WalkMarkerHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(WalkMarkerHandle);

        auto win32_impl_result = g_api_table.PssWalkMarkerSeekToBeginning(WalkMarkerHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
