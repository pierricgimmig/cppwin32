// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Devices_Display_0_H
#define WIN32_Windows_Win32_Devices_Display_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Devices::Display
{
#pragma region enums
    enum class AR_STATE : int32_t
    {
        AR_ENABLED = 0,
        AR_DISABLED = 1,
        AR_SUPPRESSED = 2,
        AR_REMOTESESSION = 4,
        AR_MULTIMON = 8,
        AR_NOSENSOR = 16,
        AR_NOT_SUPPORTED = 32,
        AR_DOCKED = 64,
        AR_LAPTOP = 128,
    };
    enum class BACKLIGHT_OPTIMIZATION_LEVEL : int32_t
    {
        BacklightOptimizationDisable = 0,
        BacklightOptimizationDesktop = 1,
        BacklightOptimizationDynamic = 2,
        BacklightOptimizationDimmed = 3,
        BacklightOptimizationEDR = 4,
    };
    enum class BRIGHTNESS_INTERFACE_VERSION : int32_t
    {
        BRIGHTNESS_INTERFACE_VERSION_1 = 1,
        BRIGHTNESS_INTERFACE_VERSION_2 = 2,
        BRIGHTNESS_INTERFACE_VERSION_3 = 3,
    };
    enum class BlackScreenDiagnosticsCalloutParam : int32_t
    {
        BlackScreenDiagnosticsData = 1,
        BlackScreenDisplayRecovery = 2,
    };
    enum class COLORSPACE_TRANSFORM_DATA_TYPE : int32_t
    {
        COLORSPACE_TRANSFORM_DATA_TYPE_FIXED_POINT = 0,
        COLORSPACE_TRANSFORM_DATA_TYPE_FLOAT = 1,
    };
    enum class COLORSPACE_TRANSFORM_STAGE_CONTROL : int32_t
    {
        ColorSpaceTransformStageControl_No_Change = 0,
        ColorSpaceTransformStageControl_Enable = 1,
        ColorSpaceTransformStageControl_Bypass = 2,
    };
    enum class COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION : int32_t
    {
        COLORSPACE_TRANSFORM_VERSION_DEFAULT = 0,
        COLORSPACE_TRANSFORM_VERSION_1 = 1,
        COLORSPACE_TRANSFORM_VERSION_NOT_SUPPORTED = 0,
    };
    enum class COLORSPACE_TRANSFORM_TYPE : int32_t
    {
        COLORSPACE_TRANSFORM_TYPE_UNINITIALIZED = 0,
        COLORSPACE_TRANSFORM_TYPE_DEFAULT = 1,
        COLORSPACE_TRANSFORM_TYPE_RGB256x3x16 = 2,
        COLORSPACE_TRANSFORM_TYPE_DXGI_1 = 3,
        COLORSPACE_TRANSFORM_TYPE_MATRIX_3x4 = 4,
        COLORSPACE_TRANSFORM_TYPE_MATRIX_V2 = 5,
    };
    enum class DSI_CONTROL_TRANSMISSION_MODE : int32_t
    {
        DCT_DEFAULT = 0,
        DCT_FORCE_LOW_POWER = 1,
        DCT_FORCE_HIGH_PERFORMANCE = 2,
    };
    enum class MC_COLOR_TEMPERATURE : int32_t
    {
        MC_COLOR_TEMPERATURE_UNKNOWN = 0,
        MC_COLOR_TEMPERATURE_4000K = 1,
        MC_COLOR_TEMPERATURE_5000K = 2,
        MC_COLOR_TEMPERATURE_6500K = 3,
        MC_COLOR_TEMPERATURE_7500K = 4,
        MC_COLOR_TEMPERATURE_8200K = 5,
        MC_COLOR_TEMPERATURE_9300K = 6,
        MC_COLOR_TEMPERATURE_10000K = 7,
        MC_COLOR_TEMPERATURE_11500K = 8,
    };
    enum class MC_DISPLAY_TECHNOLOGY_TYPE : int32_t
    {
        MC_SHADOW_MASK_CATHODE_RAY_TUBE = 0,
        MC_APERTURE_GRILL_CATHODE_RAY_TUBE = 1,
        MC_THIN_FILM_TRANSISTOR = 2,
        MC_LIQUID_CRYSTAL_ON_SILICON = 3,
        MC_PLASMA = 4,
        MC_ORGANIC_LIGHT_EMITTING_DIODE = 5,
        MC_ELECTROLUMINESCENT = 6,
        MC_MICROELECTROMECHANICAL = 7,
        MC_FIELD_EMISSION_DEVICE = 8,
    };
    enum class MC_DRIVE_TYPE : int32_t
    {
        MC_RED_DRIVE = 0,
        MC_GREEN_DRIVE = 1,
        MC_BLUE_DRIVE = 2,
    };
    enum class MC_GAIN_TYPE : int32_t
    {
        MC_RED_GAIN = 0,
        MC_GREEN_GAIN = 1,
        MC_BLUE_GAIN = 2,
    };
    enum class MC_POSITION_TYPE : int32_t
    {
        MC_HORIZONTAL_POSITION = 0,
        MC_VERTICAL_POSITION = 1,
    };
    enum class MC_SIZE_TYPE : int32_t
    {
        MC_WIDTH = 0,
        MC_HEIGHT = 1,
    };
    enum class MC_VCP_CODE_TYPE : int32_t
    {
        MC_MOMENTARY = 0,
        MC_SET_PARAMETER = 1,
    };
    enum class ORIENTATION_PREFERENCE : int32_t
    {
        ORIENTATION_PREFERENCE_NONE = 0,
        ORIENTATION_PREFERENCE_LANDSCAPE = 1,
        ORIENTATION_PREFERENCE_PORTRAIT = 2,
        ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4,
        ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8,
    };
    enum class OUTPUT_COLOR_ENCODING : int32_t
    {
        OUTPUT_COLOR_ENCODING_RGB = 0,
        OUTPUT_COLOR_ENCODING_YCBCR444 = 1,
        OUTPUT_COLOR_ENCODING_YCBCR422 = 2,
        OUTPUT_COLOR_ENCODING_YCBCR420 = 3,
        OUTPUT_COLOR_ENCODING_INTENSITY = 4,
        OUTPUT_COLOR_ENCODING_FORCE_UINT32 = -1,
    };
    enum class OUTPUT_WIRE_COLOR_SPACE_TYPE : int32_t
    {
        OUTPUT_WIRE_COLOR_SPACE_G22_P709 = 0,
        OUTPUT_WIRE_COLOR_SPACE_RESERVED = 4,
        OUTPUT_WIRE_COLOR_SPACE_G2084_P2020 = 12,
        OUTPUT_WIRE_COLOR_SPACE_G22_P709_WCG = 30,
        OUTPUT_WIRE_COLOR_SPACE_G22_P2020 = 31,
        OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_HDR10PLUS = 32,
        OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_DVLL = 33,
    };
    enum class VIDEO_BANK_TYPE : int32_t
    {
        VideoNotBanked = 0,
        VideoBanked1RW = 1,
        VideoBanked1R1W = 2,
        VideoBanked2RW = 3,
        NumVideoBankTypes = 4,
    };
    enum class VIDEO_POWER_STATE : int32_t
    {
        VideoPowerUnspecified = 0,
        VideoPowerOn = 1,
        VideoPowerStandBy = 2,
        VideoPowerSuspend = 3,
        VideoPowerOff = 4,
        VideoPowerHibernate = 5,
        VideoPowerShutdown = 6,
        VideoPowerMaximum = 7,
    };
    enum class VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE : int32_t
    {
        VideoPowerNotifyCallout = 1,
        VideoEnumChildPdoNotifyCallout = 3,
        VideoFindAdapterCallout = 4,
        VideoPnpNotifyCallout = 7,
        VideoDxgkDisplaySwitchCallout = 8,
        VideoDxgkFindAdapterTdrCallout = 10,
        VideoDxgkHardwareProtectionTeardown = 11,
        VideoRepaintDesktop = 12,
        VideoUpdateCursor = 13,
        VideoDisableMultiPlaneOverlay = 14,
        VideoDesktopDuplicationChange = 15,
        VideoBlackScreenDiagnostics = 16,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct Adapter;
    struct Adapters;
    struct BACKLIGHT_REDUCTION_GAMMA_RAMP;
    struct BANK_POSITION;
    struct BRIGHTNESS_LEVEL;
    struct BRIGHTNESS_NIT_RANGE;
    struct BRIGHTNESS_NIT_RANGES;
    struct CHAR_IMAGE_INFO;
    struct CHROMATICITY_COORDINATE;
    struct COLORSPACE_TRANSFORM;
    struct COLORSPACE_TRANSFORM_1DLUT_CAP;
    struct COLORSPACE_TRANSFORM_3x4;
    struct COLORSPACE_TRANSFORM_DATA_CAP;
    struct COLORSPACE_TRANSFORM_MATRIX_CAP;
    struct COLORSPACE_TRANSFORM_MATRIX_V2;
    struct COLORSPACE_TRANSFORM_SET_INPUT;
    struct COLORSPACE_TRANSFORM_TARGET_CAPS;
    struct DISPLAY_BRIGHTNESS;
    struct DXGK_WIN32K_PARAM_DATA;
    struct DisplayMode;
    struct DisplayModes;
    struct ENG_EVENT;
    struct FONT_IMAGE_INFO;
    struct FSCNTL_SCREEN_INFO;
    struct FSVIDEO_COPY_FRAME_BUFFER;
    struct FSVIDEO_CURSOR_POSITION;
    struct FSVIDEO_MODE_INFORMATION;
    struct FSVIDEO_REVERSE_MOUSE_POINTER;
    struct FSVIDEO_SCREEN_INFORMATION;
    struct FSVIDEO_WRITE_TO_FRAME_BUFFER;
    struct GAMMA_RAMP_DXGI_1;
    struct GAMMA_RAMP_RGB;
    struct GAMMA_RAMP_RGB256x3x16;
    struct INDIRECT_DISPLAY_INFO;
    struct MC_TIMING_REPORT;
    struct MIPI_DSI_CAPS;
    struct MIPI_DSI_PACKET;
    struct MIPI_DSI_RESET;
    struct MIPI_DSI_TRANSMISSION;
    struct OUTPUT_WIRE_FORMAT;
    struct PANEL_BRIGHTNESS_SENSOR_DATA;
    struct PANEL_GET_BACKLIGHT_REDUCTION;
    struct PANEL_GET_BRIGHTNESS;
    struct PANEL_QUERY_BRIGHTNESS_CAPS;
    struct PANEL_QUERY_BRIGHTNESS_RANGES;
    struct PANEL_SET_BACKLIGHT_OPTIMIZATION;
    struct PANEL_SET_BRIGHTNESS;
    struct PANEL_SET_BRIGHTNESS_STATE;
    struct PHYSICAL_MONITOR;
    struct SET_ACTIVE_COLOR_PROFILE_NAME;
    struct Sources;
    struct VGA_CHAR;
    struct VIDEO_BANK_SELECT;
    struct VIDEO_BRIGHTNESS_POLICY;
    struct VIDEO_CLUT;
    struct VIDEO_CLUTDATA;
    struct VIDEO_COLOR_CAPABILITIES;
    struct VIDEO_COLOR_LUT_DATA;
    struct VIDEO_CURSOR_ATTRIBUTES;
    struct VIDEO_CURSOR_POSITION;
    struct VIDEO_DEVICE_SESSION_STATUS;
    struct VIDEO_HARDWARE_STATE;
    struct VIDEO_HARDWARE_STATE_HEADER;
    struct VIDEO_LOAD_FONT_INFORMATION;
    struct VIDEO_LUT_RGB256WORDS;
    struct VIDEO_MEMORY;
    struct VIDEO_MEMORY_INFORMATION;
    struct VIDEO_MODE;
    struct VIDEO_MODE_INFORMATION;
    struct VIDEO_MONITOR_DESCRIPTOR;
    struct VIDEO_NUM_MODES;
    struct VIDEO_PALETTE_DATA;
    struct VIDEO_PERFORMANCE_COUNTER;
    struct VIDEO_POINTER_ATTRIBUTES;
    struct VIDEO_POINTER_CAPABILITIES;
    struct VIDEO_POINTER_POSITION;
    struct VIDEO_POWER_MANAGEMENT;
    struct VIDEO_PUBLIC_ACCESS_RANGES;
    struct VIDEO_QUERY_PERFORMANCE_COUNTER;
    struct VIDEO_REGISTER_VDM;
    struct VIDEO_SHARE_MEMORY;
    struct VIDEO_SHARE_MEMORY_INFORMATION;
    struct VIDEO_VDM;
    struct VIDEO_WIN32K_CALLBACKS;
    struct VIDEO_WIN32K_CALLBACKS_PARAMS;
    struct ICloneViewHelper;
    struct IViewHelper;
#pragma endregion forward_declarations

#pragma region delegates
    using PVIDEO_WIN32K_CALLOUT = void __stdcall(void*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
