// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_System_WindowsProgramming_0_H
#define WIN32_Windows_Win32_System_WindowsProgramming_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct BOOL;
    struct BOOLEAN;
    struct HANDLE;
    struct HINSTANCE;
    struct HRESULT;
    struct HWND;
    struct LPARAM;
    struct PSTR;
    struct PWSTR;
}
WIN32_EXPORT namespace win32::Windows::Win32::System::WindowsProgramming
{
#pragma region enums
    enum class BrowserNavConstants : int32_t
    {
        navOpenInNewWindow = 1,
        navNoHistory = 2,
        navNoReadFromCache = 4,
        navNoWriteToCache = 8,
        navAllowAutosearch = 16,
        navBrowserBar = 32,
        navHyperlink = 64,
        navEnforceRestricted = 128,
        navNewWindowsManaged = 256,
        navUntrustedForDownload = 512,
        navTrustedForActiveX = 1024,
        navOpenInNewTab = 2048,
        navOpenInBackgroundTab = 4096,
        navKeepWordWheelText = 8192,
        navVirtualTab = 16384,
        navBlockRedirectsXDomain = 32768,
        navOpenNewForegroundTab = 65536,
        navTravelLogScreenshot = 131072,
        navDeferUnload = 262144,
        navSpeculative = 524288,
        navSuggestNewWindow = 1048576,
        navSuggestNewTab = 2097152,
        navReserved1 = 4194304,
        navHomepageNavigate = 8388608,
        navRefresh = 16777216,
        navHostNavigation = 33554432,
        navReserved2 = 67108864,
        navReserved3 = 134217728,
        navReserved4 = 268435456,
        navReserved5 = 536870912,
        navReserved6 = 1073741824,
        navReserved7 = -2147483648,
    };
    enum class CameraUIControlCaptureMode : int32_t
    {
        PhotoOrVideo = 0,
        Photo = 1,
        Video = 2,
    };
    enum class CameraUIControlLinearSelectionMode : int32_t
    {
        Single = 0,
        Multiple = 1,
    };
    enum class CameraUIControlMode : int32_t
    {
        Browse = 0,
        Linear = 1,
    };
    enum class CameraUIControlPhotoFormat : int32_t
    {
        Jpeg = 0,
        Png = 1,
        JpegXR = 2,
    };
    enum class CameraUIControlVideoFormat : int32_t
    {
        Mp4 = 0,
        Wmv = 1,
    };
    enum class CameraUIControlViewType : int32_t
    {
        SingleItem = 0,
        ItemList = 1,
    };
    enum class CommandStateChangeConstants : int32_t
    {
        CSC_UPDATECOMMANDS = -1,
        CSC_NAVIGATEFORWARD = 1,
        CSC_NAVIGATEBACK = 2,
    };
    enum class DECISION_LOCATION : int32_t
    {
        DECISION_LOCATION_REFRESH_GLOBAL_DATA = 0,
        DECISION_LOCATION_PARAMETER_VALIDATION = 1,
        DECISION_LOCATION_AUDIT = 2,
        DECISION_LOCATION_FAILED_CONVERT_GUID = 3,
        DECISION_LOCATION_ENTERPRISE_DEFINED_CLASS_ID = 4,
        DECISION_LOCATION_GLOBAL_BUILT_IN_LIST = 5,
        DECISION_LOCATION_PROVIDER_BUILT_IN_LIST = 6,
        DECISION_LOCATION_ENFORCE_STATE_LIST = 7,
        DECISION_LOCATION_NOT_FOUND = 8,
        DECISION_LOCATION_UNKNOWN = 9,
    };
    enum class FEATURE_CHANGE_TIME : int32_t
    {
        FEATURE_CHANGE_TIME_READ = 0,
        FEATURE_CHANGE_TIME_MODULE_RELOAD = 1,
        FEATURE_CHANGE_TIME_SESSION = 2,
        FEATURE_CHANGE_TIME_REBOOT = 3,
    };
    enum class FEATURE_ENABLED_STATE : int32_t
    {
        FEATURE_ENABLED_STATE_DEFAULT = 0,
        FEATURE_ENABLED_STATE_DISABLED = 1,
        FEATURE_ENABLED_STATE_ENABLED = 2,
    };
    enum class FILE_INFORMATION_CLASS : int32_t
    {
        FileDirectoryInformation = 1,
    };
    enum class KEY_SET_INFORMATION_CLASS : int32_t
    {
        KeyWriteTimeInformation = 0,
        KeyWow64FlagsInformation = 1,
        KeyControlFlagsInformation = 2,
        KeySetVirtualizationInformation = 3,
        KeySetDebugInformation = 4,
        KeySetHandleTagsInformation = 5,
        MaxKeySetInfoClass = 6,
    };
    enum class NT_CREATE_FILE_DISPOSITION : uint32_t
    {
        FILE_SUPERSEDE = 0x0,
        FILE_CREATE = 0x2,
        FILE_OPEN = 0x1,
        FILE_OPEN_IF = 0x3,
        FILE_OVERWRITE = 0x4,
        FILE_OVERWRITE_IF = 0x5,
    };
    enum class NewProcessCauseConstants : int32_t
    {
        ProtectedModeRedirect = 1,
    };
    enum class OBJECT_INFORMATION_CLASS : int32_t
    {
        ObjectBasicInformation = 0,
        ObjectTypeInformation = 2,
    };
    enum class PROC_THREAD_ATTRIBUTE_NUM : int32_t
    {
        ProcThreadAttributeParentProcess = 0,
        ProcThreadAttributeHandleList = 2,
        ProcThreadAttributeGroupAffinity = 3,
        ProcThreadAttributePreferredNode = 4,
        ProcThreadAttributeIdealProcessor = 5,
        ProcThreadAttributeUmsThread = 6,
        ProcThreadAttributeMitigationPolicy = 7,
        ProcThreadAttributeSecurityCapabilities = 9,
        ProcThreadAttributeProtectionLevel = 11,
        ProcThreadAttributeJobList = 13,
        ProcThreadAttributeChildProcessPolicy = 14,
        ProcThreadAttributeAllApplicationPackagesPolicy = 15,
        ProcThreadAttributeWin32kFilter = 16,
        ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
        ProcThreadAttributeDesktopAppPolicy = 18,
        ProcThreadAttributePseudoConsole = 22,
        ProcThreadAttributeMitigationAuditPolicy = 24,
        ProcThreadAttributeMachineType = 25,
        ProcThreadAttributeComponentFilter = 26,
        ProcThreadAttributeEnableOptionalXStateFeatures = 27,
    };
    enum class RefreshConstants : int32_t
    {
        REFRESH_NORMAL = 0,
        REFRESH_IFEXPIRED = 1,
        REFRESH_COMPLETELY = 3,
    };
    enum class SYSTEM_INFORMATION_CLASS : int32_t
    {
        SystemBasicInformation = 0,
        SystemPerformanceInformation = 2,
        SystemTimeOfDayInformation = 3,
        SystemProcessInformation = 5,
        SystemProcessorPerformanceInformation = 8,
        SystemInterruptInformation = 23,
        SystemExceptionInformation = 33,
        SystemRegistryQuotaInformation = 37,
        SystemLookasideInformation = 45,
        SystemCodeIntegrityInformation = 103,
        SystemPolicyInformation = 134,
    };
    enum class SecureLockIconConstants : int32_t
    {
        secureLockIconUnsecure = 0,
        secureLockIconMixed = 1,
        secureLockIconSecureUnknownBits = 2,
        secureLockIconSecure40Bit = 3,
        secureLockIconSecure56Bit = 4,
        secureLockIconSecureFortezza = 5,
        secureLockIconSecure128Bit = 6,
    };
    enum class TDIENTITY_ENTITY_TYPE : uint32_t
    {
        GENERIC_ENTITY = 0x0,
        AT_ENTITY = 0x280,
        CL_NL_ENTITY = 0x301,
        CO_NL_ENTITY = 0x300,
        CL_TL_ENTITY = 0x401,
        CO_TL_ENTITY = 0x400,
        ER_ENTITY = 0x380,
        IF_ENTITY = 0x200,
    };
    enum class TDI_TL_IO_CONTROL_TYPE : int32_t
    {
        EndpointIoControlType = 0,
        SetSockOptIoControlType = 1,
        GetSockOptIoControlType = 2,
        SocketIoControlType = 3,
    };
    enum class VALUENAME : int32_t
    {
        VALUENAME_UNKNOWN = 0,
        VALUENAME_ENTERPRISE_DEFINED_CLASS_ID = 1,
        VALUENAME_BUILT_IN_LIST = 2,
    };
    enum class WINSTATIONINFOCLASS : int32_t
    {
        WinStationInformation = 8,
    };
    enum class WLDP_HOST : int32_t
    {
        WLDP_HOST_RUNDLL32 = 0,
        WLDP_HOST_SVCHOST = 1,
        WLDP_HOST_MAX = 2,
    };
    enum class WLDP_HOST_ID : int32_t
    {
        WLDP_HOST_ID_UNKNOWN = 0,
        WLDP_HOST_ID_GLOBAL = 1,
        WLDP_HOST_ID_VBA = 2,
        WLDP_HOST_ID_WSH = 3,
        WLDP_HOST_ID_POWERSHELL = 4,
        WLDP_HOST_ID_IE = 5,
        WLDP_HOST_ID_MSI = 6,
        WLDP_HOST_ID_ALL = 7,
        WLDP_HOST_ID_MAX = 8,
    };
    enum class WLDP_KEY : int32_t
    {
        KEY_UNKNOWN = 0,
        KEY_OVERRIDE = 1,
        KEY_ALL_KEYS = 2,
    };
    enum class WLDP_POLICY_SETTING : int32_t
    {
        WLDP_POLICY_SETTING_AV_PERF_MODE = 1000,
    };
    enum class WLDP_WINDOWS_LOCKDOWN_MODE : int32_t
    {
        WLDP_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0,
        WLDP_WINDOWS_LOCKDOWN_MODE_TRIAL = 1,
        WLDP_WINDOWS_LOCKDOWN_MODE_LOCKED = 2,
        WLDP_WINDOWS_LOCKDOWN_MODE_MAX = 3,
    };
    enum class WLDP_WINDOWS_LOCKDOWN_RESTRICTION : int32_t
    {
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0,
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 1,
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 2,
        WLDP_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 3,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct ACTCTX_SECTION_KEYED_DATA_2600;
    struct ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
    struct ACTIVATION_CONTEXT_BASIC_INFORMATION;
    struct CABINFOA;
    struct CABINFOW;
    struct CLIENT_ID;
    struct COPYFILE2_EXTENDED_PARAMETERS_V2;
    struct CScriptErrorList;
    struct CameraUIControl;
    struct DATETIME;
    struct DCICMD;
    struct DCICREATEINPUT;
    struct DCIENUMINPUT;
    struct DCIOFFSCREEN;
    struct DCIOVERLAY;
    struct DCISURFACEINFO;
    struct DELAYLOAD_INFO;
    struct DELAYLOAD_PROC_DESCRIPTOR;
    struct DefaultBrowserSyncSettings;
    struct EditionUpgradeBroker;
    struct EditionUpgradeHelper;
    struct FEATURE_ERROR;
    struct FEATURE_STATE_CHANGE_SUBSCRIPTION;
    struct FH_SERVICE_PIPE_HANDLE;
    struct FILE_CASE_SENSITIVE_INFO;
    struct FILE_DISPOSITION_INFO_EX;
    struct HWINWATCH;
    struct HW_PROFILE_INFOA;
    struct HW_PROFILE_INFOW;
    struct IMEPROA;
    struct IMEPROW;
    struct IMESTRUCT;
    struct IO_STATUS_BLOCK;
    struct InternetExplorer;
    struct InternetExplorerMedium;
    struct JAVA_TRUST;
    struct JIT_DEBUG_INFO;
    struct KEY_VALUE_ENTRY;
    struct LDR_DATA_TABLE_ENTRY;
    struct OBJECT_ATTRIBUTES;
    struct PERUSERSECTIONA;
    struct PERUSERSECTIONW;
    struct PUBLIC_OBJECT_BASIC_INFORMATION;
    struct PUBLIC_OBJECT_TYPE_INFORMATION;
    struct STRENTRYA;
    struct STRENTRYW;
    struct STRINGEXSTRUCT;
    struct STRTABLEA;
    struct STRTABLEW;
    struct SYSTEM_BASIC_INFORMATION;
    struct SYSTEM_CODEINTEGRITY_INFORMATION;
    struct SYSTEM_EXCEPTION_INFORMATION;
    struct SYSTEM_INTERRUPT_INFORMATION;
    struct SYSTEM_LOOKASIDE_INFORMATION;
    struct SYSTEM_PERFORMANCE_INFORMATION;
    struct SYSTEM_POLICY_INFORMATION;
    struct SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
    struct SYSTEM_PROCESS_INFORMATION;
    struct SYSTEM_REGISTRY_QUOTA_INFORMATION;
    struct SYSTEM_THREAD_INFORMATION;
    struct SYSTEM_TIMEOFDAY_INFORMATION;
    struct ShellBrowserWindow;
    struct ShellNameSpace;
    struct ShellUIHelper;
    struct ShellWindows;
    struct TDIEntityID;
    struct TDIObjectID;
    struct TDI_TL_IO_CONTROL_ENDPOINT;
    struct THREAD_NAME_INFORMATION;
    struct UNDETERMINESTRUCT;
    struct WINSTATIONINFORMATIONW;
    struct WLDP_DEVICE_SECURITY_INFORMATION;
    struct WLDP_HOST_INFORMATION;
    struct WebBrowser;
    struct WebBrowser_V1;
    struct _D3DHAL_CALLBACKS;
    struct _D3DHAL_GLOBALDRIVERDATA;
    struct tcp_request_query_information_ex32_xp;
    struct tcp_request_query_information_ex_w2k;
    struct tcp_request_query_information_ex_xp;
    struct tcp_request_set_information_ex;
    struct DShellNameSpaceEvents;
    struct DShellWindowsEvents;
    struct DWebBrowserEvents;
    struct DWebBrowserEvents2;
    struct ICameraUIControl;
    struct ICameraUIControlEventCallback;
    struct IClipServiceNotificationHelper;
    struct IContainerActivationHelper;
    struct IDefaultBrowserSyncSettings;
    struct IDeleteBrowsingHistory;
    struct IEditionUpgradeBroker;
    struct IEditionUpgradeHelper;
    struct IScriptErrorList;
    struct IShellFavoritesNameSpace;
    struct IShellNameSpace;
    struct IShellUIHelper;
    struct IShellUIHelper2;
    struct IShellUIHelper3;
    struct IShellUIHelper4;
    struct IShellUIHelper5;
    struct IShellUIHelper6;
    struct IShellUIHelper7;
    struct IShellUIHelper8;
    struct IShellUIHelper9;
    struct IWebBrowser;
    struct IWebBrowser2;
    struct IWebBrowserApp;
    struct IWindowsLockModeHelper;
#pragma endregion forward_declarations

#pragma region delegates
    using LPFIBER_START_ROUTINE = void __stdcall(void*);
    using PFIBER_CALLOUT_ROUTINE = void* __stdcall(void*);
    using PQUERYACTCTXW_FUNC = Windows::Win32::Foundation::BOOL __stdcall(uint32_t, Windows::Win32::Foundation::HANDLE, void*, uint32_t, void*, size_t, size_t*);
    using APPLICATION_RECOVERY_CALLBACK = uint32_t __stdcall(void*);
    using PPS_POST_PROCESS_INIT_ROUTINE = void __stdcall();
    using PIO_APC_ROUTINE = void __stdcall(void*, Windows::Win32::System::WindowsProgramming::IO_STATUS_BLOCK*, uint32_t);
    using PWINSTATIONQUERYINFORMATIONW = Windows::Win32::Foundation::BOOLEAN __stdcall(Windows::Win32::Foundation::HANDLE, uint32_t, Windows::Win32::System::WindowsProgramming::WINSTATIONINFOCLASS, void*, uint32_t, uint32_t*);
    using PFEATURE_STATE_CHANGE_CALLBACK = void __stdcall(void*);
    using ENUM_CALLBACK = void __stdcall(Windows::Win32::System::WindowsProgramming::DCISURFACEINFO*, void*);
    using WINWATCHNOTIFYPROC = void __stdcall(Windows::Win32::System::WindowsProgramming::HWINWATCH, Windows::Win32::Foundation::HWND, uint32_t, Windows::Win32::Foundation::LPARAM);
    using REGINSTALLA = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HINSTANCE, Windows::Win32::Foundation::PSTR, Windows::Win32::System::WindowsProgramming::STRTABLEA*);
    using PWLDP_SETDYNAMICCODETRUST_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE);
    using PWLDP_ISDYNAMICCODEPOLICYENABLED_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::BOOL*);
    using PWLDP_QUERYDYNAMICODETRUST_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::HANDLE, void*, uint32_t);
    using PWLDP_QUERYWINDOWSLOCKDOWNMODE_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::WindowsProgramming::WLDP_WINDOWS_LOCKDOWN_MODE*);
    using PWLDP_QUERYDEVICESECURITYINFORMATION_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::WindowsProgramming::WLDP_DEVICE_SECURITY_INFORMATION*, uint32_t, uint32_t*);
    using PWLDP_QUERYWINDOWSLOCKDOWNRESTRICTION_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::WindowsProgramming::WLDP_WINDOWS_LOCKDOWN_RESTRICTION*);
    using PWLDP_SETWINDOWSLOCKDOWNRESTRICTION_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::WindowsProgramming::WLDP_WINDOWS_LOCKDOWN_RESTRICTION);
    using PWLDP_ISAPPAPPROVEDBYPOLICY_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::PWSTR, uint64_t);
    using PWLDP_QUERYPOLICYSETTINGENABLED_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::System::WindowsProgramming::WLDP_POLICY_SETTING, Windows::Win32::Foundation::BOOL*);
    using PWLDP_QUERYPOLICYSETTINGENABLED2_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::PWSTR, Windows::Win32::Foundation::BOOL*);
    using PWLDP_ISWCOSPRODUCTIONCONFIGURATION_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::BOOL*);
    using PWLDP_RESETWCOSPRODUCTIONCONFIGURATION_API = Windows::Win32::Foundation::HRESULT __stdcall();
    using PWLDP_ISPRODUCTIONCONFIGURATION_API = Windows::Win32::Foundation::HRESULT __stdcall(Windows::Win32::Foundation::BOOL*);
    using PWLDP_RESETPRODUCTIONCONFIGURATION_API = Windows::Win32::Foundation::HRESULT __stdcall();
    using PDELAYLOAD_FAILURE_DLL_CALLBACK = void* __stdcall(uint32_t, Windows::Win32::System::WindowsProgramming::DELAYLOAD_INFO*);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
