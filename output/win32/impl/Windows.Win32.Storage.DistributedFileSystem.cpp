// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Storage_DistributedFileSystem_2_H
#define WIN32_Windows_Win32_Storage_DistributedFileSystem_2_H
#include "win32/Windows.Win32.Storage.DistributedFileSystem.h"
#include "win32/impl/Windows.Win32.Storage.DistributedFileSystem.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Storage::DistributedFileSystem
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    uint32_t __stdcall ORBIT_IMPL_NetDfsAdd(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR ShareName, win32::Windows::Win32::Foundation::PWSTR Comment, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(ShareName);
        ORBIT_TRACK_PARAM(Comment);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsAdd(DfsEntryPath, ServerName, ShareName, Comment, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsAddStdRoot(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR RootShare, win32::Windows::Win32::Foundation::PWSTR Comment, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(RootShare);
        ORBIT_TRACK_PARAM(Comment);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsAddStdRoot(ServerName, RootShare, Comment, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsRemoveStdRoot(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR RootShare, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(RootShare);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsRemoveStdRoot(ServerName, RootShare, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsAddFtRoot(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR RootShare, win32::Windows::Win32::Foundation::PWSTR FtDfsName, win32::Windows::Win32::Foundation::PWSTR Comment, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(RootShare);
        ORBIT_TRACK_PARAM(FtDfsName);
        ORBIT_TRACK_PARAM(Comment);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsAddFtRoot(ServerName, RootShare, FtDfsName, Comment, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsRemoveFtRoot(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR RootShare, win32::Windows::Win32::Foundation::PWSTR FtDfsName, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(RootShare);
        ORBIT_TRACK_PARAM(FtDfsName);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsRemoveFtRoot(ServerName, RootShare, FtDfsName, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsRemoveFtRootForced(win32::Windows::Win32::Foundation::PWSTR DomainName, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR RootShare, win32::Windows::Win32::Foundation::PWSTR FtDfsName, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(RootShare);
        ORBIT_TRACK_PARAM(FtDfsName);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsRemoveFtRootForced(DomainName, ServerName, RootShare, FtDfsName, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsRemove(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR ShareName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(ShareName);

        auto win32_impl_result = g_api_table.NetDfsRemove(DfsEntryPath, ServerName, ShareName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsEnum(win32::Windows::Win32::Foundation::PWSTR DfsName, uint32_t Level, uint32_t PrefMaxLen, uint8_t** Buffer, uint32_t* EntriesRead, uint32_t* ResumeHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(PrefMaxLen);
        ORBIT_TRACK_PARAM(Buffer);
        ORBIT_TRACK_PARAM(EntriesRead);
        ORBIT_TRACK_PARAM(ResumeHandle);

        auto win32_impl_result = g_api_table.NetDfsEnum(DfsName, Level, PrefMaxLen, Buffer, EntriesRead, ResumeHandle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsGetInfo(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR ShareName, uint32_t Level, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(ShareName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetDfsGetInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsSetInfo(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR ShareName, uint32_t Level, uint8_t* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(ShareName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetDfsSetInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsGetClientInfo(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR ShareName, uint32_t Level, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(ShareName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetDfsGetClientInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsSetClientInfo(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR ShareName, uint32_t Level, uint8_t* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(ShareName);
        ORBIT_TRACK_PARAM(Level);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.NetDfsSetClientInfo(DfsEntryPath, ServerName, ShareName, Level, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsMove(win32::Windows::Win32::Foundation::PWSTR OldDfsEntryPath, win32::Windows::Win32::Foundation::PWSTR NewDfsEntryPath, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(OldDfsEntryPath);
        ORBIT_TRACK_PARAM(NewDfsEntryPath);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsMove(OldDfsEntryPath, NewDfsEntryPath, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsAddRootTarget(win32::Windows::Win32::Foundation::PWSTR pDfsPath, win32::Windows::Win32::Foundation::PWSTR pTargetPath, uint32_t MajorVersion, win32::Windows::Win32::Foundation::PWSTR pComment, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDfsPath);
        ORBIT_TRACK_PARAM(pTargetPath);
        ORBIT_TRACK_PARAM(MajorVersion);
        ORBIT_TRACK_PARAM(pComment);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsAddRootTarget(pDfsPath, pTargetPath, MajorVersion, pComment, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsRemoveRootTarget(win32::Windows::Win32::Foundation::PWSTR pDfsPath, win32::Windows::Win32::Foundation::PWSTR pTargetPath, uint32_t Flags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pDfsPath);
        ORBIT_TRACK_PARAM(pTargetPath);
        ORBIT_TRACK_PARAM(Flags);

        auto win32_impl_result = g_api_table.NetDfsRemoveRootTarget(pDfsPath, pTargetPath, Flags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsGetSecurity(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR** ppSecurityDescriptor, uint32_t* lpcbSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(ppSecurityDescriptor);
        ORBIT_TRACK_PARAM(lpcbSecurityDescriptor);

        auto win32_impl_result = g_api_table.NetDfsGetSecurity(DfsEntryPath, SecurityInformation, ppSecurityDescriptor, lpcbSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsSetSecurity(win32::Windows::Win32::Foundation::PWSTR DfsEntryPath, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DfsEntryPath);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(pSecurityDescriptor);

        auto win32_impl_result = g_api_table.NetDfsSetSecurity(DfsEntryPath, SecurityInformation, pSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsGetStdContainerSecurity(win32::Windows::Win32::Foundation::PWSTR MachineName, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR** ppSecurityDescriptor, uint32_t* lpcbSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MachineName);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(ppSecurityDescriptor);
        ORBIT_TRACK_PARAM(lpcbSecurityDescriptor);

        auto win32_impl_result = g_api_table.NetDfsGetStdContainerSecurity(MachineName, SecurityInformation, ppSecurityDescriptor, lpcbSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsSetStdContainerSecurity(win32::Windows::Win32::Foundation::PWSTR MachineName, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(MachineName);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(pSecurityDescriptor);

        auto win32_impl_result = g_api_table.NetDfsSetStdContainerSecurity(MachineName, SecurityInformation, pSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsGetFtContainerSecurity(win32::Windows::Win32::Foundation::PWSTR DomainName, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR** ppSecurityDescriptor, uint32_t* lpcbSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(ppSecurityDescriptor);
        ORBIT_TRACK_PARAM(lpcbSecurityDescriptor);

        auto win32_impl_result = g_api_table.NetDfsGetFtContainerSecurity(DomainName, SecurityInformation, ppSecurityDescriptor, lpcbSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsSetFtContainerSecurity(win32::Windows::Win32::Foundation::PWSTR DomainName, uint32_t SecurityInformation, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(SecurityInformation);
        ORBIT_TRACK_PARAM(pSecurityDescriptor);

        auto win32_impl_result = g_api_table.NetDfsSetFtContainerSecurity(DomainName, SecurityInformation, pSecurityDescriptor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_NetDfsGetSupportedNamespaceVersion(win32::Windows::Win32::Storage::DistributedFileSystem::DFS_NAMESPACE_VERSION_ORIGIN Origin, win32::Windows::Win32::Foundation::PWSTR pName, win32::Windows::Win32::Storage::DistributedFileSystem::DFS_SUPPORTED_NAMESPACE_VERSION_INFO** ppVersionInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Origin);
        ORBIT_TRACK_PARAM(pName);
        ORBIT_TRACK_PARAM(ppVersionInfo);

        auto win32_impl_result = g_api_table.NetDfsGetSupportedNamespaceVersion(Origin, pName, ppVersionInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

}

#pragma endregion abi_methods

}
#endif
