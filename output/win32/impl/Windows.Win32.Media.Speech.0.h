// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Media_Speech_0_H
#define WIN32_Windows_Win32_Media_Speech_0_H
WIN32_EXPORT namespace win32::Windows::Win32::Foundation
{
    struct LPARAM;
    struct WPARAM;
}
WIN32_EXPORT namespace win32::Windows::Win32::Media::Speech
{
#pragma region enums
    enum class DISPIDSPRG : int32_t
    {
        DISPID_SRGId = 1,
        DISPID_SRGRecoContext = 2,
        DISPID_SRGState = 3,
        DISPID_SRGRules = 4,
        DISPID_SRGReset = 5,
        DISPID_SRGCommit = 6,
        DISPID_SRGCmdLoadFromFile = 7,
        DISPID_SRGCmdLoadFromObject = 8,
        DISPID_SRGCmdLoadFromResource = 9,
        DISPID_SRGCmdLoadFromMemory = 10,
        DISPID_SRGCmdLoadFromProprietaryGrammar = 11,
        DISPID_SRGCmdSetRuleState = 12,
        DISPID_SRGCmdSetRuleIdState = 13,
        DISPID_SRGDictationLoad = 14,
        DISPID_SRGDictationUnload = 15,
        DISPID_SRGDictationSetState = 16,
        DISPID_SRGSetWordSequenceData = 17,
        DISPID_SRGSetTextSelection = 18,
        DISPID_SRGIsPronounceable = 19,
    };
    enum class DISPIDSPTSI : int32_t
    {
        DISPIDSPTSI_ActiveOffset = 1,
        DISPIDSPTSI_ActiveLength = 2,
        DISPIDSPTSI_SelectionOffset = 3,
        DISPIDSPTSI_SelectionLength = 4,
    };
    enum class DISPID_SpeechAudio : int32_t
    {
        DISPID_SAStatus = 200,
        DISPID_SABufferInfo = 201,
        DISPID_SADefaultFormat = 202,
        DISPID_SAVolume = 203,
        DISPID_SABufferNotifySize = 204,
        DISPID_SAEventHandle = 205,
        DISPID_SASetState = 206,
    };
    enum class DISPID_SpeechAudioBufferInfo : int32_t
    {
        DISPID_SABIMinNotification = 1,
        DISPID_SABIBufferSize = 2,
        DISPID_SABIEventBias = 3,
    };
    enum class DISPID_SpeechAudioFormat : int32_t
    {
        DISPID_SAFType = 1,
        DISPID_SAFGuid = 2,
        DISPID_SAFGetWaveFormatEx = 3,
        DISPID_SAFSetWaveFormatEx = 4,
    };
    enum class DISPID_SpeechAudioStatus : int32_t
    {
        DISPID_SASFreeBufferSpace = 1,
        DISPID_SASNonBlockingIO = 2,
        DISPID_SASState = 3,
        DISPID_SASCurrentSeekPosition = 4,
        DISPID_SASCurrentDevicePosition = 5,
    };
    enum class DISPID_SpeechBaseStream : int32_t
    {
        DISPID_SBSFormat = 1,
        DISPID_SBSRead = 2,
        DISPID_SBSWrite = 3,
        DISPID_SBSSeek = 4,
    };
    enum class DISPID_SpeechCustomStream : int32_t
    {
        DISPID_SCSBaseStream = 100,
    };
    enum class DISPID_SpeechDataKey : int32_t
    {
        DISPID_SDKSetBinaryValue = 1,
        DISPID_SDKGetBinaryValue = 2,
        DISPID_SDKSetStringValue = 3,
        DISPID_SDKGetStringValue = 4,
        DISPID_SDKSetLongValue = 5,
        DISPID_SDKGetlongValue = 6,
        DISPID_SDKOpenKey = 7,
        DISPID_SDKCreateKey = 8,
        DISPID_SDKDeleteKey = 9,
        DISPID_SDKDeleteValue = 10,
        DISPID_SDKEnumKeys = 11,
        DISPID_SDKEnumValues = 12,
    };
    enum class DISPID_SpeechFileStream : int32_t
    {
        DISPID_SFSOpen = 100,
        DISPID_SFSClose = 101,
    };
    enum class DISPID_SpeechGrammarRule : int32_t
    {
        DISPID_SGRAttributes = 1,
        DISPID_SGRInitialState = 2,
        DISPID_SGRName = 3,
        DISPID_SGRId = 4,
        DISPID_SGRClear = 5,
        DISPID_SGRAddResource = 6,
        DISPID_SGRAddState = 7,
    };
    enum class DISPID_SpeechGrammarRuleState : int32_t
    {
        DISPID_SGRSRule = 1,
        DISPID_SGRSTransitions = 2,
        DISPID_SGRSAddWordTransition = 3,
        DISPID_SGRSAddRuleTransition = 4,
        DISPID_SGRSAddSpecialTransition = 5,
    };
    enum class DISPID_SpeechGrammarRuleStateTransition : int32_t
    {
        DISPID_SGRSTType = 1,
        DISPID_SGRSTText = 2,
        DISPID_SGRSTRule = 3,
        DISPID_SGRSTWeight = 4,
        DISPID_SGRSTPropertyName = 5,
        DISPID_SGRSTPropertyId = 6,
        DISPID_SGRSTPropertyValue = 7,
        DISPID_SGRSTNextState = 8,
    };
    enum class DISPID_SpeechGrammarRuleStateTransitions : int32_t
    {
        DISPID_SGRSTsCount = 1,
        DISPID_SGRSTsItem = 0,
        DISPID_SGRSTs_NewEnum = -4,
    };
    enum class DISPID_SpeechGrammarRules : int32_t
    {
        DISPID_SGRsCount = 1,
        DISPID_SGRsDynamic = 2,
        DISPID_SGRsAdd = 3,
        DISPID_SGRsCommit = 4,
        DISPID_SGRsCommitAndSave = 5,
        DISPID_SGRsFindRule = 6,
        DISPID_SGRsItem = 0,
        DISPID_SGRs_NewEnum = -4,
    };
    enum class DISPID_SpeechLexicon : int32_t
    {
        DISPID_SLGenerationId = 1,
        DISPID_SLGetWords = 2,
        DISPID_SLAddPronunciation = 3,
        DISPID_SLAddPronunciationByPhoneIds = 4,
        DISPID_SLRemovePronunciation = 5,
        DISPID_SLRemovePronunciationByPhoneIds = 6,
        DISPID_SLGetPronunciations = 7,
        DISPID_SLGetGenerationChange = 8,
    };
    enum class DISPID_SpeechLexiconProns : int32_t
    {
        DISPID_SLPsCount = 1,
        DISPID_SLPsItem = 0,
        DISPID_SLPs_NewEnum = -4,
    };
    enum class DISPID_SpeechLexiconPronunciation : int32_t
    {
        DISPID_SLPType = 1,
        DISPID_SLPLangId = 2,
        DISPID_SLPPartOfSpeech = 3,
        DISPID_SLPPhoneIds = 4,
        DISPID_SLPSymbolic = 5,
    };
    enum class DISPID_SpeechLexiconWord : int32_t
    {
        DISPID_SLWLangId = 1,
        DISPID_SLWType = 2,
        DISPID_SLWWord = 3,
        DISPID_SLWPronunciations = 4,
    };
    enum class DISPID_SpeechLexiconWords : int32_t
    {
        DISPID_SLWsCount = 1,
        DISPID_SLWsItem = 0,
        DISPID_SLWs_NewEnum = -4,
    };
    enum class DISPID_SpeechMMSysAudio : int32_t
    {
        DISPID_SMSADeviceId = 300,
        DISPID_SMSALineId = 301,
        DISPID_SMSAMMHandle = 302,
    };
    enum class DISPID_SpeechMemoryStream : int32_t
    {
        DISPID_SMSSetData = 100,
        DISPID_SMSGetData = 101,
    };
    enum class DISPID_SpeechObjectToken : int32_t
    {
        DISPID_SOTId = 1,
        DISPID_SOTDataKey = 2,
        DISPID_SOTCategory = 3,
        DISPID_SOTGetDescription = 4,
        DISPID_SOTSetId = 5,
        DISPID_SOTGetAttribute = 6,
        DISPID_SOTCreateInstance = 7,
        DISPID_SOTRemove = 8,
        DISPID_SOTGetStorageFileName = 9,
        DISPID_SOTRemoveStorageFileName = 10,
        DISPID_SOTIsUISupported = 11,
        DISPID_SOTDisplayUI = 12,
        DISPID_SOTMatchesAttributes = 13,
    };
    enum class DISPID_SpeechObjectTokenCategory : int32_t
    {
        DISPID_SOTCId = 1,
        DISPID_SOTCDefault = 2,
        DISPID_SOTCSetId = 3,
        DISPID_SOTCGetDataKey = 4,
        DISPID_SOTCEnumerateTokens = 5,
    };
    enum class DISPID_SpeechObjectTokens : int32_t
    {
        DISPID_SOTsCount = 1,
        DISPID_SOTsItem = 0,
        DISPID_SOTs_NewEnum = -4,
    };
    enum class DISPID_SpeechPhoneConverter : int32_t
    {
        DISPID_SPCLangId = 1,
        DISPID_SPCPhoneToId = 2,
        DISPID_SPCIdToPhone = 3,
    };
    enum class DISPID_SpeechPhraseAlternate : int32_t
    {
        DISPID_SPARecoResult = 1,
        DISPID_SPAStartElementInResult = 2,
        DISPID_SPANumberOfElementsInResult = 3,
        DISPID_SPAPhraseInfo = 4,
        DISPID_SPACommit = 5,
    };
    enum class DISPID_SpeechPhraseAlternates : int32_t
    {
        DISPID_SPAsCount = 1,
        DISPID_SPAsItem = 0,
        DISPID_SPAs_NewEnum = -4,
    };
    enum class DISPID_SpeechPhraseBuilder : int32_t
    {
        DISPID_SPPBRestorePhraseFromMemory = 1,
    };
    enum class DISPID_SpeechPhraseElement : int32_t
    {
        DISPID_SPEAudioTimeOffset = 1,
        DISPID_SPEAudioSizeTime = 2,
        DISPID_SPEAudioStreamOffset = 3,
        DISPID_SPEAudioSizeBytes = 4,
        DISPID_SPERetainedStreamOffset = 5,
        DISPID_SPERetainedSizeBytes = 6,
        DISPID_SPEDisplayText = 7,
        DISPID_SPELexicalForm = 8,
        DISPID_SPEPronunciation = 9,
        DISPID_SPEDisplayAttributes = 10,
        DISPID_SPERequiredConfidence = 11,
        DISPID_SPEActualConfidence = 12,
        DISPID_SPEEngineConfidence = 13,
    };
    enum class DISPID_SpeechPhraseElements : int32_t
    {
        DISPID_SPEsCount = 1,
        DISPID_SPEsItem = 0,
        DISPID_SPEs_NewEnum = -4,
    };
    enum class DISPID_SpeechPhraseInfo : int32_t
    {
        DISPID_SPILanguageId = 1,
        DISPID_SPIGrammarId = 2,
        DISPID_SPIStartTime = 3,
        DISPID_SPIAudioStreamPosition = 4,
        DISPID_SPIAudioSizeBytes = 5,
        DISPID_SPIRetainedSizeBytes = 6,
        DISPID_SPIAudioSizeTime = 7,
        DISPID_SPIRule = 8,
        DISPID_SPIProperties = 9,
        DISPID_SPIElements = 10,
        DISPID_SPIReplacements = 11,
        DISPID_SPIEngineId = 12,
        DISPID_SPIEnginePrivateData = 13,
        DISPID_SPISaveToMemory = 14,
        DISPID_SPIGetText = 15,
        DISPID_SPIGetDisplayAttributes = 16,
    };
    enum class DISPID_SpeechPhraseProperties : int32_t
    {
        DISPID_SPPsCount = 1,
        DISPID_SPPsItem = 0,
        DISPID_SPPs_NewEnum = -4,
    };
    enum class DISPID_SpeechPhraseProperty : int32_t
    {
        DISPID_SPPName = 1,
        DISPID_SPPId = 2,
        DISPID_SPPValue = 3,
        DISPID_SPPFirstElement = 4,
        DISPID_SPPNumberOfElements = 5,
        DISPID_SPPEngineConfidence = 6,
        DISPID_SPPConfidence = 7,
        DISPID_SPPParent = 8,
        DISPID_SPPChildren = 9,
    };
    enum class DISPID_SpeechPhraseReplacement : int32_t
    {
        DISPID_SPRDisplayAttributes = 1,
        DISPID_SPRText = 2,
        DISPID_SPRFirstElement = 3,
        DISPID_SPRNumberOfElements = 4,
    };
    enum class DISPID_SpeechPhraseReplacements : int32_t
    {
        DISPID_SPRsCount = 1,
        DISPID_SPRsItem = 0,
        DISPID_SPRs_NewEnum = -4,
    };
    enum class DISPID_SpeechPhraseRule : int32_t
    {
        DISPID_SPRuleName = 1,
        DISPID_SPRuleId = 2,
        DISPID_SPRuleFirstElement = 3,
        DISPID_SPRuleNumberOfElements = 4,
        DISPID_SPRuleParent = 5,
        DISPID_SPRuleChildren = 6,
        DISPID_SPRuleConfidence = 7,
        DISPID_SPRuleEngineConfidence = 8,
    };
    enum class DISPID_SpeechPhraseRules : int32_t
    {
        DISPID_SPRulesCount = 1,
        DISPID_SPRulesItem = 0,
        DISPID_SPRules_NewEnum = -4,
    };
    enum class DISPID_SpeechRecoContext : int32_t
    {
        DISPID_SRCRecognizer = 1,
        DISPID_SRCAudioInInterferenceStatus = 2,
        DISPID_SRCRequestedUIType = 3,
        DISPID_SRCVoice = 4,
        DISPID_SRAllowVoiceFormatMatchingOnNextSet = 5,
        DISPID_SRCVoicePurgeEvent = 6,
        DISPID_SRCEventInterests = 7,
        DISPID_SRCCmdMaxAlternates = 8,
        DISPID_SRCState = 9,
        DISPID_SRCRetainedAudio = 10,
        DISPID_SRCRetainedAudioFormat = 11,
        DISPID_SRCPause = 12,
        DISPID_SRCResume = 13,
        DISPID_SRCCreateGrammar = 14,
        DISPID_SRCCreateResultFromMemory = 15,
        DISPID_SRCBookmark = 16,
        DISPID_SRCSetAdaptationData = 17,
    };
    enum class DISPID_SpeechRecoContextEvents : int32_t
    {
        DISPID_SRCEStartStream = 1,
        DISPID_SRCEEndStream = 2,
        DISPID_SRCEBookmark = 3,
        DISPID_SRCESoundStart = 4,
        DISPID_SRCESoundEnd = 5,
        DISPID_SRCEPhraseStart = 6,
        DISPID_SRCERecognition = 7,
        DISPID_SRCEHypothesis = 8,
        DISPID_SRCEPropertyNumberChange = 9,
        DISPID_SRCEPropertyStringChange = 10,
        DISPID_SRCEFalseRecognition = 11,
        DISPID_SRCEInterference = 12,
        DISPID_SRCERequestUI = 13,
        DISPID_SRCERecognizerStateChange = 14,
        DISPID_SRCEAdaptation = 15,
        DISPID_SRCERecognitionForOtherContext = 16,
        DISPID_SRCEAudioLevel = 17,
        DISPID_SRCEEnginePrivate = 18,
    };
    enum class DISPID_SpeechRecoResult : int32_t
    {
        DISPID_SRRRecoContext = 1,
        DISPID_SRRTimes = 2,
        DISPID_SRRAudioFormat = 3,
        DISPID_SRRPhraseInfo = 4,
        DISPID_SRRAlternates = 5,
        DISPID_SRRAudio = 6,
        DISPID_SRRSpeakAudio = 7,
        DISPID_SRRSaveToMemory = 8,
        DISPID_SRRDiscardResultInfo = 9,
    };
    enum class DISPID_SpeechRecoResult2 : int32_t
    {
        DISPID_SRRSetTextFeedback = 12,
    };
    enum class DISPID_SpeechRecoResultTimes : int32_t
    {
        DISPID_SRRTStreamTime = 1,
        DISPID_SRRTLength = 2,
        DISPID_SRRTTickCount = 3,
        DISPID_SRRTOffsetFromStart = 4,
    };
    enum class DISPID_SpeechRecognizer : int32_t
    {
        DISPID_SRRecognizer = 1,
        DISPID_SRAllowAudioInputFormatChangesOnNextSet = 2,
        DISPID_SRAudioInput = 3,
        DISPID_SRAudioInputStream = 4,
        DISPID_SRIsShared = 5,
        DISPID_SRState = 6,
        DISPID_SRStatus = 7,
        DISPID_SRProfile = 8,
        DISPID_SREmulateRecognition = 9,
        DISPID_SRCreateRecoContext = 10,
        DISPID_SRGetFormat = 11,
        DISPID_SRSetPropertyNumber = 12,
        DISPID_SRGetPropertyNumber = 13,
        DISPID_SRSetPropertyString = 14,
        DISPID_SRGetPropertyString = 15,
        DISPID_SRIsUISupported = 16,
        DISPID_SRDisplayUI = 17,
        DISPID_SRGetRecognizers = 18,
        DISPID_SVGetAudioInputs = 19,
        DISPID_SVGetProfiles = 20,
    };
    enum class DISPID_SpeechRecognizerStatus : int32_t
    {
        DISPID_SRSAudioStatus = 1,
        DISPID_SRSCurrentStreamPosition = 2,
        DISPID_SRSCurrentStreamNumber = 3,
        DISPID_SRSNumberOfActiveRules = 4,
        DISPID_SRSClsidEngine = 5,
        DISPID_SRSSupportedLanguages = 6,
    };
    enum class DISPID_SpeechVoice : int32_t
    {
        DISPID_SVStatus = 1,
        DISPID_SVVoice = 2,
        DISPID_SVAudioOutput = 3,
        DISPID_SVAudioOutputStream = 4,
        DISPID_SVRate = 5,
        DISPID_SVVolume = 6,
        DISPID_SVAllowAudioOuputFormatChangesOnNextSet = 7,
        DISPID_SVEventInterests = 8,
        DISPID_SVPriority = 9,
        DISPID_SVAlertBoundary = 10,
        DISPID_SVSyncronousSpeakTimeout = 11,
        DISPID_SVSpeak = 12,
        DISPID_SVSpeakStream = 13,
        DISPID_SVPause = 14,
        DISPID_SVResume = 15,
        DISPID_SVSkip = 16,
        DISPID_SVGetVoices = 17,
        DISPID_SVGetAudioOutputs = 18,
        DISPID_SVWaitUntilDone = 19,
        DISPID_SVSpeakCompleteEvent = 20,
        DISPID_SVIsUISupported = 21,
        DISPID_SVDisplayUI = 22,
    };
    enum class DISPID_SpeechVoiceEvent : int32_t
    {
        DISPID_SVEStreamStart = 1,
        DISPID_SVEStreamEnd = 2,
        DISPID_SVEVoiceChange = 3,
        DISPID_SVEBookmark = 4,
        DISPID_SVEWord = 5,
        DISPID_SVEPhoneme = 6,
        DISPID_SVESentenceBoundary = 7,
        DISPID_SVEViseme = 8,
        DISPID_SVEAudioLevel = 9,
        DISPID_SVEEnginePrivate = 10,
    };
    enum class DISPID_SpeechVoiceStatus : int32_t
    {
        DISPID_SVSCurrentStreamNumber = 1,
        DISPID_SVSLastStreamNumberQueued = 2,
        DISPID_SVSLastResult = 3,
        DISPID_SVSRunningState = 4,
        DISPID_SVSInputWordPosition = 5,
        DISPID_SVSInputWordLength = 6,
        DISPID_SVSInputSentencePosition = 7,
        DISPID_SVSInputSentenceLength = 8,
        DISPID_SVSLastBookmark = 9,
        DISPID_SVSLastBookmarkId = 10,
        DISPID_SVSPhonemeId = 11,
        DISPID_SVSVisemeId = 12,
    };
    enum class DISPID_SpeechWaveFormatEx : int32_t
    {
        DISPID_SWFEFormatTag = 1,
        DISPID_SWFEChannels = 2,
        DISPID_SWFESamplesPerSec = 3,
        DISPID_SWFEAvgBytesPerSec = 4,
        DISPID_SWFEBlockAlign = 5,
        DISPID_SWFEBitsPerSample = 6,
        DISPID_SWFEExtraData = 7,
    };
    enum class DISPID_SpeechXMLRecoResult : int32_t
    {
        DISPID_SRRGetXMLResult = 10,
        DISPID_SRRGetXMLErrorInfo = 11,
    };
    enum class PHONETICALPHABET : int32_t
    {
        PA_Ipa = 0,
        PA_Ups = 1,
        PA_Sapi = 2,
    };
    enum class SPADAPTATIONRELEVANCE : int32_t
    {
        SPAR_Unknown = 0,
        SPAR_Low = 1,
        SPAR_Medium = 2,
        SPAR_High = 3,
    };
    enum class SPADAPTATIONSETTINGS : int32_t
    {
        SPADS_Default = 0,
        SPADS_CurrentRecognizer = 1,
        SPADS_RecoProfile = 2,
        SPADS_Immediate = 4,
        SPADS_Reset = 8,
        SPADS_HighVolumeDataSource = 16,
    };
    enum class SPAUDIOOPTIONS : int32_t
    {
        SPAO_NONE = 0,
        SPAO_RETAIN_AUDIO = 1,
    };
    enum class SPAUDIOSTATE : int32_t
    {
        SPAS_CLOSED = 0,
        SPAS_STOP = 1,
        SPAS_PAUSE = 2,
        SPAS_RUN = 3,
    };
    enum class SPBOOKMARKOPTIONS : int32_t
    {
        SPBO_NONE = 0,
        SPBO_PAUSE = 1,
        SPBO_AHEAD = 2,
        SPBO_TIME_UNITS = 4,
    };
    enum class SPCFGRULEATTRIBUTES : int32_t
    {
        SPRAF_TopLevel = 1,
        SPRAF_Active = 2,
        SPRAF_Export = 4,
        SPRAF_Import = 8,
        SPRAF_Interpreter = 16,
        SPRAF_Dynamic = 32,
        SPRAF_Root = 64,
        SPRAF_AutoPause = 65536,
        SPRAF_UserDelimited = 131072,
    };
    enum class SPCOMMITFLAGS : int32_t
    {
        SPCF_NONE = 0,
        SPCF_ADD_TO_USER_LEXICON = 1,
        SPCF_DEFINITE_CORRECTION = 2,
    };
    enum class SPCONTEXTSTATE : int32_t
    {
        SPCS_DISABLED = 0,
        SPCS_ENABLED = 1,
    };
    enum class SPDATAKEYLOCATION : int32_t
    {
        SPDKL_DefaultLocation = 0,
        SPDKL_CurrentUser = 1,
        SPDKL_LocalMachine = 2,
        SPDKL_CurrentConfig = 5,
    };
    enum class SPDISPLYATTRIBUTES : int32_t
    {
        SPAF_ONE_TRAILING_SPACE = 2,
        SPAF_TWO_TRAILING_SPACES = 4,
        SPAF_CONSUME_LEADING_SPACES = 8,
        SPAF_BUFFER_POSITION = 16,
        SPAF_ALL = 31,
        SPAF_USER_SPECIFIED = 128,
    };
    enum class SPEAKFLAGS : int32_t
    {
        SPF_DEFAULT = 0,
        SPF_ASYNC = 1,
        SPF_PURGEBEFORESPEAK = 2,
        SPF_IS_FILENAME = 4,
        SPF_IS_XML = 8,
        SPF_IS_NOT_XML = 16,
        SPF_PERSIST_XML = 32,
        SPF_NLP_SPEAK_PUNC = 64,
        SPF_PARSE_SAPI = 128,
        SPF_PARSE_SSML = 256,
        SPF_PARSE_AUTODETECT = 0,
        SPF_NLP_MASK = 64,
        SPF_PARSE_MASK = 384,
        SPF_VOICE_MASK = 511,
        SPF_UNUSED_FLAGS = -512,
    };
    enum class SPENDSRSTREAMFLAGS : int32_t
    {
        SPESF_NONE = 0,
        SPESF_STREAM_RELEASED = 1,
        SPESF_EMULATED = 2,
    };
    enum class SPEVENTENUM : int32_t
    {
        SPEI_UNDEFINED = 0,
        SPEI_START_INPUT_STREAM = 1,
        SPEI_END_INPUT_STREAM = 2,
        SPEI_VOICE_CHANGE = 3,
        SPEI_TTS_BOOKMARK = 4,
        SPEI_WORD_BOUNDARY = 5,
        SPEI_PHONEME = 6,
        SPEI_SENTENCE_BOUNDARY = 7,
        SPEI_VISEME = 8,
        SPEI_TTS_AUDIO_LEVEL = 9,
        SPEI_TTS_PRIVATE = 15,
        SPEI_MIN_TTS = 1,
        SPEI_MAX_TTS = 15,
        SPEI_END_SR_STREAM = 34,
        SPEI_SOUND_START = 35,
        SPEI_SOUND_END = 36,
        SPEI_PHRASE_START = 37,
        SPEI_RECOGNITION = 38,
        SPEI_HYPOTHESIS = 39,
        SPEI_SR_BOOKMARK = 40,
        SPEI_PROPERTY_NUM_CHANGE = 41,
        SPEI_PROPERTY_STRING_CHANGE = 42,
        SPEI_FALSE_RECOGNITION = 43,
        SPEI_INTERFERENCE = 44,
        SPEI_REQUEST_UI = 45,
        SPEI_RECO_STATE_CHANGE = 46,
        SPEI_ADAPTATION = 47,
        SPEI_START_SR_STREAM = 48,
        SPEI_RECO_OTHER_CONTEXT = 49,
        SPEI_SR_AUDIO_LEVEL = 50,
        SPEI_SR_RETAINEDAUDIO = 51,
        SPEI_SR_PRIVATE = 52,
        SPEI_RESERVED4 = 53,
        SPEI_RESERVED5 = 54,
        SPEI_RESERVED6 = 55,
        SPEI_MIN_SR = 34,
        SPEI_MAX_SR = 55,
        SPEI_RESERVED1 = 30,
        SPEI_RESERVED2 = 33,
        SPEI_RESERVED3 = 63,
    };
    enum class SPEVENTLPARAMTYPE : int32_t
    {
        SPET_LPARAM_IS_UNDEFINED = 0,
        SPET_LPARAM_IS_TOKEN = 1,
        SPET_LPARAM_IS_OBJECT = 2,
        SPET_LPARAM_IS_POINTER = 3,
        SPET_LPARAM_IS_STRING = 4,
    };
    enum class SPFILEMODE : int32_t
    {
        SPFM_OPEN_READONLY = 0,
        SPFM_OPEN_READWRITE = 1,
        SPFM_CREATE = 2,
        SPFM_CREATE_ALWAYS = 3,
        SPFM_NUM_MODES = 4,
    };
    enum class SPGRAMMAROPTIONS : int32_t
    {
        SPGO_SAPI = 1,
        SPGO_SRGS = 2,
        SPGO_UPS = 4,
        SPGO_SRGS_MS_SCRIPT = 8,
        SPGO_SRGS_W3C_SCRIPT = 256,
        SPGO_SRGS_STG_SCRIPT = 512,
        SPGO_SRGS_SCRIPT = 778,
        SPGO_FILE = 16,
        SPGO_HTTP = 32,
        SPGO_RES = 64,
        SPGO_OBJECT = 128,
        SPGO_DEFAULT = 1019,
        SPGO_ALL = 1023,
    };
    enum class SPGRAMMARSTATE : int32_t
    {
        SPGS_DISABLED = 0,
        SPGS_ENABLED = 1,
        SPGS_EXCLUSIVE = 3,
    };
    enum class SPGRAMMARWORDTYPE : int32_t
    {
        SPWT_DISPLAY = 0,
        SPWT_LEXICAL = 1,
        SPWT_PRONUNCIATION = 2,
        SPWT_LEXICAL_NO_SPECIAL_CHARS = 3,
    };
    enum class SPINTERFERENCE : int32_t
    {
        SPINTERFERENCE_NONE = 0,
        SPINTERFERENCE_NOISE = 1,
        SPINTERFERENCE_NOSIGNAL = 2,
        SPINTERFERENCE_TOOLOUD = 3,
        SPINTERFERENCE_TOOQUIET = 4,
        SPINTERFERENCE_TOOFAST = 5,
        SPINTERFERENCE_TOOSLOW = 6,
        SPINTERFERENCE_LATENCY_WARNING = 7,
        SPINTERFERENCE_LATENCY_TRUNCATE_BEGIN = 8,
        SPINTERFERENCE_LATENCY_TRUNCATE_END = 9,
    };
    enum class SPLEXICONTYPE : int32_t
    {
        eLEXTYPE_USER = 1,
        eLEXTYPE_APP = 2,
        eLEXTYPE_VENDORLEXICON = 4,
        eLEXTYPE_LETTERTOSOUND = 8,
        eLEXTYPE_MORPHOLOGY = 16,
        eLEXTYPE_RESERVED4 = 32,
        eLEXTYPE_USER_SHORTCUT = 64,
        eLEXTYPE_RESERVED6 = 128,
        eLEXTYPE_RESERVED7 = 256,
        eLEXTYPE_RESERVED8 = 512,
        eLEXTYPE_RESERVED9 = 1024,
        eLEXTYPE_RESERVED10 = 2048,
        eLEXTYPE_PRIVATE1 = 4096,
        eLEXTYPE_PRIVATE2 = 8192,
        eLEXTYPE_PRIVATE3 = 16384,
        eLEXTYPE_PRIVATE4 = 32768,
        eLEXTYPE_PRIVATE5 = 65536,
        eLEXTYPE_PRIVATE6 = 131072,
        eLEXTYPE_PRIVATE7 = 262144,
        eLEXTYPE_PRIVATE8 = 524288,
        eLEXTYPE_PRIVATE9 = 1048576,
        eLEXTYPE_PRIVATE10 = 2097152,
        eLEXTYPE_PRIVATE11 = 4194304,
        eLEXTYPE_PRIVATE12 = 8388608,
        eLEXTYPE_PRIVATE13 = 16777216,
        eLEXTYPE_PRIVATE14 = 33554432,
        eLEXTYPE_PRIVATE15 = 67108864,
        eLEXTYPE_PRIVATE16 = 134217728,
        eLEXTYPE_PRIVATE17 = 268435456,
        eLEXTYPE_PRIVATE18 = 536870912,
        eLEXTYPE_PRIVATE19 = 1073741824,
        eLEXTYPE_PRIVATE20 = -2147483648,
    };
    enum class SPLOADOPTIONS : int32_t
    {
        SPLO_STATIC = 0,
        SPLO_DYNAMIC = 1,
    };
    enum class SPMATCHINGMODE : int32_t
    {
        AllWords = 0,
        Subsequence = 1,
        OrderedSubset = 3,
        SubsequenceContentRequired = 5,
        OrderedSubsetContentRequired = 7,
    };
    enum class SPPARTOFSPEECH : int32_t
    {
        SPPS_NotOverriden = -1,
        SPPS_Unknown = 0,
        SPPS_Noun = 4096,
        SPPS_Verb = 8192,
        SPPS_Modifier = 12288,
        SPPS_Function = 16384,
        SPPS_Interjection = 20480,
        SPPS_Noncontent = 24576,
        SPPS_LMA = 28672,
        SPPS_SuppressWord = 61440,
    };
    enum class SPPHRASEPROPERTYUNIONTYPE : int32_t
    {
        SPPPUT_UNUSED = 0,
        SPPPUT_ARRAY_INDEX = 1,
    };
    enum class SPPHRASERNG : int32_t
    {
        SPPR_ALL_ELEMENTS = -1,
    };
    enum class SPPRONUNCIATIONFLAGS : int32_t
    {
        ePRONFLAG_USED = 1,
    };
    enum class SPRECOEVENTFLAGS : int32_t
    {
        SPREF_AutoPause = 1,
        SPREF_Emulated = 2,
        SPREF_SMLTimeout = 4,
        SPREF_ExtendableParse = 8,
        SPREF_ReSent = 16,
        SPREF_Hypothesis = 32,
        SPREF_FalseRecognition = 64,
    };
    enum class SPRECOSTATE : int32_t
    {
        SPRST_INACTIVE = 0,
        SPRST_ACTIVE = 1,
        SPRST_ACTIVE_ALWAYS = 2,
        SPRST_INACTIVE_WITH_PURGE = 3,
        SPRST_NUM_STATES = 4,
    };
    enum class SPRULESTATE : int32_t
    {
        SPRS_INACTIVE = 0,
        SPRS_ACTIVE = 1,
        SPRS_ACTIVE_WITH_AUTO_PAUSE = 3,
        SPRS_ACTIVE_USER_DELIMITED = 4,
    };
    enum class SPRUNSTATE : int32_t
    {
        SPRS_DONE = 1,
        SPRS_IS_SPEAKING = 2,
    };
    enum class SPSEMANTICFORMAT : int32_t
    {
        SPSMF_SAPI_PROPERTIES = 0,
        SPSMF_SRGS_SEMANTICINTERPRETATION_MS = 1,
        SPSMF_SRGS_SAPIPROPERTIES = 2,
        SPSMF_UPS = 4,
        SPSMF_SRGS_SEMANTICINTERPRETATION_W3C = 8,
    };
    enum class SPSHORTCUTTYPE : int32_t
    {
        SPSHT_NotOverriden = -1,
        SPSHT_Unknown = 0,
        SPSHT_EMAIL = 4096,
        SPSHT_OTHER = 8192,
        SPPS_RESERVED1 = 12288,
        SPPS_RESERVED2 = 16384,
        SPPS_RESERVED3 = 20480,
        SPPS_RESERVED4 = 61440,
    };
    enum class SPSTREAMFORMAT : int32_t
    {
        SPSF_Default = -1,
        SPSF_NoAssignedFormat = 0,
        SPSF_Text = 1,
        SPSF_NonStandardFormat = 2,
        SPSF_ExtendedAudioFormat = 3,
        SPSF_8kHz8BitMono = 4,
        SPSF_8kHz8BitStereo = 5,
        SPSF_8kHz16BitMono = 6,
        SPSF_8kHz16BitStereo = 7,
        SPSF_11kHz8BitMono = 8,
        SPSF_11kHz8BitStereo = 9,
        SPSF_11kHz16BitMono = 10,
        SPSF_11kHz16BitStereo = 11,
        SPSF_12kHz8BitMono = 12,
        SPSF_12kHz8BitStereo = 13,
        SPSF_12kHz16BitMono = 14,
        SPSF_12kHz16BitStereo = 15,
        SPSF_16kHz8BitMono = 16,
        SPSF_16kHz8BitStereo = 17,
        SPSF_16kHz16BitMono = 18,
        SPSF_16kHz16BitStereo = 19,
        SPSF_22kHz8BitMono = 20,
        SPSF_22kHz8BitStereo = 21,
        SPSF_22kHz16BitMono = 22,
        SPSF_22kHz16BitStereo = 23,
        SPSF_24kHz8BitMono = 24,
        SPSF_24kHz8BitStereo = 25,
        SPSF_24kHz16BitMono = 26,
        SPSF_24kHz16BitStereo = 27,
        SPSF_32kHz8BitMono = 28,
        SPSF_32kHz8BitStereo = 29,
        SPSF_32kHz16BitMono = 30,
        SPSF_32kHz16BitStereo = 31,
        SPSF_44kHz8BitMono = 32,
        SPSF_44kHz8BitStereo = 33,
        SPSF_44kHz16BitMono = 34,
        SPSF_44kHz16BitStereo = 35,
        SPSF_48kHz8BitMono = 36,
        SPSF_48kHz8BitStereo = 37,
        SPSF_48kHz16BitMono = 38,
        SPSF_48kHz16BitStereo = 39,
        SPSF_TrueSpeech_8kHz1BitMono = 40,
        SPSF_CCITT_ALaw_8kHzMono = 41,
        SPSF_CCITT_ALaw_8kHzStereo = 42,
        SPSF_CCITT_ALaw_11kHzMono = 43,
        SPSF_CCITT_ALaw_11kHzStereo = 44,
        SPSF_CCITT_ALaw_22kHzMono = 45,
        SPSF_CCITT_ALaw_22kHzStereo = 46,
        SPSF_CCITT_ALaw_44kHzMono = 47,
        SPSF_CCITT_ALaw_44kHzStereo = 48,
        SPSF_CCITT_uLaw_8kHzMono = 49,
        SPSF_CCITT_uLaw_8kHzStereo = 50,
        SPSF_CCITT_uLaw_11kHzMono = 51,
        SPSF_CCITT_uLaw_11kHzStereo = 52,
        SPSF_CCITT_uLaw_22kHzMono = 53,
        SPSF_CCITT_uLaw_22kHzStereo = 54,
        SPSF_CCITT_uLaw_44kHzMono = 55,
        SPSF_CCITT_uLaw_44kHzStereo = 56,
        SPSF_ADPCM_8kHzMono = 57,
        SPSF_ADPCM_8kHzStereo = 58,
        SPSF_ADPCM_11kHzMono = 59,
        SPSF_ADPCM_11kHzStereo = 60,
        SPSF_ADPCM_22kHzMono = 61,
        SPSF_ADPCM_22kHzStereo = 62,
        SPSF_ADPCM_44kHzMono = 63,
        SPSF_ADPCM_44kHzStereo = 64,
        SPSF_GSM610_8kHzMono = 65,
        SPSF_GSM610_11kHzMono = 66,
        SPSF_GSM610_22kHzMono = 67,
        SPSF_GSM610_44kHzMono = 68,
        SPSF_NUM_FORMATS = 69,
    };
    enum class SPVACTIONS : int32_t
    {
        SPVA_Speak = 0,
        SPVA_Silence = 1,
        SPVA_Pronounce = 2,
        SPVA_Bookmark = 3,
        SPVA_SpellOut = 4,
        SPVA_Section = 5,
        SPVA_ParseUnknownTag = 6,
    };
    enum class SPVALUETYPE : int32_t
    {
        SPDF_PROPERTY = 1,
        SPDF_REPLACEMENT = 2,
        SPDF_RULE = 4,
        SPDF_DISPLAYTEXT = 8,
        SPDF_LEXICALFORM = 16,
        SPDF_PRONUNCIATION = 32,
        SPDF_AUDIO = 64,
        SPDF_ALTERNATES = 128,
        SPDF_ALL = 255,
    };
    enum class SPVFEATURE : int32_t
    {
        SPVFEATURE_STRESSED = 1,
        SPVFEATURE_EMPHASIS = 2,
    };
    enum class SPVISEMES : int32_t
    {
        SP_VISEME_0 = 0,
        SP_VISEME_1 = 1,
        SP_VISEME_2 = 2,
        SP_VISEME_3 = 3,
        SP_VISEME_4 = 4,
        SP_VISEME_5 = 5,
        SP_VISEME_6 = 6,
        SP_VISEME_7 = 7,
        SP_VISEME_8 = 8,
        SP_VISEME_9 = 9,
        SP_VISEME_10 = 10,
        SP_VISEME_11 = 11,
        SP_VISEME_12 = 12,
        SP_VISEME_13 = 13,
        SP_VISEME_14 = 14,
        SP_VISEME_15 = 15,
        SP_VISEME_16 = 16,
        SP_VISEME_17 = 17,
        SP_VISEME_18 = 18,
        SP_VISEME_19 = 19,
        SP_VISEME_20 = 20,
        SP_VISEME_21 = 21,
    };
    enum class SPVLIMITS : int32_t
    {
        SPMIN_VOLUME = 0,
        SPMAX_VOLUME = 100,
        SPMIN_RATE = -10,
        SPMAX_RATE = 10,
    };
    enum class SPVPRIORITY : int32_t
    {
        SPVPRI_NORMAL = 0,
        SPVPRI_ALERT = 1,
        SPVPRI_OVER = 2,
    };
    enum class SPWAVEFORMATTYPE : int32_t
    {
        SPWF_INPUT = 0,
        SPWF_SRENGINE = 1,
    };
    enum class SPWORDPRONOUNCEABLE : int32_t
    {
        SPWP_UNKNOWN_WORD_UNPRONOUNCEABLE = 0,
        SPWP_UNKNOWN_WORD_PRONOUNCEABLE = 1,
        SPWP_KNOWN_WORD_PRONOUNCEABLE = 2,
    };
    enum class SPWORDTYPE : int32_t
    {
        eWORDTYPE_ADDED = 1,
        eWORDTYPE_DELETED = 2,
    };
    enum class SPXMLRESULTOPTIONS : int32_t
    {
        SPXRO_SML = 0,
        SPXRO_Alternates_SML = 1,
    };
    enum class SpeechAudioFormatType : int32_t
    {
        SAFTDefault = -1,
        SAFTNoAssignedFormat = 0,
        SAFTText = 1,
        SAFTNonStandardFormat = 2,
        SAFTExtendedAudioFormat = 3,
        SAFT8kHz8BitMono = 4,
        SAFT8kHz8BitStereo = 5,
        SAFT8kHz16BitMono = 6,
        SAFT8kHz16BitStereo = 7,
        SAFT11kHz8BitMono = 8,
        SAFT11kHz8BitStereo = 9,
        SAFT11kHz16BitMono = 10,
        SAFT11kHz16BitStereo = 11,
        SAFT12kHz8BitMono = 12,
        SAFT12kHz8BitStereo = 13,
        SAFT12kHz16BitMono = 14,
        SAFT12kHz16BitStereo = 15,
        SAFT16kHz8BitMono = 16,
        SAFT16kHz8BitStereo = 17,
        SAFT16kHz16BitMono = 18,
        SAFT16kHz16BitStereo = 19,
        SAFT22kHz8BitMono = 20,
        SAFT22kHz8BitStereo = 21,
        SAFT22kHz16BitMono = 22,
        SAFT22kHz16BitStereo = 23,
        SAFT24kHz8BitMono = 24,
        SAFT24kHz8BitStereo = 25,
        SAFT24kHz16BitMono = 26,
        SAFT24kHz16BitStereo = 27,
        SAFT32kHz8BitMono = 28,
        SAFT32kHz8BitStereo = 29,
        SAFT32kHz16BitMono = 30,
        SAFT32kHz16BitStereo = 31,
        SAFT44kHz8BitMono = 32,
        SAFT44kHz8BitStereo = 33,
        SAFT44kHz16BitMono = 34,
        SAFT44kHz16BitStereo = 35,
        SAFT48kHz8BitMono = 36,
        SAFT48kHz8BitStereo = 37,
        SAFT48kHz16BitMono = 38,
        SAFT48kHz16BitStereo = 39,
        SAFTTrueSpeech_8kHz1BitMono = 40,
        SAFTCCITT_ALaw_8kHzMono = 41,
        SAFTCCITT_ALaw_8kHzStereo = 42,
        SAFTCCITT_ALaw_11kHzMono = 43,
        SAFTCCITT_ALaw_11kHzStereo = 44,
        SAFTCCITT_ALaw_22kHzMono = 45,
        SAFTCCITT_ALaw_22kHzStereo = 46,
        SAFTCCITT_ALaw_44kHzMono = 47,
        SAFTCCITT_ALaw_44kHzStereo = 48,
        SAFTCCITT_uLaw_8kHzMono = 49,
        SAFTCCITT_uLaw_8kHzStereo = 50,
        SAFTCCITT_uLaw_11kHzMono = 51,
        SAFTCCITT_uLaw_11kHzStereo = 52,
        SAFTCCITT_uLaw_22kHzMono = 53,
        SAFTCCITT_uLaw_22kHzStereo = 54,
        SAFTCCITT_uLaw_44kHzMono = 55,
        SAFTCCITT_uLaw_44kHzStereo = 56,
        SAFTADPCM_8kHzMono = 57,
        SAFTADPCM_8kHzStereo = 58,
        SAFTADPCM_11kHzMono = 59,
        SAFTADPCM_11kHzStereo = 60,
        SAFTADPCM_22kHzMono = 61,
        SAFTADPCM_22kHzStereo = 62,
        SAFTADPCM_44kHzMono = 63,
        SAFTADPCM_44kHzStereo = 64,
        SAFTGSM610_8kHzMono = 65,
        SAFTGSM610_11kHzMono = 66,
        SAFTGSM610_22kHzMono = 67,
        SAFTGSM610_44kHzMono = 68,
    };
    enum class SpeechAudioState : int32_t
    {
        SASClosed = 0,
        SASStop = 1,
        SASPause = 2,
        SASRun = 3,
    };
    enum class SpeechBookmarkOptions : int32_t
    {
        SBONone = 0,
        SBOPause = 1,
    };
    enum class SpeechDataKeyLocation : int32_t
    {
        SDKLDefaultLocation = 0,
        SDKLCurrentUser = 1,
        SDKLLocalMachine = 2,
        SDKLCurrentConfig = 5,
    };
    enum class SpeechDiscardType : int32_t
    {
        SDTProperty = 1,
        SDTReplacement = 2,
        SDTRule = 4,
        SDTDisplayText = 8,
        SDTLexicalForm = 16,
        SDTPronunciation = 32,
        SDTAudio = 64,
        SDTAlternates = 128,
        SDTAll = 255,
    };
    enum class SpeechDisplayAttributes : int32_t
    {
        SDA_No_Trailing_Space = 0,
        SDA_One_Trailing_Space = 2,
        SDA_Two_Trailing_Spaces = 4,
        SDA_Consume_Leading_Spaces = 8,
    };
    enum class SpeechEmulationCompareFlags : int32_t
    {
        SECFIgnoreCase = 1,
        SECFIgnoreKanaType = 65536,
        SECFIgnoreWidth = 131072,
        SECFNoSpecialChars = 536870912,
        SECFEmulateResult = 1073741824,
        SECFDefault = 196609,
    };
    enum class SpeechEngineConfidence : int32_t
    {
        SECLowConfidence = -1,
        SECNormalConfidence = 0,
        SECHighConfidence = 1,
    };
    enum class SpeechFormatType : int32_t
    {
        SFTInput = 0,
        SFTSREngine = 1,
    };
    enum class SpeechGrammarRuleStateTransitionType : int32_t
    {
        SGRSTTEpsilon = 0,
        SGRSTTWord = 1,
        SGRSTTRule = 2,
        SGRSTTDictation = 3,
        SGRSTTWildcard = 4,
        SGRSTTTextBuffer = 5,
    };
    enum class SpeechGrammarState : int32_t
    {
        SGSEnabled = 1,
        SGSDisabled = 0,
        SGSExclusive = 3,
    };
    enum class SpeechGrammarWordType : int32_t
    {
        SGDisplay = 0,
        SGLexical = 1,
        SGPronounciation = 2,
        SGLexicalNoSpecialChars = 3,
    };
    enum class SpeechInterference : int32_t
    {
        SINone = 0,
        SINoise = 1,
        SINoSignal = 2,
        SITooLoud = 3,
        SITooQuiet = 4,
        SITooFast = 5,
        SITooSlow = 6,
    };
    enum class SpeechLexiconType : int32_t
    {
        SLTUser = 1,
        SLTApp = 2,
    };
    enum class SpeechLoadOption : int32_t
    {
        SLOStatic = 0,
        SLODynamic = 1,
    };
    enum class SpeechPartOfSpeech : int32_t
    {
        SPSNotOverriden = -1,
        SPSUnknown = 0,
        SPSNoun = 4096,
        SPSVerb = 8192,
        SPSModifier = 12288,
        SPSFunction = 16384,
        SPSInterjection = 20480,
        SPSLMA = 28672,
        SPSSuppressWord = 61440,
    };
    enum class SpeechRecoContextState : int32_t
    {
        SRCS_Disabled = 0,
        SRCS_Enabled = 1,
    };
    enum class SpeechRecoEvents : int32_t
    {
        SREStreamEnd = 1,
        SRESoundStart = 2,
        SRESoundEnd = 4,
        SREPhraseStart = 8,
        SRERecognition = 16,
        SREHypothesis = 32,
        SREBookmark = 64,
        SREPropertyNumChange = 128,
        SREPropertyStringChange = 256,
        SREFalseRecognition = 512,
        SREInterference = 1024,
        SRERequestUI = 2048,
        SREStateChange = 4096,
        SREAdaptation = 8192,
        SREStreamStart = 16384,
        SRERecoOtherContext = 32768,
        SREAudioLevel = 65536,
        SREPrivate = 262144,
        SREAllEvents = 393215,
    };
    enum class SpeechRecognitionType : int32_t
    {
        SRTStandard = 0,
        SRTAutopause = 1,
        SRTEmulated = 2,
        SRTSMLTimeout = 4,
        SRTExtendableParse = 8,
        SRTReSent = 16,
    };
    enum class SpeechRecognizerState : int32_t
    {
        SRSInactive = 0,
        SRSActive = 1,
        SRSActiveAlways = 2,
        SRSInactiveWithPurge = 3,
    };
    enum class SpeechRetainedAudioOptions : int32_t
    {
        SRAONone = 0,
        SRAORetainAudio = 1,
    };
    enum class SpeechRuleAttributes : int32_t
    {
        SRATopLevel = 1,
        SRADefaultToActive = 2,
        SRAExport = 4,
        SRAImport = 8,
        SRAInterpreter = 16,
        SRADynamic = 32,
        SRARoot = 64,
    };
    enum class SpeechRuleState : int32_t
    {
        SGDSInactive = 0,
        SGDSActive = 1,
        SGDSActiveWithAutoPause = 3,
        SGDSActiveUserDelimited = 4,
    };
    enum class SpeechRunState : int32_t
    {
        SRSEDone = 1,
        SRSEIsSpeaking = 2,
    };
    enum class SpeechSpecialTransitionType : int32_t
    {
        SSTTWildcard = 1,
        SSTTDictation = 2,
        SSTTTextBuffer = 3,
    };
    enum class SpeechStreamFileMode : int32_t
    {
        SSFMOpenForRead = 0,
        SSFMOpenReadWrite = 1,
        SSFMCreate = 2,
        SSFMCreateForWrite = 3,
    };
    enum class SpeechStreamSeekPositionType : uint32_t
    {
        SSSPTRelativeToStart = 0x0,
        SSSPTRelativeToCurrentPosition = 0x1,
        SSSPTRelativeToEnd = 0x2,
    };
    enum class SpeechTokenContext : uint32_t
    {
        STCInprocServer = 0x1,
        STCInprocHandler = 0x2,
        STCLocalServer = 0x4,
        STCRemoteServer = 0x10,
        STCAll = 0x17,
    };
    enum class SpeechTokenShellFolder : int32_t
    {
        STSF_AppData = 26,
        STSF_LocalAppData = 28,
        STSF_CommonAppData = 35,
        STSF_FlagCreate = 32768,
    };
    enum class SpeechVisemeFeature : int32_t
    {
        SVF_None = 0,
        SVF_Stressed = 1,
        SVF_Emphasis = 2,
    };
    enum class SpeechVisemeType : int32_t
    {
        SVP_0 = 0,
        SVP_1 = 1,
        SVP_2 = 2,
        SVP_3 = 3,
        SVP_4 = 4,
        SVP_5 = 5,
        SVP_6 = 6,
        SVP_7 = 7,
        SVP_8 = 8,
        SVP_9 = 9,
        SVP_10 = 10,
        SVP_11 = 11,
        SVP_12 = 12,
        SVP_13 = 13,
        SVP_14 = 14,
        SVP_15 = 15,
        SVP_16 = 16,
        SVP_17 = 17,
        SVP_18 = 18,
        SVP_19 = 19,
        SVP_20 = 20,
        SVP_21 = 21,
    };
    enum class SpeechVoiceEvents : int32_t
    {
        SVEStartInputStream = 2,
        SVEEndInputStream = 4,
        SVEVoiceChange = 8,
        SVEBookmark = 16,
        SVEWordBoundary = 32,
        SVEPhoneme = 64,
        SVESentenceBoundary = 128,
        SVEViseme = 256,
        SVEAudioLevel = 512,
        SVEPrivate = 32768,
        SVEAllEvents = 33790,
    };
    enum class SpeechVoicePriority : int32_t
    {
        SVPNormal = 0,
        SVPAlert = 1,
        SVPOver = 2,
    };
    enum class SpeechVoiceSpeakFlags : int32_t
    {
        SVSFDefault = 0,
        SVSFlagsAsync = 1,
        SVSFPurgeBeforeSpeak = 2,
        SVSFIsFilename = 4,
        SVSFIsXML = 8,
        SVSFIsNotXML = 16,
        SVSFPersistXML = 32,
        SVSFNLPSpeakPunc = 64,
        SVSFParseSapi = 128,
        SVSFParseSsml = 256,
        SVSFParseAutodetect = 0,
        SVSFNLPMask = 64,
        SVSFParseMask = 384,
        SVSFVoiceMask = 511,
        SVSFUnusedFlags = -512,
    };
    enum class SpeechWordPronounceable : int32_t
    {
        SWPUnknownWordUnpronounceable = 0,
        SWPUnknownWordPronounceable = 1,
        SWPKnownWordPronounceable = 2,
    };
    enum class SpeechWordType : int32_t
    {
        SWTAdded = 1,
        SWTDeleted = 2,
    };
#pragma endregion enums

#pragma region forward_declarations
    struct SPAUDIOBUFFERINFO;
    struct SPAUDIOSTATUS;
    struct SPBINARYGRAMMAR;
    struct SPDISPLAYPHRASE;
    struct SPDISPLAYTOKEN;
    struct SPEVENT;
    struct SPEVENTEX;
    struct SPEVENTSOURCEINFO;
    struct SPNORMALIZATIONLIST;
    struct SPPHRASE;
    struct SPPHRASEELEMENT;
    struct SPPHRASEPROPERTY;
    struct SPPHRASEREPLACEMENT;
    struct SPPHRASERULE;
    struct SPPHRASE_50;
    struct SPPROPERTYINFO;
    struct SPRECOCONTEXTSTATUS;
    struct SPRECOGNIZERSTATUS;
    struct SPRECORESULTTIMES;
    struct SPRULE;
    struct SPSEMANTICERRORINFO;
    struct SPSERIALIZEDEVENT;
    struct SPSERIALIZEDEVENT64;
    struct SPSERIALIZEDPHRASE;
    struct SPSERIALIZEDRESULT;
    struct SPSHORTCUTPAIR;
    struct SPSHORTCUTPAIRLIST;
    struct SPSTATEHANDLE__;
    struct SPTEXTSELECTIONINFO;
    struct SPVCONTEXT;
    struct SPVOICESTATUS;
    struct SPVPITCH;
    struct SPVSTATE;
    struct SPWORD;
    struct SPWORDLIST;
    struct SPWORDPRONUNCIATION;
    struct SPWORDPRONUNCIATIONLIST;
    struct SpAudioFormat;
    struct SpCompressedLexicon;
    struct SpCustomStream;
    struct SpFileStream;
    struct SpInProcRecoContext;
    struct SpInprocRecognizer;
    struct SpLexicon;
    struct SpMMAudioEnum;
    struct SpMMAudioIn;
    struct SpMMAudioOut;
    struct SpMemoryStream;
    struct SpNotifyTranslator;
    struct SpNullPhoneConverter;
    struct SpObjectToken;
    struct SpObjectTokenCategory;
    struct SpPhoneConverter;
    struct SpPhoneticAlphabetConverter;
    struct SpPhraseInfoBuilder;
    struct SpResourceManager;
    struct SpSharedRecoContext;
    struct SpSharedRecognizer;
    struct SpShortcut;
    struct SpStream;
    struct SpStreamFormatConverter;
    struct SpTextSelectionInformation;
    struct SpUnCompressedLexicon;
    struct SpVoice;
    struct SpWaveFormatEx;
    struct IEnumSpObjectTokens;
    struct ISpAudio;
    struct ISpContainerLexicon;
    struct ISpDataKey;
    struct ISpDisplayAlternates;
    struct ISpEnginePronunciation;
    struct ISpEventSink;
    struct ISpEventSource;
    struct ISpEventSource2;
    struct ISpGrammarBuilder;
    struct ISpGrammarBuilder2;
    struct ISpLexicon;
    struct ISpMMSysAudio;
    struct ISpNotifyCallback;
    struct ISpNotifySink;
    struct ISpNotifySource;
    struct ISpNotifyTranslator;
    struct ISpObjectToken;
    struct ISpObjectTokenCategory;
    struct ISpObjectTokenInit;
    struct ISpObjectWithToken;
    struct ISpPhoneConverter;
    struct ISpPhoneticAlphabetConverter;
    struct ISpPhoneticAlphabetSelection;
    struct ISpPhrase;
    struct ISpPhrase2;
    struct ISpPhraseAlt;
    struct ISpProperties;
    struct ISpRecoContext;
    struct ISpRecoContext2;
    struct ISpRecoGrammar;
    struct ISpRecoGrammar2;
    struct ISpRecoResult;
    struct ISpRecoResult2;
    struct ISpRecognizer;
    struct ISpRecognizer2;
    struct ISpRegDataKey;
    struct ISpResourceManager;
    struct ISpSerializeState;
    struct ISpShortcut;
    struct ISpStream;
    struct ISpStreamFormat;
    struct ISpStreamFormatConverter;
    struct ISpTranscript;
    struct ISpVoice;
    struct ISpXMLRecoResult;
    struct ISpeechAudio;
    struct ISpeechAudioBufferInfo;
    struct ISpeechAudioFormat;
    struct ISpeechAudioStatus;
    struct ISpeechBaseStream;
    struct ISpeechCustomStream;
    struct ISpeechDataKey;
    struct ISpeechFileStream;
    struct ISpeechGrammarRule;
    struct ISpeechGrammarRuleState;
    struct ISpeechGrammarRuleStateTransition;
    struct ISpeechGrammarRuleStateTransitions;
    struct ISpeechGrammarRules;
    struct ISpeechLexicon;
    struct ISpeechLexiconPronunciation;
    struct ISpeechLexiconPronunciations;
    struct ISpeechLexiconWord;
    struct ISpeechLexiconWords;
    struct ISpeechMMSysAudio;
    struct ISpeechMemoryStream;
    struct ISpeechObjectToken;
    struct ISpeechObjectTokenCategory;
    struct ISpeechObjectTokens;
    struct ISpeechPhoneConverter;
    struct ISpeechPhraseAlternate;
    struct ISpeechPhraseAlternates;
    struct ISpeechPhraseElement;
    struct ISpeechPhraseElements;
    struct ISpeechPhraseInfo;
    struct ISpeechPhraseInfoBuilder;
    struct ISpeechPhraseProperties;
    struct ISpeechPhraseProperty;
    struct ISpeechPhraseReplacement;
    struct ISpeechPhraseReplacements;
    struct ISpeechPhraseRule;
    struct ISpeechPhraseRules;
    struct ISpeechRecoContext;
    struct ISpeechRecoGrammar;
    struct ISpeechRecoResult;
    struct ISpeechRecoResult2;
    struct ISpeechRecoResultDispatch;
    struct ISpeechRecoResultTimes;
    struct ISpeechRecognizer;
    struct ISpeechRecognizerStatus;
    struct ISpeechResourceLoader;
    struct ISpeechTextSelectionInformation;
    struct ISpeechVoice;
    struct ISpeechVoiceStatus;
    struct ISpeechWaveFormatEx;
    struct ISpeechXMLRecoResult;
    struct _ISpeechRecoContextEvents;
    struct _ISpeechVoiceEvents;
#pragma endregion forward_declarations

#pragma region delegates
    using SPNOTIFYCALLBACK = void __stdcall(Windows::Win32::Foundation::WPARAM, Windows::Win32::Foundation::LPARAM);
#pragma endregion delegates

}
namespace win32::_impl_
{
#pragma region guids
#pragma endregion guids

}
#endif
