// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Graphics_OpenGL_2_H
#define WIN32_Windows_Win32_Graphics_OpenGL_2_H
#include "win32/Windows.Win32.Graphics.OpenGL.h"
#include "win32/impl/Windows.Win32.Graphics.OpenGL.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Graphics::OpenGL
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    int32_t __stdcall ORBIT_IMPL_ChoosePixelFormat(win32::Windows::Win32::Graphics::Gdi::HDC hdc, win32::Windows::Win32::Graphics::OpenGL::PIXELFORMATDESCRIPTOR* ppfd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(ppfd);

        auto win32_impl_result = g_api_table.ChoosePixelFormat(hdc, ppfd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_DescribePixelFormat(win32::Windows::Win32::Graphics::Gdi::HDC hdc, int32_t iPixelFormat, uint32_t nBytes, win32::Windows::Win32::Graphics::OpenGL::PIXELFORMATDESCRIPTOR* ppfd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(iPixelFormat);
        ORBIT_TRACK_PARAM(nBytes);
        ORBIT_TRACK_PARAM(ppfd);

        auto win32_impl_result = g_api_table.DescribePixelFormat(hdc, iPixelFormat, nBytes, ppfd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_GetPixelFormat(win32::Windows::Win32::Graphics::Gdi::HDC hdc) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);

        auto win32_impl_result = g_api_table.GetPixelFormat(hdc);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SetPixelFormat(win32::Windows::Win32::Graphics::Gdi::HDC hdc, int32_t format, win32::Windows::Win32::Graphics::OpenGL::PIXELFORMATDESCRIPTOR* ppfd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hdc);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(ppfd);

        auto win32_impl_result = g_api_table.SetPixelFormat(hdc, format, ppfd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_GetEnhMetaFilePixelFormat(win32::Windows::Win32::Graphics::Gdi::HENHMETAFILE hemf, uint32_t cbBuffer, win32::Windows::Win32::Graphics::OpenGL::PIXELFORMATDESCRIPTOR* ppfd) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hemf);
        ORBIT_TRACK_PARAM(cbBuffer);
        ORBIT_TRACK_PARAM(ppfd);

        auto win32_impl_result = g_api_table.GetEnhMetaFilePixelFormat(hemf, cbBuffer, ppfd);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglCopyContext(win32::Windows::Win32::Graphics::OpenGL::HGLRC param0, win32::Windows::Win32::Graphics::OpenGL::HGLRC param1, uint32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);

        auto win32_impl_result = g_api_table.wglCopyContext(param0, param1, param2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::OpenGL::HGLRC __stdcall ORBIT_IMPL_wglCreateContext(win32::Windows::Win32::Graphics::Gdi::HDC param0) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);

        auto win32_impl_result = g_api_table.wglCreateContext(param0);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::OpenGL::HGLRC __stdcall ORBIT_IMPL_wglCreateLayerContext(win32::Windows::Win32::Graphics::Gdi::HDC param0, int32_t param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);

        auto win32_impl_result = g_api_table.wglCreateLayerContext(param0, param1);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglDeleteContext(win32::Windows::Win32::Graphics::OpenGL::HGLRC param0) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);

        auto win32_impl_result = g_api_table.wglDeleteContext(param0);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::OpenGL::HGLRC __stdcall ORBIT_IMPL_wglGetCurrentContext() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.wglGetCurrentContext();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::Gdi::HDC __stdcall ORBIT_IMPL_wglGetCurrentDC() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.wglGetCurrentDC();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PROC* __stdcall ORBIT_IMPL_wglGetProcAddress(win32::Windows::Win32::Foundation::PSTR param0) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);

        auto win32_impl_result = g_api_table.wglGetProcAddress(param0);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglMakeCurrent(win32::Windows::Win32::Graphics::Gdi::HDC param0, win32::Windows::Win32::Graphics::OpenGL::HGLRC param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);

        auto win32_impl_result = g_api_table.wglMakeCurrent(param0, param1);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglShareLists(win32::Windows::Win32::Graphics::OpenGL::HGLRC param0, win32::Windows::Win32::Graphics::OpenGL::HGLRC param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);

        auto win32_impl_result = g_api_table.wglShareLists(param0, param1);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglUseFontBitmapsA(win32::Windows::Win32::Graphics::Gdi::HDC param0, uint32_t param1, uint32_t param2, uint32_t param3) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);

        auto win32_impl_result = g_api_table.wglUseFontBitmapsA(param0, param1, param2, param3);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglUseFontBitmapsW(win32::Windows::Win32::Graphics::Gdi::HDC param0, uint32_t param1, uint32_t param2, uint32_t param3) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);

        auto win32_impl_result = g_api_table.wglUseFontBitmapsW(param0, param1, param2, param3);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_SwapBuffers(win32::Windows::Win32::Graphics::Gdi::HDC param0) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);

        auto win32_impl_result = g_api_table.SwapBuffers(param0);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglUseFontOutlinesA(win32::Windows::Win32::Graphics::Gdi::HDC param0, uint32_t param1, uint32_t param2, uint32_t param3, float param4, float param5, int32_t param6, win32::Windows::Win32::Graphics::OpenGL::GLYPHMETRICSFLOAT* param7) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);
        ORBIT_TRACK_PARAM(param4);
        ORBIT_TRACK_PARAM(param5);
        ORBIT_TRACK_PARAM(param6);
        ORBIT_TRACK_PARAM(param7);

        auto win32_impl_result = g_api_table.wglUseFontOutlinesA(param0, param1, param2, param3, param4, param5, param6, param7);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglUseFontOutlinesW(win32::Windows::Win32::Graphics::Gdi::HDC param0, uint32_t param1, uint32_t param2, uint32_t param3, float param4, float param5, int32_t param6, win32::Windows::Win32::Graphics::OpenGL::GLYPHMETRICSFLOAT* param7) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);
        ORBIT_TRACK_PARAM(param4);
        ORBIT_TRACK_PARAM(param5);
        ORBIT_TRACK_PARAM(param6);
        ORBIT_TRACK_PARAM(param7);

        auto win32_impl_result = g_api_table.wglUseFontOutlinesW(param0, param1, param2, param3, param4, param5, param6, param7);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglDescribeLayerPlane(win32::Windows::Win32::Graphics::Gdi::HDC param0, int32_t param1, int32_t param2, uint32_t param3, win32::Windows::Win32::Graphics::OpenGL::LAYERPLANEDESCRIPTOR* param4) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);
        ORBIT_TRACK_PARAM(param4);

        auto win32_impl_result = g_api_table.wglDescribeLayerPlane(param0, param1, param2, param3, param4);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_wglSetLayerPaletteEntries(win32::Windows::Win32::Graphics::Gdi::HDC param0, int32_t param1, int32_t param2, int32_t param3, uint32_t* param4) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);
        ORBIT_TRACK_PARAM(param4);

        auto win32_impl_result = g_api_table.wglSetLayerPaletteEntries(param0, param1, param2, param3, param4);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_wglGetLayerPaletteEntries(win32::Windows::Win32::Graphics::Gdi::HDC param0, int32_t param1, int32_t param2, int32_t param3, uint32_t* param4) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);
        ORBIT_TRACK_PARAM(param3);
        ORBIT_TRACK_PARAM(param4);

        auto win32_impl_result = g_api_table.wglGetLayerPaletteEntries(param0, param1, param2, param3, param4);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglRealizeLayerPalette(win32::Windows::Win32::Graphics::Gdi::HDC param0, int32_t param1, win32::Windows::Win32::Foundation::BOOL param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);
        ORBIT_TRACK_PARAM(param2);

        auto win32_impl_result = g_api_table.wglRealizeLayerPalette(param0, param1, param2);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_wglSwapLayerBuffers(win32::Windows::Win32::Graphics::Gdi::HDC param0, uint32_t param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(param0);
        ORBIT_TRACK_PARAM(param1);

        auto win32_impl_result = g_api_table.wglSwapLayerBuffers(param0, param1);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glAccum(uint32_t op, float value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(op);
        ORBIT_TRACK_PARAM(value);

        g_api_table.glAccum(op, value);
        
    }

    void __stdcall ORBIT_IMPL_glAlphaFunc(uint32_t func, float ref) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(func);
        ORBIT_TRACK_PARAM(ref);

        g_api_table.glAlphaFunc(func, ref);
        
    }

    uint8_t __stdcall ORBIT_IMPL_glAreTexturesResident(int32_t n, uint32_t* textures, uint8_t* residences) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(textures);
        ORBIT_TRACK_PARAM(residences);

        auto win32_impl_result = g_api_table.glAreTexturesResident(n, textures, residences);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glArrayElement(int32_t i) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(i);

        g_api_table.glArrayElement(i);
        
    }

    void __stdcall ORBIT_IMPL_glBegin(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glBegin(mode);
        
    }

    void __stdcall ORBIT_IMPL_glBindTexture(uint32_t target, uint32_t texture) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(texture);

        g_api_table.glBindTexture(target, texture);
        
    }

    void __stdcall ORBIT_IMPL_glBitmap(int32_t width, int32_t height, float xorig, float yorig, float xmove, float ymove, uint8_t* bitmap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(xorig);
        ORBIT_TRACK_PARAM(yorig);
        ORBIT_TRACK_PARAM(xmove);
        ORBIT_TRACK_PARAM(ymove);
        ORBIT_TRACK_PARAM(bitmap);

        g_api_table.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        
    }

    void __stdcall ORBIT_IMPL_glBlendFunc(uint32_t sfactor, uint32_t dfactor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(sfactor);
        ORBIT_TRACK_PARAM(dfactor);

        g_api_table.glBlendFunc(sfactor, dfactor);
        
    }

    void __stdcall ORBIT_IMPL_glCallList(uint32_t list) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(list);

        g_api_table.glCallList(list);
        
    }

    void __stdcall ORBIT_IMPL_glCallLists(int32_t n, uint32_t type, void* lists) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(lists);

        g_api_table.glCallLists(n, type, lists);
        
    }

    void __stdcall ORBIT_IMPL_glClear(uint32_t mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glClear(mask);
        
    }

    void __stdcall ORBIT_IMPL_glClearAccum(float red, float green, float blue, float alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glClearAccum(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glClearColor(float red, float green, float blue, float alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glClearColor(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glClearDepth(double depth) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(depth);

        g_api_table.glClearDepth(depth);
        
    }

    void __stdcall ORBIT_IMPL_glClearIndex(float c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glClearIndex(c);
        
    }

    void __stdcall ORBIT_IMPL_glClearStencil(int32_t s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        g_api_table.glClearStencil(s);
        
    }

    void __stdcall ORBIT_IMPL_glClipPlane(uint32_t plane, double* equation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plane);
        ORBIT_TRACK_PARAM(equation);

        g_api_table.glClipPlane(plane, equation);
        
    }

    void __stdcall ORBIT_IMPL_glColor3b(int8_t red, int8_t green, int8_t blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3b(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3bv(int8_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3bv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3d(double red, double green, double blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3d(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3f(float red, float green, float blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3f(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3i(int32_t red, int32_t green, int32_t blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3i(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3s(int16_t red, int16_t green, int16_t blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3s(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3ub(uint8_t red, uint8_t green, uint8_t blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3ub(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3ubv(uint8_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3ubv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3ui(uint32_t red, uint32_t green, uint32_t blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3ui(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3uiv(uint32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3uiv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor3us(uint16_t red, uint16_t green, uint16_t blue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);

        g_api_table.glColor3us(red, green, blue);
        
    }

    void __stdcall ORBIT_IMPL_glColor3usv(uint16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor3usv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4b(int8_t red, int8_t green, int8_t blue, int8_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4b(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4bv(int8_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4bv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4d(double red, double green, double blue, double alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4d(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4f(float red, float green, float blue, float alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4f(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4i(int32_t red, int32_t green, int32_t blue, int32_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4i(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4s(int16_t red, int16_t green, int16_t blue, int16_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4s(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4ub(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4ub(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4ubv(uint8_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4ubv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4ui(uint32_t red, uint32_t green, uint32_t blue, uint32_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4ui(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4uiv(uint32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4uiv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColor4us(uint16_t red, uint16_t green, uint16_t blue, uint16_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColor4us(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColor4usv(uint16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glColor4usv(v);
        
    }

    void __stdcall ORBIT_IMPL_glColorMask(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(red);
        ORBIT_TRACK_PARAM(green);
        ORBIT_TRACK_PARAM(blue);
        ORBIT_TRACK_PARAM(alpha);

        g_api_table.glColorMask(red, green, blue, alpha);
        
    }

    void __stdcall ORBIT_IMPL_glColorMaterial(uint32_t face, uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glColorMaterial(face, mode);
        
    }

    void __stdcall ORBIT_IMPL_glColorPointer(int32_t size, uint32_t type, int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glColorPointer(size, type, stride, pointer);
        
    }

    void __stdcall ORBIT_IMPL_glCopyPixels(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(type);

        g_api_table.glCopyPixels(x, y, width, height, type);
        
    }

    void __stdcall ORBIT_IMPL_glCopyTexImage1D(uint32_t target, int32_t level, uint32_t internalFormat, int32_t x, int32_t y, int32_t width, int32_t border) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(internalFormat);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(border);

        g_api_table.glCopyTexImage1D(target, level, internalFormat, x, y, width, border);
        
    }

    void __stdcall ORBIT_IMPL_glCopyTexImage2D(uint32_t target, int32_t level, uint32_t internalFormat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(internalFormat);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(border);

        g_api_table.glCopyTexImage2D(target, level, internalFormat, x, y, width, height, border);
        
    }

    void __stdcall ORBIT_IMPL_glCopyTexSubImage1D(uint32_t target, int32_t level, int32_t xoffset, int32_t x, int32_t y, int32_t width) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(xoffset);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);

        g_api_table.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        
    }

    void __stdcall ORBIT_IMPL_glCopyTexSubImage2D(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(xoffset);
        ORBIT_TRACK_PARAM(yoffset);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);

        g_api_table.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        
    }

    void __stdcall ORBIT_IMPL_glCullFace(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glCullFace(mode);
        
    }

    void __stdcall ORBIT_IMPL_glDeleteLists(uint32_t list, int32_t range) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(list);
        ORBIT_TRACK_PARAM(range);

        g_api_table.glDeleteLists(list, range);
        
    }

    void __stdcall ORBIT_IMPL_glDeleteTextures(int32_t n, uint32_t* textures) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(textures);

        g_api_table.glDeleteTextures(n, textures);
        
    }

    void __stdcall ORBIT_IMPL_glDepthFunc(uint32_t func) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(func);

        g_api_table.glDepthFunc(func);
        
    }

    void __stdcall ORBIT_IMPL_glDepthMask(uint8_t flag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(flag);

        g_api_table.glDepthMask(flag);
        
    }

    void __stdcall ORBIT_IMPL_glDepthRange(double zNear, double zFar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(zNear);
        ORBIT_TRACK_PARAM(zFar);

        g_api_table.glDepthRange(zNear, zFar);
        
    }

    void __stdcall ORBIT_IMPL_glDisable(uint32_t cap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cap);

        g_api_table.glDisable(cap);
        
    }

    void __stdcall ORBIT_IMPL_glDisableClientState(uint32_t array) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(array);

        g_api_table.glDisableClientState(array);
        
    }

    void __stdcall ORBIT_IMPL_glDrawArrays(uint32_t mode, int32_t first, int32_t count) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);
        ORBIT_TRACK_PARAM(first);
        ORBIT_TRACK_PARAM(count);

        g_api_table.glDrawArrays(mode, first, count);
        
    }

    void __stdcall ORBIT_IMPL_glDrawBuffer(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glDrawBuffer(mode);
        
    }

    void __stdcall ORBIT_IMPL_glDrawElements(uint32_t mode, int32_t count, uint32_t type, void* indices) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(indices);

        g_api_table.glDrawElements(mode, count, type, indices);
        
    }

    void __stdcall ORBIT_IMPL_glDrawPixels(int32_t width, int32_t height, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glDrawPixels(width, height, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glEdgeFlag(uint8_t flag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(flag);

        g_api_table.glEdgeFlag(flag);
        
    }

    void __stdcall ORBIT_IMPL_glEdgeFlagPointer(int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glEdgeFlagPointer(stride, pointer);
        
    }

    void __stdcall ORBIT_IMPL_glEdgeFlagv(uint8_t* flag) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(flag);

        g_api_table.glEdgeFlagv(flag);
        
    }

    void __stdcall ORBIT_IMPL_glEnable(uint32_t cap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cap);

        g_api_table.glEnable(cap);
        
    }

    void __stdcall ORBIT_IMPL_glEnableClientState(uint32_t array) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(array);

        g_api_table.glEnableClientState(array);
        
    }

    void __stdcall ORBIT_IMPL_glEnd() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glEnd();
        
    }

    void __stdcall ORBIT_IMPL_glEndList() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glEndList();
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord1d(double u) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);

        g_api_table.glEvalCoord1d(u);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord1dv(double* u) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);

        g_api_table.glEvalCoord1dv(u);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord1f(float u) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);

        g_api_table.glEvalCoord1f(u);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord1fv(float* u) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);

        g_api_table.glEvalCoord1fv(u);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord2d(double u, double v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);
        ORBIT_TRACK_PARAM(v);

        g_api_table.glEvalCoord2d(u, v);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord2dv(double* u) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);

        g_api_table.glEvalCoord2dv(u);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord2f(float u, float v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);
        ORBIT_TRACK_PARAM(v);

        g_api_table.glEvalCoord2f(u, v);
        
    }

    void __stdcall ORBIT_IMPL_glEvalCoord2fv(float* u) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(u);

        g_api_table.glEvalCoord2fv(u);
        
    }

    void __stdcall ORBIT_IMPL_glEvalMesh1(uint32_t mode, int32_t i1, int32_t i2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);
        ORBIT_TRACK_PARAM(i1);
        ORBIT_TRACK_PARAM(i2);

        g_api_table.glEvalMesh1(mode, i1, i2);
        
    }

    void __stdcall ORBIT_IMPL_glEvalMesh2(uint32_t mode, int32_t i1, int32_t i2, int32_t j1, int32_t j2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);
        ORBIT_TRACK_PARAM(i1);
        ORBIT_TRACK_PARAM(i2);
        ORBIT_TRACK_PARAM(j1);
        ORBIT_TRACK_PARAM(j2);

        g_api_table.glEvalMesh2(mode, i1, i2, j1, j2);
        
    }

    void __stdcall ORBIT_IMPL_glEvalPoint1(int32_t i) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(i);

        g_api_table.glEvalPoint1(i);
        
    }

    void __stdcall ORBIT_IMPL_glEvalPoint2(int32_t i, int32_t j) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(i);
        ORBIT_TRACK_PARAM(j);

        g_api_table.glEvalPoint2(i, j);
        
    }

    void __stdcall ORBIT_IMPL_glFeedbackBuffer(int32_t size, uint32_t type, float* buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(buffer);

        g_api_table.glFeedbackBuffer(size, type, buffer);
        
    }

    void __stdcall ORBIT_IMPL_glFinish() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glFinish();
        
    }

    void __stdcall ORBIT_IMPL_glFlush() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glFlush();
        
    }

    void __stdcall ORBIT_IMPL_glFogf(uint32_t pname, float param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glFogf(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glFogfv(uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glFogfv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glFogi(uint32_t pname, int32_t param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glFogi(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glFogiv(uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glFogiv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glFrontFace(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glFrontFace(mode);
        
    }

    void __stdcall ORBIT_IMPL_glFrustum(double left, double right, double bottom, double top, double zNear, double zFar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(left);
        ORBIT_TRACK_PARAM(right);
        ORBIT_TRACK_PARAM(bottom);
        ORBIT_TRACK_PARAM(top);
        ORBIT_TRACK_PARAM(zNear);
        ORBIT_TRACK_PARAM(zFar);

        g_api_table.glFrustum(left, right, bottom, top, zNear, zFar);
        
    }

    uint32_t __stdcall ORBIT_IMPL_glGenLists(int32_t range) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(range);

        auto win32_impl_result = g_api_table.glGenLists(range);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glGenTextures(int32_t n, uint32_t* textures) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(textures);

        g_api_table.glGenTextures(n, textures);
        
    }

    void __stdcall ORBIT_IMPL_glGetBooleanv(uint32_t pname, uint8_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetBooleanv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetClipPlane(uint32_t plane, double* equation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(plane);
        ORBIT_TRACK_PARAM(equation);

        g_api_table.glGetClipPlane(plane, equation);
        
    }

    void __stdcall ORBIT_IMPL_glGetDoublev(uint32_t pname, double* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetDoublev(pname, params);
        
    }

    uint32_t __stdcall ORBIT_IMPL_glGetError() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.glGetError();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glGetFloatv(uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetFloatv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetIntegerv(uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetIntegerv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetLightfv(uint32_t light, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(light);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetLightfv(light, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetLightiv(uint32_t light, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(light);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetLightiv(light, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetMapdv(uint32_t target, uint32_t query, double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(query);
        ORBIT_TRACK_PARAM(v);

        g_api_table.glGetMapdv(target, query, v);
        
    }

    void __stdcall ORBIT_IMPL_glGetMapfv(uint32_t target, uint32_t query, float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(query);
        ORBIT_TRACK_PARAM(v);

        g_api_table.glGetMapfv(target, query, v);
        
    }

    void __stdcall ORBIT_IMPL_glGetMapiv(uint32_t target, uint32_t query, int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(query);
        ORBIT_TRACK_PARAM(v);

        g_api_table.glGetMapiv(target, query, v);
        
    }

    void __stdcall ORBIT_IMPL_glGetMaterialfv(uint32_t face, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetMaterialfv(face, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetMaterialiv(uint32_t face, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetMaterialiv(face, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetPixelMapfv(uint32_t map, float* values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(values);

        g_api_table.glGetPixelMapfv(map, values);
        
    }

    void __stdcall ORBIT_IMPL_glGetPixelMapuiv(uint32_t map, uint32_t* values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(values);

        g_api_table.glGetPixelMapuiv(map, values);
        
    }

    void __stdcall ORBIT_IMPL_glGetPixelMapusv(uint32_t map, uint16_t* values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(values);

        g_api_table.glGetPixelMapusv(map, values);
        
    }

    void __stdcall ORBIT_IMPL_glGetPointerv(uint32_t pname, void** params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetPointerv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetPolygonStipple(uint8_t* mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glGetPolygonStipple(mask);
        
    }

    uint8_t* __stdcall ORBIT_IMPL_glGetString(uint32_t name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        auto win32_impl_result = g_api_table.glGetString(name);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glGetTexEnvfv(uint32_t target, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexEnvfv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexEnviv(uint32_t target, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexEnviv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexGendv(uint32_t coord, uint32_t pname, double* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexGendv(coord, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexGenfv(uint32_t coord, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexGenfv(coord, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexGeniv(uint32_t coord, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexGeniv(coord, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexImage(uint32_t target, int32_t level, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glGetTexImage(target, level, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexLevelParameterfv(uint32_t target, int32_t level, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexLevelParameterfv(target, level, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexLevelParameteriv(uint32_t target, int32_t level, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexLevelParameteriv(target, level, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexParameterfv(uint32_t target, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexParameterfv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glGetTexParameteriv(uint32_t target, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glGetTexParameteriv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glHint(uint32_t target, uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glHint(target, mode);
        
    }

    void __stdcall ORBIT_IMPL_glIndexMask(uint32_t mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glIndexMask(mask);
        
    }

    void __stdcall ORBIT_IMPL_glIndexPointer(uint32_t type, int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glIndexPointer(type, stride, pointer);
        
    }

    void __stdcall ORBIT_IMPL_glIndexd(double c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexd(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexdv(double* c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexdv(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexf(float c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexf(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexfv(float* c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexfv(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexi(int32_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexi(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexiv(int32_t* c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexiv(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexs(int16_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexs(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexsv(int16_t* c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexsv(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexub(uint8_t c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexub(c);
        
    }

    void __stdcall ORBIT_IMPL_glIndexubv(uint8_t* c) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(c);

        g_api_table.glIndexubv(c);
        
    }

    void __stdcall ORBIT_IMPL_glInitNames() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glInitNames();
        
    }

    void __stdcall ORBIT_IMPL_glInterleavedArrays(uint32_t format, int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glInterleavedArrays(format, stride, pointer);
        
    }

    uint8_t __stdcall ORBIT_IMPL_glIsEnabled(uint32_t cap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cap);

        auto win32_impl_result = g_api_table.glIsEnabled(cap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t __stdcall ORBIT_IMPL_glIsList(uint32_t list) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(list);

        auto win32_impl_result = g_api_table.glIsList(list);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t __stdcall ORBIT_IMPL_glIsTexture(uint32_t texture) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(texture);

        auto win32_impl_result = g_api_table.glIsTexture(texture);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glLightModelf(uint32_t pname, float param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glLightModelf(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glLightModelfv(uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glLightModelfv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glLightModeli(uint32_t pname, int32_t param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glLightModeli(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glLightModeliv(uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glLightModeliv(pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glLightf(uint32_t light, uint32_t pname, float param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(light);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glLightf(light, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glLightfv(uint32_t light, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(light);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glLightfv(light, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glLighti(uint32_t light, uint32_t pname, int32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(light);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glLighti(light, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glLightiv(uint32_t light, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(light);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glLightiv(light, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glLineStipple(int32_t factor, uint16_t pattern) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(factor);
        ORBIT_TRACK_PARAM(pattern);

        g_api_table.glLineStipple(factor, pattern);
        
    }

    void __stdcall ORBIT_IMPL_glLineWidth(float width) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(width);

        g_api_table.glLineWidth(width);
        
    }

    void __stdcall ORBIT_IMPL_glListBase(uint32_t base) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(base);

        g_api_table.glListBase(base);
        
    }

    void __stdcall ORBIT_IMPL_glLoadIdentity() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glLoadIdentity();
        
    }

    void __stdcall ORBIT_IMPL_glLoadMatrixd(double* m) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(m);

        g_api_table.glLoadMatrixd(m);
        
    }

    void __stdcall ORBIT_IMPL_glLoadMatrixf(float* m) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(m);

        g_api_table.glLoadMatrixf(m);
        
    }

    void __stdcall ORBIT_IMPL_glLoadName(uint32_t name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        g_api_table.glLoadName(name);
        
    }

    void __stdcall ORBIT_IMPL_glLogicOp(uint32_t opcode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(opcode);

        g_api_table.glLogicOp(opcode);
        
    }

    void __stdcall ORBIT_IMPL_glMap1d(uint32_t target, double u1, double u2, int32_t stride, int32_t order, double* points) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(order);
        ORBIT_TRACK_PARAM(points);

        g_api_table.glMap1d(target, u1, u2, stride, order, points);
        
    }

    void __stdcall ORBIT_IMPL_glMap1f(uint32_t target, float u1, float u2, int32_t stride, int32_t order, float* points) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(order);
        ORBIT_TRACK_PARAM(points);

        g_api_table.glMap1f(target, u1, u2, stride, order, points);
        
    }

    void __stdcall ORBIT_IMPL_glMap2d(uint32_t target, double u1, double u2, int32_t ustride, int32_t uorder, double v1, double v2, int32_t vstride, int32_t vorder, double* points) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);
        ORBIT_TRACK_PARAM(ustride);
        ORBIT_TRACK_PARAM(uorder);
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);
        ORBIT_TRACK_PARAM(vstride);
        ORBIT_TRACK_PARAM(vorder);
        ORBIT_TRACK_PARAM(points);

        g_api_table.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        
    }

    void __stdcall ORBIT_IMPL_glMap2f(uint32_t target, float u1, float u2, int32_t ustride, int32_t uorder, float v1, float v2, int32_t vstride, int32_t vorder, float* points) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);
        ORBIT_TRACK_PARAM(ustride);
        ORBIT_TRACK_PARAM(uorder);
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);
        ORBIT_TRACK_PARAM(vstride);
        ORBIT_TRACK_PARAM(vorder);
        ORBIT_TRACK_PARAM(points);

        g_api_table.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        
    }

    void __stdcall ORBIT_IMPL_glMapGrid1d(int32_t un, double u1, double u2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(un);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);

        g_api_table.glMapGrid1d(un, u1, u2);
        
    }

    void __stdcall ORBIT_IMPL_glMapGrid1f(int32_t un, float u1, float u2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(un);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);

        g_api_table.glMapGrid1f(un, u1, u2);
        
    }

    void __stdcall ORBIT_IMPL_glMapGrid2d(int32_t un, double u1, double u2, int32_t vn, double v1, double v2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(un);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);
        ORBIT_TRACK_PARAM(vn);
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);

        g_api_table.glMapGrid2d(un, u1, u2, vn, v1, v2);
        
    }

    void __stdcall ORBIT_IMPL_glMapGrid2f(int32_t un, float u1, float u2, int32_t vn, float v1, float v2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(un);
        ORBIT_TRACK_PARAM(u1);
        ORBIT_TRACK_PARAM(u2);
        ORBIT_TRACK_PARAM(vn);
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);

        g_api_table.glMapGrid2f(un, u1, u2, vn, v1, v2);
        
    }

    void __stdcall ORBIT_IMPL_glMaterialf(uint32_t face, uint32_t pname, float param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glMaterialf(face, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glMaterialfv(uint32_t face, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glMaterialfv(face, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glMateriali(uint32_t face, uint32_t pname, int32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glMateriali(face, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glMaterialiv(uint32_t face, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glMaterialiv(face, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glMatrixMode(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glMatrixMode(mode);
        
    }

    void __stdcall ORBIT_IMPL_glMultMatrixd(double* m) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(m);

        g_api_table.glMultMatrixd(m);
        
    }

    void __stdcall ORBIT_IMPL_glMultMatrixf(float* m) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(m);

        g_api_table.glMultMatrixf(m);
        
    }

    void __stdcall ORBIT_IMPL_glNewList(uint32_t list, uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(list);
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glNewList(list, mode);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3b(int8_t nx, int8_t ny, int8_t nz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nx);
        ORBIT_TRACK_PARAM(ny);
        ORBIT_TRACK_PARAM(nz);

        g_api_table.glNormal3b(nx, ny, nz);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3bv(int8_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glNormal3bv(v);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3d(double nx, double ny, double nz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nx);
        ORBIT_TRACK_PARAM(ny);
        ORBIT_TRACK_PARAM(nz);

        g_api_table.glNormal3d(nx, ny, nz);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glNormal3dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3f(float nx, float ny, float nz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nx);
        ORBIT_TRACK_PARAM(ny);
        ORBIT_TRACK_PARAM(nz);

        g_api_table.glNormal3f(nx, ny, nz);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glNormal3fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3i(int32_t nx, int32_t ny, int32_t nz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nx);
        ORBIT_TRACK_PARAM(ny);
        ORBIT_TRACK_PARAM(nz);

        g_api_table.glNormal3i(nx, ny, nz);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glNormal3iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3s(int16_t nx, int16_t ny, int16_t nz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nx);
        ORBIT_TRACK_PARAM(ny);
        ORBIT_TRACK_PARAM(nz);

        g_api_table.glNormal3s(nx, ny, nz);
        
    }

    void __stdcall ORBIT_IMPL_glNormal3sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glNormal3sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glNormalPointer(uint32_t type, int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glNormalPointer(type, stride, pointer);
        
    }

    void __stdcall ORBIT_IMPL_glOrtho(double left, double right, double bottom, double top, double zNear, double zFar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(left);
        ORBIT_TRACK_PARAM(right);
        ORBIT_TRACK_PARAM(bottom);
        ORBIT_TRACK_PARAM(top);
        ORBIT_TRACK_PARAM(zNear);
        ORBIT_TRACK_PARAM(zFar);

        g_api_table.glOrtho(left, right, bottom, top, zNear, zFar);
        
    }

    void __stdcall ORBIT_IMPL_glPassThrough(float token) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(token);

        g_api_table.glPassThrough(token);
        
    }

    void __stdcall ORBIT_IMPL_glPixelMapfv(uint32_t map, int32_t mapsize, float* values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(mapsize);
        ORBIT_TRACK_PARAM(values);

        g_api_table.glPixelMapfv(map, mapsize, values);
        
    }

    void __stdcall ORBIT_IMPL_glPixelMapuiv(uint32_t map, int32_t mapsize, uint32_t* values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(mapsize);
        ORBIT_TRACK_PARAM(values);

        g_api_table.glPixelMapuiv(map, mapsize, values);
        
    }

    void __stdcall ORBIT_IMPL_glPixelMapusv(uint32_t map, int32_t mapsize, uint16_t* values) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(map);
        ORBIT_TRACK_PARAM(mapsize);
        ORBIT_TRACK_PARAM(values);

        g_api_table.glPixelMapusv(map, mapsize, values);
        
    }

    void __stdcall ORBIT_IMPL_glPixelStoref(uint32_t pname, float param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glPixelStoref(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glPixelStorei(uint32_t pname, int32_t param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glPixelStorei(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glPixelTransferf(uint32_t pname, float param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glPixelTransferf(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glPixelTransferi(uint32_t pname, int32_t param1) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param1);

        g_api_table.glPixelTransferi(pname, param1);
        
    }

    void __stdcall ORBIT_IMPL_glPixelZoom(float xfactor, float yfactor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(xfactor);
        ORBIT_TRACK_PARAM(yfactor);

        g_api_table.glPixelZoom(xfactor, yfactor);
        
    }

    void __stdcall ORBIT_IMPL_glPointSize(float size) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(size);

        g_api_table.glPointSize(size);
        
    }

    void __stdcall ORBIT_IMPL_glPolygonMode(uint32_t face, uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(face);
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glPolygonMode(face, mode);
        
    }

    void __stdcall ORBIT_IMPL_glPolygonOffset(float factor, float units) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(factor);
        ORBIT_TRACK_PARAM(units);

        g_api_table.glPolygonOffset(factor, units);
        
    }

    void __stdcall ORBIT_IMPL_glPolygonStipple(uint8_t* mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glPolygonStipple(mask);
        
    }

    void __stdcall ORBIT_IMPL_glPopAttrib() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glPopAttrib();
        
    }

    void __stdcall ORBIT_IMPL_glPopClientAttrib() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glPopClientAttrib();
        
    }

    void __stdcall ORBIT_IMPL_glPopMatrix() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glPopMatrix();
        
    }

    void __stdcall ORBIT_IMPL_glPopName() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glPopName();
        
    }

    void __stdcall ORBIT_IMPL_glPrioritizeTextures(int32_t n, uint32_t* textures, float* priorities) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(n);
        ORBIT_TRACK_PARAM(textures);
        ORBIT_TRACK_PARAM(priorities);

        g_api_table.glPrioritizeTextures(n, textures, priorities);
        
    }

    void __stdcall ORBIT_IMPL_glPushAttrib(uint32_t mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glPushAttrib(mask);
        
    }

    void __stdcall ORBIT_IMPL_glPushClientAttrib(uint32_t mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glPushClientAttrib(mask);
        
    }

    void __stdcall ORBIT_IMPL_glPushMatrix() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        g_api_table.glPushMatrix();
        
    }

    void __stdcall ORBIT_IMPL_glPushName(uint32_t name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        g_api_table.glPushName(name);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2d(double x, double y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glRasterPos2d(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos2dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2f(float x, float y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glRasterPos2f(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos2fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2i(int32_t x, int32_t y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glRasterPos2i(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos2iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2s(int16_t x, int16_t y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glRasterPos2s(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos2sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos2sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3d(double x, double y, double z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glRasterPos3d(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos3dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3f(float x, float y, float z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glRasterPos3f(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos3fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3i(int32_t x, int32_t y, int32_t z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glRasterPos3i(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos3iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3s(int16_t x, int16_t y, int16_t z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glRasterPos3s(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos3sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos3sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4d(double x, double y, double z, double w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glRasterPos4d(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos4dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4f(float x, float y, float z, float w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glRasterPos4f(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos4fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4i(int32_t x, int32_t y, int32_t z, int32_t w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glRasterPos4i(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos4iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4s(int16_t x, int16_t y, int16_t z, int16_t w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glRasterPos4s(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glRasterPos4sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glRasterPos4sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glReadBuffer(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glReadBuffer(mode);
        
    }

    void __stdcall ORBIT_IMPL_glReadPixels(int32_t x, int32_t y, int32_t width, int32_t height, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glReadPixels(x, y, width, height, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glRectd(double x1, double y1, double x2, double y2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x1);
        ORBIT_TRACK_PARAM(y1);
        ORBIT_TRACK_PARAM(x2);
        ORBIT_TRACK_PARAM(y2);

        g_api_table.glRectd(x1, y1, x2, y2);
        
    }

    void __stdcall ORBIT_IMPL_glRectdv(double* v1, double* v2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);

        g_api_table.glRectdv(v1, v2);
        
    }

    void __stdcall ORBIT_IMPL_glRectf(float x1, float y1, float x2, float y2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x1);
        ORBIT_TRACK_PARAM(y1);
        ORBIT_TRACK_PARAM(x2);
        ORBIT_TRACK_PARAM(y2);

        g_api_table.glRectf(x1, y1, x2, y2);
        
    }

    void __stdcall ORBIT_IMPL_glRectfv(float* v1, float* v2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);

        g_api_table.glRectfv(v1, v2);
        
    }

    void __stdcall ORBIT_IMPL_glRecti(int32_t x1, int32_t y1, int32_t x2, int32_t y2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x1);
        ORBIT_TRACK_PARAM(y1);
        ORBIT_TRACK_PARAM(x2);
        ORBIT_TRACK_PARAM(y2);

        g_api_table.glRecti(x1, y1, x2, y2);
        
    }

    void __stdcall ORBIT_IMPL_glRectiv(int32_t* v1, int32_t* v2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);

        g_api_table.glRectiv(v1, v2);
        
    }

    void __stdcall ORBIT_IMPL_glRects(int16_t x1, int16_t y1, int16_t x2, int16_t y2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x1);
        ORBIT_TRACK_PARAM(y1);
        ORBIT_TRACK_PARAM(x2);
        ORBIT_TRACK_PARAM(y2);

        g_api_table.glRects(x1, y1, x2, y2);
        
    }

    void __stdcall ORBIT_IMPL_glRectsv(int16_t* v1, int16_t* v2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v1);
        ORBIT_TRACK_PARAM(v2);

        g_api_table.glRectsv(v1, v2);
        
    }

    int32_t __stdcall ORBIT_IMPL_glRenderMode(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        auto win32_impl_result = g_api_table.glRenderMode(mode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_glRotated(double angle, double x, double y, double z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(angle);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glRotated(angle, x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glRotatef(float angle, float x, float y, float z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(angle);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glRotatef(angle, x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glScaled(double x, double y, double z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glScaled(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glScalef(float x, float y, float z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glScalef(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glScissor(int32_t x, int32_t y, int32_t width, int32_t height) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);

        g_api_table.glScissor(x, y, width, height);
        
    }

    void __stdcall ORBIT_IMPL_glSelectBuffer(int32_t size, uint32_t* buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(buffer);

        g_api_table.glSelectBuffer(size, buffer);
        
    }

    void __stdcall ORBIT_IMPL_glShadeModel(uint32_t mode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mode);

        g_api_table.glShadeModel(mode);
        
    }

    void __stdcall ORBIT_IMPL_glStencilFunc(uint32_t func, int32_t ref, uint32_t mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(func);
        ORBIT_TRACK_PARAM(ref);
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glStencilFunc(func, ref, mask);
        
    }

    void __stdcall ORBIT_IMPL_glStencilMask(uint32_t mask) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(mask);

        g_api_table.glStencilMask(mask);
        
    }

    void __stdcall ORBIT_IMPL_glStencilOp(uint32_t fail, uint32_t zfail, uint32_t zpass) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fail);
        ORBIT_TRACK_PARAM(zfail);
        ORBIT_TRACK_PARAM(zpass);

        g_api_table.glStencilOp(fail, zfail, zpass);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1d(double s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        g_api_table.glTexCoord1d(s);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord1dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1f(float s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        g_api_table.glTexCoord1f(s);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord1fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1i(int32_t s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        g_api_table.glTexCoord1i(s);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord1iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1s(int16_t s) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);

        g_api_table.glTexCoord1s(s);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord1sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord1sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2d(double s, double t) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);

        g_api_table.glTexCoord2d(s, t);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord2dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2f(float s, float t) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);

        g_api_table.glTexCoord2f(s, t);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord2fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2i(int32_t s, int32_t t) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);

        g_api_table.glTexCoord2i(s, t);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord2iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2s(int16_t s, int16_t t) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);

        g_api_table.glTexCoord2s(s, t);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord2sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord2sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3d(double s, double t, double r) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);

        g_api_table.glTexCoord3d(s, t, r);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord3dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3f(float s, float t, float r) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);

        g_api_table.glTexCoord3f(s, t, r);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord3fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3i(int32_t s, int32_t t, int32_t r) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);

        g_api_table.glTexCoord3i(s, t, r);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord3iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3s(int16_t s, int16_t t, int16_t r) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);

        g_api_table.glTexCoord3s(s, t, r);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord3sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord3sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4d(double s, double t, double r, double q) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);
        ORBIT_TRACK_PARAM(q);

        g_api_table.glTexCoord4d(s, t, r, q);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord4dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4f(float s, float t, float r, float q) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);
        ORBIT_TRACK_PARAM(q);

        g_api_table.glTexCoord4f(s, t, r, q);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord4fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4i(int32_t s, int32_t t, int32_t r, int32_t q) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);
        ORBIT_TRACK_PARAM(q);

        g_api_table.glTexCoord4i(s, t, r, q);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord4iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4s(int16_t s, int16_t t, int16_t r, int16_t q) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(s);
        ORBIT_TRACK_PARAM(t);
        ORBIT_TRACK_PARAM(r);
        ORBIT_TRACK_PARAM(q);

        g_api_table.glTexCoord4s(s, t, r, q);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoord4sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glTexCoord4sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glTexCoordPointer(int32_t size, uint32_t type, int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glTexCoordPointer(size, type, stride, pointer);
        
    }

    void __stdcall ORBIT_IMPL_glTexEnvf(uint32_t target, uint32_t pname, float param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexEnvf(target, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexEnvfv(uint32_t target, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexEnvfv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexEnvi(uint32_t target, uint32_t pname, int32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexEnvi(target, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexEnviv(uint32_t target, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexEnviv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexGend(uint32_t coord, uint32_t pname, double param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexGend(coord, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexGendv(uint32_t coord, uint32_t pname, double* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexGendv(coord, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexGenf(uint32_t coord, uint32_t pname, float param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexGenf(coord, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexGenfv(uint32_t coord, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexGenfv(coord, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexGeni(uint32_t coord, uint32_t pname, int32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexGeni(coord, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexGeniv(uint32_t coord, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(coord);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexGeniv(coord, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexImage1D(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t border, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(internalformat);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(border);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glTexImage2D(uint32_t target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(internalformat);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(border);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glTexParameterf(uint32_t target, uint32_t pname, float param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexParameterf(target, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexParameterfv(uint32_t target, uint32_t pname, float* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexParameterfv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexParameteri(uint32_t target, uint32_t pname, int32_t param2) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(param2);

        g_api_table.glTexParameteri(target, pname, param2);
        
    }

    void __stdcall ORBIT_IMPL_glTexParameteriv(uint32_t target, uint32_t pname, int32_t* params) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(pname);
        ORBIT_TRACK_PARAM(params);

        g_api_table.glTexParameteriv(target, pname, params);
        
    }

    void __stdcall ORBIT_IMPL_glTexSubImage1D(uint32_t target, int32_t level, int32_t xoffset, int32_t width, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(xoffset);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glTexSubImage2D(uint32_t target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, uint32_t format, uint32_t type, void* pixels) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(level);
        ORBIT_TRACK_PARAM(xoffset);
        ORBIT_TRACK_PARAM(yoffset);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(pixels);

        g_api_table.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        
    }

    void __stdcall ORBIT_IMPL_glTranslated(double x, double y, double z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glTranslated(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glTranslatef(float x, float y, float z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glTranslatef(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2d(double x, double y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glVertex2d(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex2dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2f(float x, float y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glVertex2f(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex2fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2i(int32_t x, int32_t y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glVertex2i(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex2iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2s(int16_t x, int16_t y) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);

        g_api_table.glVertex2s(x, y);
        
    }

    void __stdcall ORBIT_IMPL_glVertex2sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex2sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3d(double x, double y, double z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glVertex3d(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex3dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3f(float x, float y, float z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glVertex3f(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex3fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3i(int32_t x, int32_t y, int32_t z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glVertex3i(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex3iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3s(int16_t x, int16_t y, int16_t z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.glVertex3s(x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_glVertex3sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex3sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4d(double x, double y, double z, double w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glVertex4d(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4dv(double* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex4dv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4f(float x, float y, float z, float w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glVertex4f(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4fv(float* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex4fv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4i(int32_t x, int32_t y, int32_t z, int32_t w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glVertex4i(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4iv(int32_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex4iv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4s(int16_t x, int16_t y, int16_t z, int16_t w) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);
        ORBIT_TRACK_PARAM(w);

        g_api_table.glVertex4s(x, y, z, w);
        
    }

    void __stdcall ORBIT_IMPL_glVertex4sv(int16_t* v) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(v);

        g_api_table.glVertex4sv(v);
        
    }

    void __stdcall ORBIT_IMPL_glVertexPointer(int32_t size, uint32_t type, int32_t stride, void* pointer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(size);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(pointer);

        g_api_table.glVertexPointer(size, type, stride, pointer);
        
    }

    void __stdcall ORBIT_IMPL_glViewport(int32_t x, int32_t y, int32_t width, int32_t height) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);

        g_api_table.glViewport(x, y, width, height);
        
    }

    uint8_t* __stdcall ORBIT_IMPL_gluErrorString(uint32_t errCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(errCode);

        auto win32_impl_result = g_api_table.gluErrorString(errCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_gluErrorUnicodeStringEXT(uint32_t errCode) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(errCode);

        auto win32_impl_result = g_api_table.gluErrorUnicodeStringEXT(errCode);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint8_t* __stdcall ORBIT_IMPL_gluGetString(uint32_t name) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(name);

        auto win32_impl_result = g_api_table.gluGetString(name);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_gluOrtho2D(double left, double right, double bottom, double top) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(left);
        ORBIT_TRACK_PARAM(right);
        ORBIT_TRACK_PARAM(bottom);
        ORBIT_TRACK_PARAM(top);

        g_api_table.gluOrtho2D(left, right, bottom, top);
        
    }

    void __stdcall ORBIT_IMPL_gluPerspective(double fovy, double aspect, double zNear, double zFar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(fovy);
        ORBIT_TRACK_PARAM(aspect);
        ORBIT_TRACK_PARAM(zNear);
        ORBIT_TRACK_PARAM(zFar);

        g_api_table.gluPerspective(fovy, aspect, zNear, zFar);
        
    }

    void __stdcall ORBIT_IMPL_gluPickMatrix(double x, double y, double width, double height, int32_t* viewport) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(viewport);

        g_api_table.gluPickMatrix(x, y, width, height, viewport);
        
    }

    void __stdcall ORBIT_IMPL_gluLookAt(double eyex, double eyey, double eyez, double centerx, double centery, double centerz, double upx, double upy, double upz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(eyex);
        ORBIT_TRACK_PARAM(eyey);
        ORBIT_TRACK_PARAM(eyez);
        ORBIT_TRACK_PARAM(centerx);
        ORBIT_TRACK_PARAM(centery);
        ORBIT_TRACK_PARAM(centerz);
        ORBIT_TRACK_PARAM(upx);
        ORBIT_TRACK_PARAM(upy);
        ORBIT_TRACK_PARAM(upz);

        g_api_table.gluLookAt(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
        
    }

    int32_t __stdcall ORBIT_IMPL_gluProject(double objx, double objy, double objz, double* modelMatrix, double* projMatrix, int32_t* viewport, double* winx, double* winy, double* winz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(objx);
        ORBIT_TRACK_PARAM(objy);
        ORBIT_TRACK_PARAM(objz);
        ORBIT_TRACK_PARAM(modelMatrix);
        ORBIT_TRACK_PARAM(projMatrix);
        ORBIT_TRACK_PARAM(viewport);
        ORBIT_TRACK_PARAM(winx);
        ORBIT_TRACK_PARAM(winy);
        ORBIT_TRACK_PARAM(winz);

        auto win32_impl_result = g_api_table.gluProject(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_gluUnProject(double winx, double winy, double winz, double* modelMatrix, double* projMatrix, int32_t* viewport, double* objx, double* objy, double* objz) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(winx);
        ORBIT_TRACK_PARAM(winy);
        ORBIT_TRACK_PARAM(winz);
        ORBIT_TRACK_PARAM(modelMatrix);
        ORBIT_TRACK_PARAM(projMatrix);
        ORBIT_TRACK_PARAM(viewport);
        ORBIT_TRACK_PARAM(objx);
        ORBIT_TRACK_PARAM(objy);
        ORBIT_TRACK_PARAM(objz);

        auto win32_impl_result = g_api_table.gluUnProject(winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_gluScaleImage(uint32_t format, int32_t widthin, int32_t heightin, uint32_t typein, void* datain, int32_t widthout, int32_t heightout, uint32_t typeout, void* dataout) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(widthin);
        ORBIT_TRACK_PARAM(heightin);
        ORBIT_TRACK_PARAM(typein);
        ORBIT_TRACK_PARAM(datain);
        ORBIT_TRACK_PARAM(widthout);
        ORBIT_TRACK_PARAM(heightout);
        ORBIT_TRACK_PARAM(typeout);
        ORBIT_TRACK_PARAM(dataout);

        auto win32_impl_result = g_api_table.gluScaleImage(format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_gluBuild1DMipmaps(uint32_t target, int32_t components, int32_t width, uint32_t format, uint32_t type, void* data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(components);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(data);

        auto win32_impl_result = g_api_table.gluBuild1DMipmaps(target, components, width, format, type, data);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_gluBuild2DMipmaps(uint32_t target, int32_t components, int32_t width, int32_t height, uint32_t format, uint32_t type, void* data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(target);
        ORBIT_TRACK_PARAM(components);
        ORBIT_TRACK_PARAM(width);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(format);
        ORBIT_TRACK_PARAM(type);
        ORBIT_TRACK_PARAM(data);

        auto win32_impl_result = g_api_table.gluBuild2DMipmaps(target, components, width, height, format, type, data);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Graphics::OpenGL::GLUquadric* __stdcall ORBIT_IMPL_gluNewQuadric() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.gluNewQuadric();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_gluDeleteQuadric(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* state) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(state);

        g_api_table.gluDeleteQuadric(state);
        
    }

    void __stdcall ORBIT_IMPL_gluQuadricNormals(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* quadObject, uint32_t normals) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(quadObject);
        ORBIT_TRACK_PARAM(normals);

        g_api_table.gluQuadricNormals(quadObject, normals);
        
    }

    void __stdcall ORBIT_IMPL_gluQuadricTexture(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* quadObject, uint8_t textureCoords) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(quadObject);
        ORBIT_TRACK_PARAM(textureCoords);

        g_api_table.gluQuadricTexture(quadObject, textureCoords);
        
    }

    void __stdcall ORBIT_IMPL_gluQuadricOrientation(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* quadObject, uint32_t orientation) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(quadObject);
        ORBIT_TRACK_PARAM(orientation);

        g_api_table.gluQuadricOrientation(quadObject, orientation);
        
    }

    void __stdcall ORBIT_IMPL_gluQuadricDrawStyle(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* quadObject, uint32_t drawStyle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(quadObject);
        ORBIT_TRACK_PARAM(drawStyle);

        g_api_table.gluQuadricDrawStyle(quadObject, drawStyle);
        
    }

    void __stdcall ORBIT_IMPL_gluCylinder(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* qobj, double baseRadius, double topRadius, double height, int32_t slices, int32_t stacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(qobj);
        ORBIT_TRACK_PARAM(baseRadius);
        ORBIT_TRACK_PARAM(topRadius);
        ORBIT_TRACK_PARAM(height);
        ORBIT_TRACK_PARAM(slices);
        ORBIT_TRACK_PARAM(stacks);

        g_api_table.gluCylinder(qobj, baseRadius, topRadius, height, slices, stacks);
        
    }

    void __stdcall ORBIT_IMPL_gluDisk(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* qobj, double innerRadius, double outerRadius, int32_t slices, int32_t loops) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(qobj);
        ORBIT_TRACK_PARAM(innerRadius);
        ORBIT_TRACK_PARAM(outerRadius);
        ORBIT_TRACK_PARAM(slices);
        ORBIT_TRACK_PARAM(loops);

        g_api_table.gluDisk(qobj, innerRadius, outerRadius, slices, loops);
        
    }

    void __stdcall ORBIT_IMPL_gluPartialDisk(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* qobj, double innerRadius, double outerRadius, int32_t slices, int32_t loops, double startAngle, double sweepAngle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(qobj);
        ORBIT_TRACK_PARAM(innerRadius);
        ORBIT_TRACK_PARAM(outerRadius);
        ORBIT_TRACK_PARAM(slices);
        ORBIT_TRACK_PARAM(loops);
        ORBIT_TRACK_PARAM(startAngle);
        ORBIT_TRACK_PARAM(sweepAngle);

        g_api_table.gluPartialDisk(qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle);
        
    }

    void __stdcall ORBIT_IMPL_gluSphere(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* qobj, double radius, int32_t slices, int32_t stacks) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(qobj);
        ORBIT_TRACK_PARAM(radius);
        ORBIT_TRACK_PARAM(slices);
        ORBIT_TRACK_PARAM(stacks);

        g_api_table.gluSphere(qobj, radius, slices, stacks);
        
    }

    void __stdcall ORBIT_IMPL_gluQuadricCallback(win32::Windows::Win32::Graphics::OpenGL::GLUquadric* qobj, uint32_t which, intptr_t fn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(qobj);
        ORBIT_TRACK_PARAM(which);
        ORBIT_TRACK_PARAM(fn);

        g_api_table.gluQuadricCallback(qobj, which, fn);
        
    }

    win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* __stdcall ORBIT_IMPL_gluNewTess() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.gluNewTess();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_gluDeleteTess(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);

        g_api_table.gluDeleteTess(tess);
        
    }

    void __stdcall ORBIT_IMPL_gluTessBeginPolygon(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, void* polygon_data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(polygon_data);

        g_api_table.gluTessBeginPolygon(tess, polygon_data);
        
    }

    void __stdcall ORBIT_IMPL_gluTessBeginContour(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);

        g_api_table.gluTessBeginContour(tess);
        
    }

    void __stdcall ORBIT_IMPL_gluTessVertex(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, double* coords, void* data) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(coords);
        ORBIT_TRACK_PARAM(data);

        g_api_table.gluTessVertex(tess, coords, data);
        
    }

    void __stdcall ORBIT_IMPL_gluTessEndContour(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);

        g_api_table.gluTessEndContour(tess);
        
    }

    void __stdcall ORBIT_IMPL_gluTessEndPolygon(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);

        g_api_table.gluTessEndPolygon(tess);
        
    }

    void __stdcall ORBIT_IMPL_gluTessProperty(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, uint32_t which, double value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(which);
        ORBIT_TRACK_PARAM(value);

        g_api_table.gluTessProperty(tess, which, value);
        
    }

    void __stdcall ORBIT_IMPL_gluTessNormal(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, double x, double y, double z) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(x);
        ORBIT_TRACK_PARAM(y);
        ORBIT_TRACK_PARAM(z);

        g_api_table.gluTessNormal(tess, x, y, z);
        
    }

    void __stdcall ORBIT_IMPL_gluTessCallback(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, uint32_t which, intptr_t fn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(which);
        ORBIT_TRACK_PARAM(fn);

        g_api_table.gluTessCallback(tess, which, fn);
        
    }

    void __stdcall ORBIT_IMPL_gluGetTessProperty(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, uint32_t which, double* value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(which);
        ORBIT_TRACK_PARAM(value);

        g_api_table.gluGetTessProperty(tess, which, value);
        
    }

    win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* __stdcall ORBIT_IMPL_gluNewNurbsRenderer() noexcept
    {
        ORBIT_SCOPE_FUNCTION();

        auto win32_impl_result = g_api_table.gluNewNurbsRenderer();
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_gluDeleteNurbsRenderer(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluDeleteNurbsRenderer(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluBeginSurface(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluBeginSurface(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluBeginCurve(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluBeginCurve(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluEndCurve(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluEndCurve(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluEndSurface(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluEndSurface(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluBeginTrim(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluBeginTrim(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluEndTrim(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);

        g_api_table.gluEndTrim(nobj);
        
    }

    void __stdcall ORBIT_IMPL_gluPwlCurve(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, int32_t count, float* array, int32_t stride, uint32_t type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(count);
        ORBIT_TRACK_PARAM(array);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(type);

        g_api_table.gluPwlCurve(nobj, count, array, stride, type);
        
    }

    void __stdcall ORBIT_IMPL_gluNurbsCurve(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, int32_t nknots, float* knot, int32_t stride, float* ctlarray, int32_t order, uint32_t type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(nknots);
        ORBIT_TRACK_PARAM(knot);
        ORBIT_TRACK_PARAM(stride);
        ORBIT_TRACK_PARAM(ctlarray);
        ORBIT_TRACK_PARAM(order);
        ORBIT_TRACK_PARAM(type);

        g_api_table.gluNurbsCurve(nobj, nknots, knot, stride, ctlarray, order, type);
        
    }

    void __stdcall ORBIT_IMPL_gluNurbsSurface(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, int32_t sknot_count, float* sknot, int32_t tknot_count, float* tknot, int32_t s_stride, int32_t t_stride, float* ctlarray, int32_t sorder, int32_t torder, uint32_t type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(sknot_count);
        ORBIT_TRACK_PARAM(sknot);
        ORBIT_TRACK_PARAM(tknot_count);
        ORBIT_TRACK_PARAM(tknot);
        ORBIT_TRACK_PARAM(s_stride);
        ORBIT_TRACK_PARAM(t_stride);
        ORBIT_TRACK_PARAM(ctlarray);
        ORBIT_TRACK_PARAM(sorder);
        ORBIT_TRACK_PARAM(torder);
        ORBIT_TRACK_PARAM(type);

        g_api_table.gluNurbsSurface(nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, type);
        
    }

    void __stdcall ORBIT_IMPL_gluLoadSamplingMatrices(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, float* modelMatrix, float* projMatrix, int32_t* viewport) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(modelMatrix);
        ORBIT_TRACK_PARAM(projMatrix);
        ORBIT_TRACK_PARAM(viewport);

        g_api_table.gluLoadSamplingMatrices(nobj, modelMatrix, projMatrix, viewport);
        
    }

    void __stdcall ORBIT_IMPL_gluNurbsProperty(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, uint32_t property, float value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(value);

        g_api_table.gluNurbsProperty(nobj, property, value);
        
    }

    void __stdcall ORBIT_IMPL_gluGetNurbsProperty(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, uint32_t property, float* value) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(property);
        ORBIT_TRACK_PARAM(value);

        g_api_table.gluGetNurbsProperty(nobj, property, value);
        
    }

    void __stdcall ORBIT_IMPL_gluNurbsCallback(win32::Windows::Win32::Graphics::OpenGL::GLUnurbs* nobj, uint32_t which, intptr_t fn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(nobj);
        ORBIT_TRACK_PARAM(which);
        ORBIT_TRACK_PARAM(fn);

        g_api_table.gluNurbsCallback(nobj, which, fn);
        
    }

    void __stdcall ORBIT_IMPL_gluBeginPolygon(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);

        g_api_table.gluBeginPolygon(tess);
        
    }

    void __stdcall ORBIT_IMPL_gluNextContour(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess, uint32_t type) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);
        ORBIT_TRACK_PARAM(type);

        g_api_table.gluNextContour(tess, type);
        
    }

    void __stdcall ORBIT_IMPL_gluEndPolygon(win32::Windows::Win32::Graphics::OpenGL::GLUtesselator* tess) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(tess);

        g_api_table.gluEndPolygon(tess);
        
    }

}

#pragma endregion abi_methods

}
#endif
