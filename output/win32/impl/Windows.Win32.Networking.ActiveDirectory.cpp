// WARNING: Please don't edit this file. It was generated by C++/Win32 v0.0.0.1

#ifndef WIN32_Windows_Win32_Networking_ActiveDirectory_2_H
#define WIN32_Windows_Win32_Networking_ActiveDirectory_2_H
#include "win32/Windows.Win32.Networking.ActiveDirectory.h"
#include "win32/impl/Windows.Win32.Networking.ActiveDirectory.1.h"
WIN32_EXPORT namespace win32::Windows::Win32::Networking::ActiveDirectory
{
ApiTable g_api_table;

#pragma region abi_methods
extern "C"
{
    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsGetObject(win32::Windows::Win32::Foundation::PWSTR lpszPathName, ::win32::guid* riid, void** ppObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppObject);

        auto win32_impl_result = g_api_table.ADsGetObject(lpszPathName, riid, ppObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsBuildEnumerator(win32::Windows::Win32::Networking::ActiveDirectory::IADsContainer* pADsContainer, win32::Windows::Win32::System::Ole::IEnumVARIANT** ppEnumVariant) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pADsContainer);
        ORBIT_TRACK_PARAM(ppEnumVariant);

        auto win32_impl_result = g_api_table.ADsBuildEnumerator(pADsContainer, ppEnumVariant);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsFreeEnumerator(win32::Windows::Win32::System::Ole::IEnumVARIANT* pEnumVariant) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEnumVariant);

        auto win32_impl_result = g_api_table.ADsFreeEnumerator(pEnumVariant);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsEnumerateNext(win32::Windows::Win32::System::Ole::IEnumVARIANT* pEnumVariant, uint32_t cElements, win32::Windows::Win32::System::Com::VARIANT* pvar, uint32_t* pcElementsFetched) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pEnumVariant);
        ORBIT_TRACK_PARAM(cElements);
        ORBIT_TRACK_PARAM(pvar);
        ORBIT_TRACK_PARAM(pcElementsFetched);

        auto win32_impl_result = g_api_table.ADsEnumerateNext(pEnumVariant, cElements, pvar, pcElementsFetched);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsBuildVarArrayStr(win32::Windows::Win32::Foundation::PWSTR* lppPathNames, uint32_t dwPathNames, win32::Windows::Win32::System::Com::VARIANT* pVar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lppPathNames);
        ORBIT_TRACK_PARAM(dwPathNames);
        ORBIT_TRACK_PARAM(pVar);

        auto win32_impl_result = g_api_table.ADsBuildVarArrayStr(lppPathNames, dwPathNames, pVar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsBuildVarArrayInt(uint32_t* lpdwObjectTypes, uint32_t dwObjectTypes, win32::Windows::Win32::System::Com::VARIANT* pVar) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpdwObjectTypes);
        ORBIT_TRACK_PARAM(dwObjectTypes);
        ORBIT_TRACK_PARAM(pVar);

        auto win32_impl_result = g_api_table.ADsBuildVarArrayInt(lpdwObjectTypes, dwObjectTypes, pVar);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsOpenObject(win32::Windows::Win32::Foundation::PWSTR lpszPathName, win32::Windows::Win32::Foundation::PWSTR lpszUserName, win32::Windows::Win32::Foundation::PWSTR lpszPassword, win32::Windows::Win32::Networking::ActiveDirectory::ADS_AUTHENTICATION_ENUM dwReserved, ::win32::guid* riid, void** ppObject) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpszPathName);
        ORBIT_TRACK_PARAM(lpszUserName);
        ORBIT_TRACK_PARAM(lpszPassword);
        ORBIT_TRACK_PARAM(dwReserved);
        ORBIT_TRACK_PARAM(riid);
        ORBIT_TRACK_PARAM(ppObject);

        auto win32_impl_result = g_api_table.ADsOpenObject(lpszPathName, lpszUserName, lpszPassword, dwReserved, riid, ppObject);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsGetLastError(uint32_t* lpError, win32::Windows::Win32::Foundation::PWSTR lpErrorBuf, uint32_t dwErrorBufLen, win32::Windows::Win32::Foundation::PWSTR lpNameBuf, uint32_t dwNameBufLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpError);
        ORBIT_TRACK_PARAM(lpErrorBuf);
        ORBIT_TRACK_PARAM(dwErrorBufLen);
        ORBIT_TRACK_PARAM(lpNameBuf);
        ORBIT_TRACK_PARAM(dwNameBufLen);

        auto win32_impl_result = g_api_table.ADsGetLastError(lpError, lpErrorBuf, dwErrorBufLen, lpNameBuf, dwNameBufLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_ADsSetLastError(uint32_t dwErr, win32::Windows::Win32::Foundation::PWSTR pszError, win32::Windows::Win32::Foundation::PWSTR pszProvider) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwErr);
        ORBIT_TRACK_PARAM(pszError);
        ORBIT_TRACK_PARAM(pszProvider);

        g_api_table.ADsSetLastError(dwErr, pszError, pszProvider);
        
    }

    void* __stdcall ORBIT_IMPL_AllocADsMem(uint32_t cb) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cb);

        auto win32_impl_result = g_api_table.AllocADsMem(cb);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FreeADsMem(void* pMem) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pMem);

        auto win32_impl_result = g_api_table.FreeADsMem(pMem);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void* __stdcall ORBIT_IMPL_ReallocADsMem(void* pOldMem, uint32_t cbOld, uint32_t cbNew) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pOldMem);
        ORBIT_TRACK_PARAM(cbOld);
        ORBIT_TRACK_PARAM(cbNew);

        auto win32_impl_result = g_api_table.ReallocADsMem(pOldMem, cbOld, cbNew);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::PWSTR __stdcall ORBIT_IMPL_AllocADsStr(win32::Windows::Win32::Foundation::PWSTR pStr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStr);

        auto win32_impl_result = g_api_table.AllocADsStr(pStr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_FreeADsStr(win32::Windows::Win32::Foundation::PWSTR pStr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pStr);

        auto win32_impl_result = g_api_table.FreeADsStr(pStr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ReallocADsStr(win32::Windows::Win32::Foundation::PWSTR* ppStr, win32::Windows::Win32::Foundation::PWSTR pStr) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppStr);
        ORBIT_TRACK_PARAM(pStr);

        auto win32_impl_result = g_api_table.ReallocADsStr(ppStr, pStr);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsEncodeBinaryData(uint8_t* pbSrcData, uint32_t dwSrcLen, win32::Windows::Win32::Foundation::PWSTR* ppszDestData) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pbSrcData);
        ORBIT_TRACK_PARAM(dwSrcLen);
        ORBIT_TRACK_PARAM(ppszDestData);

        auto win32_impl_result = g_api_table.ADsEncodeBinaryData(pbSrcData, dwSrcLen, ppszDestData);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsDecodeBinaryData(win32::Windows::Win32::Foundation::PWSTR szSrcData, uint8_t** ppbDestData, uint32_t* pdwDestLen) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(szSrcData);
        ORBIT_TRACK_PARAM(ppbDestData);
        ORBIT_TRACK_PARAM(pdwDestLen);

        auto win32_impl_result = g_api_table.ADsDecodeBinaryData(szSrcData, ppbDestData, pdwDestLen);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_PropVariantToAdsType(win32::Windows::Win32::System::Com::VARIANT* pVariant, uint32_t dwNumVariant, win32::Windows::Win32::Networking::ActiveDirectory::ADSVALUE** ppAdsValues, uint32_t* pdwNumValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pVariant);
        ORBIT_TRACK_PARAM(dwNumVariant);
        ORBIT_TRACK_PARAM(ppAdsValues);
        ORBIT_TRACK_PARAM(pdwNumValues);

        auto win32_impl_result = g_api_table.PropVariantToAdsType(pVariant, dwNumVariant, ppAdsValues, pdwNumValues);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_AdsTypeToPropVariant(win32::Windows::Win32::Networking::ActiveDirectory::ADSVALUE* pAdsValues, uint32_t dwNumValues, win32::Windows::Win32::System::Com::VARIANT* pVariant) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAdsValues);
        ORBIT_TRACK_PARAM(dwNumValues);
        ORBIT_TRACK_PARAM(pVariant);

        auto win32_impl_result = g_api_table.AdsTypeToPropVariant(pAdsValues, dwNumValues, pVariant);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_AdsFreeAdsValues(win32::Windows::Win32::Networking::ActiveDirectory::ADSVALUE* pAdsValues, uint32_t dwNumValues) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAdsValues);
        ORBIT_TRACK_PARAM(dwNumValues);

        g_api_table.AdsFreeAdsValues(pAdsValues, dwNumValues);
        
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_BinarySDToSecurityDescriptor(win32::Windows::Win32::Security::SECURITY_DESCRIPTOR* pSecurityDescriptor, win32::Windows::Win32::System::Com::VARIANT* pVarsec, win32::Windows::Win32::Foundation::PWSTR pszServerName, win32::Windows::Win32::Foundation::PWSTR userName, win32::Windows::Win32::Foundation::PWSTR passWord, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pSecurityDescriptor);
        ORBIT_TRACK_PARAM(pVarsec);
        ORBIT_TRACK_PARAM(pszServerName);
        ORBIT_TRACK_PARAM(userName);
        ORBIT_TRACK_PARAM(passWord);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.BinarySDToSecurityDescriptor(pSecurityDescriptor, pVarsec, pszServerName, userName, passWord, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_SecurityDescriptorToBinarySD(win32::Windows::Win32::System::Com::VARIANT vVarSecDes, win32::Windows::Win32::Security::SECURITY_DESCRIPTOR** ppSecurityDescriptor, uint32_t* pdwSDLength, win32::Windows::Win32::Foundation::PWSTR pszServerName, win32::Windows::Win32::Foundation::PWSTR userName, win32::Windows::Win32::Foundation::PWSTR passWord, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(vVarSecDes);
        ORBIT_TRACK_PARAM(ppSecurityDescriptor);
        ORBIT_TRACK_PARAM(pdwSDLength);
        ORBIT_TRACK_PARAM(pszServerName);
        ORBIT_TRACK_PARAM(userName);
        ORBIT_TRACK_PARAM(passWord);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.SecurityDescriptorToBinarySD(vVarSecDes, ppSecurityDescriptor, pdwSDLength, pszServerName, userName, passWord, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_DsBrowseForContainerW(win32::Windows::Win32::Networking::ActiveDirectory::DSBROWSEINFOW* pInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInfo);

        auto win32_impl_result = g_api_table.DsBrowseForContainerW(pInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    int32_t __stdcall ORBIT_IMPL_DsBrowseForContainerA(win32::Windows::Win32::Networking::ActiveDirectory::DSBROWSEINFOA* pInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pInfo);

        auto win32_impl_result = g_api_table.DsBrowseForContainerA(pInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::UI::WindowsAndMessaging::HICON __stdcall ORBIT_IMPL_DsGetIcon(uint32_t dwFlags, win32::Windows::Win32::Foundation::PWSTR pszObjectClass, int32_t cxImage, int32_t cyImage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(pszObjectClass);
        ORBIT_TRACK_PARAM(cxImage);
        ORBIT_TRACK_PARAM(cyImage);

        auto win32_impl_result = g_api_table.DsGetIcon(dwFlags, pszObjectClass, cxImage, cyImage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_DsGetFriendlyClassName(win32::Windows::Win32::Foundation::PWSTR pszObjectClass, win32::Windows::Win32::Foundation::PWSTR pszBuffer, uint32_t cchBuffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszObjectClass);
        ORBIT_TRACK_PARAM(pszBuffer);
        ORBIT_TRACK_PARAM(cchBuffer);

        auto win32_impl_result = g_api_table.DsGetFriendlyClassName(pszObjectClass, pszBuffer, cchBuffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::HRESULT __stdcall ORBIT_IMPL_ADsPropCreateNotifyObj(win32::Windows::Win32::System::Com::IDataObject* pAppThdDataObj, win32::Windows::Win32::Foundation::PWSTR pwzADsObjName, win32::Windows::Win32::Foundation::HWND* phNotifyObj) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pAppThdDataObj);
        ORBIT_TRACK_PARAM(pwzADsObjName);
        ORBIT_TRACK_PARAM(phNotifyObj);

        auto win32_impl_result = g_api_table.ADsPropCreateNotifyObj(pAppThdDataObj, pwzADsObjName, phNotifyObj);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ADsPropGetInitInfo(win32::Windows::Win32::Foundation::HWND hNotifyObj, win32::Windows::Win32::Networking::ActiveDirectory::ADSPROPINITPARAMS* pInitParams) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNotifyObj);
        ORBIT_TRACK_PARAM(pInitParams);

        auto win32_impl_result = g_api_table.ADsPropGetInitInfo(hNotifyObj, pInitParams);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ADsPropSetHwndWithTitle(win32::Windows::Win32::Foundation::HWND hNotifyObj, win32::Windows::Win32::Foundation::HWND hPage, int8_t* ptzTitle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNotifyObj);
        ORBIT_TRACK_PARAM(hPage);
        ORBIT_TRACK_PARAM(ptzTitle);

        auto win32_impl_result = g_api_table.ADsPropSetHwndWithTitle(hNotifyObj, hPage, ptzTitle);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ADsPropSetHwnd(win32::Windows::Win32::Foundation::HWND hNotifyObj, win32::Windows::Win32::Foundation::HWND hPage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNotifyObj);
        ORBIT_TRACK_PARAM(hPage);

        auto win32_impl_result = g_api_table.ADsPropSetHwnd(hNotifyObj, hPage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ADsPropCheckIfWritable(win32::Windows::Win32::Foundation::PWSTR pwzAttr, win32::Windows::Win32::Networking::ActiveDirectory::ADS_ATTR_INFO* pWritableAttrs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pwzAttr);
        ORBIT_TRACK_PARAM(pWritableAttrs);

        auto win32_impl_result = g_api_table.ADsPropCheckIfWritable(pwzAttr, pWritableAttrs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ADsPropSendErrorMessage(win32::Windows::Win32::Foundation::HWND hNotifyObj, win32::Windows::Win32::Networking::ActiveDirectory::ADSPROPERROR* pError) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNotifyObj);
        ORBIT_TRACK_PARAM(pError);

        auto win32_impl_result = g_api_table.ADsPropSendErrorMessage(hNotifyObj, pError);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_ADsPropShowErrorDialog(win32::Windows::Win32::Foundation::HWND hNotifyObj, win32::Windows::Win32::Foundation::HWND hPage) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hNotifyObj);
        ORBIT_TRACK_PARAM(hPage);

        auto win32_impl_result = g_api_table.ADsPropShowErrorDialog(hNotifyObj, hPage);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsMakeSpnW(win32::Windows::Win32::Foundation::PWSTR ServiceClass, win32::Windows::Win32::Foundation::PWSTR ServiceName, win32::Windows::Win32::Foundation::PWSTR InstanceName, uint16_t InstancePort, win32::Windows::Win32::Foundation::PWSTR Referrer, uint32_t* pcSpnLength, win32::Windows::Win32::Foundation::PWSTR pszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(InstancePort);
        ORBIT_TRACK_PARAM(Referrer);
        ORBIT_TRACK_PARAM(pcSpnLength);
        ORBIT_TRACK_PARAM(pszSpn);

        auto win32_impl_result = g_api_table.DsMakeSpnW(ServiceClass, ServiceName, InstanceName, InstancePort, Referrer, pcSpnLength, pszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsMakeSpnA(win32::Windows::Win32::Foundation::PSTR ServiceClass, win32::Windows::Win32::Foundation::PSTR ServiceName, win32::Windows::Win32::Foundation::PSTR InstanceName, uint16_t InstancePort, win32::Windows::Win32::Foundation::PSTR Referrer, uint32_t* pcSpnLength, win32::Windows::Win32::Foundation::PSTR pszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(InstancePort);
        ORBIT_TRACK_PARAM(Referrer);
        ORBIT_TRACK_PARAM(pcSpnLength);
        ORBIT_TRACK_PARAM(pszSpn);

        auto win32_impl_result = g_api_table.DsMakeSpnA(ServiceClass, ServiceName, InstanceName, InstancePort, Referrer, pcSpnLength, pszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackSpnA(win32::Windows::Win32::Foundation::PSTR pszSpn, uint32_t* pcServiceClass, win32::Windows::Win32::Foundation::PSTR ServiceClass, uint32_t* pcServiceName, win32::Windows::Win32::Foundation::PSTR ServiceName, uint32_t* pcInstanceName, win32::Windows::Win32::Foundation::PSTR InstanceName, uint16_t* pInstancePort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSpn);
        ORBIT_TRACK_PARAM(pcServiceClass);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(pcServiceName);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(pcInstanceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(pInstancePort);

        auto win32_impl_result = g_api_table.DsCrackSpnA(pszSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackSpnW(win32::Windows::Win32::Foundation::PWSTR pszSpn, uint32_t* pcServiceClass, win32::Windows::Win32::Foundation::PWSTR ServiceClass, uint32_t* pcServiceName, win32::Windows::Win32::Foundation::PWSTR ServiceName, uint32_t* pcInstanceName, win32::Windows::Win32::Foundation::PWSTR InstanceName, uint16_t* pInstancePort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSpn);
        ORBIT_TRACK_PARAM(pcServiceClass);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(pcServiceName);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(pcInstanceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(pInstancePort);

        auto win32_impl_result = g_api_table.DsCrackSpnW(pszSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsQuoteRdnValueW(uint32_t cUnquotedRdnValueLength, win32::Windows::Win32::Foundation::PWSTR psUnquotedRdnValue, uint32_t* pcQuotedRdnValueLength, win32::Windows::Win32::Foundation::PWSTR psQuotedRdnValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cUnquotedRdnValueLength);
        ORBIT_TRACK_PARAM(psUnquotedRdnValue);
        ORBIT_TRACK_PARAM(pcQuotedRdnValueLength);
        ORBIT_TRACK_PARAM(psQuotedRdnValue);

        auto win32_impl_result = g_api_table.DsQuoteRdnValueW(cUnquotedRdnValueLength, psUnquotedRdnValue, pcQuotedRdnValueLength, psQuotedRdnValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsQuoteRdnValueA(uint32_t cUnquotedRdnValueLength, win32::Windows::Win32::Foundation::PSTR psUnquotedRdnValue, uint32_t* pcQuotedRdnValueLength, win32::Windows::Win32::Foundation::PSTR psQuotedRdnValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cUnquotedRdnValueLength);
        ORBIT_TRACK_PARAM(psUnquotedRdnValue);
        ORBIT_TRACK_PARAM(pcQuotedRdnValueLength);
        ORBIT_TRACK_PARAM(psQuotedRdnValue);

        auto win32_impl_result = g_api_table.DsQuoteRdnValueA(cUnquotedRdnValueLength, psUnquotedRdnValue, pcQuotedRdnValueLength, psQuotedRdnValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsUnquoteRdnValueW(uint32_t cQuotedRdnValueLength, win32::Windows::Win32::Foundation::PWSTR psQuotedRdnValue, uint32_t* pcUnquotedRdnValueLength, win32::Windows::Win32::Foundation::PWSTR psUnquotedRdnValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cQuotedRdnValueLength);
        ORBIT_TRACK_PARAM(psQuotedRdnValue);
        ORBIT_TRACK_PARAM(pcUnquotedRdnValueLength);
        ORBIT_TRACK_PARAM(psUnquotedRdnValue);

        auto win32_impl_result = g_api_table.DsUnquoteRdnValueW(cQuotedRdnValueLength, psQuotedRdnValue, pcUnquotedRdnValueLength, psUnquotedRdnValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsUnquoteRdnValueA(uint32_t cQuotedRdnValueLength, win32::Windows::Win32::Foundation::PSTR psQuotedRdnValue, uint32_t* pcUnquotedRdnValueLength, win32::Windows::Win32::Foundation::PSTR psUnquotedRdnValue) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cQuotedRdnValueLength);
        ORBIT_TRACK_PARAM(psQuotedRdnValue);
        ORBIT_TRACK_PARAM(pcUnquotedRdnValueLength);
        ORBIT_TRACK_PARAM(psUnquotedRdnValue);

        auto win32_impl_result = g_api_table.DsUnquoteRdnValueA(cQuotedRdnValueLength, psQuotedRdnValue, pcUnquotedRdnValueLength, psUnquotedRdnValue);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetRdnW(win32::Windows::Win32::Foundation::PWSTR* ppDN, uint32_t* pcDN, win32::Windows::Win32::Foundation::PWSTR* ppKey, uint32_t* pcKey, win32::Windows::Win32::Foundation::PWSTR* ppVal, uint32_t* pcVal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ppDN);
        ORBIT_TRACK_PARAM(pcDN);
        ORBIT_TRACK_PARAM(ppKey);
        ORBIT_TRACK_PARAM(pcKey);
        ORBIT_TRACK_PARAM(ppVal);
        ORBIT_TRACK_PARAM(pcVal);

        auto win32_impl_result = g_api_table.DsGetRdnW(ppDN, pcDN, ppKey, pcKey, ppVal, pcVal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DsCrackUnquotedMangledRdnW(win32::Windows::Win32::Foundation::PWSTR pszRDN, uint32_t cchRDN, ::win32::guid* pGuid, win32::Windows::Win32::Networking::ActiveDirectory::DS_MANGLE_FOR* peDsMangleFor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszRDN);
        ORBIT_TRACK_PARAM(cchRDN);
        ORBIT_TRACK_PARAM(pGuid);
        ORBIT_TRACK_PARAM(peDsMangleFor);

        auto win32_impl_result = g_api_table.DsCrackUnquotedMangledRdnW(pszRDN, cchRDN, pGuid, peDsMangleFor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DsCrackUnquotedMangledRdnA(win32::Windows::Win32::Foundation::PSTR pszRDN, uint32_t cchRDN, ::win32::guid* pGuid, win32::Windows::Win32::Networking::ActiveDirectory::DS_MANGLE_FOR* peDsMangleFor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszRDN);
        ORBIT_TRACK_PARAM(cchRDN);
        ORBIT_TRACK_PARAM(pGuid);
        ORBIT_TRACK_PARAM(peDsMangleFor);

        auto win32_impl_result = g_api_table.DsCrackUnquotedMangledRdnA(pszRDN, cchRDN, pGuid, peDsMangleFor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DsIsMangledRdnValueW(win32::Windows::Win32::Foundation::PWSTR pszRdn, uint32_t cRdn, win32::Windows::Win32::Networking::ActiveDirectory::DS_MANGLE_FOR eDsMangleForDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszRdn);
        ORBIT_TRACK_PARAM(cRdn);
        ORBIT_TRACK_PARAM(eDsMangleForDesired);

        auto win32_impl_result = g_api_table.DsIsMangledRdnValueW(pszRdn, cRdn, eDsMangleForDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DsIsMangledRdnValueA(win32::Windows::Win32::Foundation::PSTR pszRdn, uint32_t cRdn, win32::Windows::Win32::Networking::ActiveDirectory::DS_MANGLE_FOR eDsMangleForDesired) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszRdn);
        ORBIT_TRACK_PARAM(cRdn);
        ORBIT_TRACK_PARAM(eDsMangleForDesired);

        auto win32_impl_result = g_api_table.DsIsMangledRdnValueA(pszRdn, cRdn, eDsMangleForDesired);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DsIsMangledDnA(win32::Windows::Win32::Foundation::PSTR pszDn, win32::Windows::Win32::Networking::ActiveDirectory::DS_MANGLE_FOR eDsMangleFor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszDn);
        ORBIT_TRACK_PARAM(eDsMangleFor);

        auto win32_impl_result = g_api_table.DsIsMangledDnA(pszDn, eDsMangleFor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    win32::Windows::Win32::Foundation::BOOL __stdcall ORBIT_IMPL_DsIsMangledDnW(win32::Windows::Win32::Foundation::PWSTR pszDn, win32::Windows::Win32::Networking::ActiveDirectory::DS_MANGLE_FOR eDsMangleFor) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszDn);
        ORBIT_TRACK_PARAM(eDsMangleFor);

        auto win32_impl_result = g_api_table.DsIsMangledDnW(pszDn, eDsMangleFor);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackSpn2A(win32::Windows::Win32::Foundation::PSTR pszSpn, uint32_t cSpn, uint32_t* pcServiceClass, win32::Windows::Win32::Foundation::PSTR ServiceClass, uint32_t* pcServiceName, win32::Windows::Win32::Foundation::PSTR ServiceName, uint32_t* pcInstanceName, win32::Windows::Win32::Foundation::PSTR InstanceName, uint16_t* pInstancePort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSpn);
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(pcServiceClass);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(pcServiceName);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(pcInstanceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(pInstancePort);

        auto win32_impl_result = g_api_table.DsCrackSpn2A(pszSpn, cSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackSpn2W(win32::Windows::Win32::Foundation::PWSTR pszSpn, uint32_t cSpn, uint32_t* pcServiceClass, win32::Windows::Win32::Foundation::PWSTR ServiceClass, uint32_t* pcServiceName, win32::Windows::Win32::Foundation::PWSTR ServiceName, uint32_t* pcInstanceName, win32::Windows::Win32::Foundation::PWSTR InstanceName, uint16_t* pInstancePort) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSpn);
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(pcServiceClass);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(pcServiceName);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(pcInstanceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(pInstancePort);

        auto win32_impl_result = g_api_table.DsCrackSpn2W(pszSpn, cSpn, pcServiceClass, ServiceClass, pcServiceName, ServiceName, pcInstanceName, InstanceName, pInstancePort);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackSpn3W(win32::Windows::Win32::Foundation::PWSTR pszSpn, uint32_t cSpn, uint32_t* pcHostName, win32::Windows::Win32::Foundation::PWSTR HostName, uint32_t* pcInstanceName, win32::Windows::Win32::Foundation::PWSTR InstanceName, uint16_t* pPortNumber, uint32_t* pcDomainName, win32::Windows::Win32::Foundation::PWSTR DomainName, uint32_t* pcRealmName, win32::Windows::Win32::Foundation::PWSTR RealmName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSpn);
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(pcHostName);
        ORBIT_TRACK_PARAM(HostName);
        ORBIT_TRACK_PARAM(pcInstanceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(pPortNumber);
        ORBIT_TRACK_PARAM(pcDomainName);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(pcRealmName);
        ORBIT_TRACK_PARAM(RealmName);

        auto win32_impl_result = g_api_table.DsCrackSpn3W(pszSpn, cSpn, pcHostName, HostName, pcInstanceName, InstanceName, pPortNumber, pcDomainName, DomainName, pcRealmName, RealmName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackSpn4W(win32::Windows::Win32::Foundation::PWSTR pszSpn, uint32_t cSpn, uint32_t* pcHostName, win32::Windows::Win32::Foundation::PWSTR HostName, uint32_t* pcInstanceName, win32::Windows::Win32::Foundation::PWSTR InstanceName, uint32_t* pcPortName, win32::Windows::Win32::Foundation::PWSTR PortName, uint32_t* pcDomainName, win32::Windows::Win32::Foundation::PWSTR DomainName, uint32_t* pcRealmName, win32::Windows::Win32::Foundation::PWSTR RealmName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pszSpn);
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(pcHostName);
        ORBIT_TRACK_PARAM(HostName);
        ORBIT_TRACK_PARAM(pcInstanceName);
        ORBIT_TRACK_PARAM(InstanceName);
        ORBIT_TRACK_PARAM(pcPortName);
        ORBIT_TRACK_PARAM(PortName);
        ORBIT_TRACK_PARAM(pcDomainName);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(pcRealmName);
        ORBIT_TRACK_PARAM(RealmName);

        auto win32_impl_result = g_api_table.DsCrackSpn4W(pszSpn, cSpn, pcHostName, HostName, pcInstanceName, InstanceName, pcPortName, PortName, pcDomainName, DomainName, pcRealmName, RealmName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindW(win32::Windows::Win32::Foundation::PWSTR DomainControllerName, win32::Windows::Win32::Foundation::PWSTR DnsDomainName, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindW(DomainControllerName, DnsDomainName, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindA(win32::Windows::Win32::Foundation::PSTR DomainControllerName, win32::Windows::Win32::Foundation::PSTR DnsDomainName, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindA(DomainControllerName, DnsDomainName, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindWithCredW(win32::Windows::Win32::Foundation::PWSTR DomainControllerName, win32::Windows::Win32::Foundation::PWSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindWithCredW(DomainControllerName, DnsDomainName, AuthIdentity, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindWithCredA(win32::Windows::Win32::Foundation::PSTR DomainControllerName, win32::Windows::Win32::Foundation::PSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindWithCredA(DomainControllerName, DnsDomainName, AuthIdentity, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindWithSpnW(win32::Windows::Win32::Foundation::PWSTR DomainControllerName, win32::Windows::Win32::Foundation::PWSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::PWSTR ServicePrincipalName, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(ServicePrincipalName);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindWithSpnW(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindWithSpnA(win32::Windows::Win32::Foundation::PSTR DomainControllerName, win32::Windows::Win32::Foundation::PSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::PSTR ServicePrincipalName, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(ServicePrincipalName);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindWithSpnA(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindWithSpnExW(win32::Windows::Win32::Foundation::PWSTR DomainControllerName, win32::Windows::Win32::Foundation::PWSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::PWSTR ServicePrincipalName, uint32_t BindFlags, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(ServicePrincipalName);
        ORBIT_TRACK_PARAM(BindFlags);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindWithSpnExW(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindWithSpnExA(win32::Windows::Win32::Foundation::PSTR DomainControllerName, win32::Windows::Win32::Foundation::PSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::PSTR ServicePrincipalName, uint32_t BindFlags, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainControllerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(ServicePrincipalName);
        ORBIT_TRACK_PARAM(BindFlags);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindWithSpnExA(DomainControllerName, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindByInstanceW(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR Annotation, ::win32::guid* InstanceGuid, win32::Windows::Win32::Foundation::PWSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::PWSTR ServicePrincipalName, uint32_t BindFlags, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Annotation);
        ORBIT_TRACK_PARAM(InstanceGuid);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(ServicePrincipalName);
        ORBIT_TRACK_PARAM(BindFlags);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindByInstanceW(ServerName, Annotation, InstanceGuid, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindByInstanceA(win32::Windows::Win32::Foundation::PSTR ServerName, win32::Windows::Win32::Foundation::PSTR Annotation, ::win32::guid* InstanceGuid, win32::Windows::Win32::Foundation::PSTR DnsDomainName, void* AuthIdentity, win32::Windows::Win32::Foundation::PSTR ServicePrincipalName, uint32_t BindFlags, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Annotation);
        ORBIT_TRACK_PARAM(InstanceGuid);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(AuthIdentity);
        ORBIT_TRACK_PARAM(ServicePrincipalName);
        ORBIT_TRACK_PARAM(BindFlags);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindByInstanceA(ServerName, Annotation, InstanceGuid, DnsDomainName, AuthIdentity, ServicePrincipalName, BindFlags, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindToISTGW(win32::Windows::Win32::Foundation::PWSTR SiteName, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SiteName);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindToISTGW(SiteName, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindToISTGA(win32::Windows::Win32::Foundation::PSTR SiteName, win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SiteName);
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsBindToISTGA(SiteName, phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsBindingSetTimeout(win32::Windows::Win32::Foundation::HANDLE hDS, uint32_t cTimeoutSecs) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(cTimeoutSecs);

        auto win32_impl_result = g_api_table.DsBindingSetTimeout(hDS, cTimeoutSecs);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsUnBindW(win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsUnBindW(phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsUnBindA(win32::Windows::Win32::Foundation::HANDLE* phDS) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(phDS);

        auto win32_impl_result = g_api_table.DsUnBindA(phDS);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsMakePasswordCredentialsW(win32::Windows::Win32::Foundation::PWSTR User, win32::Windows::Win32::Foundation::PWSTR Domain, win32::Windows::Win32::Foundation::PWSTR Password, void** pAuthIdentity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(User);
        ORBIT_TRACK_PARAM(Domain);
        ORBIT_TRACK_PARAM(Password);
        ORBIT_TRACK_PARAM(pAuthIdentity);

        auto win32_impl_result = g_api_table.DsMakePasswordCredentialsW(User, Domain, Password, pAuthIdentity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsMakePasswordCredentialsA(win32::Windows::Win32::Foundation::PSTR User, win32::Windows::Win32::Foundation::PSTR Domain, win32::Windows::Win32::Foundation::PSTR Password, void** pAuthIdentity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(User);
        ORBIT_TRACK_PARAM(Domain);
        ORBIT_TRACK_PARAM(Password);
        ORBIT_TRACK_PARAM(pAuthIdentity);

        auto win32_impl_result = g_api_table.DsMakePasswordCredentialsA(User, Domain, Password, pAuthIdentity);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsFreePasswordCredentials(void* AuthIdentity) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(AuthIdentity);

        g_api_table.DsFreePasswordCredentials(AuthIdentity);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackNamesW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_FLAGS flags, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_FORMAT formatOffered, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_FORMAT formatDesired, uint32_t cNames, win32::Windows::Win32::Foundation::PWSTR* rpNames, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(formatOffered);
        ORBIT_TRACK_PARAM(formatDesired);
        ORBIT_TRACK_PARAM(cNames);
        ORBIT_TRACK_PARAM(rpNames);
        ORBIT_TRACK_PARAM(ppResult);

        auto win32_impl_result = g_api_table.DsCrackNamesW(hDS, flags, formatOffered, formatDesired, cNames, rpNames, ppResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsCrackNamesA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_FLAGS flags, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_FORMAT formatOffered, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_FORMAT formatDesired, uint32_t cNames, win32::Windows::Win32::Foundation::PSTR* rpNames, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(flags);
        ORBIT_TRACK_PARAM(formatOffered);
        ORBIT_TRACK_PARAM(formatDesired);
        ORBIT_TRACK_PARAM(cNames);
        ORBIT_TRACK_PARAM(rpNames);
        ORBIT_TRACK_PARAM(ppResult);

        auto win32_impl_result = g_api_table.DsCrackNamesA(hDS, flags, formatOffered, formatDesired, cNames, rpNames, ppResult);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsFreeNameResultW(win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW* pResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResult);

        g_api_table.DsFreeNameResultW(pResult);
        
    }

    void __stdcall ORBIT_IMPL_DsFreeNameResultA(win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA* pResult) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pResult);

        g_api_table.DsFreeNameResultA(pResult);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetSpnA(win32::Windows::Win32::Networking::ActiveDirectory::DS_SPN_NAME_TYPE ServiceType, win32::Windows::Win32::Foundation::PSTR ServiceClass, win32::Windows::Win32::Foundation::PSTR ServiceName, uint16_t InstancePort, uint16_t cInstanceNames, win32::Windows::Win32::Foundation::PSTR* pInstanceNames, uint16_t* pInstancePorts, uint32_t* pcSpn, win32::Windows::Win32::Foundation::PSTR** prpszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceType);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(InstancePort);
        ORBIT_TRACK_PARAM(cInstanceNames);
        ORBIT_TRACK_PARAM(pInstanceNames);
        ORBIT_TRACK_PARAM(pInstancePorts);
        ORBIT_TRACK_PARAM(pcSpn);
        ORBIT_TRACK_PARAM(prpszSpn);

        auto win32_impl_result = g_api_table.DsGetSpnA(ServiceType, ServiceClass, ServiceName, InstancePort, cInstanceNames, pInstanceNames, pInstancePorts, pcSpn, prpszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetSpnW(win32::Windows::Win32::Networking::ActiveDirectory::DS_SPN_NAME_TYPE ServiceType, win32::Windows::Win32::Foundation::PWSTR ServiceClass, win32::Windows::Win32::Foundation::PWSTR ServiceName, uint16_t InstancePort, uint16_t cInstanceNames, win32::Windows::Win32::Foundation::PWSTR* pInstanceNames, uint16_t* pInstancePorts, uint32_t* pcSpn, win32::Windows::Win32::Foundation::PWSTR** prpszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceType);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(InstancePort);
        ORBIT_TRACK_PARAM(cInstanceNames);
        ORBIT_TRACK_PARAM(pInstanceNames);
        ORBIT_TRACK_PARAM(pInstancePorts);
        ORBIT_TRACK_PARAM(pcSpn);
        ORBIT_TRACK_PARAM(prpszSpn);

        auto win32_impl_result = g_api_table.DsGetSpnW(ServiceType, ServiceClass, ServiceName, InstancePort, cInstanceNames, pInstanceNames, pInstancePorts, pcSpn, prpszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsFreeSpnArrayA(uint32_t cSpn, win32::Windows::Win32::Foundation::PSTR* rpszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(rpszSpn);

        g_api_table.DsFreeSpnArrayA(cSpn, rpszSpn);
        
    }

    void __stdcall ORBIT_IMPL_DsFreeSpnArrayW(uint32_t cSpn, win32::Windows::Win32::Foundation::PWSTR* rpszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(rpszSpn);

        g_api_table.DsFreeSpnArrayW(cSpn, rpszSpn);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsWriteAccountSpnA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_SPN_WRITE_OP Operation, win32::Windows::Win32::Foundation::PSTR pszAccount, uint32_t cSpn, win32::Windows::Win32::Foundation::PSTR* rpszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(pszAccount);
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(rpszSpn);

        auto win32_impl_result = g_api_table.DsWriteAccountSpnA(hDS, Operation, pszAccount, cSpn, rpszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsWriteAccountSpnW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_SPN_WRITE_OP Operation, win32::Windows::Win32::Foundation::PWSTR pszAccount, uint32_t cSpn, win32::Windows::Win32::Foundation::PWSTR* rpszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(pszAccount);
        ORBIT_TRACK_PARAM(cSpn);
        ORBIT_TRACK_PARAM(rpszSpn);

        auto win32_impl_result = g_api_table.DsWriteAccountSpnW(hDS, Operation, pszAccount, cSpn, rpszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsClientMakeSpnForTargetServerW(win32::Windows::Win32::Foundation::PWSTR ServiceClass, win32::Windows::Win32::Foundation::PWSTR ServiceName, uint32_t* pcSpnLength, win32::Windows::Win32::Foundation::PWSTR pszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(pcSpnLength);
        ORBIT_TRACK_PARAM(pszSpn);

        auto win32_impl_result = g_api_table.DsClientMakeSpnForTargetServerW(ServiceClass, ServiceName, pcSpnLength, pszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsClientMakeSpnForTargetServerA(win32::Windows::Win32::Foundation::PSTR ServiceClass, win32::Windows::Win32::Foundation::PSTR ServiceName, uint32_t* pcSpnLength, win32::Windows::Win32::Foundation::PSTR pszSpn) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(ServiceName);
        ORBIT_TRACK_PARAM(pcSpnLength);
        ORBIT_TRACK_PARAM(pszSpn);

        auto win32_impl_result = g_api_table.DsClientMakeSpnForTargetServerA(ServiceClass, ServiceName, pcSpnLength, pszSpn);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsServerRegisterSpnA(win32::Windows::Win32::Networking::ActiveDirectory::DS_SPN_WRITE_OP Operation, win32::Windows::Win32::Foundation::PSTR ServiceClass, win32::Windows::Win32::Foundation::PSTR UserObjectDN) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(UserObjectDN);

        auto win32_impl_result = g_api_table.DsServerRegisterSpnA(Operation, ServiceClass, UserObjectDN);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsServerRegisterSpnW(win32::Windows::Win32::Networking::ActiveDirectory::DS_SPN_WRITE_OP Operation, win32::Windows::Win32::Foundation::PWSTR ServiceClass, win32::Windows::Win32::Foundation::PWSTR UserObjectDN) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Operation);
        ORBIT_TRACK_PARAM(ServiceClass);
        ORBIT_TRACK_PARAM(UserObjectDN);

        auto win32_impl_result = g_api_table.DsServerRegisterSpnW(Operation, ServiceClass, UserObjectDN);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaSyncA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR NameContext, ::win32::guid* pUuidDsaSrc, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(pUuidDsaSrc);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaSyncA(hDS, NameContext, pUuidDsaSrc, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaSyncW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR NameContext, ::win32::guid* pUuidDsaSrc, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(pUuidDsaSrc);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaSyncW(hDS, NameContext, pUuidDsaSrc, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaAddA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR NameContext, win32::Windows::Win32::Foundation::PSTR SourceDsaDn, win32::Windows::Win32::Foundation::PSTR TransportDn, win32::Windows::Win32::Foundation::PSTR SourceDsaAddress, win32::Windows::Win32::Networking::ActiveDirectory::SCHEDULE* pSchedule, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(SourceDsaDn);
        ORBIT_TRACK_PARAM(TransportDn);
        ORBIT_TRACK_PARAM(SourceDsaAddress);
        ORBIT_TRACK_PARAM(pSchedule);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaAddA(hDS, NameContext, SourceDsaDn, TransportDn, SourceDsaAddress, pSchedule, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaAddW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR NameContext, win32::Windows::Win32::Foundation::PWSTR SourceDsaDn, win32::Windows::Win32::Foundation::PWSTR TransportDn, win32::Windows::Win32::Foundation::PWSTR SourceDsaAddress, win32::Windows::Win32::Networking::ActiveDirectory::SCHEDULE* pSchedule, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(SourceDsaDn);
        ORBIT_TRACK_PARAM(TransportDn);
        ORBIT_TRACK_PARAM(SourceDsaAddress);
        ORBIT_TRACK_PARAM(pSchedule);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaAddW(hDS, NameContext, SourceDsaDn, TransportDn, SourceDsaAddress, pSchedule, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaDelA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR NameContext, win32::Windows::Win32::Foundation::PSTR DsaSrc, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(DsaSrc);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaDelA(hDS, NameContext, DsaSrc, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaDelW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR NameContext, win32::Windows::Win32::Foundation::PWSTR DsaSrc, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(DsaSrc);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaDelW(hDS, NameContext, DsaSrc, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaModifyA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR NameContext, ::win32::guid* pUuidSourceDsa, win32::Windows::Win32::Foundation::PSTR TransportDn, win32::Windows::Win32::Foundation::PSTR SourceDsaAddress, win32::Windows::Win32::Networking::ActiveDirectory::SCHEDULE* pSchedule, uint32_t ReplicaFlags, uint32_t ModifyFields, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(pUuidSourceDsa);
        ORBIT_TRACK_PARAM(TransportDn);
        ORBIT_TRACK_PARAM(SourceDsaAddress);
        ORBIT_TRACK_PARAM(pSchedule);
        ORBIT_TRACK_PARAM(ReplicaFlags);
        ORBIT_TRACK_PARAM(ModifyFields);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaModifyA(hDS, NameContext, pUuidSourceDsa, TransportDn, SourceDsaAddress, pSchedule, ReplicaFlags, ModifyFields, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaModifyW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR NameContext, ::win32::guid* pUuidSourceDsa, win32::Windows::Win32::Foundation::PWSTR TransportDn, win32::Windows::Win32::Foundation::PWSTR SourceDsaAddress, win32::Windows::Win32::Networking::ActiveDirectory::SCHEDULE* pSchedule, uint32_t ReplicaFlags, uint32_t ModifyFields, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(pUuidSourceDsa);
        ORBIT_TRACK_PARAM(TransportDn);
        ORBIT_TRACK_PARAM(SourceDsaAddress);
        ORBIT_TRACK_PARAM(pSchedule);
        ORBIT_TRACK_PARAM(ReplicaFlags);
        ORBIT_TRACK_PARAM(ModifyFields);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaModifyW(hDS, NameContext, pUuidSourceDsa, TransportDn, SourceDsaAddress, pSchedule, ReplicaFlags, ModifyFields, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaUpdateRefsA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR NameContext, win32::Windows::Win32::Foundation::PSTR DsaDest, ::win32::guid* pUuidDsaDest, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(DsaDest);
        ORBIT_TRACK_PARAM(pUuidDsaDest);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaUpdateRefsA(hDS, NameContext, DsaDest, pUuidDsaDest, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaUpdateRefsW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR NameContext, win32::Windows::Win32::Foundation::PWSTR DsaDest, ::win32::guid* pUuidDsaDest, uint32_t Options) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(DsaDest);
        ORBIT_TRACK_PARAM(pUuidDsaDest);
        ORBIT_TRACK_PARAM(Options);

        auto win32_impl_result = g_api_table.DsReplicaUpdateRefsW(hDS, NameContext, DsaDest, pUuidDsaDest, Options);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaSyncAllA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR pszNameContext, uint32_t ulFlags, intptr_t pFnCallBack, void* pCallbackData, win32::Windows::Win32::Networking::ActiveDirectory::DS_REPSYNCALL_ERRINFOA*** pErrors) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(pszNameContext);
        ORBIT_TRACK_PARAM(ulFlags);
        ORBIT_TRACK_PARAM(pFnCallBack);
        ORBIT_TRACK_PARAM(pCallbackData);
        ORBIT_TRACK_PARAM(pErrors);

        auto win32_impl_result = g_api_table.DsReplicaSyncAllA(hDS, pszNameContext, ulFlags, pFnCallBack, pCallbackData, pErrors);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaSyncAllW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR pszNameContext, uint32_t ulFlags, intptr_t pFnCallBack, void* pCallbackData, win32::Windows::Win32::Networking::ActiveDirectory::DS_REPSYNCALL_ERRINFOW*** pErrors) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(pszNameContext);
        ORBIT_TRACK_PARAM(ulFlags);
        ORBIT_TRACK_PARAM(pFnCallBack);
        ORBIT_TRACK_PARAM(pCallbackData);
        ORBIT_TRACK_PARAM(pErrors);

        auto win32_impl_result = g_api_table.DsReplicaSyncAllW(hDS, pszNameContext, ulFlags, pFnCallBack, pCallbackData, pErrors);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsRemoveDsServerW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR ServerDN, win32::Windows::Win32::Foundation::PWSTR DomainDN, win32::Windows::Win32::Foundation::BOOL* fLastDcInDomain, win32::Windows::Win32::Foundation::BOOL fCommit) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(ServerDN);
        ORBIT_TRACK_PARAM(DomainDN);
        ORBIT_TRACK_PARAM(fLastDcInDomain);
        ORBIT_TRACK_PARAM(fCommit);

        auto win32_impl_result = g_api_table.DsRemoveDsServerW(hDs, ServerDN, DomainDN, fLastDcInDomain, fCommit);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsRemoveDsServerA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR ServerDN, win32::Windows::Win32::Foundation::PSTR DomainDN, win32::Windows::Win32::Foundation::BOOL* fLastDcInDomain, win32::Windows::Win32::Foundation::BOOL fCommit) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(ServerDN);
        ORBIT_TRACK_PARAM(DomainDN);
        ORBIT_TRACK_PARAM(fLastDcInDomain);
        ORBIT_TRACK_PARAM(fCommit);

        auto win32_impl_result = g_api_table.DsRemoveDsServerA(hDs, ServerDN, DomainDN, fLastDcInDomain, fCommit);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsRemoveDsDomainW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR DomainDN) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(DomainDN);

        auto win32_impl_result = g_api_table.DsRemoveDsDomainW(hDs, DomainDN);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsRemoveDsDomainA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR DomainDN) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(DomainDN);

        auto win32_impl_result = g_api_table.DsRemoveDsDomainA(hDs, DomainDN);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListSitesA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppSites) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(ppSites);

        auto win32_impl_result = g_api_table.DsListSitesA(hDs, ppSites);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListSitesW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppSites) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(ppSites);

        auto win32_impl_result = g_api_table.DsListSitesW(hDs, ppSites);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListServersInSiteA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR site, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppServers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(site);
        ORBIT_TRACK_PARAM(ppServers);

        auto win32_impl_result = g_api_table.DsListServersInSiteA(hDs, site, ppServers);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListServersInSiteW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR site, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppServers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(site);
        ORBIT_TRACK_PARAM(ppServers);

        auto win32_impl_result = g_api_table.DsListServersInSiteW(hDs, site, ppServers);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListDomainsInSiteA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR site, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppDomains) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(site);
        ORBIT_TRACK_PARAM(ppDomains);

        auto win32_impl_result = g_api_table.DsListDomainsInSiteA(hDs, site, ppDomains);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListDomainsInSiteW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR site, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppDomains) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(site);
        ORBIT_TRACK_PARAM(ppDomains);

        auto win32_impl_result = g_api_table.DsListDomainsInSiteW(hDs, site, ppDomains);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListServersForDomainInSiteA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR domain, win32::Windows::Win32::Foundation::PSTR site, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppServers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(domain);
        ORBIT_TRACK_PARAM(site);
        ORBIT_TRACK_PARAM(ppServers);

        auto win32_impl_result = g_api_table.DsListServersForDomainInSiteA(hDs, domain, site, ppServers);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListServersForDomainInSiteW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR domain, win32::Windows::Win32::Foundation::PWSTR site, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppServers) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(domain);
        ORBIT_TRACK_PARAM(site);
        ORBIT_TRACK_PARAM(ppServers);

        auto win32_impl_result = g_api_table.DsListServersForDomainInSiteW(hDs, domain, site, ppServers);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListInfoForServerA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR server, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(ppInfo);

        auto win32_impl_result = g_api_table.DsListInfoForServerA(hDs, server, ppInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListInfoForServerW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR server, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(server);
        ORBIT_TRACK_PARAM(ppInfo);

        auto win32_impl_result = g_api_table.DsListInfoForServerW(hDs, server, ppInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListRolesA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTA** ppRoles) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(ppRoles);

        auto win32_impl_result = g_api_table.DsListRolesA(hDs, ppRoles);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsListRolesW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Networking::ActiveDirectory::DS_NAME_RESULTW** ppRoles) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(ppRoles);

        auto win32_impl_result = g_api_table.DsListRolesW(hDs, ppRoles);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsQuerySitesByCostW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR pwszFromSite, win32::Windows::Win32::Foundation::PWSTR* rgwszToSites, uint32_t cToSites, uint32_t dwFlags, win32::Windows::Win32::Networking::ActiveDirectory::DS_SITE_COST_INFO** prgSiteInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(pwszFromSite);
        ORBIT_TRACK_PARAM(rgwszToSites);
        ORBIT_TRACK_PARAM(cToSites);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(prgSiteInfo);

        auto win32_impl_result = g_api_table.DsQuerySitesByCostW(hDS, pwszFromSite, rgwszToSites, cToSites, dwFlags, prgSiteInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsQuerySitesByCostA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR pszFromSite, win32::Windows::Win32::Foundation::PSTR* rgszToSites, uint32_t cToSites, uint32_t dwFlags, win32::Windows::Win32::Networking::ActiveDirectory::DS_SITE_COST_INFO** prgSiteInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(pszFromSite);
        ORBIT_TRACK_PARAM(rgszToSites);
        ORBIT_TRACK_PARAM(cToSites);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(prgSiteInfo);

        auto win32_impl_result = g_api_table.DsQuerySitesByCostA(hDS, pszFromSite, rgszToSites, cToSites, dwFlags, prgSiteInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsQuerySitesFree(win32::Windows::Win32::Networking::ActiveDirectory::DS_SITE_COST_INFO* rgSiteInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(rgSiteInfo);

        g_api_table.DsQuerySitesFree(rgSiteInfo);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsMapSchemaGuidsA(win32::Windows::Win32::Foundation::HANDLE hDs, uint32_t cGuids, ::win32::guid* rGuids, win32::Windows::Win32::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPA** ppGuidMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(cGuids);
        ORBIT_TRACK_PARAM(rGuids);
        ORBIT_TRACK_PARAM(ppGuidMap);

        auto win32_impl_result = g_api_table.DsMapSchemaGuidsA(hDs, cGuids, rGuids, ppGuidMap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsFreeSchemaGuidMapA(win32::Windows::Win32::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPA* pGuidMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGuidMap);

        g_api_table.DsFreeSchemaGuidMapA(pGuidMap);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsMapSchemaGuidsW(win32::Windows::Win32::Foundation::HANDLE hDs, uint32_t cGuids, ::win32::guid* rGuids, win32::Windows::Win32::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPW** ppGuidMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(cGuids);
        ORBIT_TRACK_PARAM(rGuids);
        ORBIT_TRACK_PARAM(ppGuidMap);

        auto win32_impl_result = g_api_table.DsMapSchemaGuidsW(hDs, cGuids, rGuids, ppGuidMap);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsFreeSchemaGuidMapW(win32::Windows::Win32::Networking::ActiveDirectory::DS_SCHEMA_GUID_MAPW* pGuidMap) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(pGuidMap);

        g_api_table.DsFreeSchemaGuidMapW(pGuidMap);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDomainControllerInfoA(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PSTR DomainName, uint32_t InfoLevel, uint32_t* pcOut, void** ppInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(pcOut);
        ORBIT_TRACK_PARAM(ppInfo);

        auto win32_impl_result = g_api_table.DsGetDomainControllerInfoA(hDs, DomainName, InfoLevel, pcOut, ppInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDomainControllerInfoW(win32::Windows::Win32::Foundation::HANDLE hDs, win32::Windows::Win32::Foundation::PWSTR DomainName, uint32_t InfoLevel, uint32_t* pcOut, void** ppInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDs);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(pcOut);
        ORBIT_TRACK_PARAM(ppInfo);

        auto win32_impl_result = g_api_table.DsGetDomainControllerInfoW(hDs, DomainName, InfoLevel, pcOut, ppInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsFreeDomainControllerInfoA(uint32_t InfoLevel, uint32_t cInfo, void* pInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(cInfo);
        ORBIT_TRACK_PARAM(pInfo);

        g_api_table.DsFreeDomainControllerInfoA(InfoLevel, cInfo, pInfo);
        
    }

    void __stdcall ORBIT_IMPL_DsFreeDomainControllerInfoW(uint32_t InfoLevel, uint32_t cInfo, void* pInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(cInfo);
        ORBIT_TRACK_PARAM(pInfo);

        g_api_table.DsFreeDomainControllerInfoW(InfoLevel, cInfo, pInfo);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaConsistencyCheck(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_KCC_TASKID TaskID, uint32_t dwFlags) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(TaskID);
        ORBIT_TRACK_PARAM(dwFlags);

        auto win32_impl_result = g_api_table.DsReplicaConsistencyCheck(hDS, TaskID, dwFlags);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaVerifyObjectsW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PWSTR NameContext, ::win32::guid* pUuidDsaSrc, uint32_t ulOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(pUuidDsaSrc);
        ORBIT_TRACK_PARAM(ulOptions);

        auto win32_impl_result = g_api_table.DsReplicaVerifyObjectsW(hDS, NameContext, pUuidDsaSrc, ulOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaVerifyObjectsA(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Foundation::PSTR NameContext, ::win32::guid* pUuidDsaSrc, uint32_t ulOptions) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(NameContext);
        ORBIT_TRACK_PARAM(pUuidDsaSrc);
        ORBIT_TRACK_PARAM(ulOptions);

        auto win32_impl_result = g_api_table.DsReplicaVerifyObjectsA(hDS, NameContext, pUuidDsaSrc, ulOptions);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaGetInfoW(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_REPL_INFO_TYPE InfoType, win32::Windows::Win32::Foundation::PWSTR pszObject, ::win32::guid* puuidForSourceDsaObjGuid, void** ppInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(pszObject);
        ORBIT_TRACK_PARAM(puuidForSourceDsaObjGuid);
        ORBIT_TRACK_PARAM(ppInfo);

        auto win32_impl_result = g_api_table.DsReplicaGetInfoW(hDS, InfoType, pszObject, puuidForSourceDsaObjGuid, ppInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsReplicaGetInfo2W(win32::Windows::Win32::Foundation::HANDLE hDS, win32::Windows::Win32::Networking::ActiveDirectory::DS_REPL_INFO_TYPE InfoType, win32::Windows::Win32::Foundation::PWSTR pszObject, ::win32::guid* puuidForSourceDsaObjGuid, win32::Windows::Win32::Foundation::PWSTR pszAttributeName, win32::Windows::Win32::Foundation::PWSTR pszValue, uint32_t dwFlags, uint32_t dwEnumerationContext, void** ppInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(pszObject);
        ORBIT_TRACK_PARAM(puuidForSourceDsaObjGuid);
        ORBIT_TRACK_PARAM(pszAttributeName);
        ORBIT_TRACK_PARAM(pszValue);
        ORBIT_TRACK_PARAM(dwFlags);
        ORBIT_TRACK_PARAM(dwEnumerationContext);
        ORBIT_TRACK_PARAM(ppInfo);

        auto win32_impl_result = g_api_table.DsReplicaGetInfo2W(hDS, InfoType, pszObject, puuidForSourceDsaObjGuid, pszAttributeName, pszValue, dwFlags, dwEnumerationContext, ppInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsReplicaFreeInfo(win32::Windows::Win32::Networking::ActiveDirectory::DS_REPL_INFO_TYPE InfoType, void* pInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(InfoType);
        ORBIT_TRACK_PARAM(pInfo);

        g_api_table.DsReplicaFreeInfo(InfoType, pInfo);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsAddSidHistoryW(win32::Windows::Win32::Foundation::HANDLE hDS, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR SrcDomain, win32::Windows::Win32::Foundation::PWSTR SrcPrincipal, win32::Windows::Win32::Foundation::PWSTR SrcDomainController, void* SrcDomainCreds, win32::Windows::Win32::Foundation::PWSTR DstDomain, win32::Windows::Win32::Foundation::PWSTR DstPrincipal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(SrcDomain);
        ORBIT_TRACK_PARAM(SrcPrincipal);
        ORBIT_TRACK_PARAM(SrcDomainController);
        ORBIT_TRACK_PARAM(SrcDomainCreds);
        ORBIT_TRACK_PARAM(DstDomain);
        ORBIT_TRACK_PARAM(DstPrincipal);

        auto win32_impl_result = g_api_table.DsAddSidHistoryW(hDS, Flags, SrcDomain, SrcPrincipal, SrcDomainController, SrcDomainCreds, DstDomain, DstPrincipal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsAddSidHistoryA(win32::Windows::Win32::Foundation::HANDLE hDS, uint32_t Flags, win32::Windows::Win32::Foundation::PSTR SrcDomain, win32::Windows::Win32::Foundation::PSTR SrcPrincipal, win32::Windows::Win32::Foundation::PSTR SrcDomainController, void* SrcDomainCreds, win32::Windows::Win32::Foundation::PSTR DstDomain, win32::Windows::Win32::Foundation::PSTR DstPrincipal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(SrcDomain);
        ORBIT_TRACK_PARAM(SrcPrincipal);
        ORBIT_TRACK_PARAM(SrcDomainController);
        ORBIT_TRACK_PARAM(SrcDomainCreds);
        ORBIT_TRACK_PARAM(DstDomain);
        ORBIT_TRACK_PARAM(DstPrincipal);

        auto win32_impl_result = g_api_table.DsAddSidHistoryA(hDS, Flags, SrcDomain, SrcPrincipal, SrcDomainController, SrcDomainCreds, DstDomain, DstPrincipal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsInheritSecurityIdentityW(win32::Windows::Win32::Foundation::HANDLE hDS, uint32_t Flags, win32::Windows::Win32::Foundation::PWSTR SrcPrincipal, win32::Windows::Win32::Foundation::PWSTR DstPrincipal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(SrcPrincipal);
        ORBIT_TRACK_PARAM(DstPrincipal);

        auto win32_impl_result = g_api_table.DsInheritSecurityIdentityW(hDS, Flags, SrcPrincipal, DstPrincipal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsInheritSecurityIdentityA(win32::Windows::Win32::Foundation::HANDLE hDS, uint32_t Flags, win32::Windows::Win32::Foundation::PSTR SrcPrincipal, win32::Windows::Win32::Foundation::PSTR DstPrincipal) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(hDS);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(SrcPrincipal);
        ORBIT_TRACK_PARAM(DstPrincipal);

        auto win32_impl_result = g_api_table.DsInheritSecurityIdentityA(hDS, Flags, SrcPrincipal, DstPrincipal);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsRoleGetPrimaryDomainInformation(win32::Windows::Win32::Foundation::PWSTR lpServer, win32::Windows::Win32::Networking::ActiveDirectory::DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, uint8_t** Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(lpServer);
        ORBIT_TRACK_PARAM(InfoLevel);
        ORBIT_TRACK_PARAM(Buffer);

        auto win32_impl_result = g_api_table.DsRoleGetPrimaryDomainInformation(lpServer, InfoLevel, Buffer);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsRoleFreeMemory(void* Buffer) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(Buffer);

        g_api_table.DsRoleFreeMemory(Buffer);
        
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcNameA(win32::Windows::Win32::Foundation::PSTR ComputerName, win32::Windows::Win32::Foundation::PSTR DomainName, ::win32::guid* DomainGuid, win32::Windows::Win32::Foundation::PSTR SiteName, uint32_t Flags, win32::Windows::Win32::Networking::ActiveDirectory::DOMAIN_CONTROLLER_INFOA** DomainControllerInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(DomainGuid);
        ORBIT_TRACK_PARAM(SiteName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(DomainControllerInfo);

        auto win32_impl_result = g_api_table.DsGetDcNameA(ComputerName, DomainName, DomainGuid, SiteName, Flags, DomainControllerInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcNameW(win32::Windows::Win32::Foundation::PWSTR ComputerName, win32::Windows::Win32::Foundation::PWSTR DomainName, ::win32::guid* DomainGuid, win32::Windows::Win32::Foundation::PWSTR SiteName, uint32_t Flags, win32::Windows::Win32::Networking::ActiveDirectory::DOMAIN_CONTROLLER_INFOW** DomainControllerInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(DomainGuid);
        ORBIT_TRACK_PARAM(SiteName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(DomainControllerInfo);

        auto win32_impl_result = g_api_table.DsGetDcNameW(ComputerName, DomainName, DomainGuid, SiteName, Flags, DomainControllerInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetSiteNameA(win32::Windows::Win32::Foundation::PSTR ComputerName, win32::Windows::Win32::Foundation::PSTR* SiteName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(SiteName);

        auto win32_impl_result = g_api_table.DsGetSiteNameA(ComputerName, SiteName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetSiteNameW(win32::Windows::Win32::Foundation::PWSTR ComputerName, win32::Windows::Win32::Foundation::PWSTR* SiteName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(SiteName);

        auto win32_impl_result = g_api_table.DsGetSiteNameW(ComputerName, SiteName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsValidateSubnetNameW(win32::Windows::Win32::Foundation::PWSTR SubnetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SubnetName);

        auto win32_impl_result = g_api_table.DsValidateSubnetNameW(SubnetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsValidateSubnetNameA(win32::Windows::Win32::Foundation::PSTR SubnetName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(SubnetName);

        auto win32_impl_result = g_api_table.DsValidateSubnetNameA(SubnetName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsAddressToSiteNamesW(win32::Windows::Win32::Foundation::PWSTR ComputerName, uint32_t EntryCount, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS* SocketAddresses, win32::Windows::Win32::Foundation::PWSTR** SiteNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(SocketAddresses);
        ORBIT_TRACK_PARAM(SiteNames);

        auto win32_impl_result = g_api_table.DsAddressToSiteNamesW(ComputerName, EntryCount, SocketAddresses, SiteNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsAddressToSiteNamesA(win32::Windows::Win32::Foundation::PSTR ComputerName, uint32_t EntryCount, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS* SocketAddresses, win32::Windows::Win32::Foundation::PSTR** SiteNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(SocketAddresses);
        ORBIT_TRACK_PARAM(SiteNames);

        auto win32_impl_result = g_api_table.DsAddressToSiteNamesA(ComputerName, EntryCount, SocketAddresses, SiteNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsAddressToSiteNamesExW(win32::Windows::Win32::Foundation::PWSTR ComputerName, uint32_t EntryCount, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS* SocketAddresses, win32::Windows::Win32::Foundation::PWSTR** SiteNames, win32::Windows::Win32::Foundation::PWSTR** SubnetNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(SocketAddresses);
        ORBIT_TRACK_PARAM(SiteNames);
        ORBIT_TRACK_PARAM(SubnetNames);

        auto win32_impl_result = g_api_table.DsAddressToSiteNamesExW(ComputerName, EntryCount, SocketAddresses, SiteNames, SubnetNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsAddressToSiteNamesExA(win32::Windows::Win32::Foundation::PSTR ComputerName, uint32_t EntryCount, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS* SocketAddresses, win32::Windows::Win32::Foundation::PSTR** SiteNames, win32::Windows::Win32::Foundation::PSTR** SubnetNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ComputerName);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(SocketAddresses);
        ORBIT_TRACK_PARAM(SiteNames);
        ORBIT_TRACK_PARAM(SubnetNames);

        auto win32_impl_result = g_api_table.DsAddressToSiteNamesExA(ComputerName, EntryCount, SocketAddresses, SiteNames, SubnetNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsEnumerateDomainTrustsW(win32::Windows::Win32::Foundation::PWSTR ServerName, uint32_t Flags, win32::Windows::Win32::Networking::ActiveDirectory::DS_DOMAIN_TRUSTSW** Domains, uint32_t* DomainCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Domains);
        ORBIT_TRACK_PARAM(DomainCount);

        auto win32_impl_result = g_api_table.DsEnumerateDomainTrustsW(ServerName, Flags, Domains, DomainCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsEnumerateDomainTrustsA(win32::Windows::Win32::Foundation::PSTR ServerName, uint32_t Flags, win32::Windows::Win32::Networking::ActiveDirectory::DS_DOMAIN_TRUSTSA** Domains, uint32_t* DomainCount) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(Domains);
        ORBIT_TRACK_PARAM(DomainCount);

        auto win32_impl_result = g_api_table.DsEnumerateDomainTrustsA(ServerName, Flags, Domains, DomainCount);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetForestTrustInformationW(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR TrustedDomainName, uint32_t Flags, win32::Windows::Win32::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION** ForestTrustInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(TrustedDomainName);
        ORBIT_TRACK_PARAM(Flags);
        ORBIT_TRACK_PARAM(ForestTrustInfo);

        auto win32_impl_result = g_api_table.DsGetForestTrustInformationW(ServerName, TrustedDomainName, Flags, ForestTrustInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsMergeForestTrustInformationW(win32::Windows::Win32::Foundation::PWSTR DomainName, win32::Windows::Win32::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION* NewForestTrustInfo, win32::Windows::Win32::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION* OldForestTrustInfo, win32::Windows::Win32::Security::Authentication::Identity::LSA_FOREST_TRUST_INFORMATION** MergedForestTrustInfo) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DomainName);
        ORBIT_TRACK_PARAM(NewForestTrustInfo);
        ORBIT_TRACK_PARAM(OldForestTrustInfo);
        ORBIT_TRACK_PARAM(MergedForestTrustInfo);

        auto win32_impl_result = g_api_table.DsMergeForestTrustInformationW(DomainName, NewForestTrustInfo, OldForestTrustInfo, MergedForestTrustInfo);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcSiteCoverageW(win32::Windows::Win32::Foundation::PWSTR ServerName, uint32_t* EntryCount, win32::Windows::Win32::Foundation::PWSTR** SiteNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(SiteNames);

        auto win32_impl_result = g_api_table.DsGetDcSiteCoverageW(ServerName, EntryCount, SiteNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcSiteCoverageA(win32::Windows::Win32::Foundation::PSTR ServerName, uint32_t* EntryCount, win32::Windows::Win32::Foundation::PSTR** SiteNames) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(EntryCount);
        ORBIT_TRACK_PARAM(SiteNames);

        auto win32_impl_result = g_api_table.DsGetDcSiteCoverageA(ServerName, EntryCount, SiteNames);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsDeregisterDnsHostRecordsW(win32::Windows::Win32::Foundation::PWSTR ServerName, win32::Windows::Win32::Foundation::PWSTR DnsDomainName, ::win32::guid* DomainGuid, ::win32::guid* DsaGuid, win32::Windows::Win32::Foundation::PWSTR DnsHostName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(DomainGuid);
        ORBIT_TRACK_PARAM(DsaGuid);
        ORBIT_TRACK_PARAM(DnsHostName);

        auto win32_impl_result = g_api_table.DsDeregisterDnsHostRecordsW(ServerName, DnsDomainName, DomainGuid, DsaGuid, DnsHostName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsDeregisterDnsHostRecordsA(win32::Windows::Win32::Foundation::PSTR ServerName, win32::Windows::Win32::Foundation::PSTR DnsDomainName, ::win32::guid* DomainGuid, ::win32::guid* DsaGuid, win32::Windows::Win32::Foundation::PSTR DnsHostName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(ServerName);
        ORBIT_TRACK_PARAM(DnsDomainName);
        ORBIT_TRACK_PARAM(DomainGuid);
        ORBIT_TRACK_PARAM(DsaGuid);
        ORBIT_TRACK_PARAM(DnsHostName);

        auto win32_impl_result = g_api_table.DsDeregisterDnsHostRecordsA(ServerName, DnsDomainName, DomainGuid, DsaGuid, DnsHostName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcOpenW(win32::Windows::Win32::Foundation::PWSTR DnsName, uint32_t OptionFlags, win32::Windows::Win32::Foundation::PWSTR SiteName, ::win32::guid* DomainGuid, win32::Windows::Win32::Foundation::PWSTR DnsForestName, uint32_t DcFlags, win32::Windows::Win32::Networking::ActiveDirectory::GetDcContextHandle* RetGetDcContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DnsName);
        ORBIT_TRACK_PARAM(OptionFlags);
        ORBIT_TRACK_PARAM(SiteName);
        ORBIT_TRACK_PARAM(DomainGuid);
        ORBIT_TRACK_PARAM(DnsForestName);
        ORBIT_TRACK_PARAM(DcFlags);
        ORBIT_TRACK_PARAM(RetGetDcContext);

        auto win32_impl_result = g_api_table.DsGetDcOpenW(DnsName, OptionFlags, SiteName, DomainGuid, DnsForestName, DcFlags, RetGetDcContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcOpenA(win32::Windows::Win32::Foundation::PSTR DnsName, uint32_t OptionFlags, win32::Windows::Win32::Foundation::PSTR SiteName, ::win32::guid* DomainGuid, win32::Windows::Win32::Foundation::PSTR DnsForestName, uint32_t DcFlags, win32::Windows::Win32::Networking::ActiveDirectory::GetDcContextHandle* RetGetDcContext) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(DnsName);
        ORBIT_TRACK_PARAM(OptionFlags);
        ORBIT_TRACK_PARAM(SiteName);
        ORBIT_TRACK_PARAM(DomainGuid);
        ORBIT_TRACK_PARAM(DnsForestName);
        ORBIT_TRACK_PARAM(DcFlags);
        ORBIT_TRACK_PARAM(RetGetDcContext);

        auto win32_impl_result = g_api_table.DsGetDcOpenA(DnsName, OptionFlags, SiteName, DomainGuid, DnsForestName, DcFlags, RetGetDcContext);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcNextW(win32::Windows::Win32::Foundation::HANDLE GetDcContextHandle, uint32_t* SockAddressCount, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS** SockAddresses, win32::Windows::Win32::Foundation::PWSTR* DnsHostName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GetDcContextHandle);
        ORBIT_TRACK_PARAM(SockAddressCount);
        ORBIT_TRACK_PARAM(SockAddresses);
        ORBIT_TRACK_PARAM(DnsHostName);

        auto win32_impl_result = g_api_table.DsGetDcNextW(GetDcContextHandle, SockAddressCount, SockAddresses, DnsHostName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    uint32_t __stdcall ORBIT_IMPL_DsGetDcNextA(win32::Windows::Win32::Foundation::HANDLE GetDcContextHandle, uint32_t* SockAddressCount, win32::Windows::Win32::Networking::WinSock::SOCKET_ADDRESS** SockAddresses, win32::Windows::Win32::Foundation::PSTR* DnsHostName) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GetDcContextHandle);
        ORBIT_TRACK_PARAM(SockAddressCount);
        ORBIT_TRACK_PARAM(SockAddresses);
        ORBIT_TRACK_PARAM(DnsHostName);

        auto win32_impl_result = g_api_table.DsGetDcNextA(GetDcContextHandle, SockAddressCount, SockAddresses, DnsHostName);
        ORBIT_TRACK_RET(win32_impl_result);
        return win32_impl_result;
    }

    void __stdcall ORBIT_IMPL_DsGetDcCloseW(win32::Windows::Win32::Networking::ActiveDirectory::GetDcContextHandle GetDcContextHandle) noexcept
    {
        ORBIT_SCOPE_FUNCTION();
        ORBIT_TRACK_PARAM(GetDcContextHandle);

        g_api_table.DsGetDcCloseW(GetDcContextHandle);
        
    }

}

#pragma endregion abi_methods

}
#endif
